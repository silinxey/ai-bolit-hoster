<?php
///////////////////////////////////////////////////////////////////////////
// Version: 31.3.4
// Copyright 2018-2021 CloudLinux Software Inc.
///////////////////////////////////////////////////////////////////////////

ini_set('memory_limit', '1G');
ini_set('xdebug.max_nesting_level', 500);

define('SHORT_PHP_TAG', strtolower(ini_get('short_open_tag')) == 'on' || strtolower(ini_get('short_open_tag')) == 1);

//////////////////////////////////////////////////////////////////////////
$vars = new Variables();
$vars->users = new UserList();
HyperScan::init();
Progress::init();
Progress::setPrintFunc('stdOut');

$lang = 'RU';
$snum = '';
$BOOL_RESULT = false;

if (isCli()) {
    if (strpos($argv[$argc - 1], '--eng') !== false) {
        $lang = 'EN';
    }
} else {
    define('NEED_REPORT', true);
}

Translate::setLang($lang);

// put 1 for expert mode, 0 for basic check and 2 for paranoid mode
// установите 1 для режима "Обычное сканирование", 0 для быстрой проверки и 2 для параноидальной проверки (диагностика при лечении сайтов)
define('AI_EXPERT_MODE', 2);

define('AI_HOSTER', 0);

define('CLOUD_ASSIST_LIMIT', 5000);

$defaults = [
    'path'                  => __DIR__,
    'scan_all_files'        => (AI_EXPERT_MODE == 2), // full scan (rather than just a .js, .php, .html, .htaccess)
    'scan_delay'            => 0, // delay in file scanning to reduce system load
    'max_size_to_scan'      => '650K',
    'max_size_to_cloudscan' => '650K',
    'no_rw_dir'             => 0,
    'skip_ext'              => '',
    'report_mask'           => JSONReport::REPORT_MASK_FULL,
    'use_template_in_path'  => false,
];

define('DEBUG_MODE', 0);
define('DEBUG_PERFORMANCE', 0);

define('AIBOLIT_START_TIME', time());
define('START_TIME', microtime(true));

define('DIR_SEPARATOR', '/');

define('AIBOLIT_MAX_NUMBER', 200);

define('MIN_FILE_SIZE_FOR_CHECK', 12); //12b - The minimum possible file size for the initial checking
define('MAX_FILE_SIZE_FOR_CHECK', 268435456); //256Mb - The maximum possible file size for the initial checking


define('DOUBLECHECK_FILE', 'AI-BOLIT-DOUBLECHECK.php');

if ((isset($_SERVER['OS']) && stripos('Win', $_SERVER['OS']) !== false)) {
    define('DIR_SEPARATOR', '\\');
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

if (!(function_exists("file_put_contents") && is_callable("file_put_contents"))) {
    echo "#####################################################\n";
    echo "file_put_contents() is disabled. Cannot proceed.\n";
    echo "#####################################################\n";
    exit;
}

define('AI_VERSION', '31.3.4');

////////////////////////////////////////////////////////////////////////////
$g_SpecificExt = false;

$g_UpdatedJsonLog      = 0;

error_reporting(E_ALL ^ E_NOTICE ^ E_WARNING);
srand(time());

set_time_limit(0);
ini_set('max_execution_time', '900000');
ini_set('realpath_cache_size', '16M');
ini_set('realpath_cache_ttl', '1200');
ini_set('pcre.backtrack_limit', '1000000');
ini_set('pcre.recursion_limit', '200000');
ini_set('pcre.jit', '1');

$filter = new FileFilter();

$finder = new Finder($filter);

if (!AI_HOSTER) {
    $finder->setCollectDoorways(true);
    $finder->setCollectBigFiles(true);
}

$finder->setCollectSymlinks(true);

if (!function_exists('stripos')) {
    function stripos($par_Str, $par_Entry, $Offset = 0) {
        return strpos(strtolower($par_Str), strtolower($par_Entry), $Offset);
    }
}

/**
 * Determine php script is called from the command line interface
 * @return bool
 */
function isCli() {
    return PHP_SAPI == 'cli';
}

/**
 * Print to console
 * @param mixed $text
 * @param bool $add_lb Add line break
 * @return void
 */
function stdOut($text, $add_lb = true) {
    if (!isCli()) {
        return;
    }

    if (is_bool($text)) {
        $text = $text ? 'true' : 'false';
    } else if (is_null($text)) {
        $text = 'null';
    }
    if (!is_scalar($text)) {
        $text = print_r($text, true);
    }

    if (defined('BOOL_RESULT') && (!BOOL_RESULT) && (!JSON_STDOUT)) {
        @fwrite(STDOUT, $text . ($add_lb ? "\n" : ''));
    }
}

if (isCli()) {

    $cli_options = [
        'y'     =>  'deobfuscate',
        'c:'    => 'avdb:',
        'm:'    => 'memory:',
        's:'    => 'size:',
        'a'     => 'all',
        'd:'    => 'delay:',
        'l:'    => 'list:',
        'r:'    => 'report:',
        'f'     => 'fast',
        'j:'    => 'file:',
        'p:'    => 'path:',
        'q'     => 'quite',
        'x:'    => 'mode:',
        'k:'    => 'skip:',
        'o:'    => 'json_report:',
        't:'    => 'php_report:',
        'z:'    => 'progress:',
        'g:'    => 'handler:',
        'b'     => 'smart',
        'u:'    => 'username:',
        'h'     => 'help',
        'v'     => 'version',
    ];

    $cli_longopts = [
        'cmd:',
        'noprefix:',
        'addprefix:',
        'scan:',
        'one-pass',
        'with-2check',
        'no-html',
        'json-stdout',
        'listing:',
        'encode-b64-fn',
        'cloud-assist:',
        'cloudscan-size:',
        'with-suspicious',
        'rapid-account-scan:',
        'rapid-account-scan-type:',
        'extended-report',
        'factory-config:',
        'shared-mem-progress:',
        'create-shared-mem',
        'max-size-scan-bytes:',
        'input-fn-b64-encoded',
        'use-heuristics',
        'use-heuristics-suspicious',
        'use-heuristics-ignore',
        'resident',
        'scan-archive:',
        'archive-max-size:',
        'max-num-files-in-archive:',
        'detached:',
        'log:',
        'log-level:',
        'use-template-in-path',
        'ignore-list:',
        'ignore-filenames:',
        'only-filepaths:',
        'skip-files-older:',
        'skip-root-owner',
        'skip-system-owner',
        'follow-symlink',
        'ignore-quarantine',
        'quiet',
        'use-filters',
        'csv_report:',
        'no-users',
        'stat',
        'skip-imunify360-storage',
        'rapid-scan-rescan-frequency:',
        'do-not-skip-die',
        'hs:',
    ];


    $cli_longopts = array_merge($cli_longopts, array_values($cli_options));

    $reports = [];

    $options = getopt(implode('', array_keys($cli_options)), $cli_longopts);

    if (isset($options['v']) || isset($options['version'])) {
        echo "\n";
        echo "Version: " . AI_VERSION . "\n";
        echo "Copyright 2018-2021 CloudLinux Software Inc.\n";
        echo "\n";
        exit;
    }
    elseif (isset($options['h']) || isset($options['help'])) {
        $memory_limit = ini_get('memory_limit');
        echo <<<HELP
Revisium AI-Bolit - an Intelligent Malware File Scanner for Websites.

Usage: php {$_SERVER['PHP_SELF']} [OPTIONS] [PATH]
Current default path is: {$defaults['path']}

  Scan target:
    -j, --file=FILE                       Full path to single file to check.
    -p, --path=PATH                       Directory path to scan, by default the file directory is used.
                                          Current path: {$defaults['path']}.
        --use-template-in-path            Use template in path(-p, --path). For example: /home*/*/public_html.
        --listing=FILE                    Scan files from the listing. E.g. --listing=/tmp/myfilelist.txt.
                                          Use --listing=stdin to get listing from stdin stream.
        --input-fn-b64-encoded            Base64 encoded input filenames in --file(-j) or --listing.

  Report formats:
    -r, --report=PATH                     Full path to create html-file with a list of found malware.
                                          By default, if --no-html is not specified, this report is created in the scan folder or in the folder next to the aibolit.
    -o, --json_report=FILE                Full path to create json-file with a list of found malware.
        --csv_report=FILE                 Full path to create csv-file with a list of found malware.
    -t  --php_report=FILE                 Full path to create file with a list of found malware in PHP serialized array format.
    -l, --list=FILE                       Full path to create plain text file with a list of found malware.

        --json-stdout                     Print a report to a console instead of a file(you must use --json_report=. together).
        --no-html                         Disable HTML report.
        --extended-report                 To expand the report.
        --encode-b64-fn                   Encode file names in a report with base64(Only for JSON, PHP and CSV report).
        --stat                            Add stat() data to files in report.
        --no-users                        Disable users list in report(not use in resident mode).
        --noprefix=PREFIX                 Remove the given file path prefix in the report for each file.
        --addprefix=PREFIX                Add the given file path prefix in the report for each file.

  Tracking the work of aibolit:
    -z, --progress=FILE                   Runtime progress of scanning, saved to the file, full path required.
        --shared-mem-progress=<ID>        Runtime progress of scanning, saved to the shared memory <ID>.
        --create-shared-mem               Need to create shared memory segment <ID> for --shared-mem-progress.
        --log=FILE                        Write logs to "FILE".
        --log-level=LEVEL                 Log level(ERROR, DEBUG, INFO, ALL). Default: INFO.

  Filters:
        --ignore-list=FILE                This file will be contain the list of ignored files when scanning.
                                          The files are base64-encoded and occupy one line for one file.
        --ignore-filenames=<templates>    Skip files with the same name by template. Example: *.php,*abc.abc,config.*.
        --only-filepaths=<templates>      Take only the paths matching this pattern. Example: /check/*.php,*.abc.
        --skip-files-older=UNIXTIME       If set then we ignore the files created or modified earlier than the specified date.
        --skip-root-owner                 If set, we skip root's owner files.
        --skip-system-owner               If set, we skip system's owner files.
        --skip-imunify360-storage         If set, we skip /var/imunify360/cleanup_storage.
        --do-not-skip-die                 If set, we don't skip files with die() as first command.
        --follow-symlink                  If set then we follow symlink(for file, if this is a directory, then we go into it anyway).
        --ignore-quarantine               If set, we ignore the files in the folder ".imunify.quarantined" if root is owner of it.
    -s, --size=SIZE                       Scan files are smaller than SIZE with signatures. 0 - All files. Current value: {$defaults['max_size_to_scan']}.
        --max-size-scan-bytes=SIZE        Scan first <bytes> for large(can set by --size) files with signatures.
    -x, --mode=INT                        Set scan mode. 0 - for basic, 1 - for expert and 2 for paranoic.
    -f, --fast                            Scan only specific extensions(they are predefined in the code).
    -a, --all                             Scan all files (by default scan. js,. php,. html,. htaccess).
    -k, --skip=jpg,...                    Skip specific extensions. E.g. --skip=jpg,gif,png,xls,pdf.
        --scan=php,...                    Scan only specific extensions. E.g. --scan=php,htaccess,js.
        --use-filters                     Use Imunify360 filters.
        --smart                           Enable smart mode (skip cache files and optimize scanning).

  Process limitation:
    -m, --memory=SIZE                     Maximum amount of memory a script may consume. Current value: $memory_limit.
                                          Can take shorthand byte values (1M, 1G...).
    -d, --delay=INT                       Delay in milliseconds when scanning files to reduce load on the file system (Default: 1).
    -u, --username=<username>             Run scanner with specific user id and group id, e.g. --username=www-data.
    -q, --quite                           Do not output information about the current scan job to a console.

  Scan options:
    -y, --deobfuscate                     Try to deobfuscate files when scanning.
        --with-suspicious                 Detect suspicious files. Disabled by default.
        --scan-archive                    Scan zip files (Works with Resident mode) 
        --archive-max-size=<size>         Scan zip files are smaller than SIZE in megabyte(s) (Works with Resident mode and with --zip option) default 3MB 
        --max-num-files-in-archive=<num>  Scan zip total files are smaller than QUANTITY (Works with Resident mode and with --zip option) default 0 

  Functional Cloud Assisted:
        --cloud-assist=TOKEN              Enable cloud assisted scanning. Disabled by default. 
                                          You can use environment variable CLOUD_ASSIST(exception resident mode), but --cloud-assist has higher priority if both are used.
        --cloudscan-size                  Scan files are smaller than SIZE with cloud assisted scan. 0 - All files. Current value: {$defaults['max_size_to_cloudscan']}.

  Functional Rapid Account Scan(used only with Cloud Assisted):
        --rapid-account-scan=<dir>        Enable rapid account scan. Use <dir> for base db dir. Need to set only root permissions(700).
        --rapid-account-scan-type=<type>  Type rapid account scan. <type> = NONE|ALL|SUSPICIOUS, def:SUSPICIOUS.
        --rapid-scan-rescan-frequency=<n> Rescan RX_GOOD files strategy <n> = 1 = ALL|2 = 1/2|3 = 1/3...

  Scan Modes:
        --resident                        Aibolit work in resident fashion. This requires SystemD to be configured. Uses Imunify360 only.
        --detached=<scan_id>              A mode in which the aiblit can be launched in detached mode and wait for a signal to complete the work. Uses Imunify360 only.

  External Malware DB:
    -c, --avdb                            Connecting an external base with signatures.

  Work with ELF files:
        --use-heuristics                  Enable heuristic algorithms and mark found files as malicious.
        --use-heuristics-suspicious       Enable heuristic algorithms and mark found files as suspicious.
        --use-heuristics-ignore           Enable heuristic algorithms and skip found files.

  Other:
        --hs=<FILEPATH>                   Enable prescan with Hyperscan, full path to hyperscan db required. (Required alt-php-hyperscan package)
        --one-pass                        Do not calculate remaining time(use only with simple mode and detached mode).
        --with-2check                     Create or use AI-BOLIT-DOUBLECHECK.php file.
    -g, --handler=FILE                    External php handler for different events, full path to php file required.
        --cmd="command [args...]"         Run command after scanning.
        --factory-config=<FILEPATH>       For internal use.

    -v, --version                         Display version.
    -h, --help                            Display this help and exit.

        
HELP;
    exit;
    }

    $l_FastCli = false;

    if ((isset($options['memory']) && !empty($options['memory']) && ($memory = $options['memory'])) || (isset($options['m']) && !empty($options['m']) && ($memory = $options['m']))) {
        $memory = AibolitHelpers::getBytes($memory);
        if ($memory > 0) {
            $defaults['memory_limit'] = $memory;
            ini_set('memory_limit', $memory);
        }
    }

    if ((isset($options['username']) && !empty($options['username']) && ($username = $options['username']) !== false) || (isset($options['u']) && !empty($options['u']) && ($username = $options['u']) !== false)) {

        if (!empty($username) && ($info = posix_getpwnam($username)) !== false) {
            posix_setgid($info['gid']);
            posix_setuid($info['uid']);
            $defaults['userid']  = $info['uid'];
            $defaults['groupid'] = $info['gid'];
        } else {
            echo ('Invalid username');
            exit(-1);
        }
    }

    if (isset($options['no-users'])) {
        $vars->users = null;
    }


    $avdb = '';
    if ((isset($options['avdb']) && !empty($options['avdb']) && ($avdb = $options['avdb'])) || (isset($options['c']) && !empty($options['c']) && ($avdb = $options['c']))) {
        if (file_exists($avdb)) {
            $defaults['avdb'] = $avdb;
        }
    }

    if ((isset($options['file']) && !empty($options['file']) && ($file = $options['file']) !== false) || (isset($options['j']) && !empty($options['j']) && ($file = $options['j']) !== false)) {
        define('SCAN_FILE', $file);
    }


    if (isset($options['deobfuscate']) || isset($options['y'])) {
        define('AI_DEOBFUSCATE', true);
    }

    if (isset($options['do-not-skip-die'])) {
        define('SKIP_DIE', false);
    } else {
        define('SKIP_DIE', true);
    }

    if ((isset($options['list']) && !empty($options['list']) && ($file = $options['list']) !== false) || (isset($options['l']) && !empty($options['l']) && ($file = $options['l']) !== false)) {
        $reports[PlainReport::class] = $file;
    }

    if(isset($options['with-2check'])) {
        $reports[DoublecheckReport::class] = DOUBLECHECK_FILE;
    }

    if ((isset($options['listing']) && !empty($options['listing']) && ($listing = $options['listing']) !== false)) {

        if (file_exists($listing) && is_file($listing) && is_readable($listing)) {
            define('LISTING_FILE', $listing);
        }

        if ($listing === 'stdin') {
            define('LISTING_FILE', $listing);
        }
    }

    if ((isset($options['ignore-list']) && !empty($options['ignore-list']) && ($ignore_list_file = $options['ignore-list']) !== false)) {
        if (file_exists($ignore_list_file) && is_file($ignore_list_file) && is_readable($ignore_list_file)) {
            $filter->setIgnoreListFile($ignore_list_file);
        }
    }

    if ((isset($options['ignore-filenames']) && !empty($options['ignore-filenames']) && ($ignore_filenames = $options['ignore-filenames']) !== false)) {
        $filter->setIgnoreFilenames($ignore_filenames);
    }


    if ((isset($options['only-filepaths']) && !empty($options['only-filepaths']) && ($only_filepathes = $options['only-filepaths']) !== false)) {
        $filter->setOnlyFilepaths($only_filepathes);
    }


    if ((isset($options['skip-files-older']) && !empty($options['skip-files-older']) && ($skip_files_older = $options['skip-files-older']) !== false)) {
        $filter->setSkipFilesOlder($skip_files_older);
    }

    if (isset($options['skip-imunify360-storage'])) {
        $filter->setSkipImunifyStorage();
    }

    if (isset($options['skip-root-owner'])) {
        $filter->setSkipRootOwner();
    }

    if (isset($options['skip-system-owner'])) {
        $max_min_uid = getMaxMinUid();
        $filter->setUidRange($max_min_uid);
        $filter->setSkipSystemOwner(true);
        unset($max_min_uid);
    }

    if (isset($options['follow-symlink'])) {
        $filter->setFollowSymlink();
    }

    if (isset($options['ignore-quarantine'])) {
        $filter->setIgnoreQuarantine();
    }

    if (isset($options['use-filters'])) {
        $filter->setImunifyFilters();
    }

    if ((isset($options['json_report']) && !empty($options['json_report']) && ($file = $options['json_report']) !== false) || (isset($options['o']) && !empty($options['o']) && ($file = $options['o']) !== false)) {
        $reports[JSONReport::class] = $file;

        if (!function_exists('json_encode')) {
            die('json_encode function is not available. Enable json extension in php.ini');
        }
    }

    if (isset($options['csv_report']) && !empty($options['csv_report']) && ($file = $options['csv_report']) !== false)  {
        $reports[CSVReport::class] = $file;
    }

    if ((isset($options['php_report']) && !empty($options['php_report']) && ($file = $options['php_report']) !== false) || (isset($options['t']) && !empty($options['t']) && ($file = $options['t']) !== false)) {
        $reports[PHPReport::class] = $file;
    }

    $env_log = getenv('AIBOLIT_RESIDENT_LOG');
    $env_log_level = getenv('AIBOLIT_RESIDENT_LOG_LEVEL');

    if ((isset($options['log']) && !empty($options['log']) && ($log_file = $options['log']) !== false) || ($env_log !== false && ($log_file = $env_log) !== false)) {
        define('LOG_FILE', $log_file);
    } else {
        define('LOG_FILE', null);
    }

    if ((isset($options['log-level']) && !empty($options['log-level']) && ($log_level = $options['log-level']) !== false) || ($env_log_level !== false && ($log_level = $env_log_level) !== false)) {
        define('LOG_LEVEL', $log_level);
    }

    if (defined('LOG_FILE') && !defined('LOG_LEVEL')) {
        define('LOG_LEVEL', 'INFO');
    }

    if ((isset($options['handler']) && !empty($options['handler']) && ($file = $options['handler']) !== false) || (isset($options['g']) && !empty($options['g']) && ($file = $options['g']) !== false)) {
        if (file_exists($file)) {
            define('AIBOLIT_EXTERNAL_HANDLER', $file);
        }
    }

    if ((isset($options['progress']) && !empty($options['progress']) && ($file = $options['progress']) !== false) || (isset($options['z']) && !empty($options['z']) && ($file = $options['z']) !== false)) {
        Progress::setProgressLog($file);
    }

    if (isset($options['create-shared-mem'])) {
        Progress::setCreateSharedMem(true);
    }

    if (isset($options['shared-mem-progress']) && !empty($options['shared-mem-progress']) && ($sh_mem = $options['shared-mem-progress']) !== false) {
        if (!Progress::setSharedMem($sh_mem)) {
            die('Error with shared-memory.');
        }
    }

    if ((isset($options['size']) && ($size = $options['size']) !== false) || (isset($options['s']) && ($size = $options['s']) !== false)) {
        $size                         = AibolitHelpers::getBytes($size);
        $defaults['max_size_to_scan'] = $size > 0 ? $size : 0;
    }

    if (isset($options['cloudscan-size']) && !empty($options['cloudscan-size']) && ($cloudscan_size = $options['cloudscan-size']) !== false) {
        $cloudscan_size                         = AibolitHelpers::getBytes($cloudscan_size);
        $defaults['max_size_to_cloudscan'] = $cloudscan_size > 0 ? $cloudscan_size : 0;
    }

    if (isset($options['max-size-scan-bytes']) && !empty($options['max-size-scan-bytes'])) {
        define('MAX_SIZE_SCAN_BYTES', AibolitHelpers::getBytes($options['max-size-scan-bytes']));
    } else {
        define('MAX_SIZE_SCAN_BYTES', 0);
    }

    if ((isset($options['file']) && !empty($options['file']) && ($file = $options['file']) !== false) || ((isset($options['j']) && !empty($options['j']) && ($file = $options['j']) !== false) && (isset($options['q'])))) {
        $BOOL_RESULT = true;
    }

    if (isset($options['json-stdout'])) {
        define('JSON_STDOUT', true);
    } else {
        define('JSON_STDOUT', false);
    }

    if (isset($options['b']) || isset($options['smart'])) {
        define('SMART_SCAN', 1);
    }

    if (isset($options['f']) || isset($options['fast'])) {
        $l_FastCli = true;
    }

    if (isset($options['q']) || isset($options['quite']) || isset($options['quiet'])) {
        $BOOL_RESULT = true;
    }

    if (isset($options['x'])) {
        define('AI_EXPERT', $options['x']);
    } else if (isset($options['mode'])) {
        define('AI_EXPERT', $options['mode']);
    } else {
        define('AI_EXPERT', AI_EXPERT_MODE);
    }

    if (AI_EXPERT < 2) {
        $g_SpecificExt              = true;
        $defaults['scan_all_files'] = false;
    } else {
        $defaults['scan_all_files'] = true;
    }

    define('BOOL_RESULT', $BOOL_RESULT);

    if ((isset($options['delay']) && !empty($options['delay']) && ($delay = $options['delay']) !== false) || (isset($options['d']) && !empty($options['d']) && ($delay = $options['d']) !== false)) {
        $delay = (int) $delay;
        if (!($delay < 0)) {
            $defaults['scan_delay'] = $delay;
        }
    }

    if ((isset($options['skip']) && !empty($options['skip']) && ($ext_list = $options['skip']) !== false) || (isset($options['k']) && !empty($options['k']) && ($ext_list = $options['k']) !== false)) {
        $defaults['skip_ext'] = $ext_list;
    }

    if (isset($options['scan'])) {
        $ext_list = strtolower(trim($options['scan'], " ,\t\n\r\0\x0B"));
        if ($ext_list != '') {
            $l_FastCli        = true;
            $filter->setSensitiveExt($ext_list);
            $g_SensitiveFiles = $filter->getSensitiveExt();
            $g_SpecificExt = true;
        }
    }

    $ca_env = getenv('CLOUD_ASSIST');
    if (!isset($options['resident']) && !isset($options['cloud-assist']) && $ca_env !== false) {
        $options['cloud-assist'] = $ca_env;
    }

    if (isset($options['cloud-assist'])) {
        define('CLOUD_ASSIST_TOKEN', $options['cloud-assist']);
    }

    if (isset($options['rapid-account-scan'])) {
        define('RAPID_ACCOUNT_SCAN', $options['rapid-account-scan']);
    }

    if (defined('RAPID_ACCOUNT_SCAN')) {
        if (isset($options['rapid-account-scan-type'])) {
            define('RAPID_ACCOUNT_SCAN_TYPE', $options['rapid-account-scan-type']);
        }
        else {
            define('RAPID_ACCOUNT_SCAN_TYPE', 'SUSPICIOUS');
        }
    }

    if (!(defined('RAPID_ACCOUNT_SCAN') && RAPID_ACCOUNT_SCAN_TYPE === 'SUSPICIOUS')) {
        $options['rapid-scan-rescan-frequency'] = false;
    }

    if (isset($options['with-suspicious'])) {
        define('AI_EXTRA_WARN', true);
    }

    if (isset($options['extended-report'])) {
        define('EXTENDED_REPORT', true);
    }

    if (isset($options['all'])||isset($options['a'])) {
        $defaults['scan_all_files'] = true;
        $g_SpecificExt              = false;
    }
    
    if (isset($options['hs'])) {
        define('HS', $options['hs']);
    }

    if (!defined('SMART_SCAN')) {
        define('SMART_SCAN', 0);
    }

    if (!defined('AI_DEOBFUSCATE')) {
        define('AI_DEOBFUSCATE', false);
    }

    if (!defined('AI_EXTRA_WARN')) {
        define('AI_EXTRA_WARN', false);
    }


    $l_SpecifiedPath = false;
    if ((isset($options['path']) && !empty($options['path']) && ($path = $options['path']) !== false)
        || (isset($options['p']) && !empty($options['p']) && ($path = $options['p']) !== false)
    ) {
        $defaults['path'] = realpath($path) ?: $path;
        $l_SpecifiedPath  = true;
    }

    $defaults['use_template_in_path'] = isset($options['use-template-in-path']);

    if (isset($options['noprefix']) && !empty($options['noprefix']) && ($g_NoPrefix = $options['noprefix']) !== false) {
    } else {
        $g_NoPrefix = '';
    }

    if (isset($options['addprefix']) && !empty($options['addprefix']) && ($g_AddPrefix = $options['addprefix']) !== false) {
    } else {
        $g_AddPrefix = '';
    }

    Progress::setPrefixes([Progress::PREFIX_ADD => $g_AddPrefix, Progress::PREFIX_NO => $g_NoPrefix]);

    if (isset($options['use-heuristics-ignore'])) {
        define('USE_HEURISTICS_IGNORE', true);
    }
    
    if (isset($options['use-heuristics'])) {
        define('USE_HEURISTICS', true);
    }

    if (isset($options['use-heuristics-suspicious'])) {
        define('USE_HEURISTICS_SUSPICIOUS', true);
    }

    if (defined('USE_HEURISTICS') && defined('USE_HEURISTICS_SUSPICIOUS')) {
        die('You can not use --use-heuristic and --use-heuristic-suspicious the same time.');
    }

    $l_SuffixReport = str_replace('/var/www', '', $defaults['path']);
    $l_SuffixReport = str_replace('/home', '', $l_SuffixReport);
    $l_SuffixReport = preg_replace('~[/\\\.\s]~', '_', $l_SuffixReport);
    $l_SuffixReport .= "-" . rand(1, 999999);

    if ((isset($options['report']) && ($report = $options['report']) !== false) || (isset($options['r']) && ($report = $options['r']) !== false)) {
        $report = str_replace('@PATH@', $l_SuffixReport, $report);
        $report = str_replace('@RND@', rand(1, 999999), $report);
        $report = str_replace('@DATE@', date('d-m-Y-h-i'), $report);
        define('REPORT', $report);
        define('NEED_REPORT', true);
    }

    if (isset($options['no-html'])) {
        if (defined('REPORT')) {
            die('You can not use --report(-r) and --no-html the same time.');
        }
        define('REPORT', 'no@email.com');
    }

    defined('ENCODE_FILENAMES_WITH_BASE64') || define('ENCODE_FILENAMES_WITH_BASE64', isset($options['encode-b64-fn']));

    defined('INPUT_FILENAMES_BASE64_ENCODED') || define('INPUT_FILENAMES_BASE64_ENCODED', isset($options['input-fn-b64-encoded']));

    defined('REPORT') || define('REPORT', 'AI-BOLIT-REPORT-' . $l_SuffixReport . '-' . date('d-m-Y_H-i') . '.html');

    $last_arg = max(1, sizeof($_SERVER['argv']) - 1);
    if (isset($_SERVER['argv'][$last_arg])) {
        $path = $_SERVER['argv'][$last_arg];
        if (substr($path, 0, 1) != '-'
            && (substr($_SERVER['argv'][$last_arg - 1], 0, 1) != '-'
                || array_key_exists(substr($_SERVER['argv'][$last_arg - 1], -1), $cli_options)
            )
        ) {
            $defaults['path'] = $path;
        }
    }

    define('ONE_PASS', isset($options['one-pass']));

    // BEGIN of configuring the factory
    $factoryConfig = [
        RapidAccountScan::class             => RapidAccountScan::class,
        RapidScanStorage::class             => RapidScanStorage::class,
        CloudAssistedStorage::class         => CloudAssistedStorage::class,
        DbFolderSpecification::class        => DbFolderSpecification::class,
        CriticalFileSpecification::class    => CriticalFileSpecification::class,
        CloudAssistedRequest::class         => CloudAssistedRequest::class,
        CSVReport::class                    => CSVReport::class,
        JSONReport::class                   => JSONReport::class,
        PHPReport::class                    => PHPReport::class,
        PlainReport::class                  => PlainReport::class,
        DoublecheckReport::class            => DoublecheckReport::class,
        HTMLReport::class                   => HTMLReport::class,
        DetachedMode::class                 => DetachedMode::class,
        ResidentMode::class                 => ResidentMode::class,
        Logger::class                       => Logger::class,
    ];

    if (isset($options['factory-config'])) {
        $optionalFactoryConfig = require($options['factory-config']);
        $factoryConfig = array_merge($factoryConfig, $optionalFactoryConfig);
    }

    Factory::configure($factoryConfig);
    // END of configuring the factory

} else {
    define('AI_EXPERT', AI_EXPERT_MODE);
    define('ONE_PASS', true);
}

if (ONE_PASS && defined('CLOUD_ASSIST_TOKEN')) {
    die('Both parameters(one-pass and cloud-assist) not supported');
}

if (defined('RAPID_ACCOUNT_SCAN') && !defined('CLOUD_ASSIST_TOKEN')) {
    die('CloudScan should be enabled');
}

if (Progress::isCreateSharedMem() && Progress::getSharedMem() === null) {
    die('shared-mem-progress should be enabled and ID specified.');
}

if (defined('RAPID_ACCOUNT_SCAN')) {
    if (!file_exists(RAPID_ACCOUNT_SCAN) && !mkdir(RAPID_ACCOUNT_SCAN, 0700, true) && !is_dir(RAPID_ACCOUNT_SCAN)) {
        throw new Exception(sprintf('Directory "%s" was not created', RAPID_ACCOUNT_SCAN));
    }
    $specification = Factory::instance()->create(DbFolderSpecification::class);
    if (!$specification->satisfiedBy(RAPID_ACCOUNT_SCAN)) {
        @unlink(RAPID_ACCOUNT_SCAN);
        die('Rapid DB folder error! Please check the folder.');
    }
}

if (defined('RAPID_ACCOUNT_SCAN_TYPE') && !in_array(RAPID_ACCOUNT_SCAN_TYPE, array('NONE', 'ALL', 'SUSPICIOUS'))) {
    die('Wrong Rapid account scan type');
}

if (defined('RAPID_ACCOUNT_SCAN') && !extension_loaded('leveldb')) {
    die('LevelDB extension needed for Rapid DB');
}

$vars->blackFiles = [];

if (DEBUG_MODE || DEBUG_PERFORMANCE) {
    $debug = new DebugMode(DEBUG_MODE, DEBUG_PERFORMANCE);
} else {
    $debug = null;
}

$vars->signs = new LoadSignaturesForScan(isset($defaults['avdb']) ? $defaults['avdb'] : null, AI_EXPERT, DEBUG_PERFORMANCE);

if (defined('HS')) {
    HyperScan::initExtDb(HS, $vars->signs->getDBMetaInfoVersion());
}

if ($vars->signs->getResult() == $vars->signs::SIGN_EXTERNAL) {
    stdOut('Loaded external signatures from ' . $defaults['avdb']);
} else if ($vars->signs->getResult() == $vars->signs::SIGN_IMPORT) {
    stdOut('Loaded ' . __DIR__ . '/ai-bolit.sig signatures from ai-bolit.sig');
} else if (is_object($debug) && $vars->signs->getResult() == $vars->signs::SIGN_ERROR) {
    $debug->QCR_Debug('Import ai-bolit.sig ' . $vars->signs->getLastError());
}

if (is_object($debug)) {
    $debug->QCR_Debug();
}

if (isset($defaults['userid'])) {
    stdOut('Running from ' . $defaults['userid'] . ':' . $defaults['groupid']);
}

if (AI_EXTRA_WARN) {
    $sign_count = $vars->signs->getDBCountWithSuspicious();
} else {
    $sign_count = $vars->signs->getDBCount();
}

stdOut('Malware signatures: ' . $sign_count);

if ($g_SpecificExt) {
    stdOut("Scan specific extensions: " . implode(',', $g_SensitiveFiles));
}

if (DEBUG_PERFORMANCE) {
    stdOut("Debug Performance Scan");
}

// Init
define('MAX_PREVIEW_LEN', 120);

if (defined('AIBOLIT_EXTERNAL_HANDLER')) {
    include_once(AIBOLIT_EXTERNAL_HANDLER);
    stdOut("\nLoaded external handler: " . AIBOLIT_EXTERNAL_HANDLER . "\n");
    if (function_exists("aibolit_onStart")) {
        aibolit_onStart();
    }
}

// Perform full scan when running from command line

if ($l_FastCli) {
    $defaults['scan_all_files'] = false;
}

define('SCAN_ALL_FILES', (bool) $defaults['scan_all_files']);
define('SCAN_DELAY', (int) $defaults['scan_delay']);
define('MAX_SIZE_TO_SCAN', AibolitHelpers::getBytes($defaults['max_size_to_scan']));
define('MAX_SIZE_TO_CLOUDSCAN', AibolitHelpers::getBytes($defaults['max_size_to_cloudscan']));

if (SCAN_ALL_FILES) {
    $filter->setScanAll();
}

if (isset($defaults['memory_limit']) && $defaults['memory_limit'] && ($defaults['memory_limit'] = AibolitHelpers::getBytes($defaults['memory_limit'])) > 0) {
    ini_set('memory_limit', $defaults['memory_limit']);
    stdOut("Changed memory limit to " . $defaults['memory_limit']);
}

if (realpath($defaults['path']) === false) {
    define('ROOT_PATH', $defaults['path']);
} else {
    define('ROOT_PATH', realpath($defaults['path']));
}

if (!ROOT_PATH) {
    if (isCli()) {
        die(stdOut("Directory '{$defaults['path']}' not found!"));
    }
} elseif (!$defaults['use_template_in_path'] && !is_readable(ROOT_PATH) && isCli()) {
    die2(stdOut("Cannot read directory '" . ROOT_PATH . "'!"));
}

define('CURRENT_DIR', getcwd());
if(!$defaults['use_template_in_path']) {
    chdir(ROOT_PATH);
}

if (isCli() && REPORT !== '' && REPORT !== 'no@email.com') {
    $report      = str_replace('\\', '/', REPORT);
    $abs         = strpos($report, '/') === 0 ? DIR_SEPARATOR : '';
    $report      = array_values(array_filter(explode('/', $report)));
    $report_file = array_pop($report);
    $report_path = realpath($abs . implode(DIR_SEPARATOR, $report));

    define('REPORT_FILE', $report_file);
    define('REPORT_PATH', $report_path);

    if (REPORT_FILE && REPORT_PATH && is_file(REPORT_PATH . DIR_SEPARATOR . REPORT_FILE)) {
        @unlink(REPORT_PATH . DIR_SEPARATOR . REPORT_FILE);
    }

    if (!isset($options['no-html']) && defined('REPORT_FILE')) {
        $reports[HTMLReport::class] = REPORT_PATH . DIR_SEPARATOR . REPORT_FILE;
    }
}

if (defined('REPORT_PATH')) {
    $l_ReportDirName = REPORT_PATH;
}

$vars->options = $options;

$path                       = $defaults['path'];
$report_mask                = $defaults['report_mask'];
$extended_report            = defined('EXTENDED_REPORT') && EXTENDED_REPORT;
$rapid_account_scan_report  = defined('RAPID_ACCOUNT_SCAN');

$max_size_to_scan = AibolitHelpers::getBytes(MAX_SIZE_TO_SCAN);
$max_size_to_scan = $max_size_to_scan > 0 ? $max_size_to_scan : AibolitHelpers::getBytes('1m');
$max_size_to_scan = AibolitHelpers::bytes2Human($max_size_to_scan);

$max_size = (MAX_SIZE_SCAN_BYTES > 0) ? MAX_FILE_SIZE_FOR_CHECK : (defined('CLOUD_ASSIST_TOKEN') ? max(MAX_SIZE_TO_SCAN, MAX_SIZE_TO_CLOUDSCAN) : MAX_SIZE_TO_SCAN);

if ($max_size == 0) {
    $max_size = AibolitHelpers::getBytes('1m');
}

$filter->setSizeRange(MIN_FILE_SIZE_FOR_CHECK, $max_size);
$finder->setCollectBigElfs(defined('USE_HEURISTICS') || defined('USE_HEURISTICS_SUSPICIOUS'));

$use_doublecheck = isset($options['with-2check']) && file_exists(DOUBLECHECK_FILE);

$reportFactory = function ($reports) use ($vars, $path, $report_mask, $extended_report,
    $rapid_account_scan_report, $g_AddPrefix, $g_NoPrefix, $snum, $max_size_to_scan, $g_SpecificExt, $use_doublecheck) {
    foreach($reports as $report_class => $file) {
        yield Factory::instance()->create($report_class, [$vars->signs->_Mnemo, $path,
            $vars->signs->getDBLocation(), $vars->signs->getDBMetaInfoVersion(),
            $report_mask, $extended_report, $rapid_account_scan_report, AI_VERSION, AI_HOSTER,
            AI_EXTRA_WARN, AI_EXPERT, SMART_SCAN, ROOT_PATH, SCAN_ALL_FILES, $g_SpecificExt,
            DOUBLECHECK_FILE, $use_doublecheck, START_TIME, $snum, $max_size_to_scan, $g_AddPrefix, $g_NoPrefix,
            isset($reports[CSVReport::class]), $file, JSON_STDOUT, isset($vars->options['stat'])]);
    }
};

define('QUEUE_FILENAME', (isset($l_ReportDirName) && $l_ReportDirName != '' ? $l_ReportDirName . '/' : '') . 'AI-BOLIT-QUEUE-' . md5($defaults['path']) . '-' . rand(1000, 9999) . '.txt');

////////////////////////////////////////////////////////////////////////////

if (!isCli()) {
    header('Content-type: text/html; charset=utf-8');
}

if (!$defaults['use_template_in_path'] && !is_readable(ROOT_PATH)) {
    echo Translate::getStr('warning.folder_read_permission');
    exit;
}

if (isCli()) {
    if (defined('REPORT_PATH') && REPORT_PATH) {
        if (!is_writable(REPORT_PATH)) {
            die2("\nCannot write report. Report dir " . REPORT_PATH . " is not writable.");
        }

        else if (!REPORT_FILE) {
            die2("\nCannot write report. Report filename is empty.");
        }

        else if (($file = REPORT_PATH . DIR_SEPARATOR . REPORT_FILE) && is_file($file) && !is_writable($file)) {
            die2("\nCannot write report. Report file '$file' exists but is not writable.");
        }
    }
}


// detect version CMS
$g_CmsListDetector = null;
if (!$defaults['use_template_in_path']) {
    $g_KnownCMS        = [];
    $g_CmsListDetector = new CmsVersionDetector(ROOT_PATH);
    $l_CmsDetectedNum  = $g_CmsListDetector->getCmsNumber();
    for ($tt = 0; ($tt < $l_CmsDetectedNum) && !AI_HOSTER; $tt++) {
        $vars->CMS[] = $g_CmsListDetector->getCmsName($tt) . ' v' . AibolitHelpers::makeSafeFn($g_CmsListDetector->getCmsVersion($tt), $g_AddPrefix, $g_NoPrefix);
    }
}

$g_AiBolitAbsolutePath = __DIR__;

$l_IgnoreFilename    = $g_AiBolitAbsolutePath . '/.aignore';
$l_DirIgnoreFilename = $g_AiBolitAbsolutePath . '/.adirignore';
$l_UrlIgnoreFilename = $g_AiBolitAbsolutePath . '/.aurlignore';

$filter->setIgnoreListPatterns($l_DirIgnoreFilename);

if (SMART_SCAN) {
    $filter->setSmartScan();
}

if (is_object($debug)) {
    $debug->QCR_Debug();
}


$defaults['skip_ext'] = strtolower(trim($defaults['skip_ext']));
if ($defaults['skip_ext'] != '') {
    $filter->setIgnoreExt($defaults['skip_ext']);

    if (is_object($debug)) {
        $debug->QCR_Debug('Skip files with extensions: ' . implode(',', $filter->getIgnoreExt()));
    }

    stdOut('Skip extensions: ' . implode(',', $filter->getIgnoreExt()));
}

$use_listingfile = defined('LISTING_FILE');

$listing = false;

if ($use_doublecheck) {
    $listing = DOUBLECHECK_FILE;
} elseif ($use_listingfile) {
    $listing = LISTING_FILE;
}
$base64_encoded = INPUT_FILENAMES_BASE64_ENCODED;

if (isset($options['resident'])) {
    $filter->setIgnorePathPattern(false);
    $filter->setDefaultExcludes(false);
    $filter->setScanAll();
}

if (is_callable([$filter, 'generateCheckers'])) {
    $filter->generateCheckers();
}

if (isset($options['detached'])) {
    $detached = Factory::instance()->create(DetachedMode::class, [$finder, $debug, $options['detached'], $vars, START_TIME, $reportFactory]);
    if (defined('LISTING_FILE')) {
        $detached->scanListing(LISTING_FILE, INPUT_FILENAMES_BASE64_ENCODED);
    }
    else {
        $detached->scanDirectories(ROOT_PATH);
    }
    exit(0);
}

if (isset($options['resident'])) {
    if ((isset($options['archive-max-size']) && ($size = $options['archive-max-size']) !== false)) {
        $size                        = AibolitHelpers::getBytes($size);
        $options['archive-max-size'] = $size > 0 ? $size : (1024 * 1024);
    } else {
        $options['archive-max-size'] = 1024 * 1024;
    }

    if ((isset($options['max-num-files-in-archive']) && ($files = $options['max-num-files-in-archive']) !== false)) {
        $options['max-num-files-in-archive'] = $files > 0 ? $files : 100;
    } else {
        $options['max-num-files-in-archive'] = 100;
    }

    $logger = null;
    $levels = explode(',', LOG_LEVEL);
    $logger = new Logger(LOG_FILE, $levels);
    Factory::instance()->create(ResidentMode::class, [$finder, $debug, $reportFactory, $vars->signs, $logger, $options]);
    exit(0);
}

try {
    $scan = new Scanner($finder, $vars, $debug);
    if (defined('SCAN_FILE')) {
        // scan single file
        $filepath = INPUT_FILENAMES_BASE64_ENCODED ? FilepathEscaper::decodeFilepathByBase64(SCAN_FILE) : SCAN_FILE;
        stdOut("Start scanning file '" . $filepath . "'.");
        if (file_exists($filepath) && is_file($filepath) && is_readable($filepath)) {
            $vars->foundTotalFiles = 1;
            $s_file[] = $filepath;
        } else {
            stdOut("Error:" . $filepath . " either is not a file or readable");
        }
    } elseif ($listing) {
        //scan listing
        if ($listing === 'stdin') {
            $lines = explode("\n", getStdin());
        } else {
            $lines = new ScanList($listing, INPUT_FILENAMES_BASE64_ENCODED, $use_doublecheck);
        }
        $vars->foundTotalFiles = is_array($lines) ? count($lines) : $lines->count();
        $s_file = $lines;
        stdOut("Start scanning the list from '" . $listing . "'.\n");
    } else {
        //scan by path
        $base64_encoded = true;
        file_exists(QUEUE_FILENAME) && unlink(QUEUE_FILENAME);
        $scan->QCR_ScanDirectories(ROOT_PATH);
        stdOut("\nFound $vars->foundTotalFiles files in $vars->foundTotalDirs directories.");
        stdOut("Start scanning '" . ROOT_PATH . "'.\n");

        if (is_object($debug)) {
            $debug->QCR_Debug();
        }
        stdOut(str_repeat(' ', 160), false);
        $s_file = new ScanList(QUEUE_FILENAME, $base64_encoded, $use_doublecheck);
    }
    if (isset($s_file)) {
        $scan->QCR_GoScan($s_file, null, $filter);
        unset($s_file);
        @unlink(QUEUE_FILENAME);
    }

    $vars->foundTotalDirs  = $vars->totalFolder;

} catch (Exception $e) {
    if (is_object($debug)) {
        $debug->QCR_Debug($e->getMessage());
    }
}
if (is_object($debug)) {
    $debug->QCR_Debug();
}

$vars->doorway  = $finder->getDoorways();
$vars->symLinks = $finder->getSymlinks();
$vars->bigFiles = $finder->getBigFiles();

if (count($vars->bigFiles) > 0) {
    $scan->prepareBigFilesToCriticalList($vars->bigFiles, $vars);
}
$bigElfs = $finder->getBigElfFiles();

if (count($bigElfs) > 0) {
    $scan->prepareBigElfFilesToCriticalSusList($bigElfs, $vars);
}


list($snum, $i) = $scan->whitelisting();


////////////////////////////////////////////////////////////////////////////
if (BOOL_RESULT && (!defined('NEED_REPORT'))) {
    if ((count($vars->criticalPHP) > 0) || (count($vars->criticalJS) > 0) || (count($vars->phishing) > 0)) {
        exit(2);
    }
    exit(0);
}
////////////////////////////////////////////////////////////////////////////

$time_taken = AibolitHelpers::seconds2Human(microtime(true) - START_TIME);


stdOut("\nBuilding report [ mode = " . AI_EXPERT . " ]\n");

//stdOut("\nLoaded signatures: " . count($g_FlexDBShe) . " / " . count($g_JSVirSig) . "\n");

////////////////////////////////////////////////////////////////////////////

$scan_time = round(microtime(true) - START_TIME, 1);

foreach($reportFactory($reports) as $report) {
    $report->generateReport($vars, $scan_time);
    $res = $report->write();
    if ($res !== '') {
        stdOut($res);
    }
}
stdOut("\n");

stdOut("Building list of vulnerable scripts " . count($vars->vulnerable));

stdOut("Building list of shells " . count($vars->criticalPHP));

stdOut("Building list of js " . count($vars->criticalJS));

stdOut("Building list of unread files " . count($vars->notRead));

if (!AI_HOSTER) {
    stdOut("Building list of phishing pages " . count($vars->phishing));

    stdOut("Building list of symlinks " . count($vars->symLinks));

}

if (AI_EXTRA_WARN) {
    stdOut("Building list of suspicious files " . count($vars->warningPHP));
}
////////////////////////////////////
if (!AI_HOSTER) {
    stdOut("Building list of adware " . count($vars->adwareList));

    stdOut("Building list of bigfiles " . count($vars->bigFiles));

    stdOut("Building list of doorways " . count($vars->doorway));
}

if (!defined('REPORT') || REPORT === '') {
    die2('Report not written.');
}


stdOut("Scanning complete! Time taken: " . AibolitHelpers::seconds2Human($scan_time));

if (DEBUG_PERFORMANCE) {
    $debug->printPerfomanceStats();
    die();
}

stdOut("\n\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
stdOut("Attention! DO NOT LEAVE either ai-bolit.php or AI-BOLIT-REPORT-<xxxx>-<yy>.html \nfile on server. COPY it locally then REMOVE from server. ");
stdOut("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");

if (isset($options['cmd'])) {
    stdOut("Run \"{$options['cmd']}\" ");
    system($options['cmd']);
}

if (is_object($debug)) {
    $debug->QCR_Debug();
}

# exit with code

$l_EC1 = count($vars->criticalPHP);
$l_EC2 = count($vars->criticalJS) + count($vars->phishing) + count($vars->warningPHP);
$code  = 0;

if ($l_EC1 > 0) {
    $code = 2;
} else {
    if ($l_EC2 > 0) {
        $code = 1;
    }
}

$stat = array(
    'php_malware'   => count($vars->criticalPHP),
    'cloudhash'     => count($vars->blackFiles),
    'js_malware'    => count($vars->criticalJS),
    'phishing'      => count($vars->phishing)
);

if (function_exists('aibolit_onComplete')) {
    aibolit_onComplete($code, $stat);
}

stdOut('Exit code ' . $code);
exit($code);

############################################# END ###############################################

function getStdin()
{
    $stdin  = '';
    $f      = @fopen('php://stdin', 'r');
    while($line = fgets($f))
    {
        $stdin .= $line;
    }
    fclose($f);
    return $stdin;
}

function die2($str) {
    if (function_exists('aibolit_onFatalError')) {
        aibolit_onFatalError($str);
    }
    die($str);
}


function getMaxMinUid($path = '/etc/login.defs')
{
    $uid_min = 1000;
    $uid_max = 60000;
    if (!file_exists($path)) {
        $release = new OsReleaseInfo();
        $ver = $release->getOsVersion();
        if ($release->isIdLikeCentos() && $ver && (strpos($ver, '6') === 0)) {
            $uid_min = 500;
            $uid_max = 60000;
        }
        unset($ver);
        return [$uid_min, $uid_max];
    }

    $file = file($path, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
    foreach ($file as $line) {
        $line = trim($line);
        if (strpos($line, 'UID_MIN') === 0) {
            list($key, $value) = preg_split('~\s+~', trim($line), 2, PREG_SPLIT_NO_EMPTY);
            $uid_min = (int)trim($value);
        }
        if (strpos($line, 'UID_MAX') === 0) {
            list($key, $value) = preg_split('~\s+~', trim($line), 2, PREG_SPLIT_NO_EMPTY);
            $uid_max = (int)trim($value);
        }
    }
    return [$uid_min, $uid_max];
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// The following instructions should be written the same pattern,
/// because they are replaced by file content while building a release.
/// See the release_aibolit_ru.sh file for details.


class AibolitHelpers
{
    /**
     * Format bytes to human readable
     *
     * @param int $bytes
     *
     * @return string
     */
    public static function bytes2Human($bytes)
    {
        if ($bytes < 1024) {
            return $bytes . ' b';
        } elseif (($kb = $bytes / 1024) < 1024) {
            return number_format($kb, 2) . ' Kb';
        } elseif (($mb = $kb / 1024) < 1024) {
            return number_format($mb, 2) . ' Mb';
        } elseif (($gb = $mb / 1024) < 1024) {
            return number_format($gb, 2) . ' Gb';
        } else {
            return number_format($gb / 1024, 2) . 'Tb';
        }
    }

    /**
     * Seconds to human readable
     * @param int $seconds
     * @return string
     */
    public static function seconds2Human($seconds)
    {
        $r        = '';
        $_seconds = floor($seconds);
        $ms       = $seconds - $_seconds;
        $seconds  = $_seconds;
        if ($hours = floor($seconds / 3600)) {
            $r .= $hours . ' h ';
            $seconds %= 3600;
        }

        if ($minutes = floor($seconds / 60)) {
            $r .= $minutes . ' m ';
            $seconds %= 60;
        }

        if ($minutes < 3) {
            $r .= ' ' . (string)($seconds + ($ms > 0 ? round($ms) : 0)) . ' s';
        }

        return $r;
    }

    /**
     * Get bytes from shorthand byte values (1M, 1G...)
     * @param int|string $val
     * @return int
     */
    public static function getBytes($val)
    {
        $val  = trim($val);
        $last = strtolower($val[strlen($val) - 1]);
        $val  = preg_replace('~\D~', '', $val);
        switch ($last) {
            case 't':
                $val *= 1024;
            case 'g':
                $val *= 1024;
            case 'm':
                $val *= 1024;
            case 'k':
                $val *= 1024;
        }
        return intval($val);
    }

    /**
     * Convert dangerous chars to html entities
     *
     * @param        $par_Str
     * @param string $addPrefix
     * @param string $noPrefix
     * @param bool   $replace_path
     *
     * @return string
     */
    public static function makeSafeFn($par_Str, $addPrefix = '', $noPrefix = '', $replace_path = false)
    {
        if ($replace_path) {
            $lines = explode("\n", $par_Str);
            array_walk($lines, static function(&$n) use ($addPrefix, $noPrefix) {
                $n = $addPrefix . str_replace($noPrefix, '', $n);
            });

            $par_Str = implode("\n", $lines);
        }

        return htmlspecialchars($par_Str, ENT_SUBSTITUTE | ENT_QUOTES);
    }


    public static function myCheckSum($str)
    {
        return hash('crc32b', $str);
    }

}


class Variables
{
    public $structure = [];
    public $totalFolder = 0;
    public $totalFiles = 0;
    public $adwareList = [];
    public $criticalPHP = [];
    public $phishing = [];
    public $CMS = [];
    public $criticalJS = [];
    public $criticalJSFragment = [];
    public $blackFiles = [];
    public $notRead = [];
    public $bigFiles = [];
    public $criticalPHPSig = [];
    public $criticalPHPFragment = [];
    public $phishingSigFragment = [];
    public $phishingFragment = [];
    public $criticalJSSig = [];
    public $adwareListFragment = [];
    public $warningPHPSig = [];
    public $warningPHPFragment = [];
    public $warningPHP = [];
    public $vulnerable = [];

    public $counter = 0;
    public $foundTotalDirs = 0;
    public $foundTotalFiles = 0;
    public $files_and_ignored = 0;
    public $doorway = [];
    public $symLinks = [];
    public $skippedFolders = [];

    public $hashtable = null;
    public $fileinfo = null;
    public $rescanCount = 0;
    public $rescanRxGood = 0;

    public $options = [];

    public $signs = [];
    public $users = null;
}



class Logger
{
    /**
     * $log_file - path and log file name
     * @var string
     */
    protected $log_file;
    /**
     * $file - file
     * @var string
     */
    protected $file;
    /**
     * dateFormat
     * @var string
     */
    protected $dateFormat = 'd-M-Y H:i:s';

    /**
     * @var array
     */
    const LEVELS  = ['ERROR' => 1, 'DEBUG' => 2,  'INFO' => 4, 'ALL' => 7];

    /**
     * @var int
     */
    private $level;

    /**
     * Class constructor
     *
     * @param string       $log_file - path and filename of log
     * @param string|array $level    - Level of logging
     *
     * @throws Exception
     */
    public function __construct($log_file = null, $level = 'INFO')
    {
        if (!$log_file) {
            return;
        }
        if (is_array($level)) {
            foreach ($level as $v) {
                if (!isset(self::LEVELS[$v])) {
                    $v = 'INFO';
                }
                $this->level |= self::LEVELS[$v];
            }
        } else {
            if (isset(self::LEVELS[$level])) {
                $this->level = self::LEVELS[$level];
            } else {
                $this->level = self::LEVELS['INFO'];
            }
        }

        $this->log_file = $log_file;
        //Create log file if it doesn't exist.
        if (!file_exists($log_file)) {
            fopen($log_file, 'w') or exit("Can't create $log_file!");
        }
        //Check permissions of file.
        if (!is_writable($log_file)) {
            //throw exception if not writable
            throw new Exception('ERROR: Unable to write to file!', 1);
        }
    }

    /**
     * Info method (write info message)
     * @param string $message
     * @return void
     */
    public function info($message)
    {
        if ($this->level & self::LEVELS['INFO']) {
            $this->writeLog($message, 'INFO');
        }

    }
    /**
     * Debug method (write debug message)
     * @param string $message
     * @return void
     */
    public function debug($message)
    {
        if ($this->level & self::LEVELS['DEBUG']) {
            $this->writeLog($message, 'DEBUG');
        }
    }
    /**
     * Error method (write error message)
     * @param string $message
     * @return void
     */
    public function error($message)
    {
        if ($this->level & self::LEVELS['ERROR']) {
            $this->writeLog($message, 'ERROR');
        }
    }

    /**
     * Write to log file
     * @param string $message
     * @param string $level
     * @return void
     */
    public function writeLog($message, $level)
    {
        if (!$this->log_file) {
            return;
        }
        // open log file
        if (!is_resource($this->file)) {
            $this->openLog();
        }
        //Grab time - based on timezone in php.ini
        $time = date($this->dateFormat);
        // Write time & message to end of file
        fwrite($this->file, "[$time] : [$level] - $message" . PHP_EOL);
    }
    /**
     * Open log file
     * @return void
     */
    private function openLog()
    {
        $openFile = $this->log_file;
        // 'a' option = place pointer at end of file
        $this->file = fopen($openFile, 'a') or exit("Can't open $openFile!");
    }
    /**
     * Class destructor
     */
    public function __destruct()
    {
        if ($this->file) {
            fclose($this->file);
        }
    }
}


class LoadSignaturesForScan
{
    private $sig_db             = [];
    private $sig_db_meta_info   = [];
    private $sig_db_location    = 'internal';

    private $mode;
    private $debug;

    public $_DBShe;
    public $X_DBShe;
    public $_FlexDBShe;
    public $X_FlexDBShe;
    public $XX_FlexDBShe;
    public $_ExceptFlex;
    public $_AdwareSig;
    public $_PhishingSig;
    public $_JSVirSig;
    public $X_JSVirSig;
    public $_SusDB;
    public $_SusDBPrio;
    public $_DeMapper;
    public $_Mnemo;

    public $whiteUrls;
    public $blackUrls;
    public $ownUrl = null;

    private $count;
    private $count_susp;
    private $result = 0;
    private $last_error = '';

    const SIGN_INTERNAL = 1;
    const SIGN_EXTERNAL = 2;
    const SIGN_IMPORT = 3;
    const SIGN_ERROR = 9;

    public function __construct($avdb_file, $mode, $debug)
    {
        $this->mode = $mode;
        $this->debug = $debug;
        $this->sig_db_meta_info = [
            'build-date'    => 'n/a',
            'version'       => 'n/a',
            'release-type'  => 'n/a',
        ];

        if ($avdb_file && file_exists($avdb_file)) {
            $avdb = explode("\n", gzinflate(base64_decode(str_rot13(strrev(trim(file_get_contents($avdb_file)))))));
            $this->sig_db_location  = 'external';

            $this->_DBShe       = explode("\n", base64_decode($avdb[0]));
            $this->X_DBShe      = explode("\n", base64_decode($avdb[1]));
            $this->_FlexDBShe   = explode("\n", base64_decode($avdb[2]));
            $this->X_FlexDBShe  = explode("\n", base64_decode($avdb[3]));
            $this->XX_FlexDBShe = explode("\n", base64_decode($avdb[4]));
            $this->_ExceptFlex  = explode("\n", base64_decode($avdb[5]));
            $this->_AdwareSig   = explode("\n", base64_decode($avdb[6]));
            $this->_PhishingSig = explode("\n", base64_decode($avdb[7]));
            $this->_JSVirSig    = explode("\n", base64_decode($avdb[8]));
            $this->X_JSVirSig   = explode("\n", base64_decode($avdb[9]));
            $this->_SusDB       = explode("\n", base64_decode($avdb[10]));
            $this->_SusDBPrio   = explode("\n", base64_decode($avdb[11]));
            $this->_DeMapper    = array_combine(explode("\n", base64_decode($avdb[12])), explode("\n", base64_decode($avdb[13])));
            $this->_Mnemo       = @array_flip(@array_combine(explode("\n", base64_decode($avdb[14])), explode("\n", base64_decode($avdb[15])))); //TODO: you need to remove array_flip and swap the keys and values in array_combine. Write a test: put the signature base in the tests folder and run a scan with this base on the VIRII folder - the result should not change, since the base is the same

            // get meta information
            $avdb_meta_info = json_decode(base64_decode($avdb[16]), true);

            $this->sig_db_meta_info['build-date'] = $avdb_meta_info ? $avdb_meta_info['build-date'] : 'n/a';
            $this->sig_db_meta_info['version'] = $avdb_meta_info ? $avdb_meta_info['version'] : 'n/a';
            $this->sig_db_meta_info['release-type'] = $avdb_meta_info ? $avdb_meta_info['release-type'] : 'n/a';

            if (count($this->_DBShe) <= 1) {
                $this->_DBShe = [];
            }

            if (count($this->X_DBShe) <= 1) {
                $this->X_DBShe = [];
            }

            if (count($this->_FlexDBShe) <= 1) {
                $this->_FlexDBShe = [];
            }

            if (count($this->X_FlexDBShe) <= 1) {
                $this->X_FlexDBShe = [];
            }

            if (count($this->XX_FlexDBShe) <= 1) {
                $this->XX_FlexDBShe = [];
            }

            if (count($this->_ExceptFlex) <= 1) {
                $this->_ExceptFlex = [];
            }

            if (count($this->_AdwareSig) <= 1) {
                $this->_AdwareSig = [];
            }

            if (count($this->_PhishingSig) <= 1) {
                $this->_PhishingSig = [];
            }

            if (count($this->X_JSVirSig) <= 1) {
                $this->X_JSVirSig = [];
            }

            if (count($this->_JSVirSig) <= 1) {
                $this->_JSVirSig = [];
            }

            if (count($this->_SusDB) <= 1) {
                $this->_SusDB = [];
            }

            if (count($this->_SusDBPrio) <= 1) {
                $this->_SusDBPrio = [];
            }

            $this->result = self::SIGN_EXTERNAL;
        } else {
            InternalSignatures::init();
            $this->_DBShe       = InternalSignatures::$_DBShe;
            $this->X_DBShe      = InternalSignatures::$X_DBShe;
            $this->_FlexDBShe   = InternalSignatures::$_FlexDBShe;
            $this->X_FlexDBShe  = InternalSignatures::$X_FlexDBShe;
            $this->XX_FlexDBShe = InternalSignatures::$XX_FlexDBShe;
            $this->_ExceptFlex  = InternalSignatures::$_ExceptFlex;
            $this->_AdwareSig   = InternalSignatures::$_AdwareSig;
            $this->_PhishingSig = InternalSignatures::$_PhishingSig;
            $this->_JSVirSig    = InternalSignatures::$_JSVirSig;
            $this->X_JSVirSig   = InternalSignatures::$X_JSVirSig;
            $this->_SusDB       = InternalSignatures::$_SusDB;
            $this->_SusDBPrio   = InternalSignatures::$_SusDBPrio;
            $this->_DeMapper    = InternalSignatures::$_DeMapper;
            $this->_Mnemo       = InternalSignatures::$_Mnemo;

            // get meta information
            $avdb_meta_info = InternalSignatures::$db_meta_info;

            $this->sig_db_meta_info['build-date'] = $avdb_meta_info ? $avdb_meta_info['build-date'] : 'n/a';
            $this->sig_db_meta_info['version'] = $avdb_meta_info ? $avdb_meta_info['version'] : 'n/a';
            $this->sig_db_meta_info['release-type'] = $avdb_meta_info ? $avdb_meta_info['release-type'] : 'n/a';

            $this->result = self::SIGN_INTERNAL;
        }

        // use only basic signature subset
        if ($mode < 2) {
            $this->X_FlexDBShe  = [];
            $this->XX_FlexDBShe = [];
            $this->X_JSVirSig   = [];
        }

        // Load custom signatures
        if (file_exists(__DIR__ . '/ai-bolit.sig')) {
            try {
                $s_file = new SplFileObject(__DIR__ . '/ai-bolit.sig');
                $s_file->setFlags(SplFileObject::READ_AHEAD | SplFileObject::SKIP_EMPTY | SplFileObject::DROP_NEW_LINE);
                foreach ($s_file as $line) {
                    $this->_FlexDBShe[] = preg_replace('#\G(?:[^~\\\\]+|\\\\.)*+\K~#', '\\~', $line); // escaping ~
                }

                $this->result = self::SIGN_IMPORT;
                $s_file = null; // file handler is closed
            }
            catch (Exception $e) {
                $this->result = self::SIGN_ERROR;
                $this->last_error = $e->getMessage();
            }
        }

        $this->count = count($this->_JSVirSig) + count($this->X_JSVirSig) + count($this->_DBShe) + count($this->X_DBShe) + count($this->_FlexDBShe) + count($this->X_FlexDBShe) + count($this->XX_FlexDBShe);
        $this->count_susp = $this->count + count($this->_SusDB);

        if (!$debug) {
            $this->OptimizeSignatures($debug);
        }

        $this->_DBShe  = array_map('strtolower', $this->_DBShe);
        $this->X_DBShe = array_map('strtolower', $this->X_DBShe);
    }

    private function OptimizeSignatures($debug)
    {
        ($this->mode == 2) && ($this->_FlexDBShe = array_merge($this->_FlexDBShe, $this->X_FlexDBShe, $this->XX_FlexDBShe));
        ($this->mode == 1) && ($this->_FlexDBShe = array_merge($this->_FlexDBShe, $this->X_FlexDBShe));
        $this->X_FlexDBShe = $this->XX_FlexDBShe = [];

        ($this->mode == 2) && ($this->_JSVirSig = array_merge($this->_JSVirSig, $this->X_JSVirSig));
        $this->X_JSVirSig = [];

        $count = count($this->_FlexDBShe);

        for ($i = 0; $i < $count; $i++) {
            if ($this->_FlexDBShe[$i] == '[a-zA-Z0-9_]+?\(\s*[a-zA-Z0-9_]+?=\s*\)')
                $this->_FlexDBShe[$i] = '\((?<=[a-zA-Z0-9_].)\s*[a-zA-Z0-9_]++=\s*\)';
            if ($this->_FlexDBShe[$i] == '([^\?\s])\({0,1}\.[\+\*]\){0,1}\2[a-z]*e')
                $this->_FlexDBShe[$i] = '(?J)\.[+*](?<=(?<d>[^\?\s])\(..|(?<d>[^\?\s])..)\)?\g{d}[a-z]*e';
            if ($this->_FlexDBShe[$i] == '$[a-zA-Z0-9_]\{\d+\}\s*\.$[a-zA-Z0-9_]\{\d+\}\s*\.$[a-zA-Z0-9_]\{\d+\}\s*\.')
                $this->_FlexDBShe[$i] = '\$[a-zA-Z0-9_]\{\d+\}\s*\.\$[a-zA-Z0-9_]\{\d+\}\s*\.\$[a-zA-Z0-9_]\{\d+\}\s*\.';

            $this->_FlexDBShe[$i] = str_replace('http://.+?/.+?\.php\?a', 'http://[^?\s]++(?<=\.php)\?a', $this->_FlexDBShe[$i]);
            $this->_FlexDBShe[$i] = preg_replace('~\[a-zA-Z0-9_\]\+\K\?~', '+', $this->_FlexDBShe[$i]);
            $this->_FlexDBShe[$i] = preg_replace('~^\\\\[d]\+&@~', '&@(?<=\d..)', $this->_FlexDBShe[$i]);
            $this->_FlexDBShe[$i] = str_replace('\s*[\'"]{0,1}.+?[\'"]{0,1}\s*', '.+?', $this->_FlexDBShe[$i]);
            $this->_FlexDBShe[$i] = str_replace('[\'"]{0,1}.+?[\'"]{0,1}', '.+?', $this->_FlexDBShe[$i]);

            $this->_FlexDBShe[$i] = preg_replace('~^\[\'"\]\{0,1\}\.?|^@\*|^\\\\s\*~', '', $this->_FlexDBShe[$i]);
        }

        self::optSig($this->_FlexDBShe,     $debug, 'AibolitHelpers::myCheckSum');
        self::optSig($this->_JSVirSig,      $debug, 'AibolitHelpers::myCheckSum');
        self::optSig($this->_AdwareSig,     $debug, 'AibolitHelpers::myCheckSum');
        self::optSig($this->_PhishingSig,   $debug, 'AibolitHelpers::myCheckSum');
        self::optSig($this->_SusDB,         $debug, 'AibolitHelpers::myCheckSum');
        //optSig($g_SusDBPrio);
        //optSig($g_ExceptFlex);

        // convert exception rules
        $cnt = count($this->_ExceptFlex);
        for ($i = 0; $i < $cnt; $i++) {
            $this->_ExceptFlex[$i] = trim(Normalization::normalize($this->_ExceptFlex[$i]));
            if ($this->_ExceptFlex[$i] == '')
                unset($this->_ExceptFlex[$i]);
        }

        $this->_ExceptFlex = array_values($this->_ExceptFlex);
    }

    public static function optSig(&$sigs, $debug = false, $func_id = null)
    {
        $sigs = array_unique($sigs);

        // Add SigId
        foreach ($sigs as $k => &$s) {
            if ($func_id && is_callable($func_id)) {
                $id = $func_id($s);
            } else {
                $id = $k;
            }
            $s .= '(?<X' . $id . '>)';
        }
        unset($s);

        $fix = [
            '([^\?\s])\({0,1}\.[\+\*]\){0,1}\2[a-z]*e' => '(?J)\.[+*](?<=(?<d>[^\?\s])\(..|(?<d>[^\?\s])..)\)?\g{d}[a-z]*e',
            'http://.+?/.+?\.php\?a' => 'http://[^?\s]++(?<=\.php)\?a',
            '\s*[\'"]{0,1}.+?[\'"]{0,1}\s*' => '.+?',
            '[\'"]{0,1}.+?[\'"]{0,1}' => '.+?'
        ];

        $sigs = str_replace(array_keys($fix), array_values($fix), $sigs);

        $fix = [
            '~^\\\\[d]\+&@~' => '&@(?<=\d..)',
            '~^((\[\'"\]|\\\\s|@)(\{0,1\}\.?|[?*]))+~' => ''
        ];

        $sigs = preg_replace(array_keys($fix), array_values($fix), $sigs);

        self::optSigCheck($sigs, $debug);

        $tmp = [];
        foreach ($sigs as $i => $s) {
            if (!preg_match('~^(?>(?!\.[*+]|\\\\\d)(?:\\\\.|\[.+?\]|.))+$~', $s)) {
                unset($sigs[$i]);
                $tmp[] = $s;
            }
        }

        usort($sigs, 'strcasecmp');
        $txt = implode("\n", $sigs);

        for ($i = 24; $i >= 1; ($i > 4) ? $i -= 4 : --$i) {
            $txt = preg_replace_callback('#^((?>(?:\\\\.|\\[.+?\\]|[^(\n]|\((?:\\\\.|[^)(\n])++\))(?:[*?+]\+?|\{\d+(?:,\d*)?\}[+?]?|)){' . $i . ',})[^\n]*+(?:\\n\\1(?![{?*+]).+)+#im', 'LoadSignaturesForScan::optMergePrefixes', $txt);
        }

        $sigs = array_merge(explode("\n", $txt), $tmp);

        self::optSigCheck($sigs, $debug);
    }

    private static function optMergePrefixes($m)
    {
        $limit = 8000;

        $prefix     = $m[1];
        $prefix_len = strlen($prefix);

        $len = $prefix_len;
        $r   = [];

        $suffixes = [];
        foreach (explode("\n", $m[0]) as $line) {

            if (strlen($line) > $limit) {
                $r[] = $line;
                continue;
            }

            $s = substr($line, $prefix_len);
            $len += strlen($s);
            if ($len > $limit) {
                if (count($suffixes) == 1) {
                    $r[] = $prefix . $suffixes[0];
                } else {
                    $r[] = $prefix . '(?:' . implode('|', $suffixes) . ')';
                }
                $suffixes = [];
                $len      = $prefix_len + strlen($s);
            }
            $suffixes[] = $s;
        }

        if (!empty($suffixes)) {
            if (count($suffixes) == 1) {
                $r[] = $prefix . $suffixes[0];
            } else {
                $r[] = $prefix . '(?:' . implode('|', $suffixes) . ')';
            }
        }

        return implode("\n", $r);
    }

    private function optMergePrefixes_Old($m)
    {
        $prefix     = $m[1];
        $prefix_len = strlen($prefix);

        $suffixes = [];
        foreach (explode("\n", $m[0]) as $line) {
            $suffixes[] = substr($line, $prefix_len);
        }

        return $prefix . '(?:' . implode('|', $suffixes) . ')';
    }

    /*
     * Checking errors in pattern
     */
    private static function optSigCheck(&$sigs, $debug)
    {
        $result = true;

        foreach ($sigs as $k => $sig) {
            if (trim($sig) == "") {
                if ($debug) {
                    echo ("************>>>>> EMPTY\n     pattern: " . $sig . "\n");
                }
                unset($sigs[$k]);
                $result = false;
            }

            if (@preg_match('~' . $sig . '~smiS', '') === false) {
                $error = error_get_last();
                if ($debug) {
                    echo ("************>>>>> " . $error['message'] . "\n     pattern: " . $sig . "\n");
                }
                unset($sigs[$k]);
                $result = false;
            }
        }

        return $result;
    }

    public static function getSigId($l_Found)
    {
        foreach ($l_Found as $key => &$v) {
            if (is_string($key) && $v[1] != -1 && strlen($key) == 9) {
                return substr($key, 1);
            }
        }

        return null;
    }

    public function setOwnUrl($url)
    {
        if (isset($this->blackUrls)) {
            foreach ($this->blackUrls->getDb() as $black) {
                if (preg_match('~' . $black . '~msi', $url)) {
                    $this->ownUrl = null;
                    return;
                }
            }
        }
        $this->ownUrl = $url;
    }

    public function getOwnUrl()
    {
        return $this->ownUrl;
    }

    public function getDBLocation()
    {
        return $this->sig_db_location;
    }

    public function getDB()
    {
        return $this->sig_db;
    }

    public function getDBMetaInfo()
    {
        return $this->sig_db_meta_info;
    }

    public function getDBMetaInfoVersion()
    {
        return $this->sig_db_meta_info['version'];
    }

    public function getDBCount()
    {
        return $this->count;
    }

    public function getDBCountWithSuspicious()
    {
        return $this->count_susp;
    }

    public function getResult()
    {
        return $this->result;
    }

    public function getLastError()
    {
        return $this->last_error;
    }
}


class InternalSignatures
{
    public static $_DBShe;
    public static $X_DBShe;
    public static $_FlexDBShe;
    public static $X_FlexDBShe;
    public static $XX_FlexDBShe;
    public static $_ExceptFlex;
    public static $_AdwareSig;
    public static $_PhishingSig;
    public static $_JSVirSig;
    public static $X_JSVirSig;
    public static $_SusDB;
    public static $_SusDBPrio;
    public static $_DeMapper;
    public static $_Mnemo;
    public static $db_meta_info;

    public static function init()
    {
        //BEGIN_SIG 14/12/2021 08:24:00
self::$_DBShe = unserialize(gzinflate(/*1639502640*/base64_decode("")));
self::$X_DBShe = unserialize(gzinflate(/*1639502640*/base64_decode("bVVrb9s2FP0rrJbODhDHkinFttIUS+202dI8ELtdiyAQaImWCVGPkpQTu9h++y4fdoJin2IdHh7ee+4jJD7x458s9k9lPIy9jC5JSoV3yuIAkEEYe9/rFqWkQk2rEEFlFiGpBKtyzRkAZxR7zaqRK8q5hjBAJ4PYe5exNUo5kfLMW/A6LdBCbRoaeO9fn2Sqbn5BFqr03mul0Iqn4/FePLKQiIZ76MQGfjOfkizbaGTo7rHVnjSypI/PRkwjY0ACCPNvukAzTUMLcznQRgSBdmLN+Ha2UwiMHVHsXZK0oBmw0TlfkgVV9VcmVEssyxlyg9X+7QA7xZmqRTl8UQwd/rlOW/kKj1xouyyPwV5zoFMdxx6pFHtRHzqVcmMw+kxTg49sJDa328JgJmkoqSZ1PVGinkC9pSmkSVtHTlGbEV5LtCW5aLdMmWOdfQSvHJRUSpJTdIaooHkiaMOhYbre22jydjDwjpBn/+yIh6fmvvYlgNgb6ByFvFlDSpp13r9bCFPqgfYo9GNPUpXWdcFoF+mMfvDkiS4SkpWsSlpJRQX3POREtYEYykq5pGzZXbZVqlhdJfSZSSW7njEkMY4cHpob2toIwmBL1GUySQnnZMEhfEtCpMrQG3iKCEE2Dj06yJjULK3vdHQlcGh1ugcNFaVEvyP/eeL7/iE6O9v//GnopkaQXcYE6t9+Qv1vBtYlwiegUqW8zWj3IJld3H+9uH/oXM7nd8kX+ErOP13czDuP9tmxbeOF8J8kNkOKdd1CyKizUqrJjtO6WnaOOutVDQ7svtJlrntI/wKA2Q9zO3B59BtRp325kf0CPKa8vyEl6TdKQG0TmdYNNXRdxQEGw9eEd5eM0ySnKgFRRSttuOZg10hg75NgytrbXxPRN8e6ZlFkjvfud7TPnV/dtyh00iv7pdHQVQTbCh/yNc2OdT0GAOUlYbwnS9X0WHXMj/O6zjkFH0pDG1r/oKWE75vGxiM3PlM97ma2ra/O6unLPgx3m+EB3a3Ar+cNejR4YCftIa0zKrYW005hvQXf9Hq/6URQWmZn3oEp7PlkcnE391CvZ/ccdgP/+CDqtsq6/uGj8TLcbYgZK8+V2gcXmg0BJk6JKCaCPn0UjFaZMSd0+7AYcI5xZiCX9lVxFWA8NNDIKVyeT64upujDdzSb395fm7PdlriGOYLFb00x4pHvrl2L49kK2nZFqm/B+MScBXY7TSnLiCD/mhaPBq7z/2JVA3urLrcGxpYbVEOcqsCvDBi6d6/gn8usEG0D01vbd6P/l3ELcUKrnG0viZUZWlDgNa7ysLICIwt++Az5frn50wY3dvtUKJYWnP7hnf7zHw==")));
self::$_FlexDBShe = unserialize(gzinflate(/*1639502640*/base64_decode("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")));
self::$X_FlexDBShe = unserialize(gzinflate(/*1639502640*/base64_decode("S7QysKquBQA=")));
self::$XX_FlexDBShe = unserialize(gzinflate(/*1639502640*/base64_decode("S7QysKquBQA=")));
self::$_ExceptFlex = unserialize(gzinflate(/*1639502640*/base64_decode("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")));
self::$_AdwareSig = unserialize(gzinflate(/*1639502640*/base64_decode("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")));
self::$_PhishingSig = unserialize(gzinflate(/*1639502640*/base64_decode("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")));
self::$_JSVirSig = unserialize(gzinflate(/*1639502640*/base64_decode("")));
self::$X_JSVirSig = unserialize(gzinflate(/*1639502640*/base64_decode("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")));
self::$_SusDB = unserialize(gzinflate(/*1639502640*/base64_decode("")));
self::$_SusDBPrio = unserialize(gzinflate(/*1639502640*/base64_decode("S7QysKquBQA=")));
self::$_Mnemo = unserialize(gzinflate(/*1639502640*/base64_decode("")));
self::$_DeMapper = unserialize(base64_decode("YTo1OntzOjEwOiJ3aXphcmQucGhwIjtzOjM3OiJjbGFzcyBXZWxjb21lU3RlcCBleHRlbmRzIENXaXphcmRTdGVwIjtzOjE3OiJ1cGRhdGVfY2xpZW50LnBocCI7czozNzoieyBDVXBkYXRlQ2xpZW50OjpBZGRNZXNzYWdlMkxvZygiZXhlYyI7czoxMToiaW5jbHVkZS5waHAiO3M6NDg6IkdMT0JBTFNbIlVTRVIiXS0+SXNBdXRob3JpemVkKCkgJiYgJGFyQXV0aFJlc3VsdCI7czo5OiJzdGFydC5waHAiO3M6NjA6IkJYX1JPT1QuJy9tb2R1bGVzL21haW4vY2xhc3Nlcy9nZW5lcmFsL3VwZGF0ZV9kYl91cGRhdGVyLnBocCI7czoxMDoiaGVscGVyLnBocCI7czo1ODoiSlBsdWdpbkhlbHBlcjo6Z2V0UGx1Z2luKCJzeXN0ZW0iLCJvbmVjbGlja2NoZWNrb3V0X3ZtMyIpOyI7fQ=="));
self::$db_meta_info = unserialize(base64_decode("YTozOntzOjEwOiJidWlsZC1kYXRlIjtzOjEwOiIxNjM5NDY3OTUzIjtzOjc6InZlcnNpb24iO3M6MTM6IjIwMjExMjE0LTcwMzgiO3M6MTI6InJlbGVhc2UtdHlwZSI7czoxMDoicHJvZHVjdGlvbiI7fQ=="));

//END_SIG
    }
}

class CmsVersionDetector
{
    const CMS_BITRIX = 'Bitrix';
    const CMS_WORDPRESS = 'WordPress';
    const CMS_JOOMLA = 'Joomla';
    const CMS_DLE = 'Data Life Engine';
    const CMS_IPB = 'Invision Power Board';
    const CMS_WEBASYST = 'WebAsyst';
    const CMS_OSCOMMERCE = 'OsCommerce';
    const CMS_DRUPAL = 'Drupal';
    const CMS_MODX = 'MODX';
    const CMS_INSTANTCMS = 'Instant CMS';
    const CMS_PHPBB = 'PhpBB';
    const CMS_VBULLETIN = 'vBulletin';
    const CMS_SHOPSCRIPT = 'PHP ShopScript Premium';
    
    const CMS_VERSION_UNDEFINED = '0.0';

    private $root_path;
    private $versions;
    private $types;

    public function __construct($root_path = '.') {
        $this->root_path = $root_path;
        $this->versions  = [];
        $this->types     = [];

        $version = '';

        $dir_list   = $this->getDirList($root_path);
        $dir_list[] = $root_path;

        foreach ($dir_list as $dir) {
            if ($this->checkBitrix($dir, $version)) {
                $this->addCms(self::CMS_BITRIX, $version);
            }

            if ($this->checkWordpress($dir, $version)) {
                $this->addCms(self::CMS_WORDPRESS, $version);
            }

            if ($this->checkJoomla($dir, $version)) {
                $this->addCms(self::CMS_JOOMLA, $version);
            }

            if ($this->checkDle($dir, $version)) {
                $this->addCms(self::CMS_DLE, $version);
            }

            if ($this->checkIpb($dir, $version)) {
                $this->addCms(self::CMS_IPB, $version);
            }

            if ($this->checkWebAsyst($dir, $version)) {
                $this->addCms(self::CMS_WEBASYST, $version);
            }

            if ($this->checkOsCommerce($dir, $version)) {
                $this->addCms(self::CMS_OSCOMMERCE, $version);
            }

            if ($this->checkDrupal($dir, $version)) {
                $this->addCms(self::CMS_DRUPAL, $version);
            }

            if ($this->checkMODX($dir, $version)) {
                $this->addCms(self::CMS_MODX, $version);
            }

            if ($this->checkInstantCms($dir, $version)) {
                $this->addCms(self::CMS_INSTANTCMS, $version);
            }

            if ($this->checkPhpBb($dir, $version)) {
                $this->addCms(self::CMS_PHPBB, $version);
            }

            if ($this->checkVBulletin($dir, $version)) {
                $this->addCms(self::CMS_VBULLETIN, $version);
            }

            if ($this->checkPhpShopScript($dir, $version)) {
                $this->addCms(self::CMS_SHOPSCRIPT, $version);
            }

        }
    }

    function getDirList($target) {
        $remove      = [
            '.',
            '..'
        ];
        $directories = array_diff(scandir($target), $remove);

        $res = [];

        foreach ($directories as $value) {
            if (is_dir($target . '/' . $value)) {
                $res[] = $target . '/' . $value;
            }
        }

        return $res;
    }

    function isCms($name, $version) {
        for ($i = 0, $iMax = count($this->types); $i < $iMax; $i++) {
            if ((strpos($this->types[$i], $name) !== false) && (strpos($this->versions[$i], $version) !== false)) {
                return true;
            }
        }

        return false;
    }

    function getCmsList() {
        return $this->types;
    }

    function getCmsVersions() {
        return $this->versions;
    }

    function getCmsNumber() {
        return count($this->types);
    }

    function getCmsName($index = 0) {
        return $this->types[$index];
    }

    function getCmsVersion($index = 0) {
        return $this->versions[$index];
    }

    private function addCms($type, $version) {
        $this->types[]    = $type;
        $this->versions[] = $version;
    }

    private function checkBitrix($dir, &$version) {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/bitrix')) {
            $res = true;

            $tmp_content = @file_get_contents($this->root_path . '/bitrix/modules/main/classes/general/version.php');
            if (preg_match('|define\("SM_VERSION","(.+?)"\)|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }

        }

        return $res;
    }

    private function checkWordpress($dir, &$version) {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/wp-admin')) {
            $res = true;

            $tmp_content = @file_get_contents($dir . '/wp-includes/version.php');
            if (preg_match('|\$wp_version\s*=\s*\'(.+?)\'|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }
        }

        return $res;
    }

    private function checkJoomla($dir, &$version) {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/libraries/joomla')) {
            $res = true;

            // for 1.5.x
            $tmp_content = @file_get_contents($dir . '/libraries/joomla/version.php');
            if (preg_match('|var\s+\$RELEASE\s*=\s*\'(.+?)\'|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];

                if (preg_match('|var\s+\$DEV_LEVEL\s*=\s*\'(.+?)\'|smi', $tmp_content, $tmp_ver)) {
                    $version .= '.' . $tmp_ver[1];
                }
            }

            // for 1.7.x
            $tmp_content = @file_get_contents($dir . '/includes/version.php');
            if (preg_match('|public\s+\$RELEASE\s*=\s*\'(.+?)\'|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];

                if (preg_match('|public\s+\$DEV_LEVEL\s*=\s*\'(.+?)\'|smi', $tmp_content, $tmp_ver)) {
                    $version .= '.' . $tmp_ver[1];
                }
            }


            // for 2.5.x and 3.x
            $tmp_content = @file_get_contents($dir . '/libraries/cms/version/version.php');

            if (preg_match('|const\s+RELEASE\s*=\s*\'(.+?)\'|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];

                if (preg_match('|const\s+DEV_LEVEL\s*=\s*\'(.+?)\'|smi', $tmp_content, $tmp_ver)) {
                    $version .= '.' . $tmp_ver[1];
                }
            }

        }

        return $res;
    }

    private function checkDle($dir, &$version) {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/engine/engine.php')) {
            $res = true;

            $tmp_content = @file_get_contents($dir . '/engine/data/config.php');
            if (preg_match('|\'version_id\'\s*=>\s*"(.+?)"|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }

            $tmp_content = @file_get_contents($dir . '/install.php');
            if (preg_match('|\'version_id\'\s*=>\s*"(.+?)"|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }

        }

        return $res;
    }

    private function checkIpb($dir, &$version) {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/ips_kernel')) {
            $res = true;

            $tmp_content = @file_get_contents($dir . '/ips_kernel/class_xml.php');
            if (preg_match('|IP.Board\s+v([0-9\.]+)|si', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }

        }

        return $res;
    }

    private function checkWebAsyst($dir, &$version) {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/wbs/installer')) {
            $res = true;

            $tmp_content = @file_get_contents($dir . '/license.txt');
            if (preg_match('|v([0-9\.]+)|si', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }

        }

        return $res;
    }

    private function checkOsCommerce($dir, &$version) {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/includes/version.php')) {
            $res = true;

            $tmp_content = @file_get_contents($dir . '/includes/version.php');
            if (preg_match('|([0-9\.]+)|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }

        }

        return $res;
    }

    private function checkDrupal($dir, &$version) {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/sites/all')) {
            $res = true;

            $tmp_content = @file_get_contents($dir . '/CHANGELOG.txt');
            if (preg_match('|Drupal\s+([0-9\.]+)|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }

        }

        if (file_exists($dir . '/core/lib/Drupal.php')) {
            $res = true;

            $tmp_content = @file_get_contents($dir . '/core/lib/Drupal.php');
            if (preg_match('|VERSION\s*=\s*\'(\d+\.\d+\.\d+)\'|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }

        }

        if (file_exists($dir . 'modules/system/system.info')) {
            $res = true;

            $tmp_content = @file_get_contents($dir . 'modules/system/system.info');
            if (preg_match('|version\s*=\s*"\d+\.\d+"|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }

        }

        return $res;
    }

    private function checkMODX($dir, &$version) {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/manager/assets')) {
            $res = true;

            // no way to pick up version
        }

        return $res;
    }

    private function checkInstantCms($dir, &$version) {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/plugins/p_usertab')) {
            $res = true;

            $tmp_content = @file_get_contents($dir . '/index.php');
            if (preg_match('|InstantCMS\s+v([0-9\.]+)|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }

        }

        return $res;
    }

    private function checkPhpBb($dir, &$version) {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/includes/acp')) {
            $res = true;

            $tmp_content = @file_get_contents($dir . '/config.php');
            if (preg_match('|phpBB\s+([0-9\.x]+)|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }

        }

        return $res;
    }

    private function checkVBulletin($dir, &$version) {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        // removed dangerous code from here, see DEF-10390 for details

        return $res;
    }

    private function checkPhpShopScript($dir, &$version) {
        $version = self::CMS_VERSION_UNDEFINED;
        $res     = false;

        if (file_exists($dir . '/install/consts.php')) {
            $res = true;

            $tmp_content = @file_get_contents($dir . '/install/consts.php');
            if (preg_match('|STRING_VERSION\',\s*\'(.+?)\'|smi', $tmp_content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }

        }

        return $res;
    }
}


class CloudAssistedRequest
{
    const API_URL = 'https://api.imunify360.com/api/hashes/check'; 

    private $timeout    = 60;
    private $server_id  = '';

    public function __construct($server_id, $timeout = 60) 
    {
        $this->server_id    = $server_id;
        $this->timeout      = $timeout;
    }

    public function checkFilesByHash($list_of_hashes = [])
    {
        if (empty($list_of_hashes)) {
            return [
                [], 
                [],
                [],
                'white'             => [],
                'black'             => [],
                'verdicts_black'    => [],
            ];
        }

        $result = $this->request($list_of_hashes);

        $white          = isset($result['white'])           ? $result['white']          : [];
        $black          = isset($result['black'])           ? $result['black']          : [];
        $verdicts_black = isset($result['verdicts_black'])  ? $result['verdicts_black'] : [];

        return [
            $white,
            $black,
            $verdicts_black,
            'white'             => $white,
            'black'             => $black,
            'verdicts_black'    => $verdicts_black,
        ];
    }
    
    // /////////////////////////////////////////////////////////////////////////

    private function request($list_of_hashes)
    {
        $url = self::API_URL . '?server_id=' . urlencode($this->server_id) . '&indexed=1';

        $data = [
            'hashes' => $list_of_hashes,
        ];

        $json_hashes = json_encode($data);

        $info = [];
        $started = microtime(true);
        try {
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL            , $url);
            curl_setopt($ch, CURLOPT_CUSTOMREQUEST  , 'POST');
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER , false);
            curl_setopt($ch, CURLOPT_SSL_VERIFYHOST , false);
            curl_setopt($ch, CURLOPT_TIMEOUT        , $this->timeout);
            curl_setopt($ch, CURLOPT_CONNECTTIMEOUT , $this->timeout);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER , true);
            curl_setopt($ch, CURLOPT_HTTPHEADER     , array('Content-Type: application/json'));
            curl_setopt($ch, CURLOPT_POSTFIELDS     , $json_hashes);
            $response_data  = curl_exec($ch);
            $info           = curl_getinfo($ch);
            $errno          = curl_errno($ch);
            curl_close($ch);
            if (class_exists('PerfomanceStats')) {
                PerfomanceStats::addPerfomanceItem(PerfomanceStats::CAS_STAT, microtime(true) - $started);
            }
        }
        catch (Exception $e) {
            if (class_exists('PerfomanceStats')) {
                PerfomanceStats::addPerfomanceItem(PerfomanceStats::CAS_STAT, microtime(true) - $started);
            }
            throw new Exception($e->getMessage());
        }

        $http_code      = isset($info['http_code']) ? $info['http_code'] : 0;
        if ($http_code !== 200) {
            if ($errno == 28) {
                throw new Exception('Request timeout! Return code: ' . $http_code . ' Curl error num: ' . $errno);
            }
            throw new Exception('Invalid response from the Cloud Assisted server! Return code: ' . $http_code . ' Curl error num: ' . $errno);
        }
        $result = json_decode($response_data, true);
        if (is_null($result)) {
            throw new Exception('Invalid json format in the response!');
        }
        if (isset($result['error'])) {
            throw new Exception('API server returned error!');
        }
        if (!isset($result['result'])) {
            throw new Exception('API server returned error! Cannot find field "result".');
        }

        return $result['result'];
    }
}

/**
 * Class Report
 */
abstract class Report
{
    const MAX_ROWS = 15000;
    const AIBOLIT_MAX_NUMBER = 200;

    /**
     * Report constructor.
     * @param $mnemo
     * @param $path
     * @param $db_location
     * @param $db_meta_info_version
     * @param $report_mask
     * @param $extended_report
     * @param $rapid_account_scan
     * @param $ai_version
     * @param $ai_hoster
     * @param $ai_extra_warn
     * @param $ai_expert
     * @param $ai_smart
     * @param $root_path
     * @param $scan_all
     * @param $specific_ext
     * @param $doublecheck
     * @param $use_doublecheck
     * @param $start
     * @param $snum
     * @param $max_size
     * @param $add_prefix
     * @param $no_prefix
     * @param $small
     * @param $file
     * @param $echo
     * @param $stat
     */
    public function __construct($mnemo, $path, $db_location, $db_meta_info_version, $report_mask, $extended_report,
        $rapid_account_scan, $ai_version, $ai_hoster, $ai_extra_warn, $ai_expert, $ai_smart, $root_path, $scan_all,
        $specific_ext, $doublecheck, $use_doublecheck, $start, $snum, $max_size, $add_prefix, $no_prefix, $small, $file, $echo, $stat)
    {

    }

    /**
     * Generate report
     * @param $vars
     * @param $scan_time
     * @return mixed
     */
    public function generateReport($vars, $scan_time)
    {

    }

    /**
     * Write report to file and return string to stdout after write attempt
     * @return string
     */
    public function write()
    {

    }

    protected static function convertToUTF8($text)
    {
        if (function_exists('mb_convert_encoding')) {
            $text = @mb_convert_encoding($text, 'utf-8', 'auto');
            $text = @mb_convert_encoding($text, 'UTF-8', 'UTF-8');
        }

        return $text;
    }

}

/**
 * Class JSONReport report all data to JSON
 */
class JSONReport extends Report
{
    const REPORT_MASK_DOORWAYS  = 1<<2;
    const REPORT_MASK_SUSP      = 1<<3;
    const REPORT_MASK_FULL      = self::REPORT_MASK_DOORWAYS | self::REPORT_MASK_SUSP;
    
    protected $raw_report;
    private $extended_report;
    private $rapid_account_scan;
    private $ai_extra_warn;
    private $ai_hoster;
    private $report_mask;
    private $noPrefix;
    private $addPrefix;
    private $mnemo;
    private $small;
    protected $file;
    private $echo;
    private $stat;

    public function __construct($mnemo, $path, $db_location, $db_meta_info_version, $report_mask, $extended_report,
        $rapid_account_scan, $ai_version, $ai_hoster, $ai_extra_warn, $ai_expert, $ai_smart, $root_path, $scan_all,
        $specific_ext, $doublecheck, $use_doublecheck, $start, $snum, $max_size, $add_prefix, $no_prefix,
        $small = false, $file = false, $echo = false, $stat = false)
    {
        $this->mnemo                = $mnemo;
        $this->ai_extra_warn        = $ai_extra_warn;
        $this->extended_report      = $extended_report;
        $this->rapid_account_scan   = $rapid_account_scan;
        $this->ai_hoster            = $ai_hoster;
        $this->report_mask          = $report_mask;
        $this->addPrefix            = $add_prefix;
        $this->noPrefix             = $no_prefix;
        $this->small                = $small;
        $this->echo                 = $echo;
        $this->stat                 = $stat;

        $this->raw_report = [];
        $this->raw_report['summary'] = [
            'scan_path'     => $path,
            'report_time'   => time(),
            'ai_version'    => $ai_version,
            'db_location'   => $db_location,
            'db_version'    => $db_meta_info_version,
        ];

        $this->file = $file;

        if($this->file) {
            @unlink($this->file);
            @unlink($this->file . '.tmp');
        }
    }

    public function generateReport($vars, $scan_time)
    {
        $tmp = clone $vars;
        if (!$this->small) {
            $tmp->criticalPHP   = array_slice($tmp->criticalPHP, 0, self::MAX_ROWS);
            $tmp->criticalJS    = array_slice($tmp->criticalJS, 0, self::MAX_ROWS);
            $tmp->notRead       = array_slice($tmp->notRead, 0, self::AIBOLIT_MAX_NUMBER);
            $tmp->symLinks      = array_slice($tmp->symLinks, 0, self::AIBOLIT_MAX_NUMBER);
            $tmp->warningPHP    = array_slice($tmp->warningPHP, 0, self::AIBOLIT_MAX_NUMBER);
            $tmp->bigFiles      = array_slice($tmp->bigFiles, 0, self::AIBOLIT_MAX_NUMBER);
            $tmp->doorway       = array_slice($tmp->doorway, 0, self::AIBOLIT_MAX_NUMBER);
            $this->generateJSONTables($tmp);
        }

        $this->generateSummary($tmp, $scan_time);

    }

    private function generateSummary($vars, $scan_time)
    {
        $summary_counters                       = [];
        $summary_counters['redirect']           = 0; //count($vars->redirect);
        $summary_counters['critical_php']       = count($vars->criticalPHP);
        $summary_counters['critical_js']        = count($vars->criticalJS);
        $summary_counters['cloudhash']          = count($vars->blackFiles);
        $summary_counters['phishing']           = count($vars->phishing);
        $summary_counters['unix_exec']          = 0; // count($g_UnixExec);
        $summary_counters['iframes']            = 0; // count($g_Iframer);
        $summary_counters['not_read']           = count($vars->notRead);
        $summary_counters['base64']             = 0; // count($g_Base64);
        $summary_counters['heuristics']         = 0; // count($g_HeuristicDetected);
        $summary_counters['symlinks']           = count($vars->symLinks);
        $summary_counters['big_files_skipped']  = count($vars->bigFiles);
        $summary_counters['suspicious']         = count($vars->warningPHP);

        $this->raw_report['summary']['counters']    = $summary_counters;
        $this->raw_report['summary']['total_files'] = $vars->foundTotalFiles;
        $this->raw_report['summary']['scan_time']   = $scan_time;
        $this->raw_report['summary']['mem_peak']    = memory_get_peak_usage(true);
        $this->raw_report['summary']['php_ver']     = PHP_VERSION;
        $this->raw_report['summary']['php_handler'] = PHP_BINARY;

        if (class_exists('PerfomanceStats')) {
            foreach (PerfomanceStats::getPerfomanceTypes() as $type) {
                $this->raw_report['summary'][$type] = round(PerfomanceStats::getPerfomanceItem($type), 4);
            }
        }

        if (isset($vars->users)) {
            $this->raw_report['summary']['users'] = $vars->users->getList();
        }

        if ($this->extended_report && $this->rapid_account_scan) {
            $this->raw_report['summary']['counters']['rescan_count']    = $vars->rescanCount;
            $this->raw_report['summary']['counters']['rescan_rxgood']   = $vars->rescanRxGood;
        }
    }

    private function generateJSONTables($vars)
    {
        $this->raw_report['vulners'] = $this->getRawJsonVuln($vars->vulnerable, $vars);

        if (count($vars->criticalPHP) > 0) {
            $this->raw_report['php_malware'] = $this->getRawJson($vars->criticalPHP, $vars, $vars->criticalPHPFragment, $vars->criticalPHPSig);
        }

        if (count($vars->blackFiles) > 0) {
            $this->raw_report['cloudhash'] = $this->getRawBlackData($vars->blackFiles);
        }

        if (count($vars->criticalJS) > 0) {
            $this->raw_report['js_malware'] = $this->getRawJson($vars->criticalJS, $vars, $vars->criticalJSFragment, $vars->criticalJSSig);
        }

        if (count($vars->notRead) > 0) {
            $this->raw_report['not_read'] = $this->getSimpleList($vars->notRead);
        }

        if (count($vars->phishing) > 0) {
            $this->raw_report['phishing'] = $this->getRawJson($vars->phishing, $vars, $vars->phishingFragment, $vars->phishingSigFragment);
        }
        if (count($vars->symLinks) > 0) {
            $this->raw_report['sym_links'] = $this->getSimpleList($vars->symLinks);
        }
        if (count($vars->adwareList) > 0) {
            $this->raw_report['adware'] = $this->getRawJson($vars->adwareList, $vars, $vars->adwareListFragment);
        }
        if (count($vars->bigFiles) > 0) {
            $this->raw_report['big_files'] = $this->getSimpleList($vars->bigFiles);
        }
        if ((count($vars->doorway) > 0) && JSONReport::checkMask($this->report_mask, JSONReport::REPORT_MASK_DOORWAYS)) {
            $this->raw_report['doorway'] = $this->getRawJson($vars->doorway, $vars);
        }
        if (count($vars->CMS) > 0) {
            $this->raw_report['cms'] = $this->getSimpleList($vars->CMS);
        }

        if ($this->ai_extra_warn) {
            if ((count($vars->warningPHP) > 0) && JSONReport::checkMask($this->report_mask, JSONReport::REPORT_MASK_FULL)) {
                $this->raw_report['suspicious'] = $this->getRawJson($vars->warningPHP, $vars, $vars->warningPHPFragment, $vars->warningPHPSig);
            }
        }
    }
    
    public static function checkMask($mask, $need)
    {
        return (($mask & $need) == $need);
    }
    
    public function write()
    {
        $ret = '';
        $res = @json_encode($this->raw_report);
        if ($this->file!== '.' && $l_FH = fopen($this->file . '.tmp', 'w')) {
            fputs($l_FH, $res);
            fclose($l_FH);
            if (rename($this->file . '.tmp', $this->file)) {
                $ret = "Report written to '$this->file'.";
            } else {
                $ret = "Cannot create '$this->file'.";
            }
        }
        if ($this->echo) {
            echo $res;
        }
        return $ret;
    }

    ////////////////////////////////////////////////////////////////////////////
    
    private function getRawJsonVuln($par_List, $vars) 
    {
        $results = [];
        $l_Src   = [
            '&quot;',
            '&lt;',
            '&gt;',
            '&amp;',
            '&#039;',
            '<' . '?php.'
        ];
        $l_Dst   = [
            '"',
            '<',
            '>',
            '&',
            '\'',
            '<' . '?php '
        ];

        for ($i = 0, $iMax = count($par_List); $i < $iMax; $i++) {
            $l_Pos = $par_List[$i]['ndx'];

            $fn = $this->addPrefix . str_replace($this->noPrefix, '', $vars->structure['n'][$l_Pos]);
            
            $res['fn']      = ENCODE_FILENAMES_WITH_BASE64 ? base64_encode($fn) : self::convertToUTF8($fn);
            $res['sig']     = $par_List[$i]['id'];
            $res['ct']      = $vars->structure['c'][$l_Pos];
            $res['mt']      = $vars->structure['m'][$l_Pos];
            $res['et']      = $vars->structure['e'][$l_Pos];
            $res['sz']      = $vars->structure['s'][$l_Pos];
            $res['sigid']   = 'vuln_' . md5($vars->structure['n'][$l_Pos] . $par_List[$i]['id']);

            $results[] = $res;
        }

        return $results;
    }

    private function getRawJson($par_List, $vars, $par_Details = null, $par_SigId = null) 
    {
        $results = [];
        $l_Src   = [
            '&quot;',
            '&lt;',
            '&gt;',
            '&amp;',
            '&#039;',
            '<' . '?php.'
        ];
        $l_Dst   = [
            '"',
            '<',
            '>',
            '&',
            '\'',
            '<' . '?php '
        ];

        for ($i = 0, $iMax = count($par_List); $i < $iMax; $i++) {
            if ($par_SigId != null) {
                $l_SigId = 'id_' . $par_SigId[$i];
            } else {
                $l_SigId = 'id_n' . rand(1000000, 9000000);
            }

            $l_Pos = $par_List[$i];

            $fn = $this->addPrefix . str_replace($this->noPrefix, '', $vars->structure['n'][$l_Pos]);
            
            $res['fn'] = ENCODE_FILENAMES_WITH_BASE64 ? base64_encode($fn) : self::convertToUTF8($fn);

            if ($par_Details != null) {
                $res['sig'] = preg_replace('|(L\d+).+__AI_MARKER__|smi', '[$1]: ...', $par_Details[$i]);
                $res['sig'] = preg_replace('/[^\x20-\x7F]/', '.', $res['sig']);
                $res['sig'] = preg_replace('/__AI_MARKER__/', ' @!!!>', $res['sig']);
                $res['sig'] = str_replace($l_Src, $l_Dst, $res['sig']);
            }

            $res['sig'] = self::convertToUTF8($res['sig']);

            $res['ct']    = $vars->structure['c'][$l_Pos];
            $res['mt']    = $vars->structure['m'][$l_Pos];
            $res['sz']    = $vars->structure['s'][$l_Pos];
            $res['et']    = $vars->structure['e'][$l_Pos];
            $res['hash']  = $vars->structure['crc'][$l_Pos];
            $res['sigid'] = $l_SigId;
            if (isset($vars->structure['sha256'][$l_Pos])) {
                $res['sha256'] = $vars->structure['sha256'][$l_Pos];
            } else {
                $res['sha256'] = '';
            }


            if (isset($par_SigId) && isset($this->mnemo[$par_SigId[$i]])) {
                $res['sn'] = $this->mnemo[$par_SigId[$i]];
            } else {
                $res['sn'] = '';
            }
            if ($this->stat) {
                $res['uid']    = $vars->structure['u'][$l_Pos];
                $res['gid']    = $vars->structure['g'][$l_Pos];
                $res['mode']   = $vars->structure['p'][$l_Pos];
            }

            $results[] = $res;
        }

        return $results;
    }

    private function getRawBlackData($black_list)
    {
        $result = [];
        foreach ($black_list as $filename => $hash)
        {
            try {
                $stat = @stat($filename);
                if (!$stat) {
                    continue;
                }
                $sz   = $stat['size'];
                $ct   = $stat['ctime'];
                $mt   = $stat['mtime'];
                $u    = $stat['uid'];
                $g    = $stat['gid'];
                $p    = sprintf("0%o", 0777 & $stat['mode']);
            }
            catch (Exception $e) {
                continue;
            }

            $item = [
                'fn'    => ENCODE_FILENAMES_WITH_BASE64 ? base64_encode($filename) : $filename,
                'sig'   => '',
                'ct'    => $ct,
                'mt'    => $mt,
                'et'    => $hash['ts'],
                'sz'    => $sz,
                'hash'  => $hash['h'],
                'sigid' => crc32($filename),
                'sn'    => isset($hash['sn']) ? $hash['sn'] : 'cld'
            ];

            if ($this->stat) {
                $item['uid']   = $u;
                $item['gid']   = $g;
                $item['mode']  = $p;
            }

            $result[] = $item;
        }
        return $result;
    }
    
    private function getSimpleList($list)
    {
        if (!ENCODE_FILENAMES_WITH_BASE64) {
            return $list;
        }
        foreach ($list as &$item) {
            $item = base64_encode($item);
        }
        unset($item);
        return $list;
    }
}


/**
 * Class JSONReport report all data to JSON
 */
class PHPReport extends JSONReport
{
    public function write()
    {
        $ret = '';
        $res = @serialize($this->raw_report);
        if ($l_FH = fopen($this->file . '.tmp', 'w')) {
            fputs($l_FH, $res);
            fclose($l_FH);
            if (rename($this->file . '.tmp', $this->file)) {
                $ret = "Report written to '$this->file'.";
            } else {
                $ret = "Cannot create '$this->file'.";
            }
        }
        return $ret;
    }

    ////////////////////////////////////////////////////////////////////////////
}


/**
 * Class PlainReport report to text file
 */
class PlainReport extends Report
{
    private $extended_report;
    private $rapid_account_scan;
    private $ai_extra_warn;
    private $ai_hoster;
    private $noPrefix;
    private $addPrefix;
    private $mnemo;
    private $file;
    private $raw_report;

    public function __construct($mnemo, $path, $db_location, $db_meta_info_version, $report_mask, $extended_report,
        $rapid_account_scan, $ai_version, $ai_hoster, $ai_extra_warn, $ai_expert, $ai_smart, $root_path, $scan_all,
        $specific_ext, $doublecheck, $use_doublecheck, $start, $snum, $max_size, $add_prefix, $no_prefix,
        $small = false, $file = false, $echo = false, $stat = false)
    {
        $this->mnemo = $mnemo;
        $this->ai_extra_warn = $ai_extra_warn;
        $this->extended_report = $extended_report;
        $this->rapid_account_scan = $rapid_account_scan;
        $this->ai_hoster = $ai_hoster;
        $this->addPrefix = $add_prefix;
        $this->noPrefix = $no_prefix;
        $this->file = $file;

        if($this->file) {
            @unlink($this->file);
            @unlink($this->file . '.tmp');
        }

        $this->raw_report = '';
        if (function_exists("gethostname") && is_callable("gethostname")) {
            $l_HostName = gethostname();
        } else {
            $l_HostName = '???';
        }

        $this->raw_report = "# Malware list detected by AI-Bolit (https://revisium.com/ai/) on " . date("d/m/Y H:i:s", time()) . " " . $l_HostName . "\n\n";
    }

    public function generateReport($vars, $scan_time = false)
    {
        if (!$this->ai_hoster) {
            foreach ($vars->vulnerable as $l_Item) {
                $this->raw_report .= '[VULNERABILITY] ' . $this->replacePathArray($vars->structure['n'][$l_Item['ndx']]) . ' - ' . $l_Item['id'] . "\n";
            }

            $this->raw_report .= "\n";
        }

        if (count($vars->criticalPHP) > 0) {
            $this->raw_report .= '[SERVER MALWARE]' . "\n" . $this->printPlainList(array_slice($vars->criticalPHP, 0, self::MAX_ROWS), $vars,  $vars->criticalPHPFragment) . "\n";
        }

        if (count($vars->criticalJS) > 0) {
            $this->raw_report .= '[CLIENT MALWARE / JS]' . "\n" . $this->printPlainList(array_slice($vars->criticalJS, 0, self::MAX_ROWS), $vars,  $vars->criticalJSFragment) . "\n";
        }

        if (count($vars->notRead) > 0) {
            $this->raw_report .= '[SCAN ERROR / SKIPPED]' . "\n" . $this->printPlainList(array_slice($vars->notRead, 0, self::AIBOLIT_MAX_NUMBER), $vars) . "\n\n";
        }

        if (count($vars->phishing) > 0) {
            $this->raw_report .= '[PHISHING]' . "\n" . $this->printPlainList($vars->phishing, $vars,  $vars->phishingFragment) . "\n";
        }
        if (count($vars->symLinks) > 0) {
            $this->raw_report .= '[SYMLINKS]' . "\n" . $this->printPlainList(array_slice($vars->symLinks, 0, self::AIBOLIT_MAX_NUMBER), $vars) . "\n\n";
        }

        if ($this->ai_extra_warn) {
            if (count($vars->warningPHP) > 0) {
                $this->raw_report .= '[SUSPICIOUS]' . "\n" . $this->printPlainList(array_slice($vars->warningPHP, 0, self::AIBOLIT_MAX_NUMBER), $vars,  $vars->warningPHPFragment) . "\n";
            }
        }

        if (count($vars->adwareList) > 0) {
            $this->raw_report .= '[ADWARE]' . "\n" . $this->printPlainList($vars->adwareList, $vars,  $vars->adwareListFragment) . "\n";
        }
        if (count($vars->bigFiles) > 0) {
            $this->raw_report .= '[BIG FILES / SKIPPED]' . "\n" . $this->printPlainList(array_slice($vars->bigFiles, 0, self::AIBOLIT_MAX_NUMBER), $vars) . "\n\n";
        }

        $this->raw_report = preg_replace('|__AI_MARKER__|smi', ' %> ', $this->raw_report);
    }

    public function write()
    {
        $ret = '';
        if ($l_FH = fopen($this->file . '.tmp', "w")) {
            fputs($l_FH, $this->raw_report);
            fclose($l_FH);
        }
        if (rename($this->file . '.tmp', $this->file)) {
            $ret = "Report written to '$this->file'.";
        } else {
            $ret = "Cannot create '$this->file'.";
        }
        return $ret;
    }

    ////////////////////////////////////////////////////////////////////////////
    private function printPlainList($par_List, $vars, $par_Details = null) {

        $l_Result = "";

        $l_Src = [
            '&quot;',
            '&lt;',
            '&gt;',
            '&amp;',
            '&#039;'
        ];
        $l_Dst = [
            '"',
            '<',
            '>',
            '&',
            '\''
        ];

        for ($i = 0, $iMax = count($par_List); $i < $iMax; $i++) {
            $l_Pos = $par_List[$i];

            if ($par_Details != null) {

                $l_Body = preg_replace('|(L\d+).+__AI_MARKER__|smi', '$1: ...', $par_Details[$i]);
                $l_Body = preg_replace('/[^\x20-\x7F]/', '.', $l_Body);
                $l_Body = str_replace($l_Src, $l_Dst, $l_Body);

            } else {
                $l_Body = '';
            }

            if (is_file($vars->structure['n'][$l_Pos])) {
                $l_Result .= $this->addPrefix . str_replace($this->noPrefix, '', $vars->structure['n'][$l_Pos]) . "\t\t\t" . $l_Body . "\n";
            } else {
                $l_Result .= $this->addPrefix . str_replace($this->noPrefix, '', $vars->structure['n'][$par_List[$i]]) . "\n";
            }

        }
        return $l_Result;
    }

    private function replacePathArray($par_Arr) {
        array_walk($par_Arr, function(&$n) {
            $n = $this->addPrefix . str_replace($this->noPrefix, '', $n);
        });
        return $par_Arr;
    }
}


/**
 * Class CSVReport report table data to CSV
 */
class CSVReport extends Report
{
    const CRITICAL_PHP  = 'p';
    const CRITICAL_JS   = 'j';
    const SUSPICIOUS    = 's';
    const PHISHING      = 'h';
    const VULNERABLE    = 'v';
    const CLOUDHASH     = 'c';

    const BIG_FILES     = 'b';
    const NOT_READ      = 'n';
    const DOORWAY       = 'd';
    const SYMLINKS      = 'm';
    const ADWARE        = 'a';
    const CMS           = 'e';

    private $extended_report;
    private $rapid_account_scan;
    private $ai_extra_warn;
    private $ai_hoster;
    private $noPrefix;
    private $addPrefix;
    private $mnemo;
    private $file;
    private $stat;

    public function __construct($mnemo, $path, $db_location, $db_meta_info_version, $report_mask, $extended_report,
        $rapid_account_scan, $ai_version, $ai_hoster, $ai_extra_warn, $ai_expert, $ai_smart, $root_path, $scan_all,
        $specific_ext, $doublecheck, $use_doublecheck, $start, $snum, $max_size, $add_prefix, $no_prefix,
        $small = false, $file = false, $echo = false, $stat = false)
    {
        $this->mnemo = $mnemo;
        $this->ai_extra_warn = $ai_extra_warn;
        $this->extended_report = $extended_report;
        $this->rapid_account_scan = $rapid_account_scan;
        $this->ai_hoster = $ai_hoster;
        $this->addPrefix = $add_prefix;
        $this->noPrefix = $no_prefix;
        $this->file = $file;
        $this->stat = $stat;

        if($this->file) {
            @unlink($this->file);
            @unlink($this->file . '.tmp');
        }
    }

    public function generateReport($vars, $scan_time = false)
    {
        $this->writeRawCSVVuln($vars->vulnerable, $vars);

        if (count($vars->criticalPHP) > 0) {
            $this->writeRawCSV($vars->criticalPHP, $vars, self::CRITICAL_PHP, $vars->criticalPHPFragment, $vars->criticalPHPSig);
        }

        if (count($vars->blackFiles) > 0) {
            $this->writeRawBlackData($vars->blackFiles);
        }

        if (count($vars->criticalJS) > 0) {
            $this->writeRawCSV($vars->criticalJS, $vars, self::CRITICAL_JS, $vars->criticalJSFragment, $vars->criticalJSSig);
        }

        if (count($vars->notRead) > 0) {
            $this->writeListCSV(self::NOT_READ, $vars->notRead);
        }

        if (count($vars->phishing) > 0) {
            $this->writeRawCSV($vars->phishing, $vars, self::PHISHING, $vars->phishingFragment, $vars->phishingSigFragment);
        }
        if (count($vars->symLinks) > 0) {
            $this->writeListCSV(self::SYMLINKS, $vars->symLinks);
        }
        if (count($vars->adwareList) > 0) {
            $this->writeRawCSV($vars->adwareList, $vars, self::ADWARE, $vars->adwareListFragment);
        }
        if (count($vars->bigFiles) > 0) {
            $this->writeListCSV(self::BIG_FILES, $vars->bigFiles);
        }
        if (count($vars->doorway) > 0) {
            $this->writeRawCSV($vars->doorway, $vars, self::DOORWAY);
        }
        if (count($vars->CMS) > 0) {
            $this->writeListCSV(self::CMS, $vars->CMS);
        }

        if ($this->ai_extra_warn) {
            if (count($vars->warningPHP) > 0) {
                $this->writeRawCSV($vars->warningPHP, $vars, self::SUSPICIOUS, $vars->warningPHPFragment, $vars->warningPHPSig);
            }
        }
    }

    public function write()
    {
        $ret = '';
        if ($this->file) {
            if (rename($this->file . '.tmp', $this->file)) {
                $ret = "Report written to '$this->file'.";
            } else {
                $ret = "Cannot create '$this->file'.";
            }
        }
        return $ret;
    }

    ////////////////////////////////////////////////////////////////////////////
    private function writeRawCSVVuln($par_List, $vars)
    {
        if (count($par_List) === 0) {
            return;
        }
        $fh = fopen($this->file . '.tmp', 'a+');
        for ($i = 0, $iMax = count($par_List); $i < $iMax; $i++) {
            $res    = [];
            $l_Pos  = $par_List[$i]['ndx'];
            $fn     = $this->addPrefix . str_replace($this->noPrefix, '', $vars->structure['n'][$l_Pos]);
            $res[]  = self::VULNERABLE;
            $res[]  = ENCODE_FILENAMES_WITH_BASE64 ? base64_encode($fn) : self::convertToUTF8($fn);
            $res[]  = $par_List[$i]['id'];
            $res[]  = $vars->structure['c'][$l_Pos];
            $res[]  = $vars->structure['m'][$l_Pos];
            $res[]  = $vars->structure['s'][$l_Pos];
            $res[]  = $vars->structure['e'][$l_Pos];
            $res[]  = 'vuln_' . md5($vars->structure['n'][$l_Pos] . $par_List[$i]['id']);
            $res[]  = '';
            $res[]  = '';
            $res[]  = '';
            
            if ($this->stat) {
                $res[] = '';
                $res[] = '';
                $res[] = '';
            }
            fputcsv($fh, $res);
        }
        fflush($fh);
        fclose($fh);
    }

    private function writeListCSV($section, $list)
    {
        if (count($list) === 0) {
            return;
        }
        $fh = fopen($this->file . '.tmp', "a+");
        for ($i = 0, $iMax = count($list); $i < $iMax; $i++) {
            $res = [];
            $res[] = $section;
            $res[] = ENCODE_FILENAMES_WITH_BASE64 ? base64_encode($list[$i]) : $list[$i];
            $res[] = '';
            $res[] = '';
            $res[] = '';
            $res[] = '';
            $res[] = '';
            $res[] = '';
            $res[] = '';
            $res[] = '';
            $res[] = '';

            if ($this->stat) {
                $res[] = '';
                $res[] = '';
                $res[] = '';
            }

            fputcsv($fh, $res);
        }
        fflush($fh);
        fclose($fh);
    }

    private function writeRawCSV($par_List, $vars, $section = '', $par_Details = null, $par_SigId = null)
    {
        if (count($par_List) === 0) {
            return;
        }
        $fh = fopen($this->file . '.tmp', "a+");
        $l_Src   = [
            '&quot;',
            '&lt;',
            '&gt;',
            '&amp;',
            '&#039;',
            '<' . '?php.',
            '\\'
        ];
        $l_Dst   = [
            '"',
            '<',
            '>',
            '&',
            '\'',
            '<' . '?php ',
            ''
        ];

        for ($i = 0, $iMax = count($par_List); $i < $iMax; $i++) {
            $res = [];
            $res[] = $section;
            if ($par_SigId != null) {
                $l_SigId = 'id_' . $par_SigId[$i];
            } else {
                $l_SigId = 'id_n' . rand(1000000, 9000000);
            }

            $l_Pos = $par_List[$i];

            $fn = $this->addPrefix . str_replace($this->noPrefix, '', $vars->structure['n'][$l_Pos]);
            
            $res[] = ENCODE_FILENAMES_WITH_BASE64 ? base64_encode($fn) : self::convertToUTF8($fn);
            
            if ($par_Details != null) {
                $sig = preg_replace('|(L\d+).+__AI_MARKER__|smi', '[$1]: ...', $par_Details[$i]);
                $sig = preg_replace('/[^\x20-\x7F]/', '.', $sig);
                $sig = preg_replace('/__AI_MARKER__/', ' @!!!>', $sig);
                $sig = str_replace($l_Src, $l_Dst, $sig);
                $sig = self::convertToUTF8($sig);
            }

            $res[]    = $sig;
            $res[]    = $vars->structure['c'][$l_Pos];
            $res[]    = $vars->structure['m'][$l_Pos];
            $res[]    = $vars->structure['s'][$l_Pos];
            $res[]    = $vars->structure['e'][$l_Pos];
            $res[]    = $l_SigId;
            $res[]    = $vars->structure['crc'][$l_Pos];

            if (isset($par_SigId) && isset($this->mnemo[$par_SigId[$i]])) {
                $res[] = $this->mnemo[$par_SigId[$i]];
            } else {
                $res[] = '';
            }

            if (isset($vars->structure['sha256'][$l_Pos])) {
                $res[] = $vars->structure['sha256'][$l_Pos];
            } else {
                $res[] = '';
            }
            if ($this->stat) {
                $res[] = $vars->structure['u'][$l_Pos];
                $res[] = $vars->structure['g'][$l_Pos];
                $res[] = $vars->structure['p'][$l_Pos];
            }
            fputcsv($fh, $res);
        }
        fflush($fh);
        fclose($fh);
    }

    private function writeRawBlackData($black_list)
    {
        if (count($black_list) === 0) {
            return;
        }
        $fh = fopen($this->file . '.tmp', 'a+');
        foreach ($black_list as $filename => $hash)
        {
            $res = [];
            try {
                $stat = @stat($filename);
                if (!$stat) {
                    continue;
                }
                $sz   = $stat['size'];
                $ct   = $stat['ctime'];
                $mt   = $stat['mtime'];
                $u    = $stat['uid'];
                $g    = $stat['gid'];
                $p    = sprintf("0%o", 0777 & $stat['mode']);
            }
            catch (Exception $e) {
                continue;
            }
            
            $res[] = self::CLOUDHASH;
            $res[] = ENCODE_FILENAMES_WITH_BASE64 ? base64_encode($filename) : $filename;
            $res[] = '';
            $res[] = $ct;
            $res[] = $mt;
            $res[] = $sz;
            $res[] = $hash['ts'];
            $res[] = crc32($filename);
            $res[] = $hash['h'];
            $res[] = isset($hash['sn']) ? $hash['sn'] : 'cld';
            $res[] = '';
            if ($this->stat) {
                $res[] = $u;
                $res[] = $g;
                $res[] = $p;
            }
            fputcsv($fh, $res);
        }
        fflush($fh);
        fclose($fh);
    }
}


/**
 * Class DoublecheckReport generate doublecheck file
 */
class DoublecheckReport extends Report
{
    private $raw_report;
    private $skip = false;
    private $file = false;
    private $res = '';

    public function __construct($mnemo, $path, $db_location, $db_meta_info_version, $report_mask, $extended_report,
        $rapid_account_scan, $ai_version, $ai_hoster, $ai_extra_warn, $ai_expert, $ai_smart, $root_path, $scan_all,
        $specific_ext, $doublecheck, $use_doublecheck, $start, $snum, $max_size, $add_prefix, $no_prefix,
        $small = false, $file = false, $echo = false, $stat = false)
    {
        $this->raw_report = [];

        $this->file = $file;

        if(file_exists($this->file)) {
            $this->skip = true;
            $this->res .= $this->file . ' already exists.' . PHP_EOL;
        } else if ($l_FH = fopen($this->file . '.tmp', 'w')) {
            fputs($l_FH, '<?php die("Forbidden"); ?>' . "\n");
            fclose($l_FH);
        } else {
            $this->skip = true;
            $this->res .= 'Error! Cannot create ' . $this->file . PHP_EOL;
        }
    }

    public function generateReport($vars, $scan_time)
    {
        if ($this->skip) {
            return;
        }

        $l_CurrPath = __DIR__;

        if (!isset($vars->criticalPHP)) {
            $vars->criticalPHP = [];
        }
        if (!isset($vars->criticalJS)) {
            $vars->criticalJS = [];
        }
        if (!isset($vars->phishing)) {
            $vars->phishing = [];
        }
        if (!isset($vars->adwareList)) {
            $vars->adwareList = [];
        }
        if (!isset($vars->redirect)) {
            $vars->redirect = [];
        }

        $this->raw_report = array_merge($vars->criticalPHP, $vars->criticalJS, $vars->phishing, $vars->adwareList, $vars->redirect);
        $this->raw_report = array_values(array_unique($this->raw_report));

        for ($i = 0, $iMax = count($this->raw_report); $i < $iMax; $i++) {
            $this->raw_report[$i] = str_replace($l_CurrPath, '.', $vars->structure['n'][$this->raw_report[$i]]);
        }

        $this->raw_report = array_values(array_unique($this->raw_report));
        if (count($this->raw_report) === 0) {
            $this->skip = true;
            unlink($this->file . '.tmp');
        }
    }
    
    public function write()
    {
        $ret = '';
        if ($this->skip) {
            return $this->res;
        }
        $fh = fopen($this->file . '.tmp', "a+");
        for ($i = 0, $iMax = count($this->raw_report); $i < $iMax; $i++) {
            fputs($fh, $this->raw_report[$i] . "\n");
        }
        fclose($fh);
        if (rename($this->file . '.tmp', $this->file)) {
            $ret = "Report written to '$this->file'.";
        } else {
            $ret = "Cannot create '$this->file'.";
        }
        return $ret;
    }
}


/**
 * Class HTMLReport report all data to HTML
 */
class HTMLReport extends Report
{
    const REPORT_MASK_DOORWAYS  = 1<<2;
    const REPORT_MASK_SUSP      = 1<<3;
    const REPORT_MASK_FULL      = self::REPORT_MASK_DOORWAYS | self::REPORT_MASK_SUSP;
    
    private $raw_report;
    private $extended_report;
    private $rapid_account_scan;
    private $ai_extra_warn;
    private $ai_hoster;
    private $report_mask;
    private $noPrefix;
    private $addPrefix;
    private $mnemo;
    private $small;
    private $file;
    private $echo;
    private $template;
    private $max_size;
    private $start;
    private $doublecheck;

    public function __construct($mnemo, $path, $db_location, $db_meta_info_version, $report_mask, $extended_report,
        $rapid_account_scan, $ai_version, $ai_hoster, $ai_extra_warn, $ai_expert, $ai_smart, $root_path, $scan_all,
        $specific_ext, $doublecheck, $use_doublecheck, $start, $snum, $max_size, $add_prefix, $no_prefix,
        $small = false, $file = false, $echo = false, $stat = false)
    {
        $this->mnemo = $mnemo;
        $this->ai_extra_warn = $ai_extra_warn;
        $this->extended_report = $extended_report;
        $this->rapid_account_scan = $rapid_account_scan;
        $this->ai_hoster = $ai_hoster;
        $this->report_mask = $report_mask;
        $this->addPrefix = $add_prefix;
        $this->noPrefix = $no_prefix;
        $this->small = $small;
        $this->echo = $echo;
        $this->max_size = $max_size;
        $this->start = $start;
        $this->doublecheck = $doublecheck;

        $this->raw_report = '';
        $this->file = $file;

        if($this->file) {
            @unlink($this->file);
            @unlink($this->file . '.tmp');
        }

        if (file_exists(dirname(__FILE__) . '/ai-design.html')) {
            $this->template = Template::create(file_get_contents(dirname(__FILE__) . '/ai-design.html'));
        } else {
            $this->template = Template::create(TemplateList::MAIN_PAGE);
            $this->template->set('msg1', Translate::getStr('data_table.length_menu'));
            $this->template->set('msg2', Translate::getStr('data_table.zero_records'));
            $this->template->set('msg3', Translate::getStr('data_table.info'));
            $this->template->set('msg4', Translate::getStr('data_table.info_empty'));
            $this->template->set('msg5', Translate::getStr('data_table.info_filtered'));
            $this->template->set('msg6', Translate::getStr('data_table.search'));
            $this->template->set('msg7', Translate::getStr('data_table.paginate.first'));
            $this->template->set('msg8', Translate::getStr('data_table.paginate.previous'));
            $this->template->set('msg9', Translate::getStr('data_table.paginate.next'));
            $this->template->set('msg10', Translate::getStr('data_table.paginate.last'));
            $this->template->set('msg11', Translate::getStr('data_table.aria.sort_ascending'));
            $this->template->set('msg12', Translate::getStr('data_table.aria.sort_descending'));
        }

        $this->template->set('MAIN_TITLE', Translate::getStr('header.scan_report_title'));

        $this->template->set('MODE', $ai_expert . '/' . $ai_smart);

        if (AI_EXPERT == 0) {
            $this->raw_report .= '<div class="rep">' . Translate::getStr('scan.offer_modes_after_express') . '</div>';
        }

        $this->template->set('HEAD_TITLE', Translate::getStr('report_for') . $this->addPrefix . str_replace($this->noPrefix, '', $root_path));

        $this->template->set('SERVICE_INFO', htmlspecialchars("[" . @ini_get('mbstring.internal_encoding') . "][" . $snum . "]"));

        $this->template->set('PATH_URL', (isset($_SERVER['HTTP_HOST']) ? $_SERVER['HTTP_HOST'] : $this->addPrefix . str_replace($this->noPrefix, '', $this->addSlash($root_path))));

        $this->template->set('VERSION', $ai_version);

        $this->template->set('WARN_QUICK', (($scan_all || $specific_ext) ? '' : Translate::getStr('notice.scan_express', [$doublecheck])));

        if ($use_doublecheck) {
            if (Translate::getStr('file.scanned_manual', [$this->doublecheck, $this->doublecheck]) != '') {
                $this->raw_report .= '<div class="rep">' . Translate::getStr('file.scanned_manual', [$this->doublecheck, $this->doublecheck]) . '</div>';
            }
        }
    }

    public function generateReport($vars, $scan_time)
    {
        $l_ShowOffer = false;

        $this->template->set('SCANNED', Translate::getStr('info.files_checked', [$vars->totalFolder, $vars->totalFiles]));

        $l_Summary = '<div class="title">' . Translate::getStr('report.summary') . '</div>';
        $l_Summary .= '<table cellspacing=0 border=0>';

        if (count($vars->criticalPHP) > 0) {
            $l_Summary .= $this->makeSummary(Translate::getStr('malware'), count($vars->criticalPHP), "crit");
        }

        if (count($vars->criticalJS) > 0) {
            $l_Summary .= $this->makeSummary(Translate::getStr('js_virused'), count($vars->criticalJS), "crit");
        }

        if (count($vars->phishing) > 0) {
            $l_Summary .= $this->makeSummary(Translate::getStr('phishing_pages'), count($vars->phishing), "crit");
        }

        if (count($vars->notRead) > 0) {
            $l_Summary .= $this->makeSummary(Translate::getStr('error.read_file'), count($vars->notRead), "crit");
        }

        if (count($vars->warningPHP) > 0) {
            $l_Summary .= $this->makeSummary(Translate::getStr('suspicious'), count($vars->warningPHP), "warn");
        }

        if (count($vars->bigFiles) > 0) {
            $l_Summary .= $this->makeSummary(Translate::getStr('skipped_large_file'), count($vars->bigFiles), "warn");
        }

        if (count($vars->symLinks) > 0) {
            $l_Summary .= $this->makeSummary(Translate::getStr('link.symbolic'), count($vars->symLinks), "warn");
        }

        $l_Summary .= "</table>";

        $l_ArraySummary                      = [];
        $l_ArraySummary["redirect"]          = 0;
        $l_ArraySummary["critical_php"]      = count($vars->criticalPHP);
        $l_ArraySummary["critical_js"]       = count($vars->criticalJS);
        $l_ArraySummary["phishing"]          = count($vars->phishing);
        $l_ArraySummary["unix_exec"]         = 0; // count($g_UnixExec);
        $l_ArraySummary["iframes"]           = 0; // count($g_Iframer);
        $l_ArraySummary["not_read"]          = count($vars->notRead);
        $l_ArraySummary["base64"]            = 0; // count($g_Base64);
        $l_ArraySummary["heuristics"]        = 0; // count($g_HeuristicDetected);
        $l_ArraySummary["symlinks"]          = count($vars->symLinks);
        $l_ArraySummary["big_files_skipped"] = count($vars->bigFiles);
        $l_ArraySummary["suspicious"]        = count($vars->warningPHP);

        if (function_exists('json_encode')) {
            $l_Summary .= "<!--[json]" . json_encode($l_ArraySummary) . "[/json]-->";
        }

        $l_Summary .= "<div class=details style=\"margin: 20px 20px 20px 0\">" . Translate::getStr('notice.files_may_not_malicious') . "</div>\n";

        $this->template->set('SUMMARY', $l_Summary);

        $this->raw_report .= Translate::getStr('critical.title');

        if(!$this->ai_hoster) {
            if (count($vars->vulnerable) > 0) {
                $this->raw_report .= '<div class="note_vir">' . Translate::getStr('script.vulnerable') . ' (' . count($vars->vulnerable) . ')</div><div class="crit">';
                foreach ($vars->vulnerable as $l_Item) {
                    $this->raw_report .= '<li>' . AibolitHelpers::makeSafeFn($vars->structure['n'][$l_Item['ndx']], $this->addPrefix, $this->noPrefix, true) . ' - ' . $l_Item['id'] . '</li>';
                }
                $this->raw_report .= '</div><p>' . PHP_EOL;
            }
        }

        if (count($vars->criticalPHP) > 0) {
            $criticalPHP              = array_slice($vars->criticalPHP, 0, self::MAX_ROWS);
            $this->raw_report .= '<div class="note_vir">' . Translate::getStr('detected.shell_scripts') . ' (' . count($criticalPHP) . ')</div><div class="crit">';
            $this->raw_report .= $this->printList($criticalPHP, $vars, $vars->criticalPHPFragment, $vars->criticalPHPSig, 'table_crit');
            $this->raw_report .= '</div>' . PHP_EOL;
            $l_ShowOffer = true;
        } else {
            $this->raw_report .= '<div class="ok"><b>' . Translate::getStr('not_detected.shell_scripts') . '</b></div>';
        }

        if (count($vars->criticalJS) > 0) {
            $criticalJS              = array_slice($vars->criticalJS, 0, self::MAX_ROWS);
            $this->raw_report .= '<div class="note_vir">' . Translate::getStr('detected.javascript') . ' (' . count($criticalJS) . ')</div><div class="crit">';
            $this->raw_report .= $this->printList($criticalJS, $vars, $vars->criticalJSFragment, $vars->criticalJSSig, 'table_vir');
            $this->raw_report .= "</div>" . PHP_EOL;

            $l_ShowOffer = true;
        }

        if (count($vars->notRead) > 0) {
            $notRead               = array_slice($vars->notRead, 0, self::AIBOLIT_MAX_NUMBER);
            $this->raw_report .= '<div class="note_vir">' . Translate::getStr('warning.reading_error') . ' (' . count($notRead) . ')</div><div class="crit">';
            $this->raw_report .= $this->printList($notRead, $vars);
            $this->raw_report .= "</div><div class=\"spacer\"></div>" . PHP_EOL;
        }

        if (count($vars->phishing) > 0) {
            $this->raw_report .= '<div class="note_vir">' . Translate::getStr('detected.phishing_pages') . ' (' . count($vars->phishing) . ')</div><div class="crit">';
            $this->raw_report .= $this->printList($vars->phishing, $vars, $vars->phishingFragment, $vars->phishingSigFragment, 'table_vir');
            $this->raw_report .= "</div>" . PHP_EOL;

            $l_ShowOffer = true;
        }

        if (isset($vars->redirect) && count($vars->redirect) > 0) {
            $l_ShowOffer             = true;
            $this->raw_report .= '<div class="note_vir">' . Translate::getStr('suspicion.htaccess') . ' (' . count($vars->redirect) . ')</div><div class="crit">';
            $this->raw_report .= "</div>" . PHP_EOL;
        }

        if (count($vars->symLinks) > 0) {
            $symLinks               = array_slice($vars->symLinks, 0, self::AIBOLIT_MAX_NUMBER);
            $this->raw_report .= '<div class="note_vir">' . Translate::getStr('symlinks') . ' (' . count($symLinks) . ')</div><div class="crit">';
            $this->raw_report .= nl2br(AibolitHelpers::makeSafeFn(implode("\n", $symLinks), $this->addPrefix, $this->noPrefix, true));
            $this->raw_report .= "</div><div class=\"spacer\"></div>";
        }

        if ($this->ai_extra_warn) {
            $l_WarningsNum = count($vars->warningPHP);
            if ($l_WarningsNum > 0) {
                $this->raw_report .= "<div style=\"margin-top: 20px\" class=\"title\">" . Translate::getStr('warnings') . "</div>";
            }
            if ($l_WarningsNum > 0) {
                $warningPHP              = array_slice($vars->warningPHP, 0, self::AIBOLIT_MAX_NUMBER);
                $this->raw_report .= '<div class="note_warn">' . Translate::getStr('suspicion.code') . ' (' . count($warningPHP) . ')</div><div class="warn">';
                $this->raw_report .= $this->printList($warningPHP, $vars, $vars->warningPHPFragment, $vars->warningPHPSig, 'table_warn');
                $this->raw_report .= '</div>' . PHP_EOL;
            }
        }

        $l_WarningsNum = count($vars->bigFiles) + count($vars->adwareList) + count($vars->doorway) + count($vars->warningPHP) + count($vars->skippedFolders);

        if ($l_WarningsNum > 0) {
            $this->raw_report .= "<div style=\"margin-top: 20px\" class=\"title\">" . Translate::getStr('warnings') . "</div>";
        }

        if (count($vars->adwareList) > 0) {
            $this->raw_report .= '<div class="note_warn">' . Translate::getStr('detected.bad_links') . '</div><div class="warn">';
            $this->raw_report .= $this->printList($vars->adwareList, $vars, $vars->adwareListFragment);
            $this->raw_report .= "</div>" . PHP_EOL;
        }

        if (count($vars->bigFiles) > 0) {
            $bigFiles               = array_slice($vars->bigFiles, 0, self::AIBOLIT_MAX_NUMBER);
            $this->raw_report .= "<div class=\"note_warn\">" . Translate::getStr('skipped.large_file', [$this->max_size]) . '</div><div class="warn">';
            $this->raw_report .= nl2br(AibolitHelpers::makeSafeFn(implode("\n", $bigFiles), $this->addPrefix, $this->noPrefix, true));
            $this->raw_report .= "</div>";
        }

        if (count($vars->doorway) > 0) {
            $doorway              = array_slice($vars->doorway, 0, self::AIBOLIT_MAX_NUMBER);
            $this->raw_report .= '<div class="note_warn">' . Translate::getStr('suspicion.doorway') . '</div><div class="warn">';
            $this->raw_report .= nl2br(AibolitHelpers::makeSafeFn(implode("\n", $doorway), $this->addPrefix, $this->noPrefix, true));
            $this->raw_report .= "</div>" . PHP_EOL;

        }

        if (count($vars->CMS) > 0) {
            $this->raw_report .= "<div class=\"note_warn\">" . Translate::getStr('founded_CMS') . "<br/>";
            $this->raw_report .= nl2br(AibolitHelpers::makeSafeFn(implode("\n", $vars->CMS), $this->addPrefix, $this->noPrefix));
            $this->raw_report .= "</div>";
        }

        if (function_exists('memory_get_peak_usage')) {
            $this->template->set('MEMORY', Translate::getStr('memory_used') . AibolitHelpers::bytes2Human(memory_get_peak_usage()));
        }

        if ($l_ShowOffer) {
            $this->template->set('OFFER', Translate::getStr('offer.when_has_critical'));
        } else {
            $this->template->set('OFFER', Translate::getStr('offer.when_no_critical'));
        }

        $this->template->set('OFFER_OUR_PRODUCTS', Translate::getStr('offer_our_products'));

        $this->template->set('CAUTION', Translate::getStr('сaution.aibolit_file'));

        $this->template->set('CREDITS', Translate::getStr('info.non_commercial_use'));

        $this->template->set('FOOTER', Translate::getStr('footer'));

        $this->template->set('STAT', Translate::getStr('info.time_elapsed', [$scan_time, date('d-m-Y в H:i:s', floor($this->start)), date('d-m-Y в H:i:s')]));

////////////////////////////////////////////////////////////////////////////
        $this->template->set('MAIN_CONTENT', $this->raw_report);
    }
    
    public function write()
    {
        $ret = '';
        $res = $this->template->render();
        if ($l_FH = fopen($this->file . '.tmp', "w")) {
            fputs($l_FH, $res);
            fclose($l_FH);
        }
        if (rename($this->file . '.tmp', $this->file)) {
            $ret = "Report written to '$this->file'.";
        } else {
            $ret = "Cannot create '$this->file'.";
        }
        return $ret;
    }

    ////////////////////////////////////////////////////////////////////////////

    /////////////////////////////////////////////////////////////////////////////////////

    private function makeSummary($par_Str, $par_Number, $par_Style)
    {
        return '<tr><td class="' . $par_Style . '" width=400>' . $par_Str . '</td><td class="' . $par_Style . '">' . $par_Number . '</td></tr>';
    }

    private function printList($par_List, $vars, $par_Details = null, $par_SigId = null, $par_TableName = null)
    {

        $i = 0;

        if ($par_TableName == null) {
            $par_TableName = 'table_' . rand(1000000, 9000000);
        }

        $l_Result = '';
        $l_Result .= "<div class=\"flist\"><table cellspacing=1 cellpadding=4 border=0 id=\"" . $par_TableName . "\">";

        $l_Result .= "<thead><tr class=\"tbgh" . ($i % 2) . "\">";
        $l_Result .= "<th width=70%>" . Translate::getStr('path') . "</th>";
        $l_Result .= "<th>" . Translate::getStr('property_change') . "</th>";
        $l_Result .= "<th>" . Translate::getStr('content_change') . "</th>";
        $l_Result .= "<th width=90>" . Translate::getStr('size') . "</th>";
        $l_Result .= "<th width=0 class=\"hidd\">CRC32</th>";
        $l_Result .= "<th width=0 class=\"hidd\"></th>";
        $l_Result .= "<th width=0 class=\"hidd\"></th>";
        $l_Result .= "<th width=0 class=\"hidd\"></th>";

        $l_Result .= "</tr></thead><tbody>";

        for ($i = 0, $iMax = count($par_List); $i < $iMax; $i++) {
            if ($par_SigId != null) {
                $l_SigId = 'id_' . $par_SigId[$i];
            } else {
                $l_SigId = 'id_z' . rand(1000000, 9000000);
            }

            $l_Pos = $par_List[$i];

            $l_Creat = $vars->structure['c'][$l_Pos] > 0 ? date("d/m/Y H:i:s", $vars->structure['c'][$l_Pos]) : '-';
            $l_Modif = $vars->structure['m'][$l_Pos] > 0 ? date("d/m/Y H:i:s", $vars->structure['m'][$l_Pos]) : '-';
            $l_Size  = $vars->structure['s'][$l_Pos] > 0 ? AibolitHelpers::bytes2Human($vars->structure['s'][$l_Pos]) : '-';

            if ($par_Details != null) {
                $l_WithMarker = preg_replace('|__AI_MARKER__|smi', '<span class="marker">&nbsp;</span>', $par_Details[$i]);

                $l_Body = '<div class="details">';

                if ($par_SigId != null) {
                    $l_Body .= '<a href="#" onclick="return hsig(\'' . $l_SigId . '\')">[x]</a> ';
                }

                $l_Body .= $l_WithMarker . '</div>';
            } else {
                $l_Body = '';
            }

            $l_Result .= '<tr class="tbg' . ($i % 2) . '" o="' . $l_SigId . '">';

            if (is_file($vars->structure['n'][$l_Pos])) {
                $l_Result .= '<td><div class="it"><a class="it">' . AibolitHelpers::makeSafeFn($this->addPrefix . str_replace($this->noPrefix, '', $vars->structure['n'][$l_Pos]), $this->addPrefix, $this->noPrefix) . '</a></div>' . $l_Body . '</td>';
            } else {
                $l_Result .= '<td><div class="it"><a class="it">' . AibolitHelpers::makeSafeFn($this->addPrefix . str_replace($this->noPrefix, '', $vars->structure['n'][$par_List[$i]]), $this->addPrefix, $this->noPrefix) . '</a></div></td>';
            }

            $l_Result .= '<td align=center><div class="ctd">' . $l_Creat . '</div></td>';
            $l_Result .= '<td align=center><div class="ctd">' . $l_Modif . '</div></td>';
            $l_Result .= '<td align=center><div class="ctd">' . $l_Size . '</div></td>';
            $l_Result .= '<td class="hidd"><div class="hidd">' . $vars->structure['crc'][$l_Pos] . '</div></td>';
            $l_Result .= '<td class="hidd"><div class="hidd">' . 'x' . '</div></td>';
            $l_Result .= '<td class="hidd"><div class="hidd">' . $vars->structure['m'][$l_Pos] . '</div></td>';
            $l_Result .= '<td class="hidd"><div class="hidd">' . $l_SigId . '</div></td>';
            $l_Result .= '</tr>';

        }

        $l_Result .= "</tbody></table></div><div class=clear style=\"margin: 20px 0 0 0\"></div>";

        return $l_Result;
    }

    private function addSlash($dir)
    {
        return rtrim($dir, DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR;
    }
}


class CloudAssistedFiles
{
    private $white = [];
    private $black = [];

    public function __construct(CloudAssistedRequest $car, $file_list, $vars)
    {
        $list_of_hash       = [];
        $list_of_filepath   = [];
        foreach ($file_list as $index => $filepath)
        {
            if (!file_exists($filepath) || !is_readable($filepath) || is_dir($filepath)) {
                continue;
            }
            try {
                $list_of_hash[]     = hash_file('sha256', $filepath);
                $list_of_filepath[] = $filepath;
            }
            catch (Exception $e) {
                
            }
        }
        unset($file_list);
        if ($vars->hashtable !== null) {
            $vars->hashtable->add($list_of_filepath, $list_of_hash);
        }
        try {
            list($white_raw, $black_raw, $verdicts_black_raw) = $car->checkFilesByHash($list_of_hash);
        }
        catch (Exception $e) {
            throw $e;
        }
        
        $this->white = $this->getListOfFile($white_raw, $list_of_hash, $list_of_filepath);
        $this->black = $this->getListOfFile($black_raw, $list_of_hash, $list_of_filepath, $verdicts_black_raw);

        unset($white_raw, $black_raw, $verdicts_black_raw, $list_of_hash, $list_of_filepath);
    }
    
    public function getWhiteList()
    {
        return $this->white;
    }

    public function getBlackList()
    {
        return $this->black;
    }
    
    // =========================================================================
    
    private function getListOfFile($data_raw, $list_of_hash, $list_of_filepath, $verdicts = [])
    {
        $result = [];
        foreach ($data_raw as $index => $hash_index)
        {
            if (!isset($list_of_hash[$hash_index])) {
                continue;
            }
            $hash_result = [
                'h'     => $list_of_hash[$hash_index],
                'ts'    => time(),
            ];
            if ($verdicts) {
                if (!isset($verdicts[$index])) {
                    throw new Exception('Wrong CloudAssisted format. List of verdicts has structure different from main list.');
                }
                $hash_result['sn'] = $verdicts[$index];
            }
            $result[$list_of_filepath[$hash_index]] = $hash_result;
        }
        return $result;
    }    
}


class DetachedMode
{
    protected $workdir;
    protected $scan_id;
    protected $pid_file;
    protected $report_file;
    protected $csvreport_file;
    protected $done_file;
    protected $vars;
    protected $start_time;
    protected $json_report;
    protected $sock_file;
    protected $reports;
    protected $finder;
    protected $debug;

    public function __construct($finder, $debug, $scan_id, $vars, $start_time, $json_report, $basedir = '/var/imunify360/aibolit/run', $sock_file = '/var/run/defence360agent/generic_sensor.sock.2')
    {
        $this->scan_id  = $scan_id;
        $this->vars     = $vars;
        $this->setWorkDir($basedir, $scan_id);
        $this->pid_file     = $this->workdir . '/pid';
        $this->report_file  = $this->workdir . '/report.json';
        $this->csvreport_file  = $this->workdir . '/report.csv';
        $this->done_file    = $this->workdir . '/done';
        $this->start_time   = $start_time;
        $this->json_report  = $json_report;
        $this->setSocketFile($sock_file);
        $this->savePid();
        $this->checkWorkDir($this->workdir);
        if (isset($vars->options['json_report']) && !empty($vars->options['json_report']) && $vars->options['json_report'] !== '.') {
            $this->report_file  = $vars->options['json_report'];
        }
        if (isset($vars->options['csv_report']) && !empty($vars->options['csv_report']) && $vars->options['csv_report'] !== '.') {
            $this->csvreport_file  = $vars->options['csv_report'];
            $this->reports[CSVReport::class] = $this->csvreport_file;
        }
        $this->reports[JSONReport::class] = $this->report_file;
        $this->finder = $finder;
        $this->debug = $debug;
    }
    
    public function scanListing($listing, $use_base64)
    {
        $this->checkList($listing);
        $this->scanFilesFromListingFile($listing, $use_base64);
        $this->writeReport();
        $this->complete();
    }
    
    public function scanDirectories($dir)
    {
        file_exists(QUEUE_FILENAME) && unlink(QUEUE_FILENAME);
        $scan = new Scanner($this->finder, $this->vars);
        if (method_exists($scan, 'QCR_ScanDirectories')) {
            $scan->QCR_ScanDirectories($dir);
        }
        $this->scanFilesFromListingFile(QUEUE_FILENAME, true);
        file_exists(QUEUE_FILENAME) && unlink(QUEUE_FILENAME);
        $this->writeReport();
        $this->complete();
        unset($scan);
    }

    // /////////////////////////////////////////////////////////////////////////
    
    protected function scanFilesFromListingFile($list_filepath, $use_base64 = false)
    {
        if (!is_file($list_filepath) || !is_readable($list_filepath)) {
            $this->vars->foundTotalFiles = 0;
            return;
        }
        $s_file = new ScanList($list_filepath, $use_base64);
        $this->vars->foundTotalFiles =  is_array($s_file) ? count($s_file) : $s_file->count();

        $scan = new Scanner($this->finder, $this->vars);
        if (method_exists($scan, 'QCR_GoScan')) {
            $scan->QCR_GoScan($s_file, null, $this->finder->getFilter());
            $this->vars->bigFiles = $this->finder->getBigFiles();

            if (count($this->vars->bigFiles) > 0) {
                $scan->prepareBigFilesToCriticalList($this->vars->bigFiles, $this->vars);
            }
            $bigElfs = $this->finder->getBigElfFiles();

            if (count($bigElfs) > 0) {
                $scan->prepareBigElfFilesToCriticalSusList($bigElfs, $this->vars);
            }
            $scan->whitelisting();
        }
        unset($scan);
        unset($s_file);
        unset($bigElfs);
    }

    protected function checkWorkDir($workdir)
    {
        if (!file_exists($workdir) && !mkdir($workdir) && !is_dir($workdir)) {
            die('Error! Cannot create workdir ' . $workdir . ' for detached scan.');
        } elseif (file_exists($workdir) && !is_writable($workdir)) {
            die('Error! Workdir ' . $workdir . ' is not writable.');
        } 
    }
    
    protected function checkList($listing)
    {
        if (!file_exists($listing) || !is_readable($listing)) {
            die('Error! Listing file ' . $listing . ' not exists or not readable');
        }
    }

    protected function savePid()
    {
        file_put_contents($this->pid_file, strval(getmypid()));
    }

    protected function writeReport()
    {
        $scan_time = round(microtime(true) - $this->start_time, 1);

        foreach($this->json_report->call($this, $this->reports) as $json_report) {
            $json_report->generateReport($this->vars, $scan_time);
            $json_report->write();
        }
    }

    protected function complete()
    {
        @touch($this->done_file);
        $complete = [
            'method'    => 'MALWARE_SCAN_COMPLETE',
            'scan_id'   => $this->scan_id,
        ];
        $json_complete = json_encode($complete) . "\n";
        $socket = fsockopen('unix://' . $this->sock_file);
        stream_set_blocking($socket, false);
        fwrite($socket, $json_complete);
        fclose($socket);
    }

    protected function setWorkDir($dir, $scan_id)
    {
        $this->workdir = $dir . '/' . $scan_id;
    }

    protected function setSocketFile($sock)
    {
        $this->sock_file = $sock;
    }
}


/**
 * Class ResidentMode used to stay aibolit alive in memory and wait for a job.
 */
class ResidentMode
{
    /**
     * check upload folder every N seconds
     */
    const CHECK_UPLOAD_TIME = 3;
    /**
     * time of last check upload jobs folder
     * @var
     */
    protected $last_dir_check;
    /**
     * parent dir for all resident aibolit related
     * @var string
     */
    protected $resident_dir;
    /**
     * directory for all jobs to be processed by aibolit
     * @var string
     */
    protected $resident_in_dir;
    /**
     * directory with all the malicious files reports to be processed by imunify
     * @var string
     */
    protected $resident_out_dir;
    /**
     * resident aibolit pid
     * @var string
     */
    protected $aibolit_pid;
    /**
     * file lock used to make sure we start only one aibolit
     * @var string
     */
    protected $aibolit_start_lock;
    /**
     * status file used to make sure aibolit didn't get stuck
     * @var string
     */
    protected $aibolit_status_file;
    /**
     * number of seconds while aibolit will stay alive, while not receiving any work
     * @var int
     */
    protected $stay_alive;
    /**
     * maximum number of seconds without updating ABOLIT_STATUS_FILE,
     * used to track if AIBOLIT is stuck, should be killed
     * @var int
     */
    protected $stuck_timeout;
    /**
     * number of seconds scripts would wait for aibolit to finish / send signal
     * @var int
     */
    protected $upload_timeout;
    /**
     * max number of files to pick
     * @var int
     */
    protected $max_files_per_notify_scan;
    /**
     * timestamp of last scan
     * @var int
     */
    protected $last_scan_time;
    /**
     * time to sleep between lifecycle iterations in microseconds
     */
    protected $sleep_time;

    protected $scannedNotify = 0;

    protected $report;

    protected $logger;

    protected $resident_in_dir_notify;
    protected $resident_in_dir_upload;
    protected $watchdog_socket;
    protected $activation_socket;
    protected $systemd = false;
    protected $interval = 0;
    protected $lastKeepAlive = 0;

    protected $signs;
    protected $finder;
    protected $options;

    const JOB_UPLOAD = 'upload';
    const JOB_NOTIFY = 'notify';

    protected $upload_jobs = [];
    protected $notify_jobs = [];

    /**
     * ResidentMode constructor.
     *
     * @param             $finder
     * @param             $debug
     * @param Closure     $report
     * @param             $signs
     * @param Logger|null $logger
     * @param array       $options
     * @param string      $resident_dir
     * @param int         $stay_alive
     * @param int         $stuck_timeout
     * @param int         $upload_timeout
     * @param int         $max_files_per_notify_scan
     * @param int         $sleep_time
     */
    public function __construct(
        $finder,
        $debug,
        Closure $report,
        $signs,
        Logger $logger = null,
        $options = null,
        $resident_dir = '/var/imunify360/aibolit/resident',
        $stay_alive = 30,
        $stuck_timeout = 5,
        $upload_timeout = 10,
        $max_files_per_notify_scan = 500,
        $sleep_time = 100000
    ) {
        $this->signs = $signs;
        $this->setResidentDir($resident_dir);
        $this->resident_in_dir = $this->resident_dir . '/in';
        $this->resident_in_dir_upload = $this->resident_in_dir . '/upload-jobs';
        $this->resident_in_dir_notify = $this->resident_in_dir . '/notify-jobs';
        $this->resident_out_dir = $this->resident_dir . '/out';
        $this->aibolit_pid = $this->resident_dir . '/aibolit.pid';
        $this->aibolit_start_lock = $this->resident_dir . '/start.lock';
        $this->aibolit_status_file = $this->resident_dir . '/aibolit.status';
        $this->stay_alive = $stay_alive;
        $this->stuck_timeout = $stuck_timeout;
        $this->upload_timeout = $upload_timeout;
        if (!empty($max_files_per_notify_scan)) {
            $this->max_files_per_notify_scan = $max_files_per_notify_scan;
        }
        $this->sleep_time = $sleep_time;
        $this->report = $report;
        $this->logger = $logger;
        $this->options = $options;

        umask(0);
        if (!file_exists($this->resident_dir)) {
            if (!mkdir($this->resident_dir, 0777, true) && !is_dir($this->resident_dir)) {
                throw new Exception(sprintf('Directory "%s" was not created', $this->resident_dir));
            }
        }
        if (!file_exists($this->resident_in_dir)) {
            if (!mkdir($this->resident_in_dir, 0755) && !is_dir($this->resident_in_dir)) {
                throw new Exception(sprintf('Directory "%s" was not created', $this->resident_in_dir));
            }
        }
        if (!file_exists($this->resident_out_dir)) {
            if (!mkdir($this->resident_out_dir, 0755) && !is_dir($this->resident_out_dir)) {
                throw new Exception(sprintf('Directory "%s" was not created', $this->resident_out_dir));
            }
        }
        if (!file_exists($this->resident_in_dir_notify)) {
            if (!mkdir($this->resident_in_dir_notify, 0700) && !is_dir($this->resident_in_dir_notify)) {
                throw new Exception(sprintf('Directory "%s" was not created', $this->resident_in_dir_notify));
            }
        }
        if (!file_exists($this->resident_in_dir_upload)) {
            if (!mkdir($this->resident_in_dir_upload, 01777) && !is_dir($this->resident_in_dir_upload)) {
                throw new Exception(sprintf('Directory "%s" was not created', $this->resident_in_dir_upload));
            }
        }

        $this->checkSpecs();

        $addr = getenv('NOTIFY_SOCKET');
        if ($addr[0] == '@') {
            $addr = "\0";
        }

        if ($addr) {
            $this->systemd = true;
        }

        if ($this->systemd) {
            $this->watchdog_socket = fsockopen('udg://' . $addr);
            stream_set_blocking($this->watchdog_socket, false);

            $this->activation_socket = fopen('php://fd/3', 'r');
            if ($this->activation_socket === false) {
                die("Something went wrong with activation socket.");
            }
            stream_set_blocking($this->activation_socket, false);

            if (getenv('WATCHDOG_USEC') !== false) {
                $this->interval = intval(getenv('WATCHDOG_USEC'));
            } else {
                $this->interval = 1000000;
            }
        }
        $this->finder = $finder;
        $this->debug = isset($debug) ? $debug : null;
        $this->lifeCycle();
    }

    protected function isRootWriteable($folder)
    {
        if (!file_exists($folder) || !is_dir($folder)) {
            return false;
        }

        $owner_id = (int)fileowner($folder);
        if (function_exists('posix_getpwuid')) {
            $owner = posix_getpwuid($owner_id);
            if (!isset($owner['name']) || $owner['name'] !== 'root') {
                return false;
            }
        } elseif ($owner_id != 0) {
            return false;
        }

        $perms = fileperms($folder);
        if (($perms & 0x0100)                           // owner r
            && ($perms & 0x0080)                        // owner w
            && ($perms & 0x0040) && !($perms & 0x0800)  // owner x
            && !($perms & 0x0010)                       // group without w
            && !($perms & 0x0002)                       // other without w
        ) {
            return true;
        }
        return false;
    }

    protected function isWorldWriteable($folder)
    {
        if (!file_exists($folder) || !is_dir($folder)) {
            return false;
        }

        $perms = fileperms($folder);
        if (($perms & 0x0004)                           // other r
            && ($perms & 0x0002)                        // other w
            && ($perms & 0x0200)                        // sticky bit
        ) {
            return true;
        }
        return false;
    }

    protected function checkSpecs()
    {
        if (!extension_loaded('posix')) {
            die('Error! For resident scan need posix extension.');
        } elseif (!$this->isRootWriteable($this->resident_in_dir_notify)) {
            die('Error! Notify in dir ' . $this->resident_in_dir_notify . ' must be root writeable.');
        } elseif (!$this->isWorldWriteable($this->resident_in_dir_upload)) {
            die('Error! Upload in dir ' . $this->resident_in_dir_upload . ' must be world writeable.');
        }
    }

    protected function setResidentDir($dir)
    {
        $this->resident_dir = $dir;
    }

    protected function writeReport($vars, $scan_time, $type, $file)
    {
        $file = basename($file);
        $critPHP = count($vars->criticalPHP);
        $critJS = count($vars->criticalJS);
        $black = count($vars->blackFiles);
        $warning = count($vars->warningPHP);
        $malware = ($critPHP > 0)
            || ($critJS > 0)
            || ($black > 0)
            || ($warning > 0);
        if ($malware) {
            $this->debugLog("Job {$file}: Found malware. PHP: {$critPHP}; JS: {$critJS}; Black: {$black}; SUS: {$warning}");
        } else {
            $this->debugLog("Job {$file}: No malware found.");
        }
        if ($type == 'upload') {
            $pid = (int)basename($file, '.upload_job');
            if ($malware) {
                $this->debugLog("Job {$file}: Sending SIGUSR1 to {$pid}");
                posix_kill($pid, SIGUSR1);
            } else {
                $this->debugLog("Job {$file}: Sending SIGUSR2 to {$pid}");
                posix_kill($pid, SIGUSR2);
            }
        } elseif ($type == 'notify' && $malware) {
            $filename = basename($file, '.notify_job');
            $reports[JSONReport::class] = $this->resident_out_dir . '/' . $filename . '.report';
            foreach($this->report->call($this, $reports) as $report) {
                $report->generateReport($vars, $scan_time);
                $this->debugLog("Job {$file}: Creating report for job in {$filename}.report");
                $report->write();
            }
            unset($reports);
        }
    }

    /**
     * @param string $pattern
     * @param string $type
     *
     * @return bool
     */
    protected function isJobFileExists($pattern, $type)
    {
        if ($type === self::JOB_UPLOAD) {
            if (empty($this->upload_jobs)) {
                $this->upload_jobs = glob($this->resident_in_dir . $pattern);
                if (!empty($this->upload_jobs)) {
                    return true;
                }
            } else {
                return true;
            }
        }

        if ($type === self::JOB_NOTIFY) {
            if (empty($this->notify_jobs)) {
                $this->notify_jobs = glob($this->resident_in_dir . $pattern);
                if (!empty($this->notify_jobs)) {
                    return true;
                }
            } else {
                return true;
            }
        }
        return false;
    }

    protected function isUploadJob()
    {
        $this->last_dir_check = microtime(true);
        if ($this->isJobFileExists('/upload-jobs/*.upload_job', self::JOB_UPLOAD)) {
            return true;
        }
        return false;
    }

    protected function scanJob($job_file, $type)
    {
        $start_time = microtime(true);

        $vars = new Variables();
        $vars->blacklist = $this->blacklist;
        if ($type === 'notify') {
            $this->finder->getFilter()->setSkipSystemOwner(isset($this->options['skip-system-owner']));
        } else {
            $this->finder->getFilter()->setSkipSystemOwner(false);
        }
        $vars->signs = $this->signs;
        $vars->users = new UserList();
        $vars->options = $this->options;

        $files_to_scan = [];
        $count = 0;

        $job = json_decode(file_get_contents($job_file));
        $file = basename($job_file);

        $this->debugLog("Job {$file} received from queue.");

        array_walk($job->files, static function(&$item) {
            $item = base64_decode($item);
        });

        $files_to_scan = $job->files;
        
        $count = count($files_to_scan);
        
        if ($type === 'notify') {
            $this->debugLog("Job {$file}: notify. {$count} files to be scanned");

            if ($count > $this->max_files_per_notify_scan) {
                $this->debugLog("Job {$file}: Too many files to scan. Job skipped.");
                // TODO: show a warning: too many files to scan, the job was skipped
                return true;
            }

            if ($this->scannedNotify + $count > $this->max_files_per_notify_scan) {
                $this->scannedNotify = 0;
                unset($vars, $files_to_scan);

                return false;
            }

            $this->scannedNotify += $count;
        } elseif ($type === 'upload') {
            $this->debugLog("Job {$file}: upload. {$count} files to be scanned");

            if ($count > 1) {
                $this->debugLog("Job {$file}: Too many files to scan. Job skipped.");
                // TODO: show a warning: too many files to scan, the job was skipped
                return true;
            }
        }

        $vars->foundTotalFiles = $count;

        $zipResult = false;
        if (isset($this->options['scan-archive']) &&
            $type === 'upload' && strtolower(pathinfo($files_to_scan[0], PATHINFO_EXTENSION)) === 'zip') {
            $zipScanner = new ZipScanner($files_to_scan[0], $vars, $this->finder->getFilter());
            $zipResult = $zipScanner->scan($this->options['archive-max-size'], $this->options['max-num-files-in-archive']);
        }
        if (!$zipResult) {
            $scan = new Scanner($this->finder, $vars, $this->debug);
            if (method_exists($scan, 'QCR_GoScan')) {
                if ($this->systemd) {
                    $scan->QCR_GoScan($files_to_scan, [$this, 'keepAlive'], $this->finder->getFilter());
                } else {
                    $scan->QCR_GoScan($files_to_scan, null, $this->finder->getFilter());
                }
                $scan->whitelisting();
            }
        }

        $scan_time = round(microtime(true) - $start_time, 1);

        $this->last_scan_time = time();
        $this->writeReport($vars, $scan_time, $type, $job_file);

        unset($vars, $files_to_scan, $scan);

        return true;
    }

    protected function isNotifyJob()
    {
        if ($this->isJobFileExists('/notify-jobs/*.notify_job', self::JOB_NOTIFY)) {
            return true;
        }
        return false;
    }

    protected function scanUploadJob()
    {
        if (empty($this->upload_jobs)) {
            return;
        }
        foreach ($this->upload_jobs as $index => $upload_job) 
        {
            $this->scanJob($upload_job, 'upload');
            $file = basename($upload_job);
            $this->debugLog("Job {$file}: Removing job.");
            unlink($upload_job);
            unset($this->upload_jobs[$index]);
        }
    }

    protected function scanNotifyJob()
    {
        if (empty($this->notify_jobs)) {
            return;
        }
        foreach ($this->notify_jobs as $index => $job) 
        {
            $res = $this->scanJob($job, 'notify');
            if (!$res) {
                break;
            }
            $file = basename($job);
            $this->debugLog("Job {$file}: Removing job.");
            unlink($job);
            unset($this->notify_jobs[$index]);
        }
    }

    public function keepAlive()
    {
        if ((int)((microtime(true) - $this->lastKeepAlive) * 1000000) > $this->interval / 2) {
            stream_get_contents($this->activation_socket);
            fwrite($this->watchdog_socket, 'WATCHDOG=1');
            $this->lastKeepAlive = microtime(true);
        }
        if (((microtime(true) - $this->last_dir_check) > self::CHECK_UPLOAD_TIME)
            && !$this->isDirEmpty($this->resident_in_dir_upload)
            && $this->isUploadJob()
        ) {
            $this->scanUploadJob();
        }
    }

    protected function isDirEmpty($dir)
    {
        $it = new \FilesystemIterator($dir);
        return !$it->valid();
    }

    protected function lifeCycle()
    {
        $this->debugLog("Starting resident-mode loop.");
        $this->last_scan_time = time();
        while (true) {
            if ($this->systemd) {
                $this->keepAlive();
            }
            while ($this->isUploadJob()) {
                $this->scanUploadJob();
            }

            while ($this->isNotifyJob() && !$this->isUploadJob()) {
                $this->scanNotifyJob();
            }
            if ($this->last_scan_time + $this->stay_alive < time()) {
                $this->debugLog("No more jobs. Shutting down.");
                break;
            }
            touch($this->aibolit_status_file);
            usleep($this->sleep_time); // 1/10 of second by default
        }
        if ($this->systemd) {
            fclose($this->watchdog_socket);
            fclose($this->activation_socket);
        }
        unlink($this->aibolit_status_file);
    }

    protected function debugLog($message)
    {
        if ($this->logger === null) {
            return;
        }
        $this->logger->debug($message);
    }
}



class DebugMode
{
    private $debugMode = false;
    private $debugPerfomance = false;
    private $perfomance_stats = [];

    public function __construct($debugMode, $debugPerfomance)
    {
        $this->debugMode = $debugMode;
        $this->debugPerfomance = $debugPerfomance;
    }

    public function QCR_Debug($par_Str = "")
    {
        if ($this->debugMode) {
            return;
        }

        $l_MemInfo = ' ';
        if (function_exists('memory_get_usage')) {
            $l_MemInfo .= ' curmem=' . AibolitHelpers::bytes2Human(memory_get_usage());
        }

        if (function_exists('memory_get_peak_usage')) {
            $l_MemInfo .= ' maxmem=' . AibolitHelpers::bytes2Human(memory_get_peak_usage());
        }

        stdOut("\n" . date('H:i:s') . ': ' . $par_Str . $l_MemInfo . "\n");
    }

    public function getDebugMode()
    {
        return $this->debugMode;
    }

    public function getDebugPerfomance()
    {
        return $this->debugPerfomance;
    }

    public function addPerfomanceItem($item, $time)
    {
        $this->perfomance_stats[$item] = isset($this->perfomance_stats[$item]) ? $this->perfomance_stats[$item] + $time : 0;
    }

    public function printPerfomanceStats()
    {
        $keys = array_keys($this->perfomance_stats);
        for ($i = 0, $iMax = count($keys); $i < $iMax; $i++) {
            $this->perfomance_stats[$keys[$i]] = round($this->perfomance_stats[$keys[$i]] * 1000000);
        }

        arsort($this->perfomance_stats);

        foreach ($this->perfomance_stats as $r => $v) {
            echo $v . "\t\t" . $r . "\n";
        }
    }
}


class FileInfo
{
    protected $index = 0;
    protected $inode = 0;
    protected $filename = '';
    protected $size = 0;
    protected $created = 0;
    protected $modified = 0;
    protected $hash = 0;
    protected $sha256 = 0;
    protected $sha1file = 0;
    protected $content = '';
    protected $norm_content = '';
    protected $is_binary = 0;
    protected $is_interesting = 0;
    protected $is_log = 0;
    protected $hashtable = null;
    protected $uid = false;
    protected $gid = false;
    protected $mode = false;
    protected $chunk_read = false;

    /**
     * @return int|string
     */
    public function getSha1file()
    {
        if ($this->sha1file == 0) {
            $this->sha1file = sha1_file($this->filename);
        }
        return $this->sha1file;
    }

    /**
     * @return int|string
     */
    public function getSha256file()
    {
        return hash_file('sha256', $this->filename);
    }

    public function __construct($filename, $index, $hashtable = null)
    {
        $this->index = $index;
        $this->filename = $filename;
        $this->hashtable = $hashtable;
    }

    /**
     * @return bool
     */
    public function isBinary()
    {
        if ($this->is_binary !== 0) {
            return $this->is_binary;
        }
        $this->_setFlags();
        return $this->is_binary;
    }

    /**
     * @return bool
     */
    public function isInteresting()
    {
        if ($this->is_interesting !== 0) {
            return $this->is_interesting;
        }
        $this->_setFlags();
        return $this->is_interesting;
    }

    /**
     * @return bool
     */
    public function isLog()
    {
        if ($this->is_log !== 0) {
            return $this->is_log;
        }
        if ($this->content === '') {
            $header = @file_get_contents($this->filename, false, null, 0, 200);
        } else {
            $header = substr($this->content, 0, 200);
        }
        if (HyperScan::canMatchLog()) {
            $this->is_log = HyperScan::matchLog($header);
        } else {
            $time = microtime(true);
            $this->is_log = preg_match('~\A\s*<\?(?:php)?\s*(?:exit|die)(?:\s*\(\s*(?:(?:\d+|[\'"][^\'"$]{1,199}[\'"])\s*)?\))?\s*;~msi', $header) ? true : false;
            if (class_exists('PerfomanceStats')) {
                PerfomanceStats::addPerfomanceItem(PerfomanceStats::PCRE_SMART_STAT, microtime(true) - $time);
            }
        }

        return $this->is_log;
    }

    /**
     * @return false|mixed|string
     */
    public function getContent()
    {
        if ($this->content == '') {
            $this->content = @file_get_contents($this->filename);
            $this->chunk_read = false;
        }
        return $this->content;
    }

    /**
     * @return string
     */
    public function getContentWithoutSpaces($max_size = false)
    {
        if($this->norm_content !== '') {
            return $this->norm_content;
        }
        if (!$max_size) {
            $this->norm_content = Normalization::strip_whitespace($this->getContent());
        } else if(is_numeric($max_size)) {
            $this->norm_content = Normalization::strip_whitespace($this->getContentBytes($max_size));
        }
        return $this->norm_content;
    }

    public function getContentBytes($max_bytes)
    {
        if ($this->content == '') {
            $this->content = @file_get_contents($this->filename, false, null, 0, $max_bytes);
            $this->chunk_read = true;
        }
        return $this->content;
    }

    /**
     * @param $text
     * @return string
     */
    private function _hash_($text)
    {
        static $r;

        if (empty($r)) {
            for ($i = 0; $i < 256; $i++) {
                if ($i < 33 or $i > 127) {
                    $r[chr($i)] = '';
                }
            }
        }

        return sha1(strtr($text, $r));
    }

    /**
     * @return integer
     */
    public function getIndex()
    {
        return $this->index;
    }

    /**
     * @return string
     */
    public function getFilename()
    {
        return $this->filename;
    }

    protected function _setStat()
    {
        $info = stat($this->filename);
        $this->size = $info['size'];
        $this->created = $info['ctime'];
        $this->modified = $info['mtime'];
        $this->inode = $info['ino'];
        $this->uid = $info['uid'];
        $this->gid = $info['gid'];
        $this->mode = sprintf("0%o", 0777 & $info['mode']);
    }

    private function isValidSqliteFile($filename)
    {
        $header = @file_get_contents($filename, false, null, 0, 100);
        if (strpos($header, 'SQLite format 3' . chr(0)) !== 0) { //check valid header
            return false;
        }
        if (substr($header, 72, 20) !== str_repeat(chr(0), 20)) { //check valid reserved bytes
            return false;
        }
        $page_size = unpack('n', substr($header, 16, 2))[1];
        $page_count = unpack('N', substr($header, 28, 4))[1];
        if ($page_size * $page_count !== filesize($filename)) { //check valid size
            return false;
        }
        return true;
    }

    private function _setFlags()
    {
        if ($this->content === '') {
            $header = @file_get_contents($this->filename, false, null, 0, 10);
        } else {
            $header = substr($this->content, 0, 10);
        }
        $this->is_binary = (strpos($header, chr(127) . 'ELF') === 0);
        if (HyperScan::canMatchInteresting()) {
            $this->is_interesting = HyperScan::matchInteresting($header);
        } else {
            $time = microtime(true);
            $this->is_interesting = (bool)preg_match('~<(?:\?|html)|#!/|[\x09\x0A\x0D\x20-\x7E]{10}~msi', $header);
            if (class_exists('PerfomanceStats')) {
                PerfomanceStats::addPerfomanceItem(PerfomanceStats::PCRE_SMART_STAT, microtime(true) - $time);
            }
        }
        if (!$this->is_interesting && strpos($header, "\xFF\xD8") === 0) {
            $this->is_interesting = @file_get_contents($this->filename, false, null, filesize($this->filename) - 2, 2) !== "\xFF\xD9";
        }
        if ($this->isInteresting() && $header === 'SQLite for') {
            $this->is_interesting = !$this->isValidSqliteFile($this->filename);
        }
        unset($header);
    }

    /**
     * @return int|mixed
     */
    public function getSize()
    {
        if ($this->size == 0) {
            $this->_setStat();
        }
        return $this->size;
    }

    /**
     * @return int|mixed
     */
    public function isPartiallyRead()
    {
        return $this->chunk_read;
    }

    /**
     * @return int|mixed
     */
    public function getInode()
    {
        if ($this->inode == 0) {
            $this->_setStat();
        }
        return $this->inode;
    }

    /**
     * @return int|mixed
     */
    public function getCreated()
    {
        if ($this->created == 0) {
            $this->_setStat();
        }
        return $this->created;
    }

    /**
     * @return int|mixed
     */
    public function getModified()
    {
        if ($this->modified == 0) {
            $this->_setStat();
        }
        return $this->modified;
    }

    /**
     * @return int|string
     */
    public function getHash()
    {
        if ($this->hash == 0) {
            $this->hash = $this->_hash_($this->getContentWithoutSpaces());
        }
        return $this->hash;
    }

    /**
     * @return int|string
     */
    public function getSha256()
    {
        if ($this->hashtable !== null && $this->hashtable->get($this->filename) !== false) {
            $this->sha256 = $this->hashtable->get($this->filename);
        }
        if ($this->hashtable === null && $this->sha256 === 0 && $this->content === '' ) {
            $this->sha256 = $this->getSha256file();
        }
        if ($this->sha256 == 0) {
            $this->sha256 = hash('sha256', $this->getContent());
        }
        return $this->sha256;
    }

    /**
     * @return int|mixed
     */
    public function getUid()
    {
        if ($this->uid === false) {
            $this->_setStat();
        }
        return $this->uid;
    }

    /**
     * @return int|mixed
     */
    public function getGid()
    {
        if ($this->gid === false) {
            $this->_setStat();
        }
        return $this->gid;
    }

    /**
     * @return int|mixed
     */
    public function getMode()
    {
        if ($this->mode === false) {
            $this->_setStat();
        }
        return $this->mode;
    }
}



class HashTable
{
    private $hashes = [];

    public function add($paths, $hashes)
    {
        $this->hashes[0] = $paths;
        $this->hashes[1] = $hashes;
    }

    public function get($filename)
    {
        $index = array_search($filename, $this->hashes[0]);
        if ($index === false) {
            return false;
        }
        return $this->hashes[1][$index];
    }
}


class Finder
{
    const MAX_ALLOWED_PHP_HTML_IN_DIR = 600;

    private $sym_links              = [];
    private $skipped_folders        = [];
    private $doorways               = [];
    private $big_files              = [];
    private $big_elf_files          = [];

    private $collect_skipped        = false;
    private $collect_symLinks       = false;
    private $collect_doorways       = false;
    private $collect_bigfiles       = false;
    private $collect_bigelffiles    = false;

    private $total_dir_counter      = 0;
    private $total_files_counter    = 0;
    private $checked_hashes         = [];

    private $initial_dir            = '';
    private $initial_level          = null;
    private $level_limit            = null;

    private $filter;
    private $total                  = 0;

    public function __construct($filter = null, $level_limit = null)
    {
        $this->filter = $filter;
        $this->level_limit = $level_limit;
    }

    private function linkResolve($path)
    {
        return realpath($path);
    }

    private function resolve($path, $follow_symlinks)
    {
        if (!$follow_symlinks || !is_link($path)) {
            return $path;
        }
        return $this->linkResolve($path);
    }

    private function isPathCheckedAlready($path)
    {
        $root_hash = crc32($path);
        if (isset($this->checked_hashes[$root_hash])) {
            return true;
        }
        $this->checked_hashes[$root_hash] = '';
        return false;
    }

    private function walk($path, $follow_symlinks)
    {
        $level = substr_count($path, '/');
        if (isset($this->level_limit) && (($level - $this->initial_level + 1) > $this->level_limit)) {
            return;
        }
        $l_DirCounter          = 0;
        $l_DoorwayFilesCounter = 0;

        if ($follow_symlinks && $this->isPathCheckedAlready($path)) {
            return;
        }

        # will not iterate dir, if it should be ignored
        if (!$this->filter->needToScan($path, false, true)) {
            if ($this->collect_skipped) {
                $this->skipped_folders[] = $path;
            }
            return;
        }
        $dirh = @opendir($path);
        if ($dirh === false) {
            return;
        }

        while (($entry = readdir($dirh)) !== false) {
            if ($entry === '.' || $entry === '..') {
                continue;
            }
            $entry = $path . DIRECTORY_SEPARATOR . $entry;
            if (is_link($entry)) {

                if ($this->collect_symLinks) {
                    $this->sym_links[] = $entry;
                }

                if (!$follow_symlinks) {
                    continue;
                }
                $real_path = $this->resolve($entry, true);
            } else {
                $real_path = realpath($entry);
            }
            if (is_dir($entry)) {
                $l_DirCounter++;
                if ($this->collect_doorways && $l_DirCounter > self::MAX_ALLOWED_PHP_HTML_IN_DIR) {
                    $this->doorways[]  = $path;
                    $l_DirCounter = -655360;
                }
                $this->total_dir_counter++;
                yield from $this->walk($real_path, $follow_symlinks);
            } else if (is_file($entry)) {
                $stat = stat($entry);
                if (!$stat) {
                    continue;
                }
                if ($this->collect_doorways && is_callable([$this->filter, 'checkShortExt']) && $this->filter->checkShortExt($entry)) {
                    $l_DoorwayFilesCounter++;
                    if ($l_DoorwayFilesCounter > self::MAX_ALLOWED_PHP_HTML_IN_DIR) {
                        $this->doorways[]           = $path;
                        $l_DoorwayFilesCounter = -655360;
                    }
                }
                if ($follow_symlinks && $this->isPathCheckedAlready($real_path)) {
                    continue;
                }
                if ($this->collect_bigfiles && is_callable([$this->filter, 'checkIsBig']) && $this->filter->checkIsBig($real_path)) {
                    $this->big_files[] = $real_path;
                }
                if ($this->collect_bigelffiles
                    && is_callable([$this->filter, 'checkIsBig']) && $this->filter->checkIsBig($real_path)
                    && is_callable([$this->filter, 'checkIsElf']) && $this->filter->checkIsElf($real_path)
                    && $this->filter->needToScan($real_path, false, false, ['check_size_range'])
                ) {
                    $this->big_elf_files[] = $real_path;
                }
                $need_to_scan = $this->filter->needToScan($real_path, $stat);
                $this->total_files_counter = $need_to_scan ? $this->total_files_counter + 1 : $this->total_files_counter;
                $this->total++;
                 if (class_exists('Progress')) {
                     Progress::setCurrentFile($real_path);
                     Progress::setFilesTotal($this->total_files_counter);
                     Progress::updateList($this->total);
                }
                if ($need_to_scan) {
                    yield $real_path;
                }
            }
        }
        closedir($dirh);
    }

    private function expandPath($path, $follow_symlinks)
    {
        if ($path) {
            if (is_dir($path)) {
                yield from $this->walk($path, $follow_symlinks);
            } else {
                if ($this->collect_bigfiles && is_callable([$this->filter, 'checkIsBig']) && $this->filter->checkIsBig($path)) {
                    $this->big_files[] = $path;
                    if ($this->collect_bigelffiles && is_callable([$this->filter, 'checkIsElf']) && $this->filter->checkIsElf($path)
                        && $this->filter->needToScan($path, false, false, ['check_size_range'])) {
                        $this->big_elf_files[] = $path;
                    }
                }
                $need_to_scan = $this->filter->needToScan($path);
                if ($need_to_scan) {
                    yield $path;
                }
            }
        }
    }

    public function find($target)
    {
        $started = microtime(true);

        if ($target === '/') {
            $target = '/*';
        }
        if (is_string($target) && substr($target, -1) === DIRECTORY_SEPARATOR) {
            $target = substr($target, 0, -1);
        }

        if (is_callable([$this->filter, 'getGenerated']) && !$this->filter->getGenerated()
            && is_callable([$this->filter, 'generateCheckers'])
        ) {
            $this->filter->generateCheckers();
        }

        if (class_exists('Progress')) {
            Progress::setStage(Progress::STAGE_LIST);
        }

        $paths = is_array($target) ? $target : new GlobIterator($target, FilesystemIterator::CURRENT_AS_PATHNAME);
        foreach ($paths as $path) {
            $this->initial_dir = realpath($path);
            $this->initial_level = substr_count($this->initial_dir, '/');
            $path = $this->resolve($path, $this->filter->isFollowSymlink());
            yield from $this->expandPath($path, $this->filter->isFollowSymlink());
        }

        if (class_exists('PerfomanceStats')) {
            PerfomanceStats::addPerfomanceItem(PerfomanceStats::FINDER_STAT, microtime(true) - $started);
        }
    }

    private function convertTemplatesToRegexp($templates)
    {
        return '~(' . str_replace([',', '.', '*'], ['|', '\\.', '.*'], $templates) . ')~i';
    }

    public function setLevelLimit($level)
    {
        $this->level_limit = $level;
    }

    public function getSymlinks()
    {
        return $this->sym_links;
    }

    public function getBigFiles()
    {
        return $this->big_files;
    }

    public function getBigElfFiles()
    {
        return $this->big_elf_files;
    }

    public function setCollectDoorways($flag)
    {
        $this->collect_doorways = $flag;
    }

    public function setCollectBigElfs($flag)
    {
        $this->collect_bigelffiles = $flag;
    }

    public function setCollectSymlinks($flag)
    {
        $this->collect_symLinks = $flag;
    }

    public function setCollectSkipped($flag)
    {
        $this->collect_skipped = $flag;
    }

    public function setCollectBigFiles($flag)
    {
        $this->collect_bigfiles = $flag;
    }

    public function getDoorways()
    {
        return $this->doorways;
    }

    public function skippedDirs()
    {
        return $this->skipped_folders;
    }

    public function getTotalDirs()
    {
        return $this->total_dir_counter;
    }

    public function getTotalFiles()
    {
        return $this->total_files_counter;
    }

    public function getFilter()
    {
        return $this->filter;
    }
}

class FileFilter
{
    const IMUNIFY_CLEANUP_STORAGE = '/var/imunify360/cleanup_storage';
    const LOG_AND_MAIL_PATTERN = [
        '/sess\_\w*$',
        '/stat/usage\_\w+\.html',
        '/stat/site\_\w+\.html',
        '/webstat/awstats.*\.txt',
        '/awstats/awstats.*\.txt',
        '/awstats/.{1,80}\.pl',
        '/awstats/.{1,80}\.html',
        '/logs/error\_log\..*',
        '/logs/xferlog\..*',
        '/logs/access\_log\..*',
        '/domlogs/.+',
        '/logs/cron\..*',
        '/logs/exceptions/.+\.log(?:\.\d)?(?:\.gz)?$',
        '/mail(?:/[^/]+)*/[^,]+,S=[^,]+,W=.+',
        '/mail(?:/[^/]+)*/[^,]+,S=.+',
        '/mail(?:/[^/]+)*/storage/u\.[0-9]+',
        '/mail(?:/[^/]+)*/storage/m\.[0-9]+',
        '/Maildir(?:/[^/]+)*/[^,]+,S=[^,]+,W=.+',
        '/Maildir(?:/[^/]+)*/[^,]+,S=.+',
        '^/var/ossec/.*',
    ];

    const IMUNIFY_LOG_PATTERN = [
        '/var/log/imunify360/acronis-installer\.log$',
        '/var/log/imunify360/console\.log(?:\.\d)?(?:\.gz)?$',
        '/var/log/imunify360/debug\.log$',
        '/var/log/imunify360/error\.log$',
        '/var/log/install-mod\_remoteip\.log(?:\.\d{1.4})?(?:\.pid)?r$',
        '/var/log/imunify360/malware\_scan\_\d{10}\.log$',
        '/var/log/imunify360/network\.log$',
        '/var/log/imunify360/process\_message\.log$',
        '/var/log/imunify360-webshield/access.log(?:-\d{8})?(?:.gz)?$',
        '/var/log/imunify360-webshield/error.log(?:-\d{8})?(?:.gz)?$',
        '/.revisium_antivirus_cache/.revisium\d+/',
        '/admin/plib/modules/revisium-antivirus/library/externals/',
    ];

    const IMUNIFY_DIRS = [
        '/etc/cagefs/conf.d/ai-bolit.cfg',
        '/etc/cagefs/conf.d/clamav.cfg',
        '/etc/cagefs/exclude/imunify360',
        '/etc/chkserv.d/imunify-antivirus',
        '/etc/chkserv.d/imunify360-agent',
        '/etc/cron.daily/imunify-antivirus.cron',
        '/etc/cron.daily/imunify360.cron',
        '/etc/imunify360-webshield',
        '/etc/imunify360',
        '/etc/logrotate.d/imunify360',
        '/etc/nginx/conf.d/i360.remoteip.conf',
        '/etc/sysconfig/imunify360',
        '/opt/ai-bolit',
        '/opt/alt/python35/bin/imunify360-agent',
        '/opt/alt/python35/bin/imunify360-command-wrapper',
        '/opt/alt/python35/lib/python3.5/site-packages/defence360agent',
        '/opt/alt/python35/share/imunify360',
        '/run/chkservd/imunify360-webshield',
        '/run/chkservd/restart_track/imunify360-webshield',
        '/run/imunify360-webshield.pid',
        '/usr/bin/imunify-antivirus',
        '/usr/bin/imunify360-agent',
        '/usr/bin/imunify360-command-wrapper',
        '/usr/lib/systemd/system/imunify-antivirus.service',
        '/usr/lib/systemd/system/imunify360-pure.service',
        '/usr/lib/systemd/system/imunify360-webshield',
        '/usr/lib/systemd/system/imunify360.service',
        '/usr/local/cpanel/base/frontend/paper_lantern/imunify',
        '/usr/local/directadmin/plugins/Imunify',
        '/usr/sbin/imunify360-webshield',
        '/var/cache/imunify360-webshield',
        '/var/cpanel/apps',
        '/var/imunify360',
        '/var/log/cloudlinux-backup-util'
    ];

    const SHORT_LIST_EXT = [
        'php',
        'php3',
        'php4',
        'php5',
        'php7',
        'pht',
        'html',
        'htm',
        'phtml',
        'shtml',
        'khtml',
        '',
        'ico',
        'txt'
    ];

    const SUSPICIOUS_EXT = [
        'cgi',
        'pl',
        'o',
        'so',
        'py',
        'sh',
        'phtml',
        'php3',
        'php4',
        'php5',
        'php6',
        'php7',
        'pht',
        'shtml'
    ];

    private $sensitiveExt = [
        'php',
        'js',
        'json',
        'htaccess',
        'html',
        'htm',
        'tpl',
        'inc',
        'css',
        'txt',
        'sql',
        'ico',
        '',
        'susp',
        'suspected',
        'zip',
        'tar'
    ];

    const SKIP_SMART_MASK = [
        '/template_\w{32}.css',
        '/cache/templates/.{1,150}\.tpl\.php',
        '/system/cache/templates_c/\w{1,40}\.php',
        '/assets/cache/rss/\w{1,60}',
        '/cache/minify/minify_\w{32}',
        '/cache/page/\w{32}\.php',
        '/cache/object/\w{1,10}/\w{1,10}/\w{1,10}/\w{32}\.php',
        '/cache/wp-cache-\d{32}\.php',
        '/cache/page/\w{32}\.php_expire',
        '/cache/page/\w{32}-cache-page-\w{32}\.php',
        '\w{32}-cache-com_content-\w{32}\.php',
        '\w{32}-cache-mod_custom-\w{32}\.php',
        '\w{32}-cache-mod_templates-\w{32}\.php',
        '\w{32}-cache-_system-\w{32}\.php',
        '/cache/twig/\w{1,32}/\d+/\w{1,100}\.php',
        '/autoptimize/js/autoptimize_\w{32}\.js',
        '/bitrix/cache/\w{32}\.php',
        '/bitrix/cache/.{1,200}/\w{32}\.php',
        '/bitrix/cache/iblock_find/',
        '/bitrix/managed_cache/MYSQL/user_option/[^/]+/',
        '/bitrix/cache/s1/bitrix/catalog\.section/',
        '/bitrix/cache/s1/bitrix/catalog\.element/',
        '/bitrix/cache/s1/bitrix/menu/',
        '/catalog.element/[^/]+/[^/]+/\w{32}\.php',
        '/bitrix/managed\_cache/.{1,150}/\.\w{32}\.php',
        '/core/cache/mgr/smarty/default/.{1,100}\.tpl\.php',
        '/core/cache/resource/web/resources/[0-9]{1,50}\.cache\.php',
        '/smarty/compiled/SC/.{1,100}/%%.{1,200}\.php',
        '/smarty/.{1,150}\.tpl\.php',
        '/smarty/compile/.{1,150}\.tpl\.cache\.php',
        '/files/templates_c/.{1,150}\.html\.php',
        '/uploads/javascript_global/.{1,150}\.js',
        '/assets/cache/rss/\w{32}',
        'сore/cache/resource/web/resources/\d+\.cache\.php',
        '/assets/cache/docid_\d+_\w{32}\.pageCache\.php',
        '/t3-assets/dev/t3/.{1,150}-cache-\w{1,20}-.{1,150}\.php',
        '/t3-assets/js/js-\w{1,30}\.js',
        '/temp/cache/SC/.{1,100}/\.cache\..{1,100}\.php',
        '/tmp/sess\_\w{32}$',
        '/assets/cache/docid\_.{1,100}\.pageCache\.php',
        '/stat/usage\_\w{1,100}\.html',
        '/stat/site\_\w{1,100}\.html',
        '/gallery/item/list/\w{1,100}\.cache\.php',
        '/core/cache/registry/.{1,100}/ext-.{1,100}\.php',
        '/core/cache/resource/shk\_/\w{1,50}\.cache\.php',
        '/cache/\w{1,40}/\w+-cache-\w+-\w{32,40}\.php',
        '/webstat/awstats.{1,150}\.txt',
        '/awstats/awstats.{1,150}\.txt',
        '/awstats/.{1,80}\.pl',
        '/awstats/.{1,80}\.html',
        '/inc/min/styles_\w+\.min\.css',
        '/inc/min/styles_\w+\.min\.js',
        '/logs/error\_log\.', '/logs/xferlog\.',
        '/logs/access_log\.',
        '/logs/cron\.',
        '/logs/exceptions/.{1,200}\.log$',
        '/hyper-cache/[^/]{1,50}/[^/]{1,50}/[^/]{1,50}/index\.html',
        '/mail/new/[^,]+,S=[^,]+,W=',
        '/mail/new/[^,]=,S=',
        '/application/logs/\d+/\d+/\d+\.php',
        '/sites/default/files/js/js_\w{32}\.js',
        '/yt-assets/\w{32}\.css',
        '/wp-content/cache/object/\w{1,5}/\w{1,5}/\w{32}\.php',
        '/catalog\.section/\w{1,5}/\w{1,5}/\w{32}\.php',
        '/simpla/design/compiled/[\w\.]{40,60}\.php',
        '/compile/\w{2}/\w{2}/\w{2}/[\w.]{40,80}\.php',
        '/sys-temp/static-cache/[^/]{1,60}/userCache/[\w\./]{40,100}\.php',
        '/session/sess_\w{32}',
        '/webstat/awstats\.[\w\./]{3,100}\.html',
        '/stat/webalizer\.current',
        '/stat/usage_\d+\.html'
    ];

    protected $zipFile = false;

    private $ignoreExt              = [];
    private $ignoreListPatterns     = [];

    private $ignoreList             = null;
    private $ignoreFilenameByRegexp = null;
    private $onlyFilepathRegexp     = null;
    private $skipFilesOlder         = null;
    private $initialDir             = null;

    private $file_checkers          = [];
    private $dir_checkers           = [];
    private $excludes               = [];

    private $check_is_not_root;
    private $check_is_not_system;
    private $check_is_file;
    private $ignore_quar;
    private $check_file_older;
    private $check_ignore_file;
    private $check_ignore_filename_template;
    private $check_only_filepath_template;
    private $check_scope;
    private $check_ext;
    private $ignore_ext;
    private $check_short_ext;
    private $ignore_path_pattern;
    private $check_size_range;

    private $skipRootOwner          = false;
    private $skipSystemOwner        = false;
    private $skipImunifyStorage     = false;
    private $followSymlink          = false;
    private $ignoreQuarantine       = false;
    private $scanAllExt             = false;
    private $smartScan              = false;
    private $imunify_filters        = false;
    private $ignorePathPattern      = true;
    private $defaultExcludes        = true;

    private $ignored_av_admin_paths = false;
    private $generated              = false;
    private $size_range             = [];
    private $uid_range              = [];

    private $ignored_av_admin                   = null;
    private $ignored_av_admin_file_exists       = null;
    private $ignored_av_internal                = null;
    private $ignored_av_internal_file_exists    = null;
    private $admin_watched                      = null;

    private $ignore_symlink     = true;
    private $match_patterns     = [];
    private $no_match_patterns  = [];

    private $ignored_av_admin_file      = '/etc/sysconfig/imunify360/malware-filters-admin-conf/processed/ignored/av-admin.txt';
    private $ignored_avadmin_paths_file = '/etc/sysconfig/imunify360/malware-filters-admin-conf/processed/ignored/av-admin-paths.txt';
    private $ignored_av_internal_file   = '/etc/sysconfig/imunify360/malware-filters-admin-conf/processed/ignored/av-internal.txt';
    private $admin_watched_file         = '/etc/sysconfig/imunify360/malware-filters-admin-conf/admin/watched.txt';
    private $basedirs_file              = '/etc/sysconfig/imunify360/malware-filters-admin-conf/processed/basedirs-list.txt';

    private function getIgnoredAVAdminFileExists()
    {
        if (is_null($this->ignored_av_admin_file_exists)) {
            $this->ignored_av_admin_file_exists = file_exists($this->ignored_av_admin_file) && is_readable($this->ignored_av_admin_file);
        }
        return $this->ignored_av_admin_file_exists;
    }

    private function getIgnoredAVInternalFileExists() 
    {
        if (is_null($this->ignored_av_internal_file_exists)) {
            $this->ignored_av_internal_file_exists = file_exists($this->ignored_av_internal_file) && is_readable($this->ignored_av_internal_file);
        }
        return $this->ignored_av_internal_file_exists;
    }

    private function getIgnoredAVAdmin()
    {
        if (!$this->getIgnoredAVAdminFileExists()) {
            return null;
        }
        if (is_null($this->ignored_av_admin)) {
            $this->ignored_av_admin = trim(file_get_contents($this->ignored_av_admin_file));
        }
        return $this->ignored_av_admin;
    }

    private function addToIgnoreTree($path)
    {
        $tree = $this->getTree($path, true);
        $_path = &$this->ignored_av_admin_paths;
        for ($i = count($tree) - 1; $i >= 0; $i--) {
            if ($tree[$i] === '') {
                continue;
            }
            if (!isset($_path[$tree[$i]])) {
                $_path[$tree[$i]] = null;
            }
            if ($_path[$tree[$i]] === true) {
                return;
            }
            if ($i === 0) {
                $_path[$tree[$i]] = true;
            }
            $_path = &$_path[$tree[$i]];
        }
    }

    private function checkAVAdminPathsIgnored($path)
    {
        if ($this->ignored_av_admin_paths === false) {
            return false;
        }
        $tree = $this->getTree($path, true);
        $_path = &$this->ignored_av_admin_paths;
        for ($i = count($tree) - 1; $i >= 0; $i--) {
            if ($tree[$i] === '') {
                continue;
            }
            if (!isset($_path[$tree[$i]])) {
                return false;
            }
            if ($_path[$tree[$i]] === true) {
                return true;
            }
            $_path = &$_path[$tree[$i]];
        }
        return false;
    }

    private function loadIgnoredAVAdminPaths()
    {
        $file = new SplFileObject($this->ignored_avadmin_paths_file, 'r');
        $file->setFlags(SplFileObject::DROP_NEW_LINE | SplFileObject::SKIP_EMPTY | SplFileObject::READ_AHEAD);
        foreach ($file as $path) {
            if ($path) {
                $this->addToIgnoreTree(base64_decode($path));
            }
        }
    }

    private function getIgnoredAVInternal()
    {
        if (!$this->getIgnoredAVInternalFileExists()) {
            return null;
        }
        if (is_null($this->ignored_av_internal)) {
            $this->ignored_av_internal = trim(file_get_contents($this->ignored_av_internal_file));
        }
        return $this->ignored_av_internal;
    }

    private function getBaseDirs()
    {
        return file($this->basedirs_file, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
    }

    private function fixTrailingSlash($path)
    {
        if ($path[0] !== '/') {
            $path = '/' . $path;
        }
        return $path;
    }

    private function resolveBaseDirs($basedirs, $path)
    {
        $result = [];
        $tmp = substr($path, 1);
        $tmp = $this->fixTrailingSlash($tmp);
        foreach ($basedirs as $dir) {
            $result[] = $dir . $tmp;
        }
        return $result;
    }

    private function processWatchedItems($basedirs, $paths)
    {
        $result = [];
        foreach ($paths as $item) {
            $item = trim($item);
            if ($item[0] === '#') {
                continue;
            } else if ($item[0] === '+') {
                $result = array_merge($result, $this->resolveBaseDirs($basedirs, $item));
            } else {
                $result[] = $item;
            }
        }
        return $result;
    }

    private function getAdminWatched()
    {
        if (is_null($this->admin_watched)) {
            $this->admin_watched = [];
            $basedirs = $this->getBaseDirs();
            $paths = file($this->admin_watched_file, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
            $this->admin_watched = $this->processWatchedItems($basedirs, $paths);
        }
        return $this->admin_watched;
    }

    public function setSmartScan()
    {
        $this->smartScan = true;
    }

    public function isSmartScan()
    {
        return $this->smartScan;
    }

    public function setImunifyFilters()
    {
        if ($this->getIgnoredAVAdminFileExists() || $this->getIgnoredAVInternalFileExists()) {
            $this->imunify_filters = true;
        }
    }

    public function setSkipImunifyStorage()
    {
        $this->skipImunifyStorage = true;
        $this->addToExcludes(self::IMUNIFY_CLEANUP_STORAGE);
    }

    public function setScanAll()
    {
        $this->scanAllExt = true;
    }

    public function setSizeRange($min, $max)
    {
        $this->size_range[0] = $min;
        $this->size_range[1] = $max;
    }

    public function setIgnoreExt($ext_list)
    {
        if (!$ext_list) {
            return;
        }

        $this->ignoreExt = explode(',', $ext_list);
        for ($i = 0, $iMax = count($this->ignoreExt); $i < $iMax; $i++) {
            $this->ignoreExt[$i] = trim($this->ignoreExt[$i]);
        }
        $this->ignoreExt = array_flip($this->ignoreExt);
    }

    public function getIgnoreExt()
    {
        return array_flip($this->ignoreExt);
    }

    public function setSensitiveExt($ext_list)
    {
        if (!$ext_list) {
            return;
        }

        $this->sensitiveExt = explode(",", $ext_list);
        for ($i = 0, $iMax = count($this->sensitiveExt); $i < $iMax; $i++) {
            if ($this->sensitiveExt[$i] == '.') {
                $this->sensitiveExt[$i] = '';
            }
        }
        $this->sensitiveExt = array_flip($this->sensitiveExt);
    }

    public function getSensitiveExt()
    {
        return array_flip($this->sensitiveExt);
    }

    public function setIgnoreListPatterns($filepath)
    {
        if (!file_exists($filepath) || !is_file($filepath) || !is_readable($filepath)) {
            return;
        }
        $this->ignoreListPatterns = [];
        $content = file_get_contents($filepath);
        $list = explode("\n", $content);
        foreach ($list as $pattern) {
            if (trim($pattern) == '') {
                continue;
            }
            $this->ignoreListPatterns[] = $pattern;
        }
    }

    public function __construct()
    {
        $this->sensitiveExt = array_merge($this->sensitiveExt, self::SUSPICIOUS_EXT);
        $this->sensitiveExt = array_flip($this->sensitiveExt);

        $this->ignore_quar = function ($file) {
            if (strpos($file, '/.imunify.quarantined') !== false) {
                $st = stat($file);
                if (!$st) {
                    return false;
                }
                return $st['uid'] !== 0;
            }
            return true;
        };

        $this->ignore_excludes = function ($file) {
            $tree = $this->getTree($file);
            if ($this->pathRelatesTo($tree, $this->excludes)) {
                return false;
            }
            return true;
        };

        $this->check_file_older = function ($file) {
            return (@filemtime($file) > $this->skipFilesOlder) || (@filectime($file) > $this->skipFilesOlder);
        };

        $this->check_ignore_file = function ($file) {
            $tree = $this->getTree($file);
            if ($this->pathRelatesTo($tree, $this->ignoreList, true)) {
                return false;
            }
            return true;
        };

        $this->check_ignore_filename_template = function ($file) {
            return !preg_match($this->ignoreFilenameByRegexp, basename($file));
        };

        $this->check_only_filepath_template = function ($file) {
            return preg_match($this->onlyFilepathRegexp, $file);
        };

        $this->check_is_not_root = function ($file) {
            $stat = stat($file);
            return $stat['gid'] !== 0 && $stat['uid'] !== 0;
        };

        $this->check_is_not_system = function ($file) {
            if (!$this->skipSystemOwner) {
                return true;
            }
            $stat = stat($file);
            return ($stat['uid'] >= $this->uid_range[0] && $stat['uid'] <= $this->uid_range[1]);
        };

        $this->check_is_file = function ($file) {
            return file_exists($file) && is_file($file) && is_readable($file);
        };

        $this->check_size_range = function ($file, $stat = false) {
            if (empty($this->size_range)) {
                return true;
            }
            if ($stat && $this->zipFile) {
                $filesize = $stat['size'];
            } else {
                $filesize = filesize($file);
            }
            return ($filesize >= $this->size_range[0] && $filesize <= $this->size_range[1]);
        };

        $this->check_file_patterns = function ($file) {
            foreach($this->match_patterns as $pattern) {
                $match = fnmatch($pattern, $file);
                if ($match) {
                    return $match;
                }
            }
            return false;
        };

        $this->check_file_not_patterns = function ($file) {
            foreach($this->no_match_patterns as $pattern) {
                $match = fnmatch($pattern, $file);
                if ($match) {
                    return !$match;
                }
            }
            return true;
        };

        $this->ignore_symlink = function ($file) {
            return !is_link($file);
        };

        $this->check_scope = function ($file) {
            return strpos($file, $this->initialDir) === 0;
        };

        $this->ignore_dots = function ($file) {
            return !($file == '.' || $file == '..');
        };

        $this->check_ext = function ($file) {
            if ($this->scanAllExt) {
                return true;
            }
            $ext = strtolower(pathinfo($file, PATHINFO_EXTENSION));
            return isset($this->sensitiveExt[$ext]);
        };

        $this->ignore_ext = function ($file) {
            $ext = strtolower(pathinfo($file, PATHINFO_EXTENSION));
            return !isset($this->ignoreExt[$ext]);
        };

        $this->check_short_ext = function ($file) {
            $ext = strtolower(pathinfo($file, PATHINFO_EXTENSION));
            return in_array($ext, self::SHORT_LIST_EXT);
        };

        $this->ignore_path_pattern = function ($file) {
            foreach ($this->ignoreListPatterns as $pattern) {
                if (($pattern != '') && preg_match('#' . $pattern . '#', $file)) {
                    return false;
                }
            }
            return true;
        };

        $this->imunify_filter = function ($file) {
            $av_admin_regexps = $this->getIgnoredAVAdmin();
            if (!is_null($av_admin_regexps) && preg_match('~' . $av_admin_regexps . '~msi', $file)) {
                return false;
            }
            
            if ($this->checkAVAdminPathsIgnored($file)) {
                return false;
            }

            $av_internal_regexps = $this->getIgnoredAVInternal();
            if (!is_null($av_internal_regexps) && preg_match('~' . $av_internal_regexps . '~msi', $file)) {
                foreach ($this->getAdminWatched() as $rec_watched) {
                    if (fnmatch($rec_watched, $file)) {
                        return true;
                    }
                }
                return false;
            }
            return true;
        };

        $this->file_checkers[] = $this->check_is_file;
        $this->file_checkers[] = $this->check_size_range;
        $this->file_checkers[] = $this->check_ext;
        $this->dir_checkers[] = $this->ignore_dots;
    }

    public function setIgnoreListFile($filepath)
    {
        if (!file_exists($filepath) || !is_file($filepath) || !is_readable($filepath)) {
            return;
        }
        $this->ignoreList = [];
        $content = file_get_contents($filepath);
        $list = explode("\n", $content);
        foreach ($list as $base64_filepath) {
            if ($base64_filepath !== '') {
                $this->ignoreList[$base64_filepath] = '';
            }
        }
    }

    public function addToExcludes($path)
    {
        $this->excludes[$path] = '';
    }

    public function setExcludes($paths)
    {
        $this->excludes = array_flip($paths);
    }

    public function setIgnoreFilenames($templates)
    {
        if (!$templates) {
            return;
        }

        $this->no_match_patterns = explode(',', $templates);
        for ($i = 0, $iMax = count($this->no_match_patterns); $i < $iMax; $i++) {
            $this->no_match_patterns[$i] = trim($this->no_match_patterns[$i]);
        }
    }

    public function setOnlyFilepaths($templates)
    {
        if (empty($templates)) {
            return;
        }
        $this->match_patterns = explode(',', $templates);
        for ($i = 0, $iMax = count($this->match_patterns); $i < $iMax; $i++) {
            $this->match_patterns[$i] = trim($this->match_patterns[$i]);
        }
    }

    public function setSkipFilesOlder($unix_timestamp)
    {
        $this->skipFilesOlder = $unix_timestamp;
    }

    public function setSkipRootOwner()
    {
        $this->skipRootOwner = true;
    }

    public function setUidRange($min_max_uid)
    {
        if (is_array($min_max_uid)) {
            $this->uid_range = $min_max_uid;
        }
    }

    public function setSkipSystemOwner($value)
    {
        $this->skipSystemOwner = $value;
    }

    public function setFollowSymlink()
    {
        $this->followSymlink = true;
    }

    public function isFollowSymlink()
    {
        return $this->followSymlink;
    }


    public function setIgnoreQuarantine()
    {
        $this->ignoreQuarantine = true;
    }

    public function setIgnorePathPattern($value)
    {
        $this->ignorePathPattern = $value;
    }

    public function setDefaultExcludes($value)
    {
        $this->defaultExcludes = $value;
    }

    public function generateCheckers()
    {
        $file_checkers = $this->file_checkers;
        if ($this->defaultExcludes) {
            $this->excludes = array_merge(array_flip(self::IMUNIFY_DIRS), $this->excludes);
        }
        if (!empty($this->excludes)) {
            $file_checkers[] = $this->ignore_excludes;
            $dir_checkers[] = $this->ignore_excludes;
        }
        if ($this->ignorePathPattern) {
            $file_checkers[] = $this->ignore_path_pattern;
        }
        if ($this->match_patterns) {
            $file_checkers[] = $this->check_file_patterns;
        }
        if ($this->no_match_patterns) {
            $file_checkers[] = $this->check_file_not_patterns;
        }
        if ($this->skipRootOwner) {
            $file_checkers[] = $this->check_is_not_root;
        }
        if ($this->skipSystemOwner && !empty($this->uid_range)) {
            $file_checkers[] = $this->check_is_not_system;
        }

        $dir_checkers = $this->dir_checkers;

        if ($this->ignorePathPattern) {
            $dir_checkers[] = $this->ignore_path_pattern;
        }

        if(!$this->followSymlink) {
            $dir_checkers[] = $this->ignore_symlink;
        }

        if ($this->ignoreQuarantine) {
            $dir_checkers[] = $this->ignore_quar;
        }

        if ($this->skipFilesOlder) {
            $file_checkers[] = $this->check_file_older;
        }

        if ($this->ignoreFilenameByRegexp) {
            $file_checkers[] = $this->check_ignore_filename_template;
        }

        if (!empty($this->ignoreList)) {
            $file_checkers[] = $this->check_ignore_file;
            $dir_checkers[] = $this->check_ignore_file;
        }

        if ($this->onlyFilepathRegexp) {
            $file_checkers[] = $this->check_only_filepath_template;
        }

        if (!empty($this->ignoreExt)) {
            $file_checkers[] = $this->ignore_ext;
        }

        if ($this->imunify_filters) {
            $file_checkers[] = $this->imunify_filter;
        }

        $this->ignoreListPatterns = array_merge($this->ignoreListPatterns, self::IMUNIFY_LOG_PATTERN, self::LOG_AND_MAIL_PATTERN);

        if($this->smartScan) {
            $this->ignoreListPatterns = array_merge($this->ignoreListPatterns, self::SKIP_SMART_MASK);
        }

        if ($this->imunify_filters && file_exists($this->ignored_avadmin_paths_file)) {
            $this->loadIgnoredAVAdminPaths();
        }

        $this->file_checkers = $file_checkers;
        $this->dir_checkers = $dir_checkers;
        $this->generated = true;
    }

    public function getFileCheckers()
    {
        return $this->file_checkers;
    }

    public function getDirCheckers()
    {
        return $this->dir_checkers;
    }

    private function funcInArray($func, $array)
    {
        foreach ($array as $item) {
            if ($this->$item === $func) {
                return true;
            }
        }
        return false;
    }

    private function check($file, $where, $stat = false, $skip_filters = [])
    {
        if (!$file) {
            return false;
        }
        if (!$stat) {
            $stat = stat($file);
        }
        foreach ($where as $func) {
            if(empty($func) || (!empty($skip_filters) && $this->funcInArray($func, $skip_filters))) {
                continue;
            }
            if (!$func($file, $stat)) {
                return false;
            }
        }
        return true;
    }

    public function needToScan($file, $stat = false, $only_dir = false, $skip_filters = [])
    {
        if (!$file) {
            return false;
        }

        if (!$stat) {
            $stat = @stat($file);
            if (!$stat) {
                return false;
            }
        }

        if (!$only_dir && !$this->check($file, $this->getFileCheckers(), $stat, $skip_filters)) {
            return false;
        }

        if (!$this->check($file, $this->getDirCheckers(), $stat, $skip_filters)) {
            return false;
        }

        return true;
    }

    private function getTree($file, $basename = false)
    {
        $tree = [];
        $path = $file;
        $tree[] = $basename ? basename($file) : $file;
        while ($path !== '.' && $path !== '/' && $path !== '') {
            $path = dirname($path, 1);
            $tree[] = $basename ? basename($path) : $path;
        }
        return $tree;
    }

    private function pathRelatesTo($tree, $pathes, $base64 = false)
    {
        foreach ($tree as $path) {
            if ($base64) {
                $path = base64_encode($path);
            }
            if (isset($pathes[$path])) {
                return true;
            }
        }
        return false;
    }

    public function checkShortExt($path)
    {
        return $this->check_short_ext->call($this, $path);
    }

    public function checkNotSystem($path)
    {
        return $this->check_is_not_system->call($this, $path);
    }

    public function checkIsBig($path)
    {
        $filesize = filesize($path);
        return ($filesize > $this->size_range[1]);
    }

    public function checkIsElf($path)
    {
        $header = @file_get_contents($path, false, null, 0, 4);
        return ($header === chr(127) . 'ELF');
    }

    public function getGenerated()
    {
        return $this->generated;
    }
    
}

/**
 * Class ScanList
 */
class ScanList extends \SplFileObject
{
    private $base64;
    private $skip_first_line;

    public function __construct($filepath, $base64 = false, $skip_first_line = false)
    {
        parent::__construct($filepath, 'r');
        $this->setFlags(SplFileObject::READ_AHEAD | SplFileObject::SKIP_EMPTY | SplFileObject::DROP_NEW_LINE);
        $this->base64 = $base64;
        $this->skip_first_line = $skip_first_line;
    }

    public function rewind()
    {
        parent::rewind();
        if ($this->skip_first_line) {
            parent::next();
        }
    }

    public function current()
    {
        return $this->base64 ? FilepathEscaper::decodeFilepathByBase64(parent::current()) : parent::current();
    }

    public function seek($line)
    {
        parent::seek(++$line);
    }

    public function count()
    {
        $this->seek($this->getSize());
        $size = $this->key();
        $this->seek(0);
        if ($this->skip_first_line) {
            $size--;
        }
        return $size;
    }
}


class Scanner
{
    private $addPrefix;
    private $noPrefix;
    private $finder;
    private $vars;
    private $debug;
    private $critical_fs;

    public function __construct($finder, $vars, $debug = null)
    {
        defined('SCAN_DELAY') ?: define('SCAN_DELAY', 0);

        $this->addPrefix    = isset($vars->options['addprefix']) ? $vars->options['addprefix'] : '';
        $this->noPrefix     = isset($vars->options['noprefix']) ? $vars->options['noprefix'] : '';;
        $this->finder       = $finder;
        $this->vars         = $vars;
        $this->suspicious   = isset($vars->options['with-suspicious']);
        $this->debug        = $debug;
        $this->critical_fs  = Factory::instance()->create(CriticalFileSpecification::class);
    }

    private function CloudAssitedFilter($files_list)
    {
        $black_files = [];
        $white_files = [];
        try {
            $car                = Factory::instance()->create(CloudAssistedRequest::class, [CLOUD_ASSIST_TOKEN]);
            $cloud_assist_files = new CloudAssistedFiles($car, $files_list, $this->vars);
            $white_files        = $cloud_assist_files->getWhiteList();
            $black_files        = $cloud_assist_files->getBlackList();
            unset($cloud_assist_files);
        }
        catch (\Exception $e) {
            fwrite(STDERR, 'Warning: [CAS] ' . $e->getMessage() . PHP_EOL);
            if (isset($this->debug)) {
                $this->debug->QCR_Debug($e->getMessage());
            }

        }
        $this->vars->blackFiles = @array_diff_assoc(array_merge($this->vars->blackFiles, $black_files), $white_files);
        return @array_diff($files_list, array_keys($black_files), array_keys($white_files));
    }

    public function QCR_ScanDirectories($l_RootDir)
    {
        static $l_Buffer = '';

        if (isset($this->debug)) {
            $this->debug->QCR_Debug('Scan ' . $l_RootDir);
        }
        
        $listFiles = $this->finder->find($l_RootDir);
        foreach ($listFiles as $l_FileName) {
            if (ONE_PASS) {
                $this->QCR_ScanFile($l_FileName, $this->vars, null, $this->vars->counter++);
            } else {
                $l_Buffer .= FilepathEscaper::encodeFilepathByBase64($l_FileName) . "\n";
            }

            $this->vars->counter++;

            if (strlen($l_Buffer) > 32000) {
                file_put_contents(QUEUE_FILENAME, $l_Buffer, FILE_APPEND) || die2("Cannot write to file " . QUEUE_FILENAME);
                $l_Buffer = '';
            }

        }

        $this->vars->symLinks        = $this->finder->getSymlinks();
        $this->vars->doorway         = $this->finder->getDoorways();
        $this->vars->foundTotalDirs  = $this->finder->getTotalDirs();
        $this->vars->foundTotalFiles = $this->finder->getTotalFiles();

        if (!empty($l_Buffer)
            && (isset($this->vars->options['use-template-in-path'])
                || $l_RootDir == ROOT_PATH
            )
        ) {
            file_put_contents(QUEUE_FILENAME, $l_Buffer, FILE_APPEND) || die2("Cannot write to file " . QUEUE_FILENAME);
            $l_Buffer = '';
        }
        unset($listFiles);
    }

    public function QCR_GoScan($s_file, $callback = null, $filters = false)
    {
        if (class_exists('Progress')) {
            Progress::setStage(Progress::STAGE_SCAN);
        }
        if (isset($this->debug)) {
            $this->debug->QCR_Debug('QCR_GoScan ');
        }
        try {

            $i = 0;
            $filesForCloudAssistedScan = [];

            if (defined('CLOUD_ASSIST_TOKEN') && defined('RAPID_ACCOUNT_SCAN')) {
                $cloud_assited_storage = Factory::instance()->create(CloudAssistedStorage::class, [RAPID_ACCOUNT_SCAN]);
                $storage = Factory::instance()->create(RapidScanStorage::class, [RAPID_ACCOUNT_SCAN]);
                /** @var RapidAccountScan $scanner */
                $scanner = Factory::instance()->create(RapidAccountScan::class, [$this, $storage, $cloud_assited_storage, &$this->vars, $i]);
                $scanner->scan($s_file, $this->vars, constant('RapidAccountScan::RESCAN_' . RAPID_ACCOUNT_SCAN_TYPE));
                if ($scanner->getStrError()) {
                    if (isset($this->debug)) {
                        $this->debug->QCR_Debug('Rapid scan log: ' . $scanner->getStrError());
                    }
                }
                $this->vars->rescanCount += $scanner->getRescanCount();
                $this->vars->rescanRxGood += $scanner->getRescanRxGoodCount();
                return;
            }

            $scan_bufer_files = function ($files_list, &$i) use ($callback) {
                $this->vars->hashtable = new HashTable();
                $files_to_scan = $this->CloudAssitedFilter($files_list);
                $this->vars->files_and_ignored += count($files_list) - count($files_to_scan);
                foreach ($files_to_scan as $filepath) {
                    $this->QCR_ScanFile($filepath, $this->vars, $callback, $i++);
                }
                $this->vars->hashtable = null;
            };

            foreach ($s_file as $index => $filepath) {
                if ($callback !== null) {
                    $this->callCallback($callback);
                }

                if ($filters instanceof FileFilter) {
                    if (!$filters->needToScan($filepath)) {
                        $this->vars->foundTotalFiles--;
                        continue;
                    }
                }

                $stat = stat($filepath);
                $filesize = $stat['size'];

                if (isset($this->vars->users)) {
                    $this->vars->users->add($stat['uid']);
                }

                if (substr($filepath, -1) == DIR_SEPARATOR || !defined('CLOUD_ASSIST_TOKEN')) {
                    $this->QCR_ScanFile($filepath, $this->vars, $callback, $i++);
                    continue;
                }

                if ($this->isFileTooBigForCloudscan($filesize)) {
                    $this->QCR_ScanFile($filepath, $this->vars, $callback, $i++);
                    continue;
                }

                // collecting files to scan with Cloud Assistant
                $filesForCloudAssistedScan[] = $filepath;
                if (count($filesForCloudAssistedScan) >= CLOUD_ASSIST_LIMIT) {
                    $scan_bufer_files($filesForCloudAssistedScan, $i);
                    $filesForCloudAssistedScan = [];
                }
            }

            if (count($filesForCloudAssistedScan)) {
                $scan_bufer_files($filesForCloudAssistedScan, $i);
            }

            unset($filesForCloudAssistedScan);

        } catch (Exception $e) {
            if (isset($this->debug)) {
                $this->debug->QCR_Debug($e->getMessage());
            }
        }
        if (class_exists('Progress')) {
            Progress::done();
        }
    }

    public function QCR_ScanFile($l_Filename, $vars, $callback = null, $i = 0, $show_progress = true)
    {
        $this->delayWithCallback(SCAN_DELAY, $callback);
        $return = [RapidScanStorageRecord::RX_GOOD, '', ''];
        $g_SkipNextCheck = false;

        if ($vars->fileinfo !== null) {
            if ($l_Filename !== $vars->fileinfo->getFilename()) {
                unset($file);
                $vars->fileinfo = null;
            }
        }

        if ($vars->fileinfo == null) {
            $file = new FileInfo($l_Filename, $i, $vars->hashtable);
            $vars->fileinfo = $file;
        }

        $file = $vars->fileinfo;

        $l_CriticalDetected = false;

        if (substr($l_Filename, -1) == DIR_SEPARATOR) {
            // FOLDER
            $vars->structure['n'][$i] = $l_Filename;
            $vars->totalFolder++;
            if (class_exists('Progress')) {
                Progress::setCurrentFile($l_Filename);
                Progress::setFilesTotal($vars->foundTotalFiles);
                Progress::setDetected([
                    Progress::DETECT_PHP => count($vars->criticalPHP),
                    Progress::DETECT_JS  => count($vars->criticalJS),
                    Progress::DETECT_SUS => count($vars->warningPHP),
                    Progress::DETECT_PHS => count($vars->phishing),
                ]);

                Progress::updateScan($vars->files_and_ignored);
            }
            unset($file);
            $vars->fileinfo = null;
            return null;
        }

        if (isset($this->debug)) {
            $this->debug->QCR_Debug('Scan file ' . $l_Filename);
        }

        if ($show_progress && class_exists('Progress')) {
            Progress::setCurrentFile($l_Filename);
            Progress::setFilesTotal($vars->foundTotalFiles);
            Progress::setDetected([
                Progress::DETECT_PHP => count($vars->criticalPHP),
                Progress::DETECT_JS  => count($vars->criticalJS),
                Progress::DETECT_SUS => count($vars->warningPHP),
                Progress::DETECT_PHS => count($vars->phishing),
            ]);
            Progress::updateScan(++$vars->files_and_ignored);
        }

        $l_Ext      = strtolower(pathinfo($l_Filename, PATHINFO_EXTENSION));
        $l_Content  = '';

        $check_heuristics = defined('USE_HEURISTICS') || defined('USE_HEURISTICS_SUSPICIOUS') || defined('USE_HEURISTICS_IGNORE');

        if ($check_heuristics && $file->isBinary()) {
            if (defined('USE_HEURISTICS_IGNORE')) {
                unset($file);
                $vars->fileinfo = null;
                return null;
            }
            
            $this->AddResult($file, $i, $vars);

            $heur_sig = 'SMW-HEUR-ELF';
            
            if (defined('USE_HEURISTICS')) {
                $vars->criticalPHP[]            = $i;
                $vars->criticalPHPFragment[]    = $heur_sig;
                $vars->criticalPHPSig[]         = $heur_sig;
            }
            elseif (defined('USE_HEURISTICS_SUSPICIOUS')) {
                $vars->warningPHP[]         = $i;
                $vars->warningPHPFragment[] = $heur_sig;
                $vars->warningPHPSig[]      = $heur_sig;
            }

            $return = [RapidScanStorageRecord::HEURISTIC, $heur_sig, $heur_sig];
            unset($file);
            $vars->fileinfo = null;
            return $return;
        }

        // FILE
        $is_too_big     = $this->isFileTooBigForScanWithSignatures($file->getSize());
        if ($file->getSize() === null) {
            fwrite(STDERR, 'Warning: Can\'t stat file '. $file->getFilename() . ', skipping.' . PHP_EOL);
            unset($file);
            $vars->fileinfo = null;
            return null;
        }
        $l_TSStartScan  = microtime(true);
        if (!MAX_SIZE_SCAN_BYTES && $is_too_big) {

            if (function_exists('aibolit_onBigFile')) {
                aibolit_onBigFile($l_Filename);
            }

        } else {
            $vars->totalFiles++;
            if (SMART_SCAN 
                && !MAX_SIZE_SCAN_BYTES 
                && !$is_too_big 
                && !$this->critical_fs->satisfiedBy($l_Ext, 'extensions')
                && !$file->isInteresting()
            ) {
                if (DEBUG_MODE) {
                    echo "Skipped file, not critical.\n";
                }
                $return = [RapidScanStorageRecord::RX_SKIPPED_SMART, '', ''];
                unset($file);
                $vars->fileinfo = null;
                unset($l_Unwrapped);
                unset($l_Content);
                return $return;
            }
            if (SKIP_DIE && $file->isLog()) {
                if (DEBUG_MODE) {
                    echo "Skipped file, is log.\n";
                }
                $return = [RapidScanStorageRecord::RX_SKIPPED_DIE, '', ''];
                unset($file);
                $vars->fileinfo = null;
                unset($l_Unwrapped);
                unset($l_Content);
                return $return;
            }
            $file_type = @filetype($l_Filename);
            $l_Unwrapped = '';
            if ($file_type === 'file' ||
                (isset($vars->options['follow-symlink']) && $file_type === 'link') ||
                (!$file_type && $vars->fileinfo instanceof ZipFileInfo)
            ) {
                if ($is_too_big && MAX_SIZE_SCAN_BYTES) {
                    $l_Content  = $file->getContentBytes(MAX_SIZE_SCAN_BYTES);
                } else {
                    $l_Content  = $file->getContent();
                }
                $l_Unwrapped = $file->getContentWithoutSpaces(MAX_SIZE_SCAN_BYTES);
            }
            if (SMART_SCAN && !$this->satisfiedBySmartScan($this->critical_fs, $l_Ext, $l_Content, 'extensions', 'critical_content')) {
                $return = [RapidScanStorageRecord::RX_SKIPPED_SMART, '', ''];
                unset($file);
                $vars->fileinfo = null;
                unset($l_Unwrapped);
                unset($l_Content);
                return $return;
            }
            if (($l_Content == '' || $l_Unwrapped == '') && $file->getSize() > 0) {
                $vars->notRead[] = $i;
                if (function_exists('aibolit_onReadError')) {
                    aibolit_onReadError($l_Filename, 'io');
                }
                $return = [RapidScanStorageRecord::CONFLICT, 'notread',''];
                $this->AddResult('[io] ' . $l_Filename, $i, $vars);
                unset($file);
                $vars->fileinfo = null;
                return $return;
            }

            // ignore itself
            if (strpos($l_Content, '9bbcd90fd1f7489c0ff57bbe569ab47e') !== false) {
                unset($file);
                $vars->fileinfo = null;
                return false;
            }

            $l_UnicodeContent = Encoding::detectUTFEncoding($l_Content);
            //$l_Unwrapped = $l_Content;

            // check vulnerability in files
            $l_CriticalDetected = $this->CheckVulnerability($l_Filename, $i, $l_Content, $vars);

            if ($l_UnicodeContent !== false) {
                if (Encoding::iconvSupported()) {
                    $l_Unwrapped = Encoding::convertToCp1251($l_UnicodeContent, $l_Unwrapped);
                } else {
                    $vars->notRead[] = $i;
                    if (function_exists('aibolit_onReadError')) {
                        aibolit_onReadError($l_Filename, 'ec');
                    }
                    $return = [RapidScanStorageRecord::CONFLICT, 'no_iconv', ''];
                    $this->AddResult('[ec] ' . $l_Filename, $i, $vars);
                }
            }

            // critical
            $g_SkipNextCheck = false;

            $started = microtime(true);

            if ((!AI_HOSTER) || AI_DEOBFUSCATE) {
                $l_DeobfObj = new Deobfuscator($l_Unwrapped, $l_Content);
                $l_DeobfType = $l_DeobfObj->getObfuscateType($l_Unwrapped);
            }

            if (isset($l_DeobfType) && $l_DeobfType != '') {
                $l_Unwrapped = $l_DeobfObj->deobfuscate();
                $g_SkipNextCheck = $this->checkFalsePositives($l_Filename, $l_Unwrapped, $l_DeobfType, $vars);
            } else {
                if (DEBUG_MODE) {
                    stdOut("\n...... NOT OBFUSCATED\n");
                }
            }
            if (class_exists('PerfomanceStats')) {
                PerfomanceStats::addPerfomanceItem(PerfomanceStats::DEOBF_STAT, microtime(true) - $started);
            }
            $l_Unwrapped = Normalization::normalize($l_Unwrapped);

            if (defined('HS') && !HyperScan::hs_precheck($l_Content, $l_Unwrapped, $this->suspicious)) {
                $return = [RapidScanStorageRecord::RX_GOOD, '', ''];
                if ($l_CriticalDetected) {
                    $this->AddResult($file, $i, $vars);
                }
                unset($file);
                $vars->fileinfo = null;
                unset($l_Unwrapped);
                unset($l_Content);
                return $return;
            }

            $processResult = function ($checker, $content, $l_Pos, $l_SigId, &$return) use (&$vars, $l_Ext, $i) {
                $checkers = [
                    'CriticalPHP'           =>     ['criticalPHP',  'criticalPHPFragment',  'criticalPHPSig'],
                    'CriticalPHP_2'         =>     ['criticalPHP',  'criticalPHPFragment',  'criticalPHPSig'],
                    'CriticalPHP_3'         =>     ['criticalPHP',  'criticalPHPFragment',  'criticalPHPSig'],
                    'CriticalPHP_4'         =>     ['criticalPHP',  'criticalPHPFragment',  'criticalPHPSig'],
                    'CriticalPHP_5'         =>     ['criticalPHP',  'criticalPHPFragment',  'criticalPHPSig'],
                    'CriticalPHPGIF'        =>     ['criticalPHP',  'criticalPHPFragment',  'criticalPHPSig'],
                    'CriticalPHPUploader'   =>     ['criticalPHP',  'criticalPHPFragment',  'criticalPHPSig'],
                    'CriticalJS'            =>     ['criticalJS',   'criticalJSFragment',   'criticalJSSig'],
                    'CriticalJS_PARA'       =>     ['criticalJS',   'criticalJSFragment',   'criticalJSSig'],
                    'WarningPHP'            =>     ['warningPHP',   'warningPHPFragment',   'warningPHPSig'],
                    'Phishing'              =>     ['phishing',     'phishingFragment',     'phishingSigFragment'],
                    'Adware'                =>     ['adwareList',   'adwareListFragment'],
                ];

                if (strpos($checker, 'Critical') !== false) {
                    if ($l_Ext === 'js') {
                        $checker = 'CriticalJS';
                    }
                    $return = [RapidScanStorageRecord::RX_MALWARE, $l_SigId, $this->getFragment($content, $l_Pos)];
                }

                if ($checker === 'WarningPHP' || $checker === 'Phishing') {
                    $return = [RapidScanStorageRecord::RX_SUSPICIOUS, $l_SigId, $this->getFragment($content, $l_Pos)];
                }

                $vars->{$checkers[$checker][0]}[] = $i;
                $vars->{$checkers[$checker][1]}[] = $this->getFragment($content, $l_Pos);
                if (isset($checkers[$checker][2])) {
                    $vars->{$checkers[$checker][2]}[] = $l_SigId;
                }
            };

            $l_Pos = 0;
            $l_SigId = '';
            if (!$g_SkipNextCheck) {
                $checkers['CriticalPHP'] = true;
                if (AI_EXPERT_MODE > 0) {
                    $checkers['CriticalPHP_3'] = true;
                }
                if (AI_EXPERT_MODE > 1) {
                    $checkers['CriticalPHP_2'] = true;
                }
                $checkers['CriticalPHP_4'] = true;
                if (AI_EXPERT_MODE > 0) {
                    $checkers['CriticalPHP_5'] = true;
                }
                if (!AI_HOSTER && AI_EXPERT > 0 && $l_Ext === 'php') {
                    $checkers['CriticalPHPGIF'] = true;
                }
                if (!AI_HOSTER && AI_EXPERT > 1 && strpos($l_Ext, 'ph') !== false) {
                    $checkers['CriticalPHPUploader'] = true;
                }
                $checkers['CriticalJS'] = false;
                if (AI_EXPERT_MODE > 1) {
                    $checkers['CriticalJS_PARA'] = false;
                }

                if ($this->suspicious) {
                    $checkers['WarningPHP'] = false;
                }

                if (!AI_HOSTER && $this->suspicious) {
                    $checkers['Phishing'] = true;
                    $checkers['Adware'] = false;
                }

                $g_SkipNextCheck = ScanUnit::QCR_ScanContent($checkers, $l_Unwrapped, $l_Content, $vars->signs, $this->debug, null,
                    $processResult, $return);
            }

            if (!$g_SkipNextCheck && isset($checkers['Adware'])) {
                // articles
                if (stripos($l_Filename, 'article_index')) {
                    $vars->adwareList[]     = $i;
                    $l_CriticalDetected = true;
                }
            }
        } // end of if (!$g_SkipNextCheck) {

        $this->delayWithCallback(SCAN_DELAY, $callback);
        if ($g_SkipNextCheck || $l_CriticalDetected) {
            $this->AddResult($file, $i, $vars);
        }

        unset($file);
        $vars->fileinfo = null;
        unset($l_Unwrapped);
        unset($l_Content);

        return $return;
    }

    private function callCallback($callback)
    {
        if ($callback !== null) {
            call_user_func($callback);
        }
    }

    private function delayWithCallback($delay, $callback)
    {
        $delay *= 1000;
        $this->callCallback($callback);
        while ($delay > 500000) {
            $delay -= 500000;
            usleep(500000);
            $this->callCallback($callback);
        }
        usleep($delay);
        $this->callCallback($callback);
    }

    /**
     * @param FileInfo $file
     * @param int $i
     * @param Variables $vars
     */
    public function AddResult($file, $i, $vars)
    {
        if (is_string($file)) {
            $vars->structure['n'][$i]   = $file;
            return;
        }
        $vars->structure['n'][$i]   = $file->getFilename();
        $vars->structure['s'][$i]   = $file->getSize();
        $vars->structure['c'][$i]   = $file->getCreated();
        $vars->structure['m'][$i]   = $file->getModified();
        $vars->structure['u'][$i]   = $file->getUid();
        $vars->structure['g'][$i]   = $file->getGid();
        $vars->structure['p'][$i]   = $file->getMode();
        $vars->structure['e'][$i]   = time();
        $vars->structure['crc'][$i] = $file->isBinary() ? $file->getSha1file() : $file->getHash();
        $vars->structure['sha256'][$i] = $file->getSha256();
    }

    public function prepareBigFilesToCriticalList($list, &$vars)
    {
        $base = isset($vars->structure['n']) ? count($vars->structure['n']) : 0;
        foreach ($list as $i => $fn) {
            $l_Ext = strtolower(pathinfo($fn, PATHINFO_EXTENSION));
            if ($this->critical_fs->satisfiedBy($l_Ext, 'extensions')) {
                $file = new FileInfo($fn, $base + $i);
                $vars->criticalPHP[]         = $file->getIndex();
                $vars->criticalPHPFragment[] = "BIG FILE. SKIPPED.";
                $vars->criticalPHPSig[]      = "big_1";
                $this->AddResult($file, $file->getIndex(), $vars);
            }
        }
    }

    public function prepareBigElfFilesToCriticalSusList($list, &$vars)
    {
        $base = isset($vars->structure['n']) ? count($vars->structure['n']) : 0;
        foreach ($list as $i => $fn) {
            $file = new FileInfo($fn, $base + $i);
            $heur_sig = 'SMW-HEUR-ELF';
            if (defined('USE_HEURISTICS')) {
                $vars->criticalPHP[]            = $file->getIndex();
                $vars->criticalPHPFragment[]    = $heur_sig;
                $vars->criticalPHPSig[]         = $heur_sig;
            }
            elseif (defined('USE_HEURISTICS_SUSPICIOUS')) {
                $vars->warningPHP[]         = $file->getIndex();
                $vars->warningPHPFragment[] = $heur_sig;
                $vars->warningPHPSig[]      = $heur_sig;
            }
            $this->AddResult($file, $file->getIndex(), $vars);
        }
    }

    private function satisfiedBySmartScan($fs, $ext, $content, $ext_table, $content_table)
    {
        $need_scan = $fs->satisfiedBy($ext, $ext_table) || $fs->satisfiedByContent($content, $content_table);
        if (!$need_scan && DEBUG_MODE) {
            echo "Skipped file, not critical.\n";
        }
        return $need_scan;
    }

///////////////////////////////////////////////////////////////////////////

    private function CheckVulnerability($par_Filename, $par_Index, $par_Content, $vars)
    {
        global $g_CmsListDetector, $defaults;

        $use_cms_detector = ($g_CmsListDetector instanceof CmsVersionDetector);

        if (!$use_cms_detector && !$defaults['use_template_in_path']) {
            return false;
        }

        $l_Vuln = [];

        $par_Filename = strtolower($par_Filename);

        if ((strpos($par_Filename, 'libraries/joomla/session/session.php') !== false) && (strpos($par_Content, '&& filter_var($_SERVER[\'HTTP_X_FORWARDED_FOR') === false)) {
            $l_Vuln['id']   = 'RCE : https://docs.joomla.org/Security_hotfixes_for_Joomla_EOL_versions';
            $l_Vuln['ndx']  = $par_Index;
            $vars->vulnerable[] = $l_Vuln;
            return true;
        }

        if ($use_cms_detector
            && (strpos($par_Filename, 'administrator/components/com_media/helpers/media.php') !== false)
            && (strpos($par_Content, '$format == \'\' || $format == false ||') === false)
        ) {
            if ($g_CmsListDetector->isCms(CmsVersionDetector::CMS_JOOMLA, '1.5')) {
                $l_Vuln['id']   = 'AFU : https://docs.joomla.org/Security_hotfixes_for_Joomla_EOL_versions';
                $l_Vuln['ndx']  = $par_Index;
                $vars->vulnerable[] = $l_Vuln;
                return true;
            }

            return false;
        }

        if ($use_cms_detector
            && (strpos($par_Filename, 'joomla/filesystem/file.php') !== false)
            && (strpos($par_Content, '$file = rtrim($file, \'.\');') === false)
        ) {
            if ($g_CmsListDetector->isCms(CmsVersionDetector::CMS_JOOMLA, '1.5')) {
                $l_Vuln['id']   = 'AFU : https://docs.joomla.org/Security_hotfixes_for_Joomla_EOL_versions';
                $l_Vuln['ndx']  = $par_Index;
                $vars->vulnerable[] = $l_Vuln;
                return true;
            }

            return false;
        }

        if ((strpos($par_Filename, 'editor/filemanager/upload/test.html') !== false) || (stripos($par_Filename, 'editor/filemanager/browser/default/connectors/php/') !== false) || (stripos($par_Filename, 'editor/filemanager/connectors/uploadtest.html') !== false) || (strpos($par_Filename, 'editor/filemanager/browser/default/connectors/test.html') !== false)) {
            $l_Vuln['id']   = 'AFU : FCKEDITOR : http://www.exploit-db.com/exploits/17644/ & /exploit/249';
            $l_Vuln['ndx']  = $par_Index;
            $vars->vulnerable[] = $l_Vuln;
            return true;
        }

        if ((strpos($par_Filename, 'inc_php/image_view.class.php') !== false) || (strpos($par_Filename, '/inc_php/framework/image_view.class.php') !== false)) {
            if (strpos($par_Content, 'showImageByID') === false) {
                $l_Vuln['id']   = 'AFU : REVSLIDER : http://www.exploit-db.com/exploits/35385/';
                $l_Vuln['ndx']  = $par_Index;
                $vars->vulnerable[] = $l_Vuln;
                return true;
            }

            return false;
        }

        if (strpos($par_Filename, 'includes/database/database.inc') !== false) {
            if (strpos($par_Content, 'foreach ($data as $i => $value)') !== false) {
                $l_Vuln['id']   = 'SQLI : DRUPAL : CVE-2014-3704';
                $l_Vuln['ndx']  = $par_Index;
                $vars->vulnerable[] = $l_Vuln;
                return true;
            }

            return false;
        }

        if (strpos($par_Filename, 'engine/classes/min/index.php') !== false) {
            if (strpos($par_Content, 'tr_replace(chr(0)') === false) {
                $l_Vuln['id']   = 'AFD : MINIFY : CVE-2013-6619';
                $l_Vuln['ndx']  = $par_Index;
                $vars->vulnerable[] = $l_Vuln;
                return true;
            }

            return false;
        }

        if ((strpos($par_Filename, 'timthumb.php') !== false) || (strpos($par_Filename, 'thumb.php') !== false) || (strpos($par_Filename, 'cache.php') !== false) || (strpos($par_Filename, '_img.php') !== false)) {
            if (strpos($par_Content, 'code.google.com/p/timthumb') !== false && strpos($par_Content, '2.8.14') === false) {
                $l_Vuln['id']   = 'RCE : TIMTHUMB : CVE-2011-4106,CVE-2014-4663';
                $l_Vuln['ndx']  = $par_Index;
                $vars->vulnerable[] = $l_Vuln;
                return true;
            }

            return false;
        }

        if (strpos($par_Filename, 'components/com_rsform/helpers/rsform.php') !== false) {
            if (preg_match('~define\s*\(\s*\'_rsform_version\'\s*,\s*\'([^\']+)\'\s*\)\s*;~msi', $par_Content, $version)) {
                $version = $version[1];
                if (version_compare($version, '1.5.2') !== 1) {
                    $l_Vuln['id']   = 'RCE : RSFORM : rsform.php, LINE 1605';
                    $l_Vuln['ndx']  = $par_Index;
                    $vars->vulnerable[] = $l_Vuln;
                    return true;
                }
            }
            return false;
        }


        if (strpos($par_Filename, 'fancybox-for-wordpress/fancybox.php') !== false) {
            if (strpos($par_Content, '\'reset\' == $_REQUEST[\'action\']') !== false) {
                $l_Vuln['id']   = 'CODE INJECTION : FANCYBOX';
                $l_Vuln['ndx']  = $par_Index;
                $vars->vulnerable[] = $l_Vuln;
                return true;
            }

            return false;
        }


        if (strpos($par_Filename, 'cherry-plugin/admin/import-export/upload.php') !== false) {
            if (strpos($par_Content, 'verify nonce') === false) {
                $l_Vuln['id']   = 'AFU : Cherry Plugin';
                $l_Vuln['ndx']  = $par_Index;
                $vars->vulnerable[] = $l_Vuln;
                return true;
            }

            return false;
        }

        if (strpos($par_Filename, 'tiny_mce/plugins/tinybrowser/tinybrowser.php') !== false) {
            $l_Vuln['id']   = 'AFU : TINYMCE : http://www.exploit-db.com/exploits/9296/';
            $l_Vuln['ndx']  = $par_Index;
            $vars->vulnerable[] = $l_Vuln;

            return true;
        }

        if (strpos($par_Filename, '/bx_1c_import.php') !== false) {
            if (strpos($par_Content, '$_GET[\'action\']=="getfiles"') !== false) {
                $l_Vuln['id']   = 'AFD : https://habrahabr.ru/company/dsec/blog/326166/';
                $l_Vuln['ndx']  = $par_Index;
                $vars->vulnerable[] = $l_Vuln;

                return true;
            }
        }

        if (strpos($par_Filename, 'scripts/setup.php') !== false) {
            if (strpos($par_Content, 'PMA_Config') !== false) {
                $l_Vuln['id']   = 'CODE INJECTION : PHPMYADMIN : http://1337day.com/exploit/5334';
                $l_Vuln['ndx']  = $par_Index;
                $vars->vulnerable[] = $l_Vuln;
                return true;
            }

            return false;
        }

        if (strpos($par_Filename, '/uploadify.php') !== false) {
            if (strpos($par_Content, 'move_uploaded_file($tempFile,$targetFile') !== false) {
                $l_Vuln['id']   = 'AFU : UPLOADIFY : CVE: 2012-1153';
                $l_Vuln['ndx']  = $par_Index;
                $vars->vulnerable[] = $l_Vuln;
                return true;
            }

            return false;
        }

        if (strpos($par_Filename, 'com_adsmanager/controller.php') !== false) {
            if (strpos($par_Content, 'move_uploaded_file($file[\'tmp_name\'], $tempPath.\'/\'.basename($file[') !== false) {
                $l_Vuln['id']   = 'AFU : https://revisium.com/ru/blog/adsmanager_afu.html';
                $l_Vuln['ndx']  = $par_Index;
                $vars->vulnerable[] = $l_Vuln;
                return true;
            }

            return false;
        }

        if (strpos($par_Filename, 'wp-content/plugins/wp-mobile-detector/resize.php') !== false) {
            if (strpos($par_Content, 'file_put_contents($path, file_get_contents($_REQUEST[\'src\']));') !== false) {
                $l_Vuln['id']   = 'AFU : https://www.pluginvulnerabilities.com/2016/05/31/aribitrary-file-upload-vulnerability-in-wp-mobile-detector/';
                $l_Vuln['ndx']  = $par_Index;
                $vars->vulnerable[] = $l_Vuln;
                return true;
            }

            return false;
        }

        if (strpos($par_Filename, 'core/lib/drupal.php') !== false) {
            $version = '';
            if (preg_match('|VERSION\s*=\s*\'(8\.\d+\.\d+)\'|smi', $par_Content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }

            if (($version !== '') && (version_compare($version, '8.5.1', '<'))) {
                $l_Vuln['id']   = 'Drupageddon 2 : SA-CORE-2018–002';
                $l_Vuln['ndx']  = $par_Index;
                $vars->vulnerable[] = $l_Vuln;
                return true;
            }


            return false;
        }

        if (strpos($par_Filename, 'changelog.txt') !== false) {
            $version = '';
            if (preg_match('|Drupal\s+(7\.\d+),|smi', $par_Content, $tmp_ver)) {
                $version = $tmp_ver[1];
            }

            if (($version !== '') && (version_compare($version, '7.58', '<'))) {
                $l_Vuln['id']   = 'Drupageddon 2 : SA-CORE-2018–002';
                $l_Vuln['ndx']  = $par_Index;
                $vars->vulnerable[] = $l_Vuln;
                return true;
            }

            return false;
        }

        if (strpos($par_Filename, 'phpmailer.php') !== false) {
            $l_Detect = false;
            if (strpos($par_Content, 'PHPMailer') !== false) {
                $l_Found = preg_match('~Version:\s*(\d+)\.(\d+)\.(\d+)~', $par_Content, $l_Match);

                if ($l_Found) {
                    $l_Version = $l_Match[1] * 1000 + $l_Match[2] * 100 + $l_Match[3];

                    if ($l_Version < 2520) {
                        $l_Detect = true;
                    }
                }

                if (!$l_Found) {

                    $l_Found = preg_match('~Version\s*=\s*\'(\d+)\.*(\d+)\.(\d+)~i', $par_Content, $l_Match);
                    if ($l_Found) {
                        $l_Version = $l_Match[1] * 1000 + $l_Match[2] * 100 + $l_Match[3];
                        if ($l_Version < 5220) {
                            $l_Detect = true;
                        }
                    }
                }

                if ($l_Detect) {
                    $l_Vuln['id']   = 'RCE : CVE-2016-10045, CVE-2016-10031';
                    $l_Vuln['ndx']  = $par_Index;
                    $vars->vulnerable[] = $l_Vuln;
                    return true;
                }
            }

            return false;
        }
    }

    private function checkFalsePositives($l_Filename, $l_Unwrapped, $l_DeobfType, $vars)
    {

        if ($l_DeobfType != '') {
            if (DEBUG_MODE) {
                stdOut("\n-----------------------------------------------------------------------------\n");
                stdOut("[DEBUG]" . $l_Filename . "\n");
                stdOut("\n...... $l_DeobfType ...........\n");
                var_dump($l_Unwrapped);
                stdOut("\n");
            }

            switch ($l_DeobfType) {
                case 'Bitrix':
                    foreach ($vars->signs->_DeMapper as $fkey => $fvalue) {
                        if (DEBUG_MODE) {
                            stdOut("[$fkey] => [$fvalue]\n");
                        }

                        if ((strpos($l_Filename, $fkey) !== false) && (strpos($l_Unwrapped, $fvalue) !== false)) {
                            if (DEBUG_MODE) {
                                stdOut("\n[DEBUG] *** SKIP: False Positive\n");
                            }

                            return true;
                        }
                    }
                    break;
            }


            return false;
        }
    }

    private function getFragment($par_Content, $par_Pos)
    {

        $l_MaxChars = MAX_PREVIEW_LEN;

        $par_Content = preg_replace('/[\x00-\x1F\x80-\xFF]/', '~', $par_Content);

        $l_MaxLen   = strlen($par_Content);
        $l_RightPos = min($par_Pos + $l_MaxChars, $l_MaxLen);
        $l_MinPos   = max(0, $par_Pos - $l_MaxChars);

        $l_Res = ($l_MinPos > 0 ? '…' : '') . substr($par_Content, $l_MinPos, $par_Pos - $l_MinPos) . '__AI_MARKER__' . substr($par_Content, $par_Pos, $l_RightPos - $par_Pos - 1);

        $l_Res = AibolitHelpers::makeSafeFn(Normalization::normalize($l_Res), $this->addPrefix, $this->noPrefix);

        $l_Res = str_replace('~', ' ', $l_Res);

        $l_Res = preg_replace('~[\s\t]+~', ' ', $l_Res);

        $l_Res = str_replace('' . '?php', '' . '?php ', $l_Res);

        return $l_Res;
    }

    /**
     * @return array
     */
    public function whitelisting()
    {
        // whitelist
        $snum   = 0;
        $i      = -1;
        
        if (!isset($this->vars->structure['crc'])) {
            return [$snum, $i];
        }
        
        $list   = $this->check_whitelist($this->vars->structure['crc'], $snum);
        $keys   = [
            'criticalPHP',
            'criticalJS',
            'phishing',
            'adwareList',
            'warningPHP'
        ];

        foreach ($keys as $p) {
            if (empty($this->vars->{$p})) {
                continue;
            }
            $p_Fragment = $p . 'Fragment';
            $p_Sig      = $p . 'Sig';

            if ($p == 'phishing') {
                $p_Sig = $p . 'SigFragment';
            }

            $count = count($this->vars->{$p});
            for ($i = 0; $i < $count; $i++) {
                $id = $this->vars->{$p}[$i];
                if ($this->vars->structure['crc'][$id] !== 0 && in_array($this->vars->structure['crc'][$id], $list)) {
                    unset($this->vars->{$p}[$i], $this->vars->{$p_Sig}[$i], $this->vars->{$p_Fragment}[$i]);
                }
            }

            $this->vars->{$p}             = array_values($this->vars->{$p});
            $this->vars->{$p_Fragment}    = array_values($this->vars->{$p_Fragment});
            if (!empty($this->vars->{$p_Sig})) {
                $this->vars->{$p_Sig}     = array_values($this->vars->{$p_Sig});
            }
        }
        return [$snum, $i];
    }

    public function check_whitelist($list, &$snum)
    {
        if (empty($list)) {
            return [];
        }

        $avdb = '';
        $file = __DIR__ . '/AIBOLIT-WHITELIST.db';
        if ((isset($this->vars->options['avdb']) && !empty($this->vars->options['avdb']) && ($avdb = $this->vars->options['avdb'])) || (isset($this->vars->options['c']) && !empty($this->vars->options['c']) && ($avdb = $this->vars->options['c']))) {
            if (file_exists($avdb)) {
                $file = dirname($avdb) . '/AIBOLIT-WHITELIST.db';
            }
        }

        try {
            $db = FileHashMemoryDb::open($file);
        } catch (Exception $e) {
            stdOut("\nAn error occurred while loading the white list database from " . $file . "\n");
            return [];
        }

        $snum = $db->count();
        stdOut("\nLoaded " . ceil($snum) . " known files from " . $file . "\n");

        return $db->find($list);
    }

///////////////////////////////////////////////////////////////////////////

    private function isFileTooBigForScanWithSignatures($filesize)
    {
        return (MAX_SIZE_TO_SCAN > 0 && $filesize > MAX_SIZE_TO_SCAN) || ($filesize < 0);
    }

    private function isFileTooBigForCloudscan($filesize)
    {
        return (MAX_SIZE_TO_CLOUDSCAN > 0 && $filesize > MAX_SIZE_TO_CLOUDSCAN) || ($filesize < 0);
    }
}


class ScanUnit
{
    public static function QCR_ScanContent($checkers, $l_Unwrapped, $l_Content, $signs, $debug = null, $precheck = null, $processResult = null, &$return = null)
    {
        $smart_skipped = false;
        $flag = false;
        foreach ($checkers as $checker => $full) {
            $l_pos = 0;
            $l_SignId = '';
            if (isset($precheck) && is_callable($precheck)) {
                if (!$precheck($checker, $l_Unwrapped) && ($full && !$precheck($checker, $l_Content))) {
                    $smart_skipped = true;
                    continue;
                }
            }
            $flag = ScanCheckers::{$checker}($l_Unwrapped, $l_pos, $l_SignId, $signs, $debug);
            if ($flag && isset($processResult) && is_callable($processResult)) {
                $processResult($checker, $l_Unwrapped, $l_pos, $l_SignId, $return);
            }

            if (!$flag && $full) {
                $flag = ScanCheckers::{$checker}($l_Content, $l_pos, $l_SignId, $signs, $debug);
                if ($flag && isset($processResult) && is_callable($processResult)) {
                    $processResult($checker, $l_Content, $l_pos, $l_SignId, $return);
                }
            }
            if ($flag) {
                return true;
            }
        }
        if (!$flag && $smart_skipped) {
            $return = [RapidScanStorageRecord::RX_SKIPPED_SMART, '', ''];
        }
        return false;
    }

    public static function Rescan($content, $signs, $debug = null, $deobfuscate = false, $processResult = null, &$return = null)
    {
        $checkers['CriticalPHP'] = true;
        $l_Unwrapped = Normalization::strip_whitespace($content);
        $l_UnicodeContent = Encoding::detectUTFEncoding($content);
        if ($l_UnicodeContent !== false) {
            if (Encoding::iconvSupported()) {
                $l_Unwrapped = Encoding::convertToCp1251($l_UnicodeContent, $l_Unwrapped);
            }
        }

        if ($deobfuscate) {
            $l_DeobfObj = new Deobfuscator($l_Unwrapped, $content);
            $l_DeobfType = $l_DeobfObj->getObfuscateType($l_Unwrapped);
        }

        if (isset($l_DeobfType) && $l_DeobfType != '') {
            $l_Unwrapped = $l_DeobfObj->deobfuscate();
        }

        $l_Unwrapped = Normalization::normalize($l_Unwrapped);
        return self::QCR_ScanContent($checkers, $l_Unwrapped, $content, $signs);
    }
}


class ScanCheckers
{
    const URL_GRAB = '~(?:<(script|iframe|object|embed|img|a)\s*.{0,300}?)?((?:https?:)?\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+\~#=]{2,256}\.[a-z]{2,4}\b(?:[-a-zA-Z0-9@:%_\+.\~#?&/=]*))(.{0,300}?</\1>)?~msi';

    public static function WarningPHP($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null)
    {
        foreach ($signs->_SusDB as $l_Item) {
            if (preg_match('~' . $l_Item . '~smiS', $l_Content, $l_Found, PREG_OFFSET_CAPTURE)) {
                if (!self::CheckException($l_Content, $l_Found, $signs)) {
                    $l_Pos   = $l_Found[0][1];
                    $l_SigId = LoadSignaturesForScan::getSigId($l_Found);
                    return true;
                }
            }
        }
        return false;
    }

    ////////////////////////////////////////////////////////////////////////////
    public static function Adware($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null)
    {
        $l_Res = false;

        foreach ($signs->_AdwareSig as $l_Item) {
            $offset = 0;
            while (preg_match('~' . $l_Item . '~smi', $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset)) {
                if (!self::CheckException($l_Content, $l_Found, $signs)) {
                    $l_Pos = $l_Found[0][1];
                    $l_SigId = 'adware';
                    return true;
                }

                $offset = $l_Found[0][1] + 1;
            }
        }

        return $l_Res;
    }

    ////////////////////////////////////////////////////////////////////////////
    public static function CheckException(&$l_Content, &$l_Found, $signs, $debug = null)
    {
        if (!(isset($signs->_ExceptFlex) && is_array($signs->_ExceptFlex))) {
            return false;
        }
        $l_FoundStrPlus = substr($l_Content, max($l_Found[0][1] - 10, 0), 70);

        foreach ($signs->_ExceptFlex as $l_ExceptItem) {
            if (@preg_match('~' . $l_ExceptItem . '~smi', $l_FoundStrPlus, $l_Detected)) {
                return true;
            }
        }

        return false;
    }

    ////////////////////////////////////////////////////////////////////////////
    public static function Phishing($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null)
    {
        $l_Res = false;

        foreach ($signs->_PhishingSig as $l_Item) {
            $offset = 0;
            while (preg_match('~' . $l_Item . '~smi', $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset)) {
                if (!self::CheckException($l_Content, $l_Found, $signs)) {
                    $l_Pos   = $l_Found[0][1];
                    $l_SigId = LoadSignaturesForScan::getSigId($l_Found);

                    if (is_object($debug) && $debug->getDebugMode() == true) {
                        echo "Phis: $l_Content matched [$l_Item] in $l_Pos\n";
                    }

                    return $l_Pos;
                }
                $offset = $l_Found[0][1] + 1;

            }
        }

        return $l_Res;
    }

    ////////////////////////////////////////////////////////////////////////////
    public static function CriticalJS($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null)
    {
        $l_Res = false;

        foreach ($signs->_JSVirSig as $l_Item) {
            $offset = 0;
            if (is_object($debug) && $debug->getDebugPerfomance() == true) {
                $stat_start = microtime(true);
            }
            $time = microtime(true);
            $res = preg_match('~' . $l_Item . '~smi', $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset);
            if (class_exists('PerfomanceStats')) {
                PerfomanceStats::addPerfomanceItem(PerfomanceStats::PCRE_SCAN_STAT, microtime(true) - $time);
            }
            while ($res) {
                if (!self::CheckException($l_Content, $l_Found, $signs)) {
                    $l_Pos   = $l_Found[0][1];
                    $l_SigId = LoadSignaturesForScan::getSigId($l_Found);

                    if (is_object($debug) && $debug->getDebugMode() == true) {
                        echo "JS: $l_Content matched [$l_Item] in $l_Pos\n";
                    }

                    $l_Res = true;
                    break;
                }

                $offset = $l_Found[0][1] + 1;
                $time = microtime(true);
                $res = preg_match('~' . $l_Item . '~smi', $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset);
                if (class_exists('PerfomanceStats')) {
                    PerfomanceStats::addPerfomanceItem(PerfomanceStats::PCRE_SCAN_STAT, microtime(true) - $time);
                }
            }

            if (is_object($debug) && $debug->getDebugPerfomance() == true) {
                $stat_stop = microtime(true);
                $debug->addPerfomanceItem($l_Item, $stat_stop - $stat_start);
            }

        }

        return $l_Res;
    }

    public static function CriticalJS_PARA($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null)
    {
        foreach ($signs->X_JSVirSig as $l_Item) {
            if (is_object($debug) && $debug->getDebugPerfomance() == true) {
                $stat_start = microtime(true);
            }

            if (preg_match('~' . $l_Item . '~smi', $l_Content, $l_Found, PREG_OFFSET_CAPTURE)) {
                if (!self::CheckException($l_Content, $l_Found, $signs)) {
                    $l_Pos   = $l_Found[0][1];
                    //$l_SigId = myCheckSum($l_Item);
                    $l_SigId = LoadSignaturesForScan::getSigId($l_Found);

                    if (is_object($debug) && $debug->getDebugMode() == true) {
                        echo "JS PARA: $l_Content matched [$l_Item] in $l_Pos\n";
                    }
                    return true;
                }
            }

            if (is_object($debug) && $debug->getDebugPerfomance() == true) {
                $stat_stop = microtime(true);
                $debug->addPerfomanceItem($l_Item, $stat_stop - $stat_start);
            }
        }
        return false;
    }

    ////////////////////////////////////////////////////////////////////////////
    public static function CriticalPHPGIF($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null)
    {
        if (strpos($l_Content, 'GIF89') === 0) {
            $l_Pos = 0;
            $l_SigId = 'GIF';
            if (is_object($debug) && $debug->getDebugMode() == true) {
                echo "CRIT 6: $l_Content matched [GIF] in $l_Pos\n";
            }

            return true;
        }
        return false;
    }

    public static function CriticalPHPUploader($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null)
    {
        // detect uploaders / droppers
        $l_Found = null;
        if ((strlen($l_Content) < 2048) && ((($l_Pos = strpos($l_Content, 'multipart/form-data')) > 0) || (($l_Pos = strpos($l_Content, '$_FILE[') > 0)) || (($l_Pos = strpos($l_Content, 'move_uploaded_file')) > 0) || (preg_match('|\bcopy\s*\(|smi', $l_Content, $l_Found, PREG_OFFSET_CAPTURE)))) {
            if ($l_Found != null) {
                $l_Pos = $l_Found[0][1];
                $l_SigId = 'uploader';
            }
            if (is_object($debug) && $debug->getDebugMode() == true) {
                echo "CRIT 7: $l_Content matched [uploader] in $l_Pos\n";
            }

            return true;
        }
    }

    public static function CriticalPHP_3($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null)
    {
        foreach ($signs->X_FlexDBShe as $l_Item) {
            if (is_object($debug) && $debug->getDebugPerfomance() == true) {
                $stat_start = microtime(true);
            }

            if (preg_match('~' . $l_Item . '~smiS', $l_Content, $l_Found, PREG_OFFSET_CAPTURE)) {
                if (!self::CheckException($l_Content, $l_Found, $signs)) {
                    $l_Pos   = $l_Found[0][1];
                    $l_SigId = LoadSignaturesForScan::getSigId($l_Found);

                    if (is_object($debug) && $debug->getDebugMode() == true) {
                        echo "CRIT 3: $l_Content matched [$l_Item] in $l_Pos\n";
                    }

                    return true;
                }
            }

            if (is_object($debug) && $debug->getDebugPerfomance() == true) {
                $stat_stop = microtime(true);
                $debug->addPerfomanceItem($l_Item, $stat_stop - $stat_start);
            }
        }
        return false;
    }

    public static function CriticalPHP_2($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null)
    {
        foreach ($signs->XX_FlexDBShe as $l_Item) {
            if (is_object($debug) && $debug->getDebugPerfomance() == true) {
                $stat_start = microtime(true);
            }

            if (preg_match('~' . $l_Item . '~smiS', $l_Content, $l_Found, PREG_OFFSET_CAPTURE)) {
                if (!self::CheckException($l_Content, $l_Found, $signs)) {
                    $l_Pos   = $l_Found[0][1];
                    $l_SigId = LoadSignaturesForScan::getSigId($l_Found);

                    if (is_object($debug) && $debug->getDebugMode() == true) {
                        echo "CRIT 2: $l_Content matched [$l_Item] in $l_Pos\n";
                    }

                    return true;
                }
            }

            if (is_object($debug) && $debug->getDebugPerfomance() == true) {
                $stat_stop = microtime(true);
                $debug->addPerfomanceItem($l_Item, $stat_stop - $stat_start);
            }
        }
        return false;
    }

    public static function CriticalPHP_4($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null)
    {
        $l_Content_lo = strtolower($l_Content);

        foreach ($signs->_DBShe as $l_Item) {
            $l_Pos = strpos($l_Content_lo, $l_Item);
            if ($l_Pos !== false) {
                $l_SigId = AibolitHelpers::myCheckSum($l_Item);

                if (is_object($debug) && $debug->getDebugMode() == true) {
                    echo "CRIT 4: $l_Content matched [$l_Item] in $l_Pos\n";
                }

                return true;
            }
        }
        return false;
    }

    public static function CriticalPHP_5($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null)
    {
        $l_Content_lo = strtolower($l_Content);

        foreach ($signs->X_DBShe as $l_Item) {
            $l_Pos = strpos($l_Content_lo, $l_Item);
            if ($l_Pos !== false) {
                $l_SigId = AibolitHelpers::myCheckSum($l_Item);

                if (is_object($debug) && $debug->getDebugMode() == true) {
                    echo "CRIT 5: $l_Content matched [$l_Item] in $l_Pos\n";
                }

                return true;
            }
        }
        return false;
    }

    public static function CriticalPHP($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null)
    {
        foreach ($signs->_FlexDBShe as $l_Item) {
            $offset = 0;

            if (is_object($debug) && $debug->getDebugPerfomance() == true) {
                $stat_start = microtime(true);
            }
            $time = microtime(true);
            $res = preg_match('~' . $l_Item . '~smiS', $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset);
            if (class_exists('PerfomanceStats')) {
                PerfomanceStats::addPerfomanceItem(PerfomanceStats::PCRE_SCAN_STAT, microtime(true) - $time);
            }
            while ($res) {
                if (!self::CheckException($l_Content, $l_Found, $signs)) {
                    $l_Pos   = $l_Found[0][1];
                    //$l_SigId = myCheckSum($l_Item);
                    $l_SigId = LoadSignaturesForScan::getSigId($l_Found);

                    if (is_object($debug) && $debug->getDebugMode() == true) {
                        echo "CRIT 1: $l_Content matched [$l_Item] in $l_Pos\n";
                    }

                    return true;
                }

                $offset = $l_Found[0][1] + 1;
                $time = microtime(true);
                $res = preg_match('~' . $l_Item . '~smiS', $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset);
                if (class_exists('PerfomanceStats')) {
                    PerfomanceStats::addPerfomanceItem(PerfomanceStats::PCRE_SCAN_STAT, microtime(true) - $time);
                }
            }
            if (is_object($debug) && $debug->getDebugPerfomance() == true) {
                $stat_stop = microtime(true);
                $debug->addPerfomanceItem($l_Item, $stat_stop - $stat_start);
            }

        }

        return false;
    }

    public static function isOwnUrl($url, $own_domain)
    {
        if ($own_domain === null || $own_domain === '') {
            return false;
        }
        return (bool)preg_match('~^(http(s)?:)?//(www\.)?' . preg_quote($own_domain, '~') . '~msi', $url);
    }

    public static function isUrlInList($url, $list)
    {
        if (isset($list)) {
            foreach ($list as $item) {
                if (preg_match('~' . $item . '~msiS', $url, $id, PREG_OFFSET_CAPTURE)) {
                    return $id;
                }
            }
        }

        return false;
    }

    public static function UrlChecker($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null)
    {
        $l_Pos      = [];
        $l_SigId    = [];
        $offset     = 0;

        while (preg_match(self::URL_GRAB, $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset)) {
            if (!self::isOwnUrl($l_Found[2][0], $signs->getOwnUrl())
                && (isset($signs->whiteUrls) && !self::isUrlInList($l_Found[2][0], $signs->whiteUrls->getDb()))
            ) {
                if ($id = self::isUrlInList($l_Found[2][0], $signs->blackUrls->getDb())) {
                    if (isset($l_Found[1][0]) && $l_Found[1][0] !== '' && isset($l_Found[3][0]) && $l_Found[3][0] !== '') {
                        $l_Pos['black'][] = $l_Found[2][1];
                        $l_SigId['black'][] = $signs->blackUrls->getSig($id);
                    }
                } else {
                    $l_Pos['unk'][] = $l_Found[2][1];
                    $l_SigId['unk'][] = $l_Found[2][0];
                }
            }
            $offset = $l_Found[2][1] + strlen($l_Found[2][0]);
        }
        return !empty($l_Pos);
    }
}



class TemplateList
{
    /**
     * #############
     * # MAIN_PAGE #
     * #############
     */
    const MAIN_PAGE = <<<MAIN_PAGE
<html>
<head>
    <!-- revisium.com/ai/ -->
    <meta http-equiv="Content-Type" content="text/html;charset=utf-8" >
    <META NAME="ROBOTS" CONTENT="NOINDEX,NOFOLLOW">
    <title>@@HEAD_TITLE@@</title>
    <style type="text/css" title="currentStyle">
        @import "https://cdn.revisium.com/ai/media/css/demo_page2.css";
        @import "https://cdn.revisium.com/ai/media/css/jquery.dataTables2.css";
    </style>

    <script type="text/javascript" language="javascript" src="https://cdn.revisium.com/ai/jquery.js"></script>
    <script type="text/javascript" language="javascript" src="https://cdn.revisium.com/ai/datatables.min.js"></script>
    <style>
        body {
            font-family: Tahoma, sans-serif;
            color: #5a5a5a;
            background: #FFFFFF;
            font-size: 14px;
            margin: 20px;
            padding: 0;
        }

        .header {
            font-size: 34px;
            margin: 0 0 10px 0;
        }

        .hidd {
            display: none;
        }

        .ok {
            color: green;
        }

        .line_no {
            -webkit-border-radius: 4px;
            -moz-border-radius: 4px;
            border-radius: 4px;

            background: #DAF2C1;
            padding: 2px 5px 2px 5px;
            margin: 0 5px 0 5px;
        }

        .credits_header {
            -webkit-border-radius: 4px;
            -moz-border-radius: 4px;
            border-radius: 4px;

            background: #F2F2F2;
            padding: 10px;
            font-size: 11px;
            margin: 0 0 10px 0;
        }

        .marker {
            color: #FF0090;
            font-weight: 100;
            background: #FF0090;
            padding: 2px 0 2px 0;
            width: 2px;
        }

        .title {
            font-size: 24px;
            margin: 20px 0 10px 0;
            color: #9CA9D1;
        }

        .summary {
            float: left;
            width: 500px;
        }

        .summary TD {
            font-size: 12px;
            border-bottom: 1px solid #F0F0F0;
            font-weight: 700;
            padding: 10px 0 10px 0;
        }

        .crit, .vir {
            color: #D84B55;
        }

        .intitem {
            color: #4a6975;
        }

        .spacer {
            margin: 0 0 50px 0;
            clear: both;
        }

        .warn {
            color: #F6B700;
        }

        .clear {
            clear: both;
        }

        .offer {
            -webkit-border-radius: 4px;
            -moz-border-radius: 4px;
            border-radius: 4px;

            width: 500px;
            background: #F2F2F2;
            color: #747474;
            font-family: Helvetica, Arial, sans-serif;
            padding: 30px;
            margin: 20px 0 0 550px;
            font-size: 14px;
        }

        .offer-our-products {
            -webkit-border-radius: 4px;
            -moz-border-radius: 4px;
            border-radius: 4px;

            width: 500px;
            background: #f6f5e0;
            color: #747474;
            font-family: Helvetica, Arial, sans-serif;
            padding: 30px;
            margin: 20px 0 0 550px;
            font-size: 14px;
        }


        HR {
            margin-top: 15px;
            margin-bottom: 15px;
            opacity: .2;
        }

        .flist {
            font-family: Henvetica, Arial, sans-serif;
        }

        .flist TD {
            font-size: 11px;
            padding: 5px;
        }

        .flist TH {
            font-size: 12px;
            height: 30px;
            padding: 5px;
            background: #CEE9EF;
        }


        .it {
            font-size: 14px;
            font-weight: 100;
            margin-top: 10px;
        }

        .crit .it A {
            color: #E50931;
            line-height: 25px;
            text-decoration: none;
        }

        .warn .it A {
            color: #F2C900;
            line-height: 25px;
            text-decoration: none;
        }


        .details {
            font-family: Calibri, sans-serif;
            font-size: 12px;
            margin: 10px 10px 10px 0;
        }

        .crit .details {
            color: #A08080;
        }

        .warn .details {
            color: #808080;
        }

        .details A {
            color: #FFF;
            font-weight: 700;
            text-decoration: none;
            padding: 2px;
            background: #E5CEDE;
            -webkit-border-radius: 7px;
            -moz-border-radius: 7px;
            border-radius: 7px;
        }

        .details A:hover {
            background: #A0909B;
        }

        .ctd {
            margin: 10px 0 10px 0;
            align: center;
        }

        .ctd A {
            color: #0D9922;
        }

        .disclaimer {
            color: darkgreen;
            margin: 10px 10px 10px 0;
        }

        .note_vir {
            margin: 10px 0 10px 0;
        / / padding: 10 px;
            color: #FF4F4F;
            font-size: 15px;
            font-weight: 700;
            clear: both;

        }

        .note_warn {
            margin: 10px 0 10px 0;
            color: #F6B700;
            font-size: 15px;
            font-weight: 700;
            clear: both;
        }

        .note_int {
            margin: 10px 0 10px 0;
            color: #60b5d6;
            font-size: 15px;
            font-weight: 700;
            clear: both;
        }

        .updateinfo {
            color: #FFF;
            text-decoration: none;
            background: #E5CEDE;
            -webkit-border-radius: 7px;
            -moz-border-radius: 7px;
            border-radius: 7px;

            margin: 10px 0 10px 0;
            padding: 10px;
        }


        .caution {
            color: #EF7B75;
            text-decoration: none;
            margin: 20px 0 0 0;
            font-size: 12px;
        }

        .footer {
            color: #303030;
            text-decoration: none;
            background: #F4F4F4;
            -webkit-border-radius: 7px;
            -moz-border-radius: 7px;
            border-radius: 7px;

            margin: 80px 0 10px 0px;
            padding: 10px;
        }

        .rep {
            color: #303030;
            text-decoration: none;
            background: #94DDDB;
            -webkit-border-radius: 7px;
            -moz-border-radius: 7px;
            border-radius: 7px;

            margin: 10px 0 10px 0;
            padding: 10px;
            font-size: 12px;
        }

    </style>
</head>
<body>

<div class="header">@@MAIN_TITLE@@ @@PATH_URL@@ (@@MODE@@)</div>
<div class="credits_header">@@CREDITS@@</div>
<div class="details_header">
    @@STAT@@<br/>
    @@SCANNED@@ @@MEMORY@@.
</div>

@@WARN_QUICK@@

<div class="summary">
    @@SUMMARY@@
</div>

<div class="offer">
    @@OFFER@@
</div>

<div class="offer-our-products">
    @@OFFER_OUR_PRODUCTS@@
</div>

<div class="clear"></div>

@@MAIN_CONTENT@@

<div class="footer">
    @@FOOTER@@
</div>

<script language="javascript">
    function hsig(id) {
        var divs = document.getElementsByTagName("tr");
        for(var i = 0; i < divs.length; i++){

            if (divs[i].getAttribute('o') == id) {
                divs[i].innerHTML = '';
            }
        }

        return false;
    }


    $(document).ready(function(){
        $('#table_crit').dataTable({
            "aLengthMenu": [[100 , 500, -1], [100, 500, "All"]],
            "aoColumns": [
                {"iDataSort": 7, "width":"70%"},
                {"iDataSort": 5},
                {"iDataSort": 6},
                {"bSortable": true},
                {"bVisible": false},
                {"bVisible": false},
                {"bVisible": false},
                {"bVisible": false}
            ],
            "paging": true,
            "iDisplayLength": 500,
            "oLanguage": {
                "sLengthMenu": "@@msg1@@",
                "sZeroRecords": "@@msg2@@",
                "sInfo": "@@msg3@@",
                "sInfoEmpty": "@@msg4@@",
                "sInfoFiltered": "@@msg5@@",
                "sSearch":       "@@msg6@@",
                "sUrl":          "",
                "oPaginate": {
                    "sFirst": "@@msg7@@",
                    "sPrevious": "@@msg8@@",
                    "sNext": "@@msg9@@",
                    "sLast": "@@msg10@@"
                },
                "oAria": {
                    "sSortAscending": "@@msg11@@",
                    "sSortDescending": "@@msg12@@"
                }
            }

        } );

    });

    $(document).ready(function(){
        $('#table_vir').dataTable({
            "aLengthMenu": [[100 , 500, -1], [100, 500, "All"]],
            "paging": true,
            "aoColumns": [
                {"iDataSort": 7, "width":"70%"},
                {"iDataSort": 5},
                {"iDataSort": 6},
                {"bSortable": true},
                {"bVisible": false},
                {"bVisible": false},
                {"bVisible": false},
                {"bVisible": false}
            ],
            "iDisplayLength": 500,
            "oLanguage": {
                "sLengthMenu": "@@msg1@@",
                "sZeroRecords": "@@msg2@@",
                "sInfo": "@@msg3@@",
                "sInfoEmpty": "@@msg4@@",
                "sInfoFiltered": "@@msg5@@",
                "sSearch":       "@@msg6@@",
                "sUrl":          "",
                "oPaginate": {
                    "sFirst": "@@msg7@@",
                    "sPrevious": "@@msg8@@",
                    "sNext": "@@msg9@@",
                    "sLast": "@@msg10@@"
                },
                "oAria": {
                    "sSortAscending":  "@@msg11@@",
                    "sSortDescending": "@@msg12@@"
                }
            },

        } );

    });

    if ($('#table_warn0')) {
        $('#table_warn0').dataTable({
            "aLengthMenu": [[100 , 500, -1], [100, 500, "All"]],
            "paging": true,
            "aoColumns": [
                {"iDataSort": 7, "width":"70%"},
                {"iDataSort": 5},
                {"iDataSort": 6},
                {"bSortable": true},
                {"bVisible": false},
                {"bVisible": false},
                {"bVisible": false},
                {"bVisible": false}
            ],
            "iDisplayLength": 500,
            "oLanguage": {
                "sLengthMenu": "@@msg1@@",
                "sZeroRecords": "@@msg2@@",
                "sInfo": "@@msg3@@",
                "sInfoEmpty": "@@msg4@@",
                "sInfoFiltered": "@@msg5@@",
                "sSearch":       "@@msg6@@",
                "sUrl":          "",
                "oPaginate": {
                    "sFirst": "@@msg7@@",
                    "sPrevious": "@@msg8@@",
                    "sNext": "@@msg9@@",
                    "sLast": "@@msg10@@"
                },
                "oAria": {
                    "sSortAscending":  "@@msg11@@",
                    "sSortDescending": "@@msg12@@"
                }
            }

        } );
    }

    if ($('#table_warn1')) {
        $('#table_warn1').dataTable({
            "aLengthMenu": [[100 , 500, -1], [100, 500, "All"]],
            "paging": true,
            "aoColumns": [
                {"iDataSort": 7, "width":"70%"},
                {"iDataSort": 5},
                {"iDataSort": 6},
                {"bSortable": true},
                {"bVisible": false},
                {"bVisible": false},
                {"bVisible": false},
                {"bVisible": false}
            ],
            "iDisplayLength": 500,
            "oLanguage": {
                "sLengthMenu": "@@msg1@@",
                "sZeroRecords": "@@msg2@@",
                "sInfo": "@@msg3@@",
                "sInfoEmpty": "@@msg4@@",
                "sInfoFiltered": "@@msg5@@",
                "sSearch":       "@@msg6@@",
                "sUrl":          "",
                "oPaginate": {
                    "sFirst": "@@msg7@@",
                    "sPrevious": "@@msg8@@",
                    "sNext": "@@msg9@@",
                    "sLast": "@@msg10@@"
                },
                "oAria": {
                    "sSortAscending":  "@@msg11@@",
                    "sSortDescending": "@@msg12@@"
                }
            }

        } );
    }
</script>
<!-- @@SERVICE_INFO@@  -->
</body>
</html>
MAIN_PAGE;

    #region templates ru
    /**
     * #############
     * # FOOTER_RU #
     * #############
     */
    const FOOTER_RU = <<<FOOTER
   <div class="disclaimer"><span class="vir">[!]</span> Отказ от гарантий: невозможно гарантировать обнаружение всех вредоносных скриптов. Поэтому разработчик сканера не несет ответственности за возможные последствия работы сканера AI-Bolit или неоправданные ожидания пользователей относительно функциональности и возможностей.
   </div>
   <div class="thanx">
      Мы будем чрезвычайно благодарны за любые упоминания сканера AI-Bolit на вашем сайте, в блоге, среди друзей, знакомых и клиентов. <br/>Ссылку можно поставить на страницу <a href="https://revisium.com/ai/">https://revisium.com/ai/</a>.<br/>
    </div>
FOOTER;

    /**
     * ###########################
     * # OFFER_RU #
     * ###########################
     */
    const OFFER_RU = <<<OFFER_ON_VIRUS_FOUND
    <div>
     <div class="crit" style="font-size: 17px; margin-bottom: 20px"><b>Внимание! Наш сканер обнаружил подозрительный или вредоносный код</b>.</div> 
     <p>Возможно, ваш сайт был взломан. Рекомендуем срочно <a href="https://revisium.com/ru/order/#fform" target=_blank>проконсультироваться со специалистами</a> по данному отчету.</p>
     <p><hr size=1></p>
     <p>Рекомендуем также проверить сайт бесплатным <b><a href="https://rescan.pro/?utm=aibolit" target=_blank>онлайн-сканером ReScan.Pro</a></b>.</p>
     <p><hr size=1></p>
         <div class="caution">@@CAUTION@@</div>
    </div>
OFFER_ON_VIRUS_FOUND;

    /**
     * #########################
     * # OFFER_OUR_PRODUCTS_RU #
     * #########################
     */
    const OFFER_OUR_PRODUCTS_RU = <<<OFFER_OUR_PRODUCTS
       <b>Наши продукты:</b><br/>
              <ul>
               <li style="margin-top: 10px"><font color=red><sup>[new]</sup></font><b><a href="https://revisium.com/ru/products/antivirus_for_ispmanager/" target=_blank>Антивирус для ISPmanager Lite</a></b> &mdash;  сканирование и лечение сайтов прямо в панели хостинга</li>
               <li style="margin-top: 10px"><b><a href="https://revisium.com/ru/blog/revisium-antivirus-for-plesk.html" target=_blank>Антивирус для Plesk</a> Onyx 17.x</b> &mdash;  сканирование и лечение сайтов прямо в панели хостинга</li>
               <li style="margin-top: 10px"><b><a href="https://cloudscan.pro/ru/" target=_blank>Облачный антивирус CloudScan.Pro</a> для веб-специалистов</b> &mdash; лечение сайтов в один клик</li>
               <li style="margin-top: 10px"><b><a href="https://revisium.com/ru/antivirus-server/" target=_blank>Антивирус для сервера</a></b> &mdash; для хостинг-компаний, веб-студий и агентств.</li>
              </ul>  
    </div>
OFFER_OUR_PRODUCTS;
    #endregion

    #region templates eng
    /**
     * #############
     * # FOOTER_EN #
     * #############
     */
    const FOOTER_EN = <<<FOOTER
           <div class="disclaimer"><span class="vir">[!]</span> Disclaimer: We're not liable to you for any damages, including general, special, incidental or consequential damages arising out of the use or inability to use the script (including but not limited to loss of data or report being rendered inaccurate or failure of the script). There's no warranty for the program. Use at your own risk. 
           </div>
           <div class="thanx">
              We're greatly appreciate for any references in the social medias, forums or blogs to our scanner AI-BOLIT <a href="https://revisium.com/aibo/">https://revisium.com/aibo/</a>.<br/>
            </div>
FOOTER;

    /**
     * ###########################
     * # OFFER_ON_VIRUS_FOUND_EN #
     * ###########################
     */
    const OFFER_EN = <<<OFFER_ON_VIRUS_FOUND
<div>
 <div class="crit" style="font-size: 17px;"><b>Attention! The scanner has detected suspicious or malicious files.</b></div> 
 <br/>Most likely the website has been compromised. Please, <a href="https://revisium.com/en/contacts/" target=_blank>contact web security experts</a> from Revisium to check the report or clean the malware.
 <p><hr size=1></p>
 Also check your website for viruses with our free <b><a href="http://rescan.pro/?en&utm=aibo" target=_blank>online scanner ReScan.Pro</a></b>.
</div>
<br/>
<div>
   Revisium contacts: <a href="https://revisium.com/en/contacts/">https://revisium.com/en/home/</a>
</div>
<div class="caution">@@CAUTION@@</div>
OFFER_ON_VIRUS_FOUND;


    /**
     * #########################
     * # OFFER_OUR_PRODUCTS_EN #
     * #########################
     */
    const OFFER_OUR_PRODUCTS_EN = <<<OFFER_OUR_PRODUCTS
<b>Special Offers:</b><br/>
              <ul>
               <li style="margin-top: 10px"><font color=red><sup>[new]</sup></font><b><a href="http://ext.plesk.com/packages/b71916cf-614e-4b11-9644-a5fe82060aaf-revisium-antivirus">Antivirus for Plesk Onyx</a></b> hosting panel with one-click malware cleanup and scheduled website scanning.</li>
               <li style="margin-top: 10px"><font color=red></font><b><a href="https://www.ispsystem.com/addons-modules/revisium">Antivirus for ISPmanager Lite</a></b> hosting panel with one-click malware cleanup and scheduled website scanning.</li>
               <li style="margin-top: 10px">Professional malware cleanup and web-protection service with 6 month guarantee for only $99 (one-time payment): <a href="https://revisium.com/en/home/#order_form">https://revisium.com/en/home/</a>.</li>
              </ul>  
    </div>
OFFER_OUR_PRODUCTS;
    #endregion
}


class TranslateList
{
    const RU = [
        //Переменные для javascript
        'data_table.length_menu'           => 'Отображать по _MENU_ записей',
        'data_table.zero_records'          => 'Ничего не найдено',
        'data_table.info'                  => 'Отображается c _START_ по _END_ из _TOTAL_ файлов',
        'data_table.info_empty'            => 'Нет файлов',
        'data_table.info_filtered'         => '(всего записей _MAX_)',
        'data_table.search'                => 'Поиск:',
        'data_table.paginate.first'        => 'Первая',
        'data_table.paginate.previous'     => 'Предыдущая',
        'data_table.paginate.next'         => 'Следующая',
        'data_table.paginate.last'         => 'Последняя',
        'data_table.aria.sort_ascending'   => ': активировать для сортировки столбца по возрастанию',
        'data_table.aria.sort_descending'  => ': активировать для сортировки столбцов по убыванию',
        'header.scan_report_title'         => 'Отчет сканера <a href="https://revisium.com/ai/">AI-Bolit</a> v@@VERSION@@:',
        'offer.when_no_critical'           => 'Обращаем внимание на то, что большинство CMS <b>без дополнительной защиты</b> рано или поздно <b>взламывают</b>.<p> Компания <a href="https://revisium.com/">"Ревизиум"</a> предлагает услугу превентивной защиты сайта от взлома с использованием уникальной <b>процедуры "цементирования сайта"</b>. Подробно на <a href="https://revisium.com/ru/client_protect/">странице услуги</a>. <p>Лучшее лечение &mdash; это профилактика.',
        'offer_our_products'               => TemplateList::OFFER_OUR_PRODUCTS_RU,
        'offer.when_has_critical'          => TemplateList::OFFER_RU,
        'сaution.aibolit_file'             => 'Не оставляйте файл отчета на сервере, и не давайте на него прямых ссылок с других сайтов. Информация из отчета может быть использована злоумышленниками для взлома сайта, так как содержит информацию о настройках сервера, файлах и каталогах.',
        'сaution.scanner_set_password'     => "Сканер AI-Bolit запускается с паролем. Если это первый запуск сканера, вам нужно придумать сложный пароль и вписать его в файле ai-bolit.php в строке №34. <p>Например, <b>'PASS', =>'%s',</b><p>
После этого откройте сканер в браузере, указав пароль в параметре \"p\". <p>Например, так <b>http://mysite.ru/ai-bolit.php?p=%s</b>. ",
        'сaution.quick_scanned'            => '<div class="rep" style="color: #0000A0">Внимание, скрипт выполнил быструю проверку сайта. Проверяются только наиболее критические файлы, но часть вредоносных скриптов может быть не обнаружена. Пожалуйста, запустите скрипт из командной строки для выполнения полного тестирования. Подробнее смотрите в <a href="https://revisium.com/ai/faq.php">FAQ вопрос №10</a>.</div>',
        'warning.weak_password'            => "Вы установили слабый пароль на скрипт AI-BOLIT. Укажите пароль не менее 8 символов, содержащий латинские буквы в верхнем и нижнем регистре, а также цифры. Например, такой <b>%s</b>",
        'warning.folder_read_permission'   => 'Текущая директория не доступна для чтения скрипту. Пожалуйста, укажите права на доступ <b>rwxr-xr-x</b> или с помощью командной строки <b>chmod +r имя_директории</b>',
        'warnings'                         => 'Предупреждения',
        'warning.reading_error'            => 'Непроверенные файлы - ошибка чтения',
        'info.time_elapsed'                => "Затрачено времени: <b>%s</b>. Сканирование начато %s, сканирование завершено %s",
        'info.files_checked'               => 'Всего проверено %s директорий и %s файлов.',
        'info.non_commercial_use'          => 'Сканер бесплатный только для личного некоммерческого использования. Информация по <a href="https://revisium.com/ai/faq.php#faq11" target=_blank>коммерческой лицензии</a> (пункт №11). <a href="https://revisium.com/images/mini_aibolit.jpg">Авторское свидетельство</a> о гос. регистрации в РосПатенте №2012619254 от 12 октября 2012 г.',
        'critical.title'                   => '<div class="title">Критические замечания</div>',
        'not_detected.shell_scripts'       => 'Вирусы и вредоносные скрипты не обнаружены.',
        'detected.shell_scripts'           => 'Эти файлы могут быть вредоносными или хакерскими скриптами',
        'detected.javascript'              => 'Эти файлы могут быть javascript вирусами',
        'detected.executables'             => 'Обнаружены сигнатуры исполняемых файлов unix и нехарактерных скриптов. Они могут быть вредоносными файлами',
        'detected.bad_links'               => 'Дорвеи, реклама, спам-ссылки, редиректы',
        'detected.phishing_pages'          => 'Обнаружены фишинговые страницы',
        'file.not_found.more_than'         => 'Не найдено файлов больше чем %s',
        'file.recommend_to_remove'         => 'Временные файлы или файлы(каталоги) - кандидаты на удаление по ряду причин',
        'file.scanned_manual'              => 'Просканированы только файлы, перечисленные в %s. Для полного сканирования удалите файл %s и запустите сканер повторно.',
        'file.suspicion.heuristic_analyze' => 'Эвристический анализ обнаружил подозрительные файлы. Проверьте их на наличие вредоносного кода.',
        'file.encrypted'                   => 'Зашифрованных файлов',
        'file.hidden'                      => 'Скрытых файлов',
        'file.added'                       => "Добавленные файлы",
        'file.updated'                     => "Измененные файлы",
        'file.deleted'                     => "Удаленные файлы",
        'file_structure.updates'           => "Изменения в файловой структуре",
        'hidden_files'                     => 'Скрытые файлы',
        'doorway.might'                    => 'Возможно, каталог с дорвеем',
        'doorway.not_found'                => 'Не найдено директорий c дорвеями',
        'suspicion.multiple'               => 'Двойное расширение, зашифрованный контент или подозрение на вредоносный скрипт. Требуется дополнительный анализ',
        'suspicion.malicious'              => 'Подозрение на вредоносный скрипт',
        'suspicion.htaccess'               => 'Подозрение на мобильный редирект, подмену расширений или автовнедрение кода',
        'suspicion.non_php'                => 'В не .php файле содержится стартовая сигнатура PHP кода. Возможно, там вредоносный код',
        'suspicion.hidden_link'            => 'Невидимые ссылки. Подозрение на ссылочный спам',
        'suspicion.doorway'                => 'Подозрение на дорвей',
        'suspicion.code'                   => 'Скрипт использует код, который часто встречается во вредоносных скриптах',
        'suspicion.obfuscated_variables'   => 'Подозрение на обфусцированные переменные',
        'suspicion.global_array'           => 'Подозрительное использование массива глобальных переменных',
        'suspicion.file_time'              => "Подозрительные параметры времени изменения файла",
        'suspicion.file_attributes'        => "Подозрительные атрибуты файла",
        'suspicion.file_location'          => "Подозрительное местоположение файла",
        'symlinks'                         => 'Символические ссылки (symlinks)',
        'hidden_links'                     => 'Невидимые ссылки',
        'link.symbolic'                    => 'Символических ссылок',
        'links.adware_spam'                => 'Рекламных ссылок и кодов',
        'links.empty'                      => 'Пустых ссылок',
        'display_only_first'               => 'Отображены только первые ',
        'skipped.adirignore'               => 'Директории из файла .adirignore были пропущены при сканировании',
        'founded_CMS'                      => 'Версии найденных CMS',
        'folder.unsafe_writable'           => 'Потенциально небезопасно! Директории, доступные скрипту на запись',
        'folder.unsafe_writable_not_found' => 'Не найдено директорий, доступных на запись скриптом',
        'folder.added'                     => "Добавленные каталоги",
        'folder.deleted'                   => "Удаленные каталоги",
        'memory_used'                      => 'Использовано памяти при сканировании: ',
        'notice.scan_express'              => '<div class="rep">Внимание! Выполнена экспресс-проверка сайта. Просканированы только файлы с расширением .php, .js, .html, .htaccess. В этом режиме могут быть пропущены вирусы и хакерские скрипты в файлах с другими расширениями. Чтобы выполнить более тщательное сканирование, поменяйте значение настройки на <b>\'scan_all_files\' => 1</b> в строке 50 или откройте сканер в браузере с параметром full: <b><a href="ai-bolit.php?p=&full">ai-bolit.php?p=&full</a></b>. <p>Не забудьте перед повторным запуском удалить файл %s</div>',
        'feedback_for_script'              => 'Мы будем чрезвычайно благодарны за любые упоминания скрипта AI-Bolit на вашем сайте, в блоге, среди друзей, знакомых и клиентов. Ссылочку можно поставить на <a href="https://revisium.com/ai/">https://revisium.com/ai/</a>.',
        'report_for'                       => 'Отчет по ',
        'function.many_reference'          => 'Много косвенных вызовов функции',
        'str.abnormal_split'               => 'Дробление строки на символы',
        'scan.offer_modes_after_express'   => 'Сканирование выполнено в экспресс-режиме. Многие вредоносные скрипты могут быть не обнаружены.<br> Рекомендуем проверить сайт в режиме "Эксперт" или "Параноидальный". Подробно описано в <a href="https://revisium.com/ai/faq.php">FAQ</a> и инструкции к скрипту.',
        'mobile_redirects'                 => 'Мобильных редиректов',
        'skipped.large_file'               => 'Большие файлы (больше чем %s). Пропущено',
        'malware'                          => 'Вредоносных скриптов',
        'js_virused'                       => 'JS Вирусов',
        'phishing_pages'                   => 'Фишинговых страниц',
        'executable_files'                 => 'Исполняемых файлов',
        'iframe_injections'                => 'IFRAME вставок',
        'skipped_large_file'               => 'Пропущенных больших файлов',
        'error.read_file'                  => 'Ошибок чтения файлов',
        'suspicious'                       => 'Подозрительных',
        'report.summary'                   => 'Сводный отчет',
        'footer'                           => TemplateList::FOOTER_RU,
        'notice.files_may_not_malicious'   => "Обращаем внимание, что обнаруженные файлы не всегда являются вирусами и хакерскими скриптами. Сканер минимизирует число ложных обнаружений, но это не всегда возможно, так как найденный фрагмент может встречаться как во вредоносных скриптах, так и в обычных.<p>Для диагностического сканирования без ложных срабатываний мы разработали специальную версию <u><a href=\"https://revisium.com/ru/blog/ai-bolit-4-ISP.html\" target=_blank style=\"background: none; color: #303030\">сканера для хостинг-компаний</a></u>.",
        'script.vulnerable'                => "Уязвимости в скриптах",
        'path'                             => 'Путь',
        'property_change'                  => 'Изменение свойств',
        'content_change'                   => 'Изменение содержимого',
        'size'                             => 'Размер',
        'php_config'                       => 'Конфигурация PHP',
    ];

    const EN = [
        //variables for javascript
        'data_table.length_menu'           => 'Display _MENU_ records',
        'data_table.zero_records'          => 'Not found',
        'data_table.info'                  => 'Display from _START_ to _END_ of _TOTAL_ files',
        'data_table.info_empty'            => 'No files',
        'data_table.info_filtered'         => '(total _MAX_)',
        'data_table.search'                => 'Filter/Search:',
        'data_table.paginate.first'        => 'First',
        'data_table.paginate.previous'     => 'Previous',
        'data_table.paginate.next'         => 'Next',
        'data_table.paginate.last'         => 'Last',
        'data_table.aria.sort_ascending'   => ': activate to sort row ascending order',
        'data_table.aria.sort_descending'  => ': activate to sort row descending order',
        'header.scan_report_title'         => 'AI-Bolit v@@VERSION@@ Scan Report:',
        'offer.when_no_critical'           => '',
        'offer_our_products'               => TemplateList::OFFER_OUR_PRODUCTS_EN,
        'offer.when_has_critical'          => TemplateList::OFFER_EN,
        'сaution.aibolit_file'             => 'Caution! Do not leave either ai-bolit.php or report file on server and do not provide direct links to the report file. Report file contains sensitive information about your website which could be used by hackers. So keep it in safe place and don\'t leave on website!',
        'сaution.scanner_set_password'     => "Open AI-BOLIT with password specified in the beggining of file in PASS variable. <br/>E.g. http://you_website.com/ai-bolit.php?p=<b>%s</b>",
        'сaution.quick_scanned'            => '<div class="rep" style="color: #0000A0">Attention! Script has performed quick scan. It scans only .html/.js/.php files  in quick scan mode so some of malicious scripts might not be detected. <br>Please launch script from a command line thru SSH to perform full scan.',
        'warning.weak_password'            => "Your password for AI-BOLIT is too weak. Password must be more than 8 character length, contain both latin letters in upper and lower case, and digits. E.g. <b>%s</b>",
        'warning.folder_read_permission'   => 'Current folder is not readable. Please change permission for <b>rwxr-xr-x</b> or using command line <b>chmod +r folder_name</b>',
        'warnings'                         => 'Warnings',
        'warning.reading_error'            => 'Reading error. Skipped.',
        'info.time_elapsed'                => "<div class=\"rep\">%s malicious signatures known, %s virus signatures and other malicious code. Elapsed: <b>%s</b
>.<br/>Started: %s. Stopped: %s</div> ",
        'info.files_checked'               => 'Scanned %s folders and %s files.',
        'info.non_commercial_use'          => 'For non-commercial use only.',
        'critical.title'                   => '<div class="title">Critical</div>',
        'detected.shell_scripts'           => 'Shell script signatures detected. Might be a malicious or hacker\'s scripts',
        'not_detected.shell_scripts'       => 'Shell scripts signatures not detected.',
        'detected.javascript'              => 'Javascript virus signatures detected:',
        'detected.executables'             => 'Unix executables signatures and odd scripts detected. They might be a malicious binaries or rootkits:',
        'detected.bad_links'               => 'This script has black-SEO links or linkfarm. Check if it was installed by yourself:',
        'detected.phishing_pages'          => 'Phishing pages detected:',
        'file.not_found.more_than'         => 'Files greater than %s not found',
        'file.recommend_to_remove'         => 'Files recommended to be remove due to security reason:',
        'file.scanned_manual'              => 'Quick scan through the files from %s. For full scan remove %s and launch scanner once again.',
        'file.suspicion.heuristic_analyze' => 'Heuristic Analyzer has detected suspicious files. Check if they are malware.',
        'file.encrypted'                   => 'Encrypted files',
        'file.hidden'                      => 'Hidden files',
        'files_may_not_malicious'          => "Notice! Some of detected files may not contain malicious code. Scanner tries to minimize a number of false positives, but sometimes it's impossible, because same piece of code may be used either in malware or in normal scripts.",
        'file.added'                       => "Added files",
        'file.updated'                     => "Modified files",
        'file.deleted'                     => "Deleted files",
        'file_structure.updates'           => "Integrity Check Report",
        'hidden_files'                     => 'Hidden files:',
        'doorway.might'                    => 'Files might be a part of doorway:',
        'doorway.not_found'                => 'Doorway folders not detected',
        'suspicion.multiple'               => 'Suspicious encoded strings, extra .php extention or external includes detected in PHP files. Might be a malicious or hacker\'s script:',
        'suspicion.malicious'              => 'Might be a malicious or hacker\'s script:',
        'suspicion.htaccess'               => 'Malicious code in .htaccess (redirect to external server, extention handler replacement or malicious code auto-append):',
        'suspicion.non_php'                => 'Non-PHP file has PHP signature. Check for malicious code:',
        'suspicion.hidden_link'            => 'These files have invisible links, might be black-seo stuff:',
        'suspicion.doorway'                => 'Folders contained too many .php or .html files. Might be a doorway:',
        'suspicion.code'                   => 'Suspicious code detected. It\'s usually used in malicious scrips:',
        'suspicion.obfuscated_variables'   => 'Suspected for obfuscated variables',
        'suspicion.global_array'           => 'Suspected for $GLOBAL array usage',
        'suspicion.file_time'              => "Suspicious file mtime and ctime",
        'suspicion.file_attributes'        => "Suspicious file permissions",
        'suspicion.file_location'          => "Suspicious file location",
        'symlinks'                         => 'Symlinks:',
        'hidden_links'                     => 'List of invisible links:',
        'link.symbolic'                    => 'Symbolic links',
        'links.adware_spam'                => 'Adware and spam links',
        'links.empty'                      => 'Empty links',
        'display_only_first'               => 'Displayed first ',
        'skipped.adirignore'               => 'The following list of files specified in .adirignore has been skipped:',
        'founded_CMS'                      => 'CMS found:',
        'folder.unsafe_writable'           => 'Potentially unsafe! Folders which are writable for scripts:',
        'folder.unsafe_writable_not_found' => 'Writable folders not found',
        'folder.added'                     => "Added directories",
        'folder.deleted'                   => "Deleted directories",
        'memory_used'                      => 'Memory used: ',
        'notice.scan_express'              => '<div class="notice"><span class="vir">[!]</span> Ai-BOLIT is working in quick scan mode, only .php, .html, .htaccess files will be checked. Change the following setting \'scan_all_files\' => 1 to perform full scanning.</b>. </div>',
        'feedback_for_script'              => "I'm sincerely appreciate reports for any bugs you may found in the script. Please email me: <a href=\"mailto:audit@revisium.com\">audit@revisium.com</a>.<p> Also I appriciate any reference to the script in your blog or forum posts. Thank you for the link to download page: <a href=\"https://revisium.com/aibo/\">https://revisium.com/aibo/</a>",
        'report_for'                       => 'Report for ',
        'function.many_reference'          => 'Function called by reference',
        'str.abnormal_split'               => 'Abnormal split of string',
        'scan.offer_modes_after_express'   => 'Scanning has been done in simple mode. It is strongly recommended to perform scanning in "Expert" mode. See readme.txt for details.',
        'mobile_redirects'                 => 'Mobile redirects',
        'skipped.large_file'               => 'Large files (greater than %s! Skipped:',
        'malware'                          => 'Malware',
        'js_virused'                       => 'JS viruses',
        'phishing_pages'                   => 'Phishing pages',
        'executable_files'                 => 'Unix executables',
        'iframe_injections'                => 'IFRAME injections',
        'skipped_large_file'               => 'Skipped big files',
        'critical.error_read_file'         => 'Reading errors',
        'suspicious'                       => 'Suspicious',
        'report.summary'                   => 'Summary',
        'footer'                           => TemplateList::FOOTER_EN,
        'script.vulnerable'                => "Vulnerable Scripts",
        'path'                             => 'Path',
        'property_change'                  => 'iNode Changed',
        'content_change'                   => 'Modified',
        'size'                             => 'Size',
        'php_config'                       => 'PHP Info',
    ];
}


class UserList
{
    private $users = [];

    public function add($uid)
    {
        $this->users[$uid] = '';
    }

    public function getList()
    {
        ksort($this->users);
        return array_keys($this->users);
    }

    public function setList($list)
    {
        $this->users = $list;
    }
}

/**
 * Class HyperScan
 * contains Hyperscan related functions
 */
class HyperScan
{
    private static $usage = [];
    private static $critical_content_hs = '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';
    private static $scratch_content_hs;
    private static $interesting_hs = '7ZrLUhpBFIZ7huEyiiJe8IIoKt7wMm1VllYFNqkskpSLPIDvkY3LLF1mmefIiqos8hAs8hDZYMlAuofu6e4fUQgaielf29Nfn+5zpmemAM/QbDabhHjJixNCyFWCcN3++PyNKDnRL5F/lUXx8TJr2cUelwfMIbuKa4umv8vkCiv5lWvm1I9Dz3FXPilXNBmXaP2y8H2p9O8xOi9abD1HQjQ+1xNj0jqiuZDfhXEUX5+EsYTWl3H1fQwrvq5RGW3NvrBU2HXNV2Zt+65FsLmrPCF57QpmidrHlGiDVK7HKk8EuwkvmUpn/Kni3Tzq+ufez6TzQ+fbsmXLli2/DH7u9xvLli1btmzZ8rNzLU/I5RwbZ5aylq3X04OKJ3Wtz+fWwY/LEsAeMNZhUsBp4AywD8zrHHwfUkXWHDiwGcwplU6zlvIc4nENKh/1SZbXRq3jHAnb6fY0bD5UVlhZ/cH9aS5xGpyh9/YU8VA51q5zvXshul/YRW3cV7ACdTXddrvtbrcT3vKeVEd1w2jY9Idh2L4JdbXD8CaMhx7MH7bbrVbrv7cdHG9PxnGNa9n90HraPK2h5t3+afybyTiPdv/WWmvtS7PjqsZag9tBD32HEfscs7/1/dOv2Q/T+vNRqcsxQkfa2QpkHhm3scA+r8VJ7s+PGv14zl/LPHp+twfdn0yj5B/xOM7ffnz/TubR8yfHuWZWVlYvRljr+JfF/y+uuapec33Pd1rGfQl8I+wFFndG0FzGrB2dERJ//+UhnYn1Afu51gpUgajkeI6oCHH5Pmten/ykn/KV0lrfz/j+lOwT1hy310/4/Rrg70/4l8ULPVdYjNPE5wRe0kt5nuK04kzs751TvqmAnZZp31ecVTwT+435VJs/q6/PMQW5uVw+l1M8r3gh9lN9PtXmL5rrl4x4BaagsFxYKRQUrypei/1Un0+1+UVz/boZj5rxS0xBaaO0WSopLiveiv1Un0+1+dvm+h0zHjXjV5iCym5lr1JRvA8c+anOVPMfmOsPzXjUjF9lClg7qlYVHwNHfqozVf4Tcz01450yBaeRgKnONPZTcz5lCmikiB2mwHGdhDP8q10AjCsnoVauaxo4C4x14FngHPAccB54HngBGL62SpaAC8DLwCvAq8BrwEXgdeAS8AbwJnAZeAsYnwfsAONb7i7wHvA+8AHwIXAV+Aj4GPgE+BSY3+/8PeKruBGpGMfnL6jHfh7zWPoN';
    private static $scratch_interesting_hs;
    private static $log_hs = '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';
    private static $scratch_log_hs;

    private static $php;
    private static $scratch_php;

    private static $js;
    private static $scratch_js;

    private static $sus;
    private static $scratch_sus;

    public static function init()
    {
        if (!extension_loaded('hyperscan')) {
            return false;
        }

        $db = null;
        if (hs_database_deserialize(gzinflate(base64_decode(self::$critical_content_hs)), $db) === HS_SUCCESS) {
            self::$critical_content_hs = $db;
            if (hs_alloc_scratch(self::$critical_content_hs, self::$scratch_content_hs) === HS_SUCCESS) {
                self::$usage['critical'] = true;
            }
        }

        $db = null;
        if (hs_database_deserialize(gzinflate(base64_decode(self::$interesting_hs)), $db) === HS_SUCCESS) {
            self::$interesting_hs = $db;
            if (hs_alloc_scratch(self::$interesting_hs, self::$scratch_interesting_hs) === HS_SUCCESS) {
                self::$usage['interesting'] = true;
            }
        }

        $db = null;
        if (hs_database_deserialize(gzinflate(base64_decode(self::$log_hs)), $db) === HS_SUCCESS) {
            self::$log_hs = $db;
            if (hs_alloc_scratch(self::$log_hs, self::$scratch_log_hs) === HS_SUCCESS) {
                self::$usage['log'] = true;
            }
        }
        return true;
    }

    public static function initExtDb($folder, $ver)
    {
        if (!extension_loaded('hyperscan')) {
            return false;
        }

        if (!file_exists($folder) || !is_dir($folder)) {
            fwrite(STDERR, '[HS] Error loading hyperscan db ' . $folder . ' not exists.' . PHP_EOL);
            return false;
        }
        return self::load($folder, $ver);
    }

    public static function matchCritical($content)
    {
        $time = microtime(true);
        $res = self::match($content, self::$critical_content_hs, self::$scratch_content_hs);
        if (class_exists('PerfomanceStats')) {
            PerfomanceStats::addPerfomanceItem(PerfomanceStats::HS_SMART_STAT, microtime(true) - $time);
        }
        return $res;
    }

    public static function matchInteresting($content)
    {
        $time = microtime(true);
        $res = self::match($content, self::$interesting_hs, self::$scratch_interesting_hs);
        if (class_exists('PerfomanceStats')) {
            PerfomanceStats::addPerfomanceItem(PerfomanceStats::HS_SMART_STAT, microtime(true) - $time);
        }
        return $res;
    }

    public static function matchLog($content)
    {
        $time = microtime(true);
        $res = self::match($content, self::$log_hs, self::$scratch_log_hs);
        if (class_exists('PerfomanceStats')) {
            PerfomanceStats::addPerfomanceItem(PerfomanceStats::HS_SMART_STAT, microtime(true) - $time);
        }
        return $res;
    }

    public static function canMatchCritical()
    {
        return self::$usage['critical'] ?? false;
    }

    public static function canMatchInteresting()
    {
        return self::$usage['interesting'] ?? false;
    }

    public static function canMatchLog()
    {
        return self::$usage['log'] ?? false;
    }

    public static function hs_precheck($content, $unwrapped, $check_sus)
    {
        if (self::canMatchPhp()) {
            if (self::matchPhp($content) || self::matchPhp($unwrapped)) {
                return true;
            }
        }

        if (self::canMatchJs()) {
            if (self::matchJs($content) || self::matchJs($unwrapped)) {
                return true;
            }
        }

        if ($check_sus && self::canMatchSus()) {
            if (self::matchSus($content) || self::matchSus($unwrapped)) {
                return true;
            }
        }

        if (!self::canMatchPhp() || !self::canMatchJs() || !self::canMatchSus()) {
            return true;
        }

        return false;
    }



    private static function match($content, $db, $scratch)
    {
        $err = hs_scan($content, HS_MODE_BLOCK, $db, $scratch, function ($id, $from, $to) {
            return false;
        });
        return $err === HS_SCAN_TERMINATED;
    }

    private static function matchPhp($content)
    {
        $time = microtime(true);
        $res = self::match($content, self::$php, self::$scratch_php);
        if (class_exists('PerfomanceStats')) {
            PerfomanceStats::addPerfomanceItem(PerfomanceStats::HS_SCAN_STAT, microtime(true) - $time);
        }
        return $res;
    }

    private static function matchJs($content)
    {
        $time = microtime(true);
        $res = self::match($content, self::$js, self::$scratch_js);
        if (class_exists('PerfomanceStats')) {
            PerfomanceStats::addPerfomanceItem(PerfomanceStats::HS_SCAN_STAT, microtime(true) - $time);
        }
        return $res;
    }

    private static function matchSus($content)
    {
        $time = microtime(true);
        $res = self::match($content, self::$sus, self::$scratch_sus);
        if (class_exists('PerfomanceStats')) {
            PerfomanceStats::addPerfomanceItem(PerfomanceStats::HS_SCAN_STAT, microtime(true) - $time);
        }
        return $res;
    }

    private static function canMatchPhp()
    {
        return self::$usage['php'] ?? false;
    }

    private static function canMatchJs()
    {
        return self::$usage['js'] ?? false;
    }

    private static function canMatchSus()
    {
        return self::$usage['sus'] ?? false;
    }

    private static function load($folder, $ver)
    {
        $version = @file_get_contents($folder . '/' . 'version.txt');
        if ($version !== $ver) {
            fwrite(STDERR, '[HS] Error loading hyperscan db ' . $version . ' != ' . $ver . PHP_EOL);
            return false;
        }

        $db = null;
        if (hs_database_mmap_deserialize($folder . '/' . 'hs_php.db', $db) === HS_SUCCESS) {
            self::$php = $db;
            if (hs_alloc_scratch(self::$php, self::$scratch_php) === HS_SUCCESS) {
                self::$usage['php'] = true;
            }
        }

        $db = null;
        if (hs_database_mmap_deserialize($folder . '/' . 'hs_js.db', $db) === HS_SUCCESS) {
            self::$js = $db;
            if (hs_alloc_scratch(self::$js, self::$scratch_js) === HS_SUCCESS) {
                self::$usage['js'] = true;
            }
        }

        $db = null;
        if (hs_database_mmap_deserialize($folder . '/' . 'hs_sus.db', $db) === HS_SUCCESS) {
            self::$sus = $db;
            if (hs_alloc_scratch(self::$sus, self::$scratch_sus) === HS_SUCCESS) {
                self::$usage['sus'] = true;
            }
        }
        return $db;
    }
}


class PerfomanceStats
{
    const HS_SMART_STAT     = 'smart_time_hs';
    const HS_SCAN_STAT      = 'scan_time_hs';
    const PCRE_SMART_STAT   = 'smart_time_preg';
    const PCRE_SCAN_STAT    = 'scan_time_preg';
    const FINDER_STAT       = 'finder_time';
    const CAS_STAT          = 'cas_time';
    const DEOBF_STAT        = 'deobfuscate_time';

    private static $perfomance_stats = [];
    private static $perfomance_types = [
        self::HS_SMART_STAT,
        self::HS_SCAN_STAT,
        self::PCRE_SMART_STAT,
        self::PCRE_SCAN_STAT,
        self::FINDER_STAT,
        self::CAS_STAT,
        self::DEOBF_STAT
    ];

    public static function addPerfomanceItem($item, $time)
    {
        self::$perfomance_stats[$item] = isset(self::$perfomance_stats[$item]) ? self::$perfomance_stats[$item] + $time : $time;
    }

    public static function getPerfomanceItem($item)
    {
        if (!isset(self::$perfomance_stats[$item])) {
            return 0;
        }
        return self::$perfomance_stats[$item];
    }

    public static function getPerfomanceTypes()
    {
        return self::$perfomance_types;
    }
}

/**
 * Tracking progress of scan
 * Class Progress
 */
class Progress
{
    const STAGE_START   = 'start';
    const STAGE_LIST    = 'list';
    const STAGE_SCAN    = 'scan';
    const STAGE_DONE    = 'done';

    const DETECT_PHP    = 'php';
    const DETECT_JS     = 'js';
    const DETECT_SUS    = 'sus';
    const DETECT_PHS    = 'phs';

    const PREFIX_ADD    = 'add';
    const PREFIX_NO     = 'no';

    const ALLOWED_STAGES = [self::STAGE_START, self::STAGE_LIST, self::STAGE_SCAN, self::STAGE_DONE];

    private static $updated;
    private static $started;
    private static $stage_started;
    private static $files_total;
    private static $current_file;
    private static $stage;
    private static $last_saved;

    private static $progress_log;
    private static $shared_mem;
    private static $create_shared_mem = false;

    private static $detected = [self::DETECT_PHP => 0, self::DETECT_JS => 0, self::DETECT_SUS => 0, self::DETECT_PHS => 0];
    private static $prefixes = [self::PREFIX_ADD => '', self::PREFIX_NO => ''];

    private static $progress_string;
    private static $progress_array;

    private static $print_func;

    /**
     * Init progress
     */
    public static function init()
    {
        $time           = microtime(true);
        self::$started  = $time;
        self::$detected = [self::DETECT_PHP => 0, self::DETECT_JS => 0, self::DETECT_SUS => 0, self::DETECT_PHS => 0];
        self::$prefixes = [self::PREFIX_ADD => '', self::PREFIX_NO => ''];

        self::$updated          = $time;
        self::$stage_started    = $time;
        self::$files_total      = 0;
        self::$current_file     = '';
        self::$stage            = self::STAGE_START;

        self::$progress_log = null;
        self::$shared_mem   = null;

        self::$progress_array = [
            'self'          => __FILE__,
            'started'       => self::$started,
            'updated'       => self::$updated,
            'progress'      => 0,
            'time_elapsed'  => 0,
            'time_left'     => 0,
            'files_left'    => 0,
            'files_total'   => 0,
            'current_file'  => '',
            'stage'         => self::$stage,
            'list_speed'    => null,
            'scan_speed'    => null,
        ];
    }

    /**
     * Get average files/sec
     * @param int $files
     * @param float $time
     * @return float
     */
    private static function getAvg(int $files, float $time): float
    {
        if ($time < 1) {
            return 0;
        }
        $fs = floor($files / round($time, 0));
        if ($fs > 0) {
            return round($fs, 2);
        }
        return 0;
    }

    /**
     * update data of list stage progress
     * @param int $total_files
     */
    public static function updateList(int $total_files)
    {
        if (self::$stage !== self::STAGE_LIST) {
            return;
        }
        self::$updated  = microtime(true);
        $elapsed_time   = microtime(true) - self::$started;
        $fs             = self::getAvg($total_files, (microtime(true) - self::$stage_started));
        $stat = '';
        if ($fs > 0) {
            $stat = ' [Avg: ' . $fs . ' files/s]';
        }

        $l_FN = substr(self::$current_file, -60);

        self::$progress_string = "[$l_FN] Selected: " . self::$files_total . " of {$total_files}. " . $stat;

        self::$progress_array['stage']          = self::$stage;
        self::$progress_array['updated']        = self::$updated;
        self::$progress_array['time_elapsed']   = round($elapsed_time, 0);
        self::$progress_array['files_total']    = self::$files_total;
        self::$progress_array['current_file']   = self::$prefixes[self::PREFIX_ADD] . str_replace(self::$prefixes[self::PREFIX_NO], '', self::$current_file);
        self::$progress_array['list_speed']     = $fs;

        if (function_exists('aibolit_onProgressUpdate')) {
            aibolit_onProgressUpdate(self::$progress_array);
        }

        self::save();
    }

    /**
     * update data of scan stage progress
     * @param int $index
     */
    public static function updateScan(int $index)
    {
        if (self::$stage !== self::STAGE_SCAN) {
            return;
        }
        self::$updated   = microtime(true);
        $total_files     = self::$files_total;
        $elapsed_time    = microtime(true) - self::$started;
        $percent         = number_format($total_files ? $index * 100 / $total_files : 0, 1);
        $stat            = '';
        $left_time       = 0;
        $fs              = self::getAvg($index, (microtime(true) - self::$stage_started));
        $left_files      = $total_files - $index;
        if ($fs > 0) {
            $left_time = ($left_files / $fs); //ceil($left_files / $fs);
            $stat = ' [Avg: ' . $fs . ' files/s' . ($left_time > 0 ? ' Left: ' . AibolitHelpers::seconds2Human($left_time) : '') . '] [Mlw:' . (self::$detected[self::DETECT_PHP] + self::$detected[self::DETECT_SUS]) . '|' . (self::$detected[self::DETECT_JS] + self::$detected[self::DETECT_PHS]) . ']';
        }

        $l_FN = substr(self::$current_file, -60);

        self::$progress_string = "$percent% [$l_FN] " . $index . " of {$total_files}. " . $stat;

        self::$progress_array['stage']          = self::$stage;
        self::$progress_array['updated']        = self::$updated;
        self::$progress_array['time_elapsed']   = round($elapsed_time, 0);
        self::$progress_array['files_total']    = self::$files_total;
        self::$progress_array['current_file']   = self::$prefixes[self::PREFIX_ADD] . str_replace(self::$prefixes[self::PREFIX_NO], '', self::$current_file);
        self::$progress_array['progress']       = $percent;
        self::$progress_array['time_left']      = round($left_time);
        self::$progress_array['files_left']     = $left_files;
        self::$progress_array['scan_speed']     = $fs;

        if (function_exists('aibolit_onProgressUpdate')) {
            aibolit_onProgressUpdate(self::$progress_array);
        }
        self::save();
    }

    /**
     * update stage + time in progress data
     */
    public static function update()
    {
        self::$progress_array['stage']          = self::$stage;
        self::$progress_array['updated']        = self::$updated;
        self::$progress_array['time_elapsed']   = round((microtime(true) - self::$started), 0);
    }

    /**
     * stage 'done' of progress
     */
    public static function done()
    {
        self::setStage(self::STAGE_DONE);

        if (file_exists(self::$progress_log)) {
            @unlink(self::$progress_log);
        }
        if (self::$shared_mem && self::$shared_mem->isValid()) {
            self::$shared_mem->close(self::$create_shared_mem);
        }
        self::$shared_mem = null;
        self::$progress_log = null;
        self::$create_shared_mem = false;
    }

    /**
     * Call user-provided function for output to cli
     */
    public static function print()
    {
        $text = str_pad(self::$progress_string, 160, ' ', STR_PAD_RIGHT);
        if (is_callable(self::$print_func)) {
            call_user_func(self::$print_func, str_repeat(chr(8), 160) . $text, false);
        }
    }

    /**
     * Flush all data to file, shared-memory and cli
     */
    public static function save()
    {
        self::print();
        if (self::$progress_log && (time() - self::$last_saved > 1)) {
            if (function_exists('json_encode')) {
                file_put_contents(self::$progress_log, json_encode(self::$progress_array));
            } else {
                file_put_contents(self::$progress_log, serialize(self::$progress_array));
            }

            self::$last_saved = time();
        }

        if (self::$shared_mem && self::$shared_mem->isValid()) {
            self::$shared_mem->write(self::$progress_array);
        }
    }

    /**
     * Setter for total files
     * @param int $files_total
     */
    public static function setFilesTotal(int $files_total)
    {
        self::$files_total = $files_total;
    }

    /**
     * Setter for current file in progress
     * @param string $current_file
     */
    public static function setCurrentFile(string $current_file)
    {
        self::$current_file = $current_file;
    }

    /**
     * Getter for current progress stage
     * @return string
     */
    public static function getStage():string
    {
        return self::$stage;
    }

    /**
     * Setter for current progress stage
     * @param string $stage
     */
    public static function setStage(string $stage)
    {
        if (!in_array($stage, self::ALLOWED_STAGES)) {
            return;
        }
        self::$stage = $stage;
        self::$stage_started = microtime(true);
        self::$updated = microtime(true);
        self::update();
        self::save();
    }

    /**
     * Setter for progress log file
     * @param string $progress_log
     */
    public static function setProgressLog(string $progress_log)
    {
        self::$progress_log = $progress_log;
        self::update();
        self::save();
    }

    /**
     * Getter for shared-memory region
     * @return resource
     */
    public static function getSharedMem()
    {
        return self::$shared_mem;
    }

    /**
     * Setter for shared-memory region
     * @param string $shared_mem
     * @return bool
     */
    public static function setSharedMem(string $shared_mem): bool
    {
        if (self::$create_shared_mem) {
            @$shid = new SharedMem((int)$shared_mem, "n", 0600, 5000);
        } else {
            @$shid = new SharedMem((int)$shared_mem, "w", 0, 0);
        }
        if ($shid->isValid()) {
            self::$shared_mem = $shid;
            self::update();
            self::save();
            return true;
        }

        return false;
    }

    /**
     * Setter for detection data
     * @param int[] $detected
     */
    public static function setDetected(array $detected)
    {
        self::$detected[self::DETECT_PHP] = $detected[self::DETECT_PHP] ?? self::$detected[self::DETECT_PHP];
        self::$detected[self::DETECT_JS] = $detected[self::DETECT_JS] ?? self::$detected[self::DETECT_JS];
        self::$detected[self::DETECT_SUS] = $detected[self::DETECT_SUS] ?? self::$detected[self::DETECT_SUS];
        self::$detected[self::DETECT_PHS] = $detected[self::DETECT_PHS] ?? self::$detected[self::DETECT_PHS];
    }

    /**
     * Setter for prefixes for filepath
     * @param string[] $prefixes
     */
    public static function setPrefixes(array $prefixes)
    {
        self::$prefixes[self::PREFIX_ADD] = $prefixes[self::PREFIX_ADD] ?? self::$prefixes[self::PREFIX_ADD];
        self::$prefixes[self::PREFIX_NO] = $prefixes[self::PREFIX_NO] ?? self::$prefixes[self::PREFIX_NO];
    }

    /**
     * Setter for flag if we create shared-memory region
     * @param bool $create_shared_mem
     */
    public static function setCreateSharedMem(bool $create_shared_mem)
    {
        self::$create_shared_mem = $create_shared_mem;
    }

    /**
     * Getter for flag if we create shared-memory region
     * @return bool
     */
    public static function isCreateSharedMem(): bool
    {
        return self::$create_shared_mem;
    }

    /**
     * Set external function for cli output
     * @param callable $print_func
     * @return bool
     */
    public static function setPrintFunc(callable $print_func): bool
    {
        if (!is_callable($print_func)) {
            return false;
        }
        self::$print_func = $print_func;
        return true;
    }

}


class ZipScanner
{
    private $file_name;
    private $filter;
    private $vars;

    /**
     * @param string $file_name
     * @param Variables $vars
     * @param FileFilter|null $finder
     */
    public function __construct(string $file_name, Variables $vars, $filter)
    {
        $this->file_name = $file_name;
        $this->filter    = $filter;
        $this->vars      = $vars;
    }

    /**
     * @param int $maxSize
     * @param int $maxFiles
     * @return bool
     */
    public function scan(int $maxSize = 0, int $maxFiles = 0): bool
    {
        $zip = new Zip($this->file_name);
        if (!$zip->open()) {
            return false;
        }
        $zipStat    = stat($this->file_name);
        $totalFiles = $zip->archive->numFiles;
        if ($maxSize > 0) {
            $actualSize = $this->getTotalUncompressedSize($zip->archive);
            if ($actualSize > $maxSize) {
                return false;
            }
        }

        for ($i = 0; $i < $totalFiles; $i++) {
            if ($maxFiles > 0 && $i >= $maxFiles) {
                break;
            }

            $this->vars->fileinfo = new ZipFileInfo($zip, $i, $this->file_name, $zipStat);
            $scan                 = new Scanner(null, $this->vars, null);

            if ($this->filter instanceof ZipFileFilter) {
                if (!$this->filter->needToScan(
                    $this->vars->fileinfo->getFilename(),
                    $this->vars->fileinfo->getStat(),
                    false,
                    ZipFileFilter::SKIP_ZIP_CHECKERS
                )) {
                    continue;
                }
            }

            $res = $scan->QCR_ScanFile(
                $this->vars->fileinfo->getFilename(),
                $this->vars,
                null,
                $i,
                false
            );

            if ($res && $res[0] == RapidScanStorageRecord::RX_MALWARE) {
                return true;
            }
        }

        return false;
    }

    /**
     * @param ZipArchive $zip
     * @return int
     */
    private function getTotalUncompressedSize(ZipArchive $zip): int
    {
        $totalSize = 0;

        for ($i = 0; $i < $zip->numFiles; $i++) {
            $fileStats = $zip->statIndex($i);
            $totalSize += $fileStats['size'];
        }

        return $totalSize;
    }
}

class ZipFileFilter extends FileFilter
{
    const SKIP_ZIP_CHECKERS = [
        'check_is_not_root',
        'check_is_not_system',
        'check_is_file',
    ];

    public function __construct()
    {
        $this->zipFile = true;

        parent::__construct();
    }

}


class ZipFileInfo extends FileInfo
{
    protected $index    = 0;
    protected $filename = '';
    protected $size     = 0;
    protected $modified = 0;
    protected $zip;
    protected $fullFilename;
    protected $zipFilename;
    protected $zipStat;

    public function __construct(Zip $zip, $index, $zipFullFilename, $zipStat)
    {
        $this->zip         = $zip;
        $this->index       = $index;
        $this->zipFilename = $zipFullFilename;
        $this->zipStat     = $zipStat;
        $this->_setStat();
        parent::__construct($this->filename, $this->index, null);
    }

    protected function _setStat()
    {
        /** @var array $info */
        $info           = $this->zip->getFileInfo($this->index);
        $this->size     = $info['size'];
        $this->filename = 'zip://' . $this->zipFilename . '#' . $info['name'];
        $this->created  = $this->zipStat['ctime'];
        $this->modified = $this->zipStat['mtime'];
    }

    public function getStat()
    {
        return [
            'size'  => $this->size,
            'name'  => $this->filename,
            'ctime' => $this->created,
            'mtime' => $this->modified,
        ];
    }
}


class OsReleaseInfo
{
    private $prefix = '';
    private $release_file = '';
    const DEBIAN = ['debian'];
    const RHEL_FEDORA_CENTOS = ['rhel', 'fedora', 'centos'];
    const UNKNOWN = ['unknown'];

    private $_supported_dists = [
        'SuSE', 'debian', 'fedora', 'redhat', 'centos',
        'mandrake', 'mandriva', 'rocks', 'slackware', 'yellowdog', 'gentoo',
        'UnitedLinux', 'turbolinux'];

    private $_release_filename = '(\w+)[-_](release|version)';
    private $_lsb_release_version = '(.+)'
    . ' release '
    . '([\d.]+)'
    . '[^(]*(?:\((.+)\))?';
    private $_release_version = '([^0-9]+)'
    . '(?: release )?'
    . '([\d.]+)'
    . '[^(]*(?:\((.+)\))?';

    private $release = [];

    public function __construct($prefix = '', $release_file = '/etc/os-release')
    {
        $this->prefix = $prefix;
        $this->release_file = $this->prefix . $release_file;
        $this->getRelease($this->release_file);
    }

    private function getOsReleaseAndVersion()
    {
        $ver = rtrim(@file_get_contents($this->prefix . '/etc/system-release'));
        return $ver ?: $this->release['VERSION'];
    }

    public function getOsVersion($release_and_version = false)
    {
        $rv = $release_and_version ? $release_and_version : $this->getOsReleaseAndVersion();
        if ($rv) {
            if (preg_match('~\s*(\d+\.\d+\S*)(\s|$)~', $rv, $m)) {
                return $m[1];
            }
        }
        return $this->release['VERSION_ID'] ? $this->release['VERSION_ID'] : false;
    }

    private function linuxDistribution($distname = '', $version = '', $id = '')
    {
        $dists = array_flip($this->_supported_dists);
        if (!file_exists($this->prefix . '/etc')) {
            return [$distname, $version, $id];
        }
        $file = '';
        $etc = scandir($this->prefix . '/etc');
        foreach ($etc as $file) {
            if (preg_match('~' . $this->_release_filename . '~', $file, $m)) {
                if (isset($dists[$m[1]])) {
                    $_distname = $m[1];
                    $distname = $m[1];
                    break;
                }
            }
        }
        $f = fopen($this->prefix . '/etc/' . $file, 'r');
        $firstline = fgets($f);
        fclose($f);
        list($_distname, $_version, $_id) = $this->_parseReleaseFile($firstline);

        if ($_distname) {
            $distname = $_distname;
        }

        if ($_version) {
            $version = $_version;
        }

        if ($_id) {
            $id = $_id;
        }

        return [$distname, $version, $id];
    }

    private function _parseReleaseFile($firstline)
    {
        $version = '';
        $id = '';
        if (preg_match('~' . $this->_lsb_release_version . '~', $firstline, $m)) {
            return [$m[1], $m[2], $m[3]];
        }

        if (preg_match('~' . $this->_release_version . '~', $firstline, $m)) {
            return [$m[1], $m[2], $m[3]];
        }

        $l = preg_split("~\s+~", trim($firstline), -1, PREG_SPLIT_NO_EMPTY);
        if (!empty($l)) {
            $version = $l[0];
            if (count($l) > 1) {
                $id = $l[1];
            }
        }
        return ['', $version, $id];
    }

    private function getReleaseFromFile($release_file)
    {
        $lines = file($release_file, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
        foreach ($lines as $line) {
            list($k, $v) = explode('=', rtrim($line), 2);
            $this->release[$k] = trim($v, '"');
        }
        if (isset($this->release['ID_LIKE'])) {
            $this->release['ID_LIKE'] = preg_split('~\s+~', $this->release['ID_LIKE'], -1, PREG_SPLIT_NO_EMPTY);
        } else {
            $this->release['ID_LIKE'] = [$this->release['ID']];
        }
    }

    private function getRelease($release_file = '')
    {
        if (count($this->release) != 0) {
            return $this->release;
        }
        if ($this->release_file) {
            $release_file = $this->release_file;
        }
        $osid = '';
        if (file_exists($release_file)) {
            $this->getReleaseFromFile($release_file);
        } else {
            $d = $this->linuxDistribution();
            if ($d && isset($d[0])) {
                $osid = current(preg_split('~\s+~', strtolower($d[0]), -1, PREG_SPLIT_NO_EMPTY));
                if ($osid == 'red' && strpos($d[0], 'Red Hat Enterprise Linux')) {
                    $osid = 'rhel';
                }
                $this->release['ID'] = $osid;
                $this->release['PRETTY_NAME'] = "{$d[0]} {$d[1]} ({$d[2]})";
                if (in_array($osid, ['cloudlinux', 'centos', 'rhel'])) {
                    $this->release['ID_LIKE'] = self::RHEL_FEDORA_CENTOS;
                } else if (in_array($osid, ['ubuntu', 'debian'])) {
                    $this->release['ID_LIKE'] = self::DEBIAN;
                } else {
                    $this->release['ID_LIKE'] = self::UNKNOWN;
                }
            } else {
                $this->release['ID'] = 'unknown';
                $this->release['ID_LIKE'] = self::UNKNOWN;
                $this->release['PRETTY_NAME'] = 'unknown';
            }
        }
        return $this->release;
    }

    public function getIdLike()
    {
        $rel = $this->getRelease();
        return $rel['ID_LIKE'];
    }

    public function isIdLikeCentos()
    {
        $rel = $this->getRelease();
        foreach (self::RHEL_FEDORA_CENTOS as $os) {
            if (in_array($os, $rel['ID_LIKE'])) {
                return true;
            }
        }
        return false;
    }

    public function getPrettyName()
    {
        $rel = $this->getRelease();
        return $rel['PRETTY_NAME'];
    }

    public function getOs()
    {
        $rel = $this->getRelease();
        return $rel['ID'];
    }

    public function isRhel()
    {
        return $this->getOs() == 'rhel';
    }

    public function isCentos()
    {
        return $this->getOs() == 'centos';
    }

    public function isUbuntu()
    {
        return $this->getOs() == 'ubuntu';
    }

    public function isCloudlinux()
    {
        return $this->getOs() == 'cloudlinux';
    }

    public function isDebian()
    {
        return $this->getOs() == 'debian';
    }
}

/**
 * Class FileHashMemoryDb.
 *
 * Implements operations to load the file hash database into memory and work with it.
 */
class FileHashMemoryDb
{
    const HEADER_SIZE = 1024;
    const ROW_SIZE = 20;

    /**
     * @var int
     */
    private $count;
    /**
     * @var array
     */
    private $header;
    /**
     * @var resource
     */
    private $fp;
    /**
     * @var array
     */
    private $data;

    /**
     * Creates a new DB file and open it.
     *
     * @param $filepath
     * @return FileHashMemoryDb
     * @throws Exception
     */
    public static function create($filepath)
    {
        if (file_exists($filepath)) {
            throw new Exception('File \'' . $filepath . '\' already exists.');
        }

        $value = pack('V', 0);
        $header = array_fill(0, 256, $value);
        file_put_contents($filepath, implode($header));

        return new self($filepath);
    }

    /**
     * Opens a particular DB file.
     *
     * @param $filepath
     * @return FileHashMemoryDb
     * @throws Exception
     */
    public static function open($filepath)
    {
        if (!file_exists($filepath)) {
            throw new Exception('File \'' . $filepath . '\' does not exist.');
        }

        return new self($filepath);
    }

    /**
     * FileHashMemoryDb constructor.
     *
     * @param mixed $filepath
     * @throws Exception
     */
    private function __construct($filepath)
    {
        $this->fp = fopen($filepath, 'rb');

        if (false === $this->fp) {
            throw new Exception('File \'' . $filepath . '\' can not be opened.');
        }

        try {
            $this->header = unpack('V256', fread($this->fp, self::HEADER_SIZE));
            $this->count = (int) (max(0, filesize($filepath) - self::HEADER_SIZE) / self::ROW_SIZE);
            foreach ($this->header as $chunk_id => $chunk_size) {
                if ($chunk_size > 0) {
                    $str = fread($this->fp, $chunk_size);
                } else {
                    $str = '';
                }
                $this->data[$chunk_id] = $str;
            }
        } catch (Exception $e) {
            throw new Exception('File \'' . $filepath . '\' is not a valid DB file. An original error: \'' . $e->getMessage() . '\'');
        }
    }

    /**
     * Calculates and returns number of hashes stored in a loaded database.
     *
     * @return int number of hashes stored in a DB
     */
    public function count()
    {
        return $this->count;
    }

    /**
     * Find hashes in a DB.
     *
     * @param array $list of hashes to find in a DB
     * @return array list of hashes from the $list parameter that are found in a DB
     */
    public function find($list)
    {
        sort($list);
        
        $hash = reset($list);

        $found = [];

        foreach ($this->header as $chunk_id => $chunk_size) {
            if ($chunk_size > 0) {
                $str = $this->data[$chunk_id];

                do {
                    $raw = pack("H*", $hash);
                    $id  = ord($raw[0]) + 1;

                    if ($chunk_id == $id AND $this->binarySearch($str, $raw)) {
                        $found[] = (string)$hash;
                    }

                } while ($chunk_id >= $id AND $hash = next($list));

                if ($hash === false) {
                    break;
                }
            }
        }

        return $found;
    }

    /**
     * Searches $item in the $str using an implementation of the binary search algorithm.
     *
     * @param $str
     * @param $item
     * @return bool
     */
    private function binarySearch($str, $item) {
        $item_size = strlen($item);
        if ($item_size == 0) {
            return false;
        }

        $first = 0;

        $last = floor(strlen($str) / $item_size);

        while ($first < $last) {
            $mid = $first + (($last - $first) >> 1);
            $b   = substr($str, $mid * $item_size, $item_size);
            if (strcmp($item, $b) <= 0) {
                $last = $mid;
            } else {
                $first = $mid + 1;
            }
        }

        $b = substr($str, $last * $item_size, $item_size);
        if ($b == $item) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * FileHashDB destructor.
     */
    public function __destruct()
    {
        fclose($this->fp);
    }
}

class FilepathEscaper
{
    public static function encodeFilepath($filepath)
    {
        return str_replace(['\\', "\n", "\r"], ['\\\\', '\\n', '\\r'], $filepath);
    }
    
    public static function decodeFilepath($filepath)
    {
        return preg_replace_callback('~(\\\\+)(.)~', function ($matches) {
            $count = strlen($matches[1]);
            if ($count % 2 === 0) {
                return str_repeat('\\', $count/2) . $matches[2];
            }
            return str_repeat('\\', floor($count/2)) . stripcslashes('\\' . $matches[2]);
        }, $filepath);
    }
    
    public static function encodeFilepathByBase64($filepath)
    {
        return base64_encode($filepath);
    }
    
    public static function decodeFilepathByBase64($filepath_base64)
    {
        return base64_decode($filepath_base64);
    }
}


class StringToStreamWrapper {

    const WRAPPER_NAME = 'var';

    private static $_content;
    private $_position;

    /**
     * Prepare a new memory stream with the specified content
     * @return string
     */
    public static function prepare($content)
    {
        if (!in_array(self::WRAPPER_NAME, stream_get_wrappers())) {
            stream_wrapper_register(self::WRAPPER_NAME, get_class());
        }
        self::$_content = $content;
    }

    public function stream_open($path, $mode, $options, &$opened_path)
    {
        $this->_position = 0;
        return true;
    }

    public function stream_read($count)
    {
        $ret = substr(self::$_content, $this->_position, $count);
        $this->_position += strlen($ret);
        return $ret;
    }

    public function stream_stat()
    {
        return [];
    }

    public function stream_eof()
    {
        return $this->_position >= strlen(self::$_content);
    }

    public function stream_set_option($option , $arg1, $arg2 )
    {
        return true;
    }
}

class Normalization
{
    const MAX_ITERATION = 10;

    private static $confusables = "";

    private static function need_skip($string, $i)
    {
        $chars = " @\r\n\t.\"'";
        if (isset($string[$i]) && strpos($chars, $string[$i]) !== false) {
            $i++;
            return $i;
        }
        return false;
    }

    private static function match_shortopen_tag($string, $i, $needle, $j)
    {
        $pos_needle = false;
        $pos_string = false;
        if ((isset($needle[$j - 2]) && isset($string[$i - 2]))
            && (($needle[$j - 2] == '<') && ($string[$i - 2] == '<'))
            && (isset($needle[$j - 1]) && isset($string[$i - 1]))
            && ($needle[$j - 1] == '?' && $string[$i - 1] == '?')
        ) {
            $pos_needle = $j;
            $pos_string = $i;
        }
        if ($pos_needle && (isset($needle[$pos_needle]) && $needle[$pos_needle] === 'p')
            && (isset($needle[$pos_needle + 1]) && $needle[$pos_needle + 1] === 'h')
            && (isset($needle[$pos_needle + 2]) && $needle[$pos_needle + 2] === 'p')
        ) {
            $pos_needle = $pos_needle + 3;
        }

        if ($pos_string && (isset($string[$pos_string]) && $string[$pos_string] === 'p')
            && (isset($string[$pos_string + 1]) && $string[$pos_string + 1] === 'h')
            && (isset($string[$pos_string + 2]) && $string[$pos_string + 2] === 'p')
        ) {

            $pos_string = $pos_string + 3;
        }
        return [$pos_needle, $pos_string];
    }

    public static function unescape($string, $save_length = false) {
        if (strpos($string, '\\\'') === false && strpos($string, '\\"') === false && strpos($string, '\\/') === false) {
            return $string;
        }
        $strippedStr = stripcslashes($string);
        if (!$save_length) {
            return $strippedStr;
        } else {
            $strippedStr = self::extend_string_with_spaces($string, $strippedStr);
            return $strippedStr;
        }
    }

    public static function strip_whitespace($string, $save_length = false)
    {
        StringToStreamWrapper::prepare($string);
        $strippedStr = @php_strip_whitespace(StringToStreamWrapper::WRAPPER_NAME . '://');

        if (!$save_length) {
            return $strippedStr;
        } else {
            $strippedStr = self::extend_string_with_spaces($string, $strippedStr);
            return $strippedStr;
        }
    }

    public static function normalize($string, $save_length = false)
    {
        $search  = [ ' ;', ' =', ' ,', ' .', ' (', ' )', ' {', ' }', '; ', '= ', ', ', '. '
            , '( ', '( ', '{ ', '} ', ' !', ' >', ' <', ' _', '_ ', '< ',  '> ', ' $', ' %', '% '
            , '# ', ' #', '^ ', ' ^', ' &', '& ', ' ?', '? '];
        $replace = [  ';',  '=',  ',',  '.',  '(',  ')',  '{',  '}', ';',  '=',  ',',  '.'
            ,  '(',   ')', '{',  '}',   '!',  '>',  '<',  '_', '_',  '<',   '>',   '$',  '%', '%'
            ,  '#',   '#', '^',   '^',  '&', '&',   '?', '?'];

        $bad_chars = ['配', '内'];
        $string = str_replace($bad_chars, ' ', $string);
        $string = str_replace("\xEF\xBB\xBF", '   ', $string); //BOM

        $last_char = $string[-1] ?? '';

        if (!$save_length) {
            $string = str_replace('@', '', $string);
            $string = preg_replace('~\s+~msi', ' ', $string);
            $string = str_replace($search, $replace, $string);
            if (in_array($last_char, ["\r", "\n"]) && isset($string[-1]) && $string[-1] !== $last_char) {
                $string .= $last_char;
            }
        }

        $string = preg_replace_callback('~\bchr\(\s*([0-9a-fA-FxX\^]+)\s*\)~', function($m) use ($save_length) {
            if (strpos($m[1], '^') !== false) {
                $m[1] = Helpers::calc($m[1]);
            }
            if ($save_length) {
                return str_pad("'" . @chr(intval($m[1], 0)) . "'", strlen($m[0]), ' ');
            } else {
                return "'" . @chr(intval($m[1], 0)) . "'";
            }
        }, $string);

        $pattern = '~%([0-9a-fA-F]{2})~';
        if ($save_length && preg_match('~%25(%[0-9a-fA-F]{2}){2}(%25)?~ms', $string)) {
            $pattern = (isset($m[2]) && $m[2] !== '') ? '~%\s{0,2}([0-9a-fA-F\s]{2,6})~' : '~%\s{0,2}([0-9a-fA-F]{2})~';
        }

        for ($i = 0; $i < 2; $i++) {
            $string = preg_replace_callback($pattern, function($m) use ($save_length) {
                if ($save_length) {
                    return str_pad(chr(@hexdec($m[1])), strlen($m[0]), ' ');
                } else {
                    return @chr(hexdec($m[1]));
                }
            }, $string);
        }

        $iter = 0;
        $regexpHtmlAmp = '/\&[#\w ]{2,20} {0,2}; {0,2}/i';
        while ($iter < self::MAX_ITERATION && preg_match($regexpHtmlAmp, $string)) {
            $string = preg_replace_callback($regexpHtmlAmp, function ($m) use ($save_length) {
                if ($save_length) {
                    if (strpos($m[0], '  ') !== false) {
                        $m[0] = str_pad(str_replace(' ', '', $m[0]), strlen($m[0]));
                    }
                    $string = $m[0] == '&nbsp;' ? ' ' : $m[0];
                    return str_pad(@html_entity_decode($string, ENT_QUOTES | ENT_HTML5), strlen($m[0]), ' ', STR_PAD_LEFT);
                } else {
                    $string = $m[0] == '&nbsp;' ? ' ' : $m[0];
                    return @html_entity_decode($string, ENT_QUOTES | ENT_HTML5);
                }
            }, $string);
            $iter++;
        }
        
        $string = preg_replace_callback('/\\\\(?:x(?<hex>[a-fA-F0-9]{1,2})|(?<oct>[0-9]{2,3}))/i', function($m) use ($save_length) {
            $is_oct     = isset($m['oct']);
            $full_str   = $m[0];
            $value      = $is_oct ? $m['oct'] : $m['hex'];
            if ($save_length) {
                if ($is_oct) {
                    return str_pad(@chr(octdec($value)), strlen($full_str), ' ');
                }
                return str_pad(chr(@hexdec($value)), strlen($full_str), ' ');
            } else {
                if ($is_oct) {
                    return @chr(octdec($value));
                }
                return @chr(hexdec($value));
            }
        }, $string);
        
        $string = self::concatenate_strings($string, $save_length);

        $string = preg_replace_callback('~<title[^>]{0,99}>\s*\K(.{0,300}?)(?=<\/title>)~mis', function($m) use ($save_length) {
            if(preg_match('~(?:\w[^\x00-\x7F]{1,9}|[^\x00-\x7F]{1,9}\w)~', $m[1])) {
                return self::HomoglyphNormalize($m[1]);
            }
            return $m[1];
        }, $string);

        $string = preg_replace_callback('~<\?\s*p\s+h\s+p~msi', function ($m) {
            return str_pad('<?php', strlen($m[0]), ' ');
        }, $string);

        if (!$save_length) {
            $string = str_replace('<?php', '<?php ', $string);
            $string = preg_replace('~\s+~msi', ' ', $string);
            $string = trim($string);
        } else {
            $string = str_replace('<?php', '<?   ', $string);
        }

        return $string;
    }
    
    public static function get_end_of_extended_length($string_normalized, $string_orig, $start_pos)
    {
        if (strlen($string_normalized) == $start_pos + 1) {
            return $start_pos;
        }
        for ($i = $start_pos + 1, $iMax = strlen($string_normalized); $i < $iMax; $i++) {
            if ($string_orig[$i] === '\\' || $string_normalized[$i] !== ' ' || $string_orig[$i] === ' ') {
                break;
            }
        }
        return $i - 1;
    }

    public static function string_pos($string, $needle, $unescape = false)
    {
        $j      = 0;
        $skip   = false;
        $start  = false;
        $end    = 0;
        $last_tag = [false, false];

        $string_strip_whitespace = self::strip_whitespace($string, true);
        $needle = self::strip_whitespace($needle, false);

        $string = preg_replace_callback('~(<%3f|%253c%3f|%3c%3f)(php)?~msi', function ($m) {
            $ret = (isset($m[2]) && $m[2] !== '') ? '<?php' : '<?';
            return str_pad($ret, strlen($m[0]), ' ');
        }, $string_strip_whitespace);

        $string = preg_replace_callback('~(?:%3f>|%3f%253e|%3f%3e)~msi', function ($m) {
            return str_pad('?>', strlen($m[0]),  ' ', STR_PAD_LEFT);
        }, $string);

        $string = self::normalize($string, true);
        $needle = self::normalize($needle, false);
        $string = preg_replace_callback('~/\*[^\*]+\*/~', function ($m) {
            return str_repeat(' ', strlen($m[0]));
        }, $string); //php_strip_whitespace don't strip all comments, from xoredStrings type, hack for this
        $needle = preg_replace('~/\*[^\*]+\*/~', '', $needle); //php_strip_whitespace don't strip all comments, from xoredStrings type, hack for this

        $string = preg_replace_callback('~%\s*([\da-f])\s*([\da-f])~msi', function ($m) {
            return str_pad(chr(@hexdec($m[1] . $m[2])), strlen($m[0]), ' ');
        }, $string);

        if ($unescape) {
            $string = self::unescape($string, true);
            $string = self::normalize($string, true);
        }

        $needle = self::concatenate_strings($needle, true);

        for ($i = 0, $iMax = strlen($string); $i < $iMax; $i++) {
            if(trim($string[$i]) === '' && trim($needle[$j]) === '') {
                $string[$i] = $needle[$j] = ' ';
            }
            if ($string[$i] == $needle[$j]) {
                if ($j == 0) {
                    $start = $i;
                } elseif ($j == strlen($needle) - 1) {
                    $end = self::get_end_of_extended_length($string, $string_strip_whitespace, $i);
                    return [$start, $end];
                }
                $j++;
            } else {
                $match_php_tag = self::match_shortopen_tag($string, $i, $needle, $j);
                if ($match_php_tag[0] !== false && ($last_tag[0] !== $match_php_tag[0])) {
                    $j = $match_php_tag[0];
                }
                if ($match_php_tag[1] !== false && ($last_tag[1] !== $match_php_tag[1])) {
                    $i = $match_php_tag[1] - 1;
                }
                $last_tag = $match_php_tag;
                if ($match_php_tag[0] !== false || ($match_php_tag[1] !== false && (!empty($last_tag)))) {
                    continue;
                }
                $skip = self::need_skip($string, $i);
                if ($skip !== false && $start !== false) {
                    $i = $skip - 1;
                } else {
                    $j = 0;
                }
            }
        }
        return false;
    }

    private static function concatenate_strings($string, $save_length)
    {
        $string = preg_replace_callback('/[\'"]\s*?[\+\.]+\s*?[\'"]/smi', function($m) use ($save_length) {
            if ($save_length) {
                return str_repeat(' ', strlen($m[0]));
            } else {
                return '';
            }
        }, $string);
        return $string;
    }

    private static function HomoglyphNormalize($str)
    {
        if (!is_array(self::$confusables)) {
            self::$confusables = @unserialize(@base64_decode(self::$confusables));
        }
        return str_replace(array_keys(self::$confusables), array_values(self::$confusables), $str);
    }

    private static function extend_string_with_spaces($string, $strippedStr)
    {
        $strippedStr = str_replace('<?php  ', '<?php ', $strippedStr);

        $in_comment_ml = false;
        $in_comment_nl = false;
        $iMax = strlen($string);
        $jMax = strlen($strippedStr);

        if ($iMax === $jMax) {
            return $string;
        }

        $newStr = '';
        $j = 0;

        for ($i = 0; $i < $iMax; $i++) {
            if (isset($strippedStr[$j]) && trim($string[$i]) === trim($strippedStr[$j]) && !$in_comment_ml && !$in_comment_nl) {
                $newStr .= $string[$i];
                $j++;
            } else if ((trim($string[$i]) === '/' && trim($string[$i + 1]) === '*') && !$in_comment_ml && !$in_comment_nl) {
                $in_comment_ml = true;
                $newStr .= '  ';
                $i++;
            } else if ((trim($string[$i]) === '*' && trim($string[$i + 1]) === '/') && $in_comment_ml) {
                $in_comment_ml = false;
                $newStr .= ' ';
            } else if ((trim($string[$i]) === '/' && trim($string[$i + 1]) === '/') && !$in_comment_nl && !$in_comment_ml) {
                $in_comment_nl = true;
                $newStr .= ' ';
            } else if ((trim($string[$i]) === '#') && !$in_comment_nl && !$in_comment_ml) {
                $in_comment_nl = true;
                $newStr .= ' ';
            } else if (($string[$i] === "\n" || $string[$i] === "\r") && $in_comment_nl) {
                $in_comment_nl = false;
                $newStr .= ' ';
            } else if ($string[$i] === '?' && $string[$i + 1] === '>' && $in_comment_nl) {
                $in_comment_nl = false;
                $newStr .= $string[$i];
                $j++;
            } else if ((isset($strippedStr[$j]) && trim($string[$i]) !== trim($strippedStr[$j])) && ($in_comment_ml || $in_comment_nl)) {
                $newStr .= ' ';
            } else {
                $newStr .= ' ';
            }
        }
        return $newStr;
    }

    /**
     * @param array $confusables
     */
    public static function setConfusables(array $confusables)
    {
        self::$confusables = $confusables;
    }
}


class Encoding
{
    // Unicode BOM is U+FEFF, but after encoded, it will look like this.

    const UTF32_BIG_ENDIAN_BOM = "\x00\x00\xFE\xFF";
    const UTF32_LITTLE_ENDIAN_BOM = "\xFF\xFE\x00\x00";
    const UTF16_BIG_ENDIAN_BOM = "\xFE\xFF";
    const UTF16_LITTLE_ENDIAN_BOM = "\xFF\xFE";
    const UTF8_BOM = "\xEF\xBB\xBF";

    public static function detectUTFEncoding($text)
    {
        $first2 = substr($text, 0, 2);
        $first3 = substr($text, 0, 3);
        $first4 = substr($text, 0, 4);

        if ($first3 == self::UTF8_BOM) {
            return 'UTF-8';
        } elseif ($first4 == self::UTF32_BIG_ENDIAN_BOM) {
            return 'UTF-32BE';
        } elseif ($first4 == self::UTF32_LITTLE_ENDIAN_BOM) {
            return 'UTF-32LE';
        } elseif ($first2 == self::UTF16_BIG_ENDIAN_BOM) {
            return 'UTF-16BE';
        } elseif ($first2 == self::UTF16_LITTLE_ENDIAN_BOM) {
            return 'UTF-16LE';
        }
        return false;
    }

    public static function iconvSupported()
    {
        return (function_exists('iconv') && is_callable('iconv'));
    }

    public static function convertToCp1251($from, $str)
    {
        $ret = @iconv($from, 'CP1251//TRANSLIT', $str);
        if ($ret === false) {
            $ret = @iconv($from, 'CP1251//IGNORE', $str);
        }
        return $ret;
    }

    public static function convertToUTF8($from, $str)
    {
        return @iconv($from, 'UTF-8//IGNORE', $str);
    }
}

/**
 * Class RapidScanStorageRecord.
 *
 * Implements db record for RapidScan
 */
class RapidScanStorageRecord
{
    const WHITE             = 1;  // white listed file in cloud db
    const BLACK             = 6;  // black listed file in cloud db
    const DUAL_USE          = 2;  // dual used listed file in cloud db
    const UNKNOWN           = 3;  // unknown file --> file not listed in cloud db
    const HEURISTIC         = 4;  // detected as heuristic
    const CONFLICT          = 5;  // we have filename hashing conflict for this file
    const NEWFILE           = 0;  // this is a new file (or content changed)
    const RX_MALWARE        = 7;  // detected as malware by rx scan
    const RX_SUSPICIOUS     = 8;  // detected as suspicious by rx scan
    const RX_GOOD           = 9;  // detected as good by rx scan
    const RX_SKIPPED_SMART  = 10; // skipped by smart scan
    const RX_SKIPPED_DIE    = 11; // skipped by smart scan

    /**
     * @var string;
     */
    private $filename;
    /**
     * @var int
     */
    private $key;
    /**
     * @var int
     */
    private $scanned_ts;
    /**
     * @var int
     */
    private $updated_ts;
    /**
     * @var int
     */
    private $verdict;
    /**
     * @var string
     */
    private $sha2;
    /**
     * @var string
     */
    private $signature = '';
    /**
     * @var string
     */
    private $snippet = '';

    /**
     * RapidScanStorageRecord constructor.
     * @param $key
     * @param $scanned_ts
     * @param int $verdict
     * @param $sha2
     * @param string $signature
     */
    private function __construct($key, $scanned_ts, $verdict, $sha2, $signature, $filename, $snippet, $updated_ts = 0)
    {
        $this->filename     = $filename;
        $this->key          = $key;
        $this->scanned_ts   = $scanned_ts;
        $this->verdict      = $verdict;
        $this->sha2         = $sha2;
        $this->snippet      = $snippet;
        $this->updated_ts   = $updated_ts;
        
        if ($signature !== '') {
            $this->signature = self::padTo10Bytes($signature);
        }
    }

    /**
     * Create db storage record from file
     * @param $filename
     * @param string $signature
     * @param int $verdict
     * @return RapidScanStorageRecord
     * @throws Exception
     */
    public static function fromFile($file, $signature = '', $verdict = self::UNKNOWN, $snippet = '')
    {
        $filename = '';
        $stat = [];
        $inode = 0;
        $ctime = 0;
        $mtime = 0;

        if (is_string($file) && file_exists($file)) {
            $filename = $file;
            $stat = stat($filename);
            $inode = $stat['ino'];
            $ctime = $stat['ctime'];
            $mtime = $stat['mtime'];
        } else if ($file instanceof FileInfo && file_exists($file->getFilename())){
            $filename = $file->getFilename();
            $inode = $file->getInode();
            $ctime = $file->getCreated();
            $mtime = $file->getModified();
        }
        if (!file_exists($filename)) {
            throw new Exception('File \'' . $filename . '\' doesn\'t exists.');
        }


        $key = (int)((string)self::fileNameHash($filename) . (string)$inode);
        $scanned_ts = time();
        $updated_ts = max($mtime, $ctime);
        $sha2 = '';
        if (!$verdict) {
            $verdict = self::NEWFILE;
        }
        if ($signature!=='') {
            $signature = self::padTo10Bytes($signature);
        }
        return new self($key, $scanned_ts, $verdict, $sha2, $signature, $filename, $snippet, $updated_ts);
    }

    /**
     * @param $array
     * @return RapidScanStorageRecord
     */
    public static function fromArray($array)
    {
        $key        = $array['key'];
        $scanned_ts = $array['scanned_ts'];
        $sha2       = hex2bin($array['sha2']);
        $verdict    = $array['verdict'];
        $signature  = $array['signature'];
        return new self($key, $scanned_ts, $verdict, $sha2, $signature, '', '');
    }

    /**
     * @return array
     */
    public function toArray()
    {
        $array['key']           = $this->key;
        $array['scanned_ts']    = $this->scanned_ts;
        $array['verdict']       = $this->verdict;
        $array['sha2']          = bin2hex($this->sha2);
        $array['signature']     = $this->signature;
        return $array;
    }

    /**
     * @param $value
     * @return int
     */
    public static function getTsFromValue($value)
    {
        $timestamp  = unpack("l", substr($value, 0, 8));
        $scanned_ts = array_pop($timestamp);
        return $scanned_ts;
    }

    /**
     * @param $value
     * @return int
     */
    public static function getVerdictFromValue($value)
    {
        return (int)ord($value[8]);
    }

    /**
     * @return array
     */
    public function calcSha2()
    {
        $this->sha2 = hash('sha256', file_get_contents($this->filename), true);
    }

    /**
     * @param $verdict
     */
    public function setVerdict($verdict)
    {
        $this->verdict = $verdict;
    }

    /**
     * @return int
     */
    public function getKey()
    {
        return $this->key;
    }

    /**
     * @param $signature
     */
    public function setSignature($signature)
    {
        if ($signature!=='') {
            $this->signature = self::padTo10Bytes($signature);
        }
    }

    /**
     * @param $ts
     */
    public function setScannedTs($ts)
    {
        $this->scanned_ts = $ts;
    }    

    /**
     * Unpack bytestring $value to RapidScanStorageRecord
     * @param $hash
     * @param $value
     * @return RapidScanStorageRecord
     */
    public static function unpack($hash, $value)
    {
        // pack format
        // 8 bytes timestamp
        // 1 byte verdict
        // 32 bytes sha2
        // 10 bytes signature (only for BLACK, DUAL_USE, RX_MALWARE, RX_SUSPICIOUS)
        // note - we will hold bloomfilter for file later on for those that are WHITE
        // it will be used to detect installed apps

        $signature = '';
        $timestamp = unpack("l", substr($value, 0, 8));
        $scanned_ts = array_pop($timestamp);
        $verdict = $value[8];
        $verdict = (int)ord($verdict);
        $sha2 = substr($value, 9, 32);
        if (in_array($verdict, array(self::BLACK, self::DUAL_USE, self::RX_MALWARE, self::RX_SUSPICIOUS))) {
            $signature = substr($value, 41, 10);  # 10 bytes signature string
        }
        if (strlen($value) > 51) {
            $snippet = substr($value, 51);
        } else {
            $snippet = '';
        }
        return new self($hash, $scanned_ts, $verdict, $sha2, $signature, '', $snippet);
    }

    /**
     * Pack RapidScanStorageRecord to bytestring to save in db
     * @return string
     */
    public function pack()
    {
        $signature = '';
        if (strlen($this->signature) > 0) {
            $signature = $this->signature;
        }
        return (($this->scanned_ts < 0) ? str_pad(pack("l", $this->scanned_ts), 8, "\xff") : str_pad(pack("l", $this->scanned_ts), 8, "\x00")) . pack("c", $this->verdict) . $this->sha2 . $signature . $this->snippet;
    }

    /**
     * Hash function for create hash of full filename to store in db as key
     * @param $str
     * @return int
     */
    private static function fileNameHash($str)
    {
        for ($i = 0, $h = 5381, $len = strlen($str); $i < $len; $i++) {
            $h = (($h << 5) + $h + ord($str[$i])) & 0x7FFFFFFF;
        }
        return $h;
    }

    /**
     * Convert string to utf-8 and fitting/padding it to 10 bytes
     * @param $str
     * @return string
     */
    private static function padTo10Bytes($str)
    {
        # convert string to bytes in UTF8, and add 0 bytes to pad it to 10
        # cut to 10 bytes of necessary
        $str = utf8_encode($str);
        $len = strlen($str);
        if ($len < 10) {
            $str = str_pad($str, 10, "\x00");
        } elseif ($len > 10) {
            $str = substr($str, 0, 10);
        }
        return $str;
    }

    /**
     * @return int
     */
    public function getScannedTs()
    {
        return $this->scanned_ts;
    }

    /**
     * @return int
     */
    public function getUpdatedTs()
    {
        return $this->updated_ts;
    }

    /**
     * @return int
     */
    public function getVerdict()
    {
        return $this->verdict;
    }

    /**
     * @return string
     */
    public function getSha2()
    {
        return $this->sha2;
    }

    /**
     * @return string
     */
    public function getSignature()
    {
        return $this->signature;
    }

    /**
     * @return string
     */
    public function getFilename()
    {
        return $this->filename;
    }

    /**
     * @param $filename
     */
    public function setFilename($filename)
    {
        $this->filename = $filename;
        $stat = stat($filename);
        $this->updated_ts = max($stat['mtime'], $stat['ctime']);
    }

    /**
     * @return string
     */
    public function getSnippet()
    {
        return $this->snippet;
    }

    /**
     * @param $filename
     */
    public function setSnippet($snippet)
    {
        $this->snippet = $snippet;
    }
}


/**
 * Interface RapidScanStorage implements class to work with RapidScan db
 * @package Aibolit\Lib\Scantrack
 */
class RapidScanStorage
{
    const DB_VERSION = '1.0';

    protected $db_ver = '0';
    /**
     * @var string
     */
    protected $old_dir;
    /**
     * @var string
     */
    protected $new_dir;
    /**
     * @var resource
     */
    protected $new_db;
    /**
     * @var resource
     */
    protected $old_db;
    /**
     * @var resource
     */
    private $wb;
    /**
     * @var int
     */
    public $batch_count;

    /**
     * RapidScanStorage constructor.
     * @param $base - folder where db located
     */
    public function __construct($base)
    {
        if(!is_dir($base) && !mkdir($base) && !is_dir($base)) {
            throw new Exception(sprintf('Directory "%s" was not created', $base));
        }

        $this->old_dir = $base . '/current';
        $this->new_dir = $base . '/new';
        $options = [
            'create_if_missing' => true, 
            'compression'       => LEVELDB_NO_COMPRESSION,
            'paranoid_checks'   => true
        ];
        $this->db_ver = $this->getDbVersion();
        if ($this->needMigrate()) {
            $this->migrateDb();
        }

        $this->new_db = new LevelDBWrap($this->new_dir, $options);

        try {
            $this->old_db = new LevelDBWrap($this->old_dir, $options);
        } catch (Exception $e) {
            self::rmtree($this->old_dir);
            $this->old_db = new LevelDBWrap($this->old_dir, $options);
        }

        $this->storeVersion();

        $this->wb = NULL;  // will be use to track writing to batch
        $this->batch_count = 0;
    }

    /**
     * @param RapidScanStorageRecord $record
     * @return bool
     */
    public function put(RapidScanStorageRecord $record)
    {
        $this->startBatch();
        $this->batch_count++;
        $value = $this->wb->put(pack('P', $record->getKey()), $record->pack());
        return $value;
    }

    /**
     * @param $hash
     * @return bool|RapidScanStorageRecord
     */
    public function getNew($hash)
    {
        $value = $this->new_db->get(pack('P', $hash));
        if($value) {
            $return = RapidScanStorageRecord::unpack($hash, $value);
            return $return;
        }
        return false;
    }

    /**
     * @param $hash
     * @return bool|RapidScanStorageRecord
     */
    public function getOld($hash)
    {
        $value = $this->old_db->get(pack('P', $hash));
        if($value) {
            $return = RapidScanStorageRecord::unpack($hash, $value);
            return $return;
        }
        return false;
    }

    /**
     * @param $hash
     * @return bool
     */
    public function delete($hash)
    {
        $return = $this->new_db->delete(pack('P', $hash));
        return $return;
    }

    /**
     * @param bool $leave
     * Close db, remove old db, move new to a new space
     * if $leave == true leave old folder, remove new (for tests)
     */
    public function finish($leave = false)
    {
        $this->old_db->close();
        $this->flushBatch();
        $this->new_db->close();
        if ($leave) {
            self::rmtree($this->new_dir);
        } else {
            self::rmtree($this->old_dir);
            rename($this->new_dir, $this->old_dir);
        }
    }

    /**
     * Start batch operations
     */
    private function startBatch()
    {
        if(!$this->wb) {
            $this->wb = new LevelDBWriteBatch();
            $this->batch_count = 0;
        }
    }

    /**
     *  write all data in a batch, reset batch
     */
    public function flushBatch()
    {
        if ($this->wb) {
            $this->new_db->write($this->wb);
            $this->batch_count = 0;
            $this->wb = NULL;
        }
    }
    /**
     * Helper function to remove folder tree
     * @param $path
     */
    public static function rmTree($path)
    {
        if (is_dir($path)) {
            foreach (scandir($path) as $name) {
                if (in_array($name, ['.', '..'])) {
                    continue;
                }
                $subpath = $path . DIRECTORY_SEPARATOR . $name;
                self::rmTree($subpath);
            }
            rmdir($path);
        } else {
            unlink($path);
        }
    }

    public function getOldTsForRescan($freq, $limit)
    {
        $freq           = $freq == 0 ? 1 : $freq;
        $i              = 0;
        $k              = 0;
        $timestamps     = [];
        $first_key      = false;
        $rewind_cnt     = 0;
        $it = $this->old_db->getIterator();

        for ($it->seek(random_bytes(1)), $i = 0; $i <= $limit; $it->next()) {
            if (!$it->valid()) {
                if ($rewind_cnt > 2) { // Empty base
                    break;
                }
                $it->rewind();
                $rewind_cnt++;
            }

            $key = $it->key();
            if ($first_key === false) {
                $first_key = $key;
            } elseif ($first_key === $key) {
                break;
            }
            $value = $it->current();
            if (!$value) {
                continue;
            }

            if (RapidScanStorageRecord::getVerdictFromValue($value) === RapidScanStorageRecord::RX_GOOD) {
                $i++;
                $timestamps[] = RapidScanStorageRecord::getTsFromValue($value);
            }
        }
        unset($it);
        sort($timestamps, SORT_NUMERIC);
        if ($i < $limit) {
            $limit = $i;
            $freq = 1;
        }
        $k = (int)($limit / $freq) - 1;
        return isset($timestamps[$k]) ? $timestamps[$k] : false;
    }

    public function getVersion()
    {
        return $this->db_ver;
    }

    private function getDbVersion()
    {
        if (!file_exists($this->old_dir . '/version.txt')) {
            return '0';
        }
        return trim(file_get_contents($this->old_dir . '/version.txt'));
    }

    private function needMigrate()
    {
        if ($this->db_ver === '0') {
            return true;
        }
        return false;
    }

    private function migrateDb()
    {
        $options = [
            'create_if_missing' => true, 
            'compression'       => LEVELDB_NO_COMPRESSION,
            'paranoid_checks'   => true
        ];
        $this->new_db = new LevelDBWrap($this->new_dir, $options);
        try {
            $this->old_db = new LevelDBWrap($this->old_dir, $options);
        } catch (Exception $e) {
            self::rmtree($this->old_dir);
            $this->old_db = new LevelDBWrap($this->old_dir, $options);

            $this->storeVersion();
            $this->finish();

            return;
        }

        $this->wb = NULL;  // will be use to track writing to batch
        $this->batch_count = 0;
        $this->startBatch();
        foreach($this->old_db->getIterator() as $key => $value) {
            $this->new_db->put(pack('P', (int)$key), $value);
            $this->batch_count++;
            if ($this->batch_count > 1000) {
                $this->flushBatch();
            }
        }
        $this->flushBatch();
        $this->storeVersion();
        $this->finish();
    }

    private function storeVersion()
    {
        file_put_contents($this->new_dir . '/version.txt', RapidScanStorage::DB_VERSION);
    }
}

/**
 * For work with Cloud Assisted Storage
 * @package Aibolit\Lib\Scantrack
 */
class CloudAssistedStorage
{
    private $db_filepath = '';

    public function __construct($folder)
    {
        if(!is_dir($folder) && !mkdir($folder) && !is_dir($folder)) {
            throw new Exception(sprintf('Directory "%s" was not created', $folder));
        }
        $this->db_filepath = $folder . DIRECTORY_SEPARATOR . 'cloud_assisted_verdicts.json';
    }

    public function getList()
    {
        if (!file_exists($this->db_filepath)) {
            return [];
        }
        $content = file_get_contents($this->db_filepath);
        if (!$content) {
            return [];
        }
        $list = json_decode($content, true);
        if (!$list || !is_array($list)) {
            return [];
        }
        return $list;
    }

    public function putList($list)
    {
        file_put_contents($this->db_filepath, json_encode($list));
    }
    
    public function delete()
    {
        if (!file_exists($this->db_filepath)) {
            return;
        }
        unlink($this->db_filepath);
    }
}

/**
 * This is actual class that does account level scan
 * and remembers the state of scan
 * Class RapidAccountScan
 * @package Aibolit\Lib\Scantrack
 */
class RapidAccountScan
{
    const RESCAN_ALL        = 0; // mode of operation --> rescan all files that are not white/black/dual_use using cloud scanner & regex scanner
    const RESCAN_NONE       = 1; // don't re-scan any files that we already scanned
    const RESCAN_SUSPICIOUS = 2; // only re-scan suspicious files using only regex scanner

    const MAX_BATCH     = 1000; // max files to write in a db batch write
    const MAX_TO_SCAN   = 1000; // max files to scan using cloud/rx scanner at a time

    private $db;
    private $cas_db;
    private $cas_list = [];
    private $vars = null;
    private $scanlist;
    private $collisions;
    private $processedFiles;
    private $rescan_count = 0;
    private $rescan_rx_good_count = 0;
    private $counter = 0;
    private $str_error = false;
    private $scanner = null;
    private $freq;
    private $old_rescan_ts = false;

    /**
     * RapidAccountScan constructor.
     * @param RapidScanStorage $rapidScanStorage
     */
    public function __construct($scanner, $rapidScanStorage, $cloudAssistedStorage, &$vars, $counter = 0)
    {
        $this->db = $rapidScanStorage;
        $this->cas_db = $cloudAssistedStorage;
        $this->vars = $vars;
        $this->scanlist = [];
        $this->collisions = [];
        $this->processedFiles = 0;
        $this->counter = $counter;
        $this->scanner = $scanner;
        $this->freq = $vars->options['rapid-scan-rescan-frequency'] ?? false;

        if ($this->freq !== false) {
            $this->old_rescan_ts = $this->db->getOldTsForRescan($this->freq, 1000);
        }
    }

    /**
     * Get str error
     */
    public function getStrError()
    {
        return $this->str_error;
    }

    /**
     * Get count of rescan(regexp) files
     */
    public function getRescanCount()
    {
        return $this->rescan_count;
    }

    /**
     * Get count of rescan(regexp) RX_GOOD files
     */
    public function getRescanRxGoodCount()
    {
        return $this->rescan_rx_good_count;
    }

    /**
     * placeholder for actual regex scan
     * return RX_GOOD, RX_MALWARE, RX_SUSPICIOUS and signature from regex scaner
     * if we got one
     */
    private function regexScan($filename, $i, $vars)
    {
        $this->rescan_count++;
        if (class_exists('Progress')) {
            Progress::setCurrentFile($filename);
            Progress::setFilesTotal($vars->foundTotalFiles);
            Progress::setDetected([
                Progress::DETECT_PHP => count($vars->criticalPHP),
                Progress::DETECT_JS => count($vars->criticalJS),
                Progress::DETECT_SUS => count($vars->warningPHP),
                Progress::DETECT_PHS => count($vars->phishing),
            ]);

            Progress::updateScan(++$this->processedFiles);
        }
        $return = $this->scanner->QCR_ScanFile($filename, $vars, null, $i, false);
        return $return;
    }

    /**
     * we will have batch of new files that we will scan
     * here we will write them into db once we scanned them
     * we need to check that there is no conflicts/collisions
     * in names, for that we check for data in db if such filename_hash
     * already exists, but we also keep set of filename_hashes of given
     * batch, to rule out conflicts in current batch as well
     */
    private function writeNew()
    {
        $this->collisions = [];
        foreach ($this->scanlist as $fileinfo) {
            if (in_array($fileinfo->getKey(), $this->collisions) || $this->db->getNew($fileinfo->getKey())) {
                $fileinfo->setVerdict(RapidScanStorageRecord::CONFLICT);
            }
            $this->collisions [] = $fileinfo->getKey();
            $this->db->put($fileinfo);
        }
    }

    /**
     * given a batch do cloudscan
     * @throws \Exception
     */
    private function doCloudScan()
    {
        if (count($this->scanlist) <= 0) {
            return;
        }

        $index_table    = [];
        $blackfiles     = [];
        $sha_list       = [];

        foreach ($this->scanlist as $i => $fileinfo) {
            $fileinfo->setVerdict(RapidScanStorageRecord::UNKNOWN);
            if ($this->isSkipCA($fileinfo)) {
                continue;
            }
            $sha_list[] = bin2hex($fileinfo->getSha2());
            $index_table[] = $i;
        }

        $ca = Factory::instance()->create(CloudAssistedRequest::class, [CLOUD_ASSIST_TOKEN]);

        $white_raw          = [];
        $black_raw          = [];
        $verdicts_black_raw = [];
        
        try {
            list($white_raw, $black_raw, $verdicts_black_raw) = $ca->checkFilesByHash($sha_list);
        } catch (\Exception $e) {
            $this->str_error = $e->getMessage();
        }
        
        $dual = array_intersect($white_raw, $black_raw);

        $black_raw = array_diff($black_raw, $white_raw);

        foreach ($white_raw as $index) {
            $this->scanlist[$index_table[$index]]->setVerdict(RapidScanStorageRecord::WHITE);
        }
        $signatures_db = [];
        foreach ($black_raw as $i => $index) {
            $this->scanlist[$index_table[$index]]->setVerdict(RapidScanStorageRecord::BLACK);
            $signature      = isset($verdicts_black_raw[$i]) ? $verdicts_black_raw[$i] : '';
            $signature_id   = 'c_' . hash('crc32', $signature);
            $signatures_db[$signature_id] = $signature;
            $this->scanlist[$index_table[$index]]->setSignature($signature_id);
            $blackfiles[$this->scanlist[$index_table[$index]]->getFilename()] = [
                'h'         => $sha_list[$index],
                'ts'        => time(),
                'sn'        => $signature,
                'ras_sigid' => $signature_id,
            ];
        }

        $signatures_list = $this->cas_db->getList();
        foreach ($signatures_db as $hash => $sig) {
            $this->cas_list[$hash] = $sig;
            if (isset($signatures_list[$hash])) {
                continue;
            }
            $signatures_list[$hash] = $sig;
        }
        $this->cas_db->putList($signatures_list);
        
        foreach ($dual as $index) {
            $this->scanlist[$index_table[$index]]->setVerdict(RapidScanStorageRecord::DUAL_USE);
            $this->scanlist[$index_table[$index]]->setSignature('DUAL'); //later on we will get sig info from cloud
        }

        // we can now update verdicts in batch for those that we know
        //add entries to report, when needed

        $this->vars->blackFiles = array_merge($this->vars->blackFiles, $blackfiles);

        unset($white_raw, $black_raw, $dual, $sha_list, $index_table);
    }

    /**
     * regex scan a single file, add entry to report if needed
     * @param $fileInfo
     * @param $i
     */
    private function _regexScan($fileInfo, $i, $vars)
    {
        $regex_res = $this->regexScan($fileInfo->getFilename(), $i, $vars);
        if (!is_array($regex_res)) {
            return;
        }

        list($result, $sigId, $snippet) = $regex_res;
        $fileInfo->setVerdict($result);
        $fileInfo->setScannedTs(time());
        if ($result !== RapidScanStorageRecord::RX_GOOD
            || $result !== RapidScanStorageRecord::RX_SKIPPED_SMART
            || $result !== RapidScanStorageRecord::RX_SKIPPED_DIE
        ) {
            $fileInfo->setSignature($sigId);
            $fileInfo->setSnippet($snippet);
        }
    }

    /**
     * regex scan batch of files.
     */
    private function doRegexScan($vars)
    {
        foreach ($this->scanlist as $i => $fileinfo) {
            if (!in_array($fileinfo->getVerdict(), [
                RapidScanStorageRecord::WHITE,
                RapidScanStorageRecord::BLACK,
                RapidScanStorageRecord::DUAL_USE
            ])
            ) {
                $this->_regexScan($fileinfo, $i, $vars);
            }
        }
    }

    private function processScanList($vars)
    {
        $this->doCloudScan();
        $this->doRegexScan($vars);
        $this->writeNew();
        $this->scanlist = [];
    }

    private function scanFile($filename, $rescan, $i, $vars)
    {
        $rxgood_rescan = false;
        if ($vars->fileinfo !== null) {
            if($filename !== $vars->fileinfo->getFilename()) {
                unset($file);
                $vars->fileinfo = null;
            }
        }
      
        if ($vars->fileinfo == null) {
            $file = new FileInfo($filename, $i);
            $vars->fileinfo = $file;
        }

        $file = $vars->fileinfo;

        if (!file_exists($filename)) {
            return false;
        }
        $file = RapidScanStorageRecord::fromFile($file);
        
        $old_value = $this->db->getOld($file->getKey());
        $old_scanned = 0;
        if ($old_value) {
            $old_scanned = $old_value->getScannedTs();
            if ($file->getUpdatedTs() <= $old_scanned) {
                $file = $old_value;
                $file->setFilename($filename);
            }
        }

        if ($file->getVerdict() === RapidScanStorageRecord::UNKNOWN
            || $file->getVerdict() === RapidScanStorageRecord::CONFLICT
            || $file->getUpdatedTs() > $old_scanned
        ) {
            // these files has changed or we know nothing about them, lets re-calculate sha2
            // and do full scan
            $file->calcSha2();
            $file->setVerdict(RapidScanStorageRecord::NEWFILE);
            $this->scanlist[$i] = $file;
        } elseif ($file->getVerdict() === RapidScanStorageRecord::BLACK) {
            //these files hasn't changed, but need to be reported as they are on one of the lists
            $signature_id   = $file->getSignature();
            $signature      = isset($this->cas_list[$signature_id]) ? $this->cas_list[$signature_id] : '';
            $this->vars->blackFiles[$filename] = [
                'h'         => bin2hex($file->getSha2()),
                'ts'        => time(),
                'sn'        => $signature,
                'ras_sigid' => $signature_id,
            ];
            $this->db->put($file);
        } elseif ($file->getVerdict() === RapidScanStorageRecord::DUAL_USE) {
            $this->db->put($file);
        } elseif (($rescan === self::RESCAN_SUSPICIOUS || $rescan === self::RESCAN_NONE)
            && $file->getVerdict() === RapidScanStorageRecord::RX_MALWARE
        ) {
            //this files were detected as rx malware before, let's report them
            $sigId = trim($file->getSignature(), "\0");

            if (isset($sigId) && isset($vars->signs->_Mnemo[$sigId])) {
                $snippet = $file->getSnippet();
                if (strtolower(pathinfo($filename, PATHINFO_EXTENSION)) === 'js') {
                    $vars->criticalJS[] = $i;
                    $vars->criticalJSFragment[] = $snippet;
                    $vars->criticalJSSig[] = $sigId;
                } else {
                    $vars->criticalPHP[] = $i;
                    $vars->criticalPHPFragment[] = $snippet;
                    $vars->criticalPHPSig[] = $sigId;
                }
                $this->scanner->AddResult($vars->fileinfo, $i, $vars);
                $this->db->put($file);
            } else {
                $this->scanlist[$i] = $file;
            }
        } elseif ($rescan === self::RESCAN_NONE && AI_EXTRA_WARN
            && $file->getVerdict() === RapidScanStorageRecord::RX_SUSPICIOUS
        ) {
            //this files were detected as rx suspicious before, let's report them
            $sigId = trim($file->getSignature(), "\0");

            if (isset($sigId) && isset($vars->signs->_Mnemo[$sigId])) {
                $snippet = $file->getSnippet();
                $vars->warningPHP[] = $i;
                $vars->warningPHPFragment[] = $snippet;
                $vars->warningPHPSig[] = $sigId;
                $this->scanner->AddResult($vars->fileinfo, $i, $vars);
                $this->db->put($file);
            } else {
                $this->scanlist[$i] = $file;
            }
        } elseif ((
                $rescan === self::RESCAN_ALL
                && in_array($file->getVerdict(), [
                    RapidScanStorageRecord::RX_SUSPICIOUS,
                    RapidScanStorageRecord::RX_GOOD,
                    RapidScanStorageRecord::RX_MALWARE,
                    RapidScanStorageRecord::HEURISTIC
                ])
            )
            || (
                $rescan === self::RESCAN_SUSPICIOUS
                && in_array($file->getVerdict(), [
                    RapidScanStorageRecord::RX_SUSPICIOUS,
                    RapidScanStorageRecord::HEURISTIC
                ])
            )
            || (
                $this->freq !== false && $this->old_rescan_ts !== false
                && $rescan === self::RESCAN_SUSPICIOUS
                && $file->getVerdict() === RapidScanStorageRecord::RX_GOOD
                && $old_scanned <= $this->old_rescan_ts
                && $rxgood_rescan = true
            )
        ) {
            //rescan all mode, all none white/black/dual listed files need to be re-scanned fully
            if ($rxgood_rescan) {
                $this->rescan_rx_good_count++;
            }
            $this->scanlist[$i] = $file;
        } elseif (defined('USE_HEURISTICS')
            && $file->getVerdict() === RapidScanStorageRecord::HEURISTIC
        ) { //mode === RESCAN_NONE
            //this files were detected as HEURISTIC before, let's report them as malware
            $snippet = $file->getSnippet();
            $vars->criticalPHP[] = $i;
            $vars->criticalPHPFragment[] = $snippet;
            $vars->criticalPHPSig[] = 'SMW-HEUR-ELF';
            $this->scanner->AddResult($vars->fileinfo, $i, $vars);
            $this->db->put($file);
        } elseif (defined('USE_HEURISTICS_SUSPICIOUS')
            && $file->getVerdict() === RapidScanStorageRecord::HEURISTIC
        ) {
            //this files were detected as HEURISTIC, let's report them as suspicious
            $snippet = $file->getSnippet();
            $vars->warningPHP[] = $i;
            $vars->warningPHPFragment[] = $snippet;
            $vars->warningPHPSig[] = 'SMW-HEUR-ELF';
            $this->scanner->AddResult($vars->fileinfo, $i, $vars);
            $this->db->put($file);
        } else {
            //in theory -- we should have only white files here...
            $this->db->put($file);
        }

        if (count($this->scanlist) >= self::MAX_TO_SCAN) {
            // our scan list is big enough
            // let's flush db, and scan the list
            $this->db->flushBatch();
            $this->processScanList($vars);
        }

        if ($this->db->batch_count >= self::MAX_BATCH) {
            //we have added many entries to db, time to flush it
            $this->db->flushBatch();
            $this->processScanList($vars);
        }
        unset($file);
        $vars->fileinfo = null;
    }

    public function scan($files, $vars, $rescan = self::RESCAN_SUSPICIOUS)
    {
        if (class_exists('Progress')) {
            Progress::setStage(Progress::STAGE_SCAN);
        }
        $i = 0;
        $this->cas_list = $this->cas_db->getList();
        
        foreach ($files as $filepath) {
            $counter = $this->counter + $i;
            $vars->totalFiles++;
            $this->processedFiles = $counter - $vars->totalFolder - count($this->scanlist);
            if (class_exists('Progress')) {
                Progress::setCurrentFile($filepath);
                Progress::setFilesTotal($vars->foundTotalFiles);
                Progress::setDetected([
                    Progress::DETECT_PHP => count($vars->criticalPHP),
                    Progress::DETECT_JS => count($vars->criticalJS),
                    Progress::DETECT_SUS => count($vars->warningPHP),
                    Progress::DETECT_PHS => count($vars->phishing),
                ]);

                Progress::updateScan($this->processedFiles);
            }
            $this->scanFile($filepath, $rescan, $counter, $vars);
            $i++;
        }
        
        if ($rescan == self::RESCAN_ALL) {
            $this->cas_db->delete();
            $this->cas_list = [];
            foreach ($this->vars->blackFiles as $blackfile) {
                $this->cas_list[$blackfile['ras_sigid']] = $blackfile['sn'];
            }
            $this->cas_db->putList($this->cas_list);
        }

        //let's flush db again
        $this->db->flushBatch();

        //process whatever is left in our scan list
        if (count($this->scanlist) > 0) {
            $this->processScanList($vars);
        }

        $this->whitelistening();

        //close databases and rename new into 'current'
        $this->db->finish();
        if (class_exists('Progress')) {
            Progress::setStage(Progress::STAGE_DONE);
        }
    }

    private function whitelistening()
    {
        // whitelist
        $snum = 0;

        if (!isset($this->vars->structure['crc'])) {
            return;
        }

        $vars = $this->vars;

        $list = $this->scanner->check_whitelist($vars->structure['crc'], $snum);
        $keys = [
            'criticalPHP',
            'criticalJS',
            'phishing',
            'adwareList',
            'warningPHP'
        ];
        foreach ($keys as $p) {
            if (empty($vars->{$p})) {
                continue;
            }
            $p_Fragment = $p . 'Fragment';
            $p_Sig      = $p . 'Sig';
            if ($p === 'phishing') {
                $p_Sig = $p . 'SigFragment';
            }

            $count = count($vars->{$p});
            for ($i = 0; $i < $count; $i++) {
                $id = $vars->{$p}[$i];
                if ($vars->structure['crc'][$id] !== 0 && in_array($vars->structure['crc'][$id], $list)) {
                    $rec = RapidScanStorageRecord::fromFile($vars->structure['n'][$id]);
                    $rec->calcSha2();
                    $rec->setVerdict(RapidScanStorageRecord::RX_GOOD);
                    $this->db->put($rec);
                    unset($vars->{$p}[$i], $vars->{$p_Sig}[$i], $vars->{$p_Fragment}[$i]);
                }
            }

            $vars->{$p}             = array_values($vars->{$p});
            $vars->{$p_Fragment}    = array_values($vars->{$p_Fragment});
            if (!empty($vars->{$p_Sig})) {
                $vars->{$p_Sig} = array_values($vars->{$p_Sig});
            }
        }
    }

    private function isSkipCA($fileinfo)
    {
        return (substr($fileinfo->getFilename(), -1) === DIR_SEPARATOR
            || (MAX_SIZE_TO_CLOUDSCAN > 0 && filesize($fileinfo->getFilename()) > MAX_SIZE_TO_CLOUDSCAN)
            || (filesize($fileinfo->getFilename()) < 0));
    }
}

/**
 * DbFolderSpecification class file.
 */

/**
 * Class DbFolderSpecification.
 *
 * It can be use for checking requirements for a folder that is used for storing a RapidScan DB.
 */
class DbFolderSpecification
{
    /**
     * Check whether a particular folder satisfies requirements.
     *
     * @param string $folder
     * @return bool
     */
    public function satisfiedBy($folder)
    {
        if (!file_exists($folder) || !is_dir($folder)) {
            return false;
        }

        $owner_id = (int)fileowner($folder);
        if (function_exists('posix_getpwuid')) {
            $owner = posix_getpwuid($owner_id);
            if (!isset($owner['name']) || $owner['name'] !== 'root') {
                return false;
            }
        }
        elseif ($owner_id != 0) {
            return false;
        }

        $perms = fileperms($folder);
        if (($perms & 0x0100)                           // owner r
            && ($perms & 0x0080)                        // owner w
            && ($perms & 0x0040) && !($perms & 0x0800)  // owner x
            && !($perms & 0x0020)                       // group without r
            && !($perms & 0x0010)                       // group without w
            && (!($perms & 0x0008) || ($perms & 0x0400))// group without x
            && !($perms & 0x0004)                       // other without r
            && !($perms & 0x0002)                       // other without w
            && (!($perms & 0x0001) || ($perms & 0x0200))// other without x
        ) {
            return true;
        }
        return false;
    }
}


class LevelDBWrap
{
    private $db;

    public function __construct(string $dir, array $options = null)
    {
        if ($options) {
            $this->db = new LevelDB($dir, $options);
        } else {
            $this->db = new LevelDB($dir);
        }

    }

    public function get(string $key)
    {
        return $this->db->get($key);
    }

    public function put(string $key, string $value)
    {
        return $this->db->put($key, $value);
    }

    public function write($batch)
    {
        return $this->db->write($batch);
    }

    public function delete(string $key)
    {
        return $this->db->delete($key);
    }

    public function getIterator()
    {
        return $this->db->getIterator();
    }

    public function close()
    {
        if (version_compare(phpversion('leveldb'), '0.3.0', '<')) {
            $this->db->close();
        }

        $this->db = null;
    }
}
/**
 * CriticalFileSpecification class file.
 */

/**
 * Class CriticalFileSpecification.
 */
class CriticalFileSpecification
{
    /**
     * @var array list of extension
     */
    private $extensions = [
        'php',
        'htaccess',
        'cgi',
        'pl',
        'o',
        'so',
        'py',
        'sh',
        'phtml',
        'php3',
        'php4',
        'php5',
        'php6',
        'php7',
        'pht',
        'shtml',
        'susp',
        'suspected',
        'infected',
        'vir',
        'ico',
        'js',
        'json',
        'com',
        ''
    ];

    private $js_extensions = [
        'js',
        'json',
        'html',
        'htm',
        'suspicious'
    ];

    private $phish_extensions = [
        'js',
        'html',
        'htm',
        'suspected',
        'php',
        'phtml',
        'pht',
        'php7'
    ];

    private $critical_content = '\bcurl_exec\b|\blmp_block_info\b\$\w{1,10}\s*\x28|\bmail\s*\x28|\bfputs\b|EICAR-STANDARD-ANTIVIRUS-TEST-FILE|bank|(?:(?:^#!/us|\bch))r\b|(?:^#!/bi|(?:(?:sqliteCreateF|create_f))unctio|(?:(?:fsock|\bp))ope)n|(?:<\s*htm|(?:(?:setInter|\be))va)l\b|(?:(?:\b(?:cop|rin)|<\s*bod))y\b|(?:setTimeou|accoun|(?:(?:ob_sta|asse))r|<(?:(?:objec|scrip)))t|(?:\bmove_)|(?:\bfwrit|reg_replac|(?:(?:base64_dec|fromCharC))od|<(?:(?:\s*titl|ifram)))e|(?:(?:<\s*for|\bsyste))m[\s\x28]|(?:(?:call_user_fun|\bexe))c|(?:\barray|\bmysql|file_(?:(?:ge|pu))t)_|(?:(?:RewriteCon|<embe))d|(?:(?:navigator|document|location|\$this|window))\.|^\s*<\?(?:(?:php|=))|\$(?:(?:(?:GLOBAL|_FILE))S|_(?:SERVER|(?:GE|(?:(?:REQUE|PO))S)T))';

    public function __construct()
    {
        $this->extensions = array_flip(array_merge($this->extensions, $this->js_extensions, $this->phish_extensions));
    }

    /**
     * Check whether a particular file with specified extension is critical.
     *
     * @param string $ext
     * @param string $type
     * @return bool
     */
    public function satisfiedBy($ext, $type)
    {
        return isset($this->extensions[$ext]);
    }

    /**
     * Check whether a particular content is critical.
     *
     * @param string $content
     * @param string $type
     * @return bool
     */
    public function satisfiedByContent($content, $type)
    {
        if (HyperScan::canMatchCritical()) {
            return HyperScan::matchCritical($content);
        }
        $time = microtime(true);
        $res = preg_match('~' . $this->critical_content . '~smiS', $content, $l_Found) ? true : false;
        if (class_exists('PerfomanceStats')) {
            PerfomanceStats::addPerfomanceItem(PerfomanceStats::PCRE_SMART_STAT, microtime(true) - $time);
        }
        return $res;
    }
}

class Zip
{
    const ERRORS = [
        ZipArchive::ER_EXISTS => 'File already exists.',
        ZipArchive::ER_INCONS => 'Zip archive inconsistent',
        ZipArchive::ER_INVAL  => 'Invalid argument.',
        ZipArchive::ER_MEMORY => 'Malloc failure .',
        ZipArchive::ER_NOENT  => 'No such file.',
        ZipArchive::ER_NOZIP  => 'Not a zip archive .',
        ZipArchive::ER_OPEN   => 'Can\'t open file.',
        ZipArchive::ER_READ   => 'Read error.',
        ZipArchive::ER_SEEK   => 'Seek error.'
    ];

    /**
     * @var ZipArchive
     */
    public $archive;
    public $filename;
    public $error_code;
    public $error_message;

    /**
     * @param string $filename
     */
    public function __construct(string $filename)
    {
        $this->filename = $filename;
    }

    /**
     * @return bool|false
     */
    public function open(): bool
    {
        $archive = new ZipArchive();
        $res = $archive->open($this->filename);
        if ($res !== true) {
            $this->error_message = self::ERRORS[$res] ?? 'Zip error';
            $this->error_code    = $res;
            return false;
        }

        $this->archive = $archive;

        return true;
    }

    public function close()
    {
        $this->archive->close();
    }

    /**
     * @param int $index
     * @return array|false
     */
    public function getFileInfo(int $index)
    {
        return $this->archive->statIndex($index);
    }


    /**
     * @param int $index
     * @return false|string
     */
    public function getFileContent(int $index)
    {
        return $this->archive->getFromIndex($index);
    }
}
class Helpers
{
    const REGEXP_BASE64_DECODE = '~base64_decode\s*\(\s*[\'"]([^\'"]*)[\'"]\s*\)~mis';
    const GOTO_MAX_HOPS        = 5000;

    /*************************************************************************************************************/
    /*                                Frequently used functions for deobfuscators                                */
    /*************************************************************************************************************/

    /**
     * This method normalizes string, converts characters to a readable form and some other things.
     * Also, the method can save the number of characters in the string by adding spaces if the number of characters has decreased.
     *
     * @param $string
     * @param false $save_length
     * @return string
     */
    public static function normalize($string, $save_length = false)
    {
        $search  = [ ' ;', ' =', ' ,', ' .', ' (', ' )', ' {', ' }', '; ', '= ', ', ', '. '
        , '( ', '( ', '{ ', '} ', ' !', ' >', ' <', ' _', '_ ', '< ',  '> ', ' $', ' %', '% '
        , '# ', ' #', '^ ', ' ^', ' &', '& ', ' ?', '? '];
        $replace = [  ';',  '=',  ',',  '.',  '(',  ')',  '{',  '}', ';',  '=',  ',',  '.'
        ,  '(',   ')', '{',  '}',   '!',  '>',  '<',  '_', '_',  '<',   '>',   '$',  '%', '%'
        ,  '#',   '#', '^',   '^',  '&', '&',   '?', '?'];

        if (!$save_length) {
            $string = str_replace('@', '', $string);
            $string = preg_replace('~\s+~smi', ' ', $string);
            $string = str_replace($search, $replace, $string);
        }

        $string = preg_replace_callback('~\bchr\(\s*([0-9a-fA-FxX\^]+)\s*\)~', static function($m) use ($save_length) {
            if (strpos($m[1], '^') !== false) {
                $m[1] = Helpers::calc($m[1]);
            }
            if ($save_length) {
                return str_pad("'" . @chr(intval($m[1], 0)) . "'", strlen($m[0]), ' ');
            } else {
                return "'" . @chr(intval($m[1], 0)) . "'";
            }
        }, $string);

        $string = preg_replace_callback('/\&\#([0-9]{1,3});/i', static function($m) use ($save_length) {
            if ($save_length) {
                return str_pad(@chr((int)$m[1]), strlen($m[0]), ' ');
            } else {
                return @chr((int)$m[1]);
            }
        }, $string);

        $string = preg_replace_callback('/\\\\(?:x(?<hex>[a-fA-F0-9]{1,2})|(?<oct>[0-9]{1,3}))/i', function($m) use ($save_length) {
            $is_oct     = isset($m['oct']);
            $full_str   = $m[0];
            $value      = $is_oct ? $m['oct'] : $m['hex'];
            if ($save_length) {
                if ($is_oct) {
                    return str_pad(@chr(octdec($value)), strlen($full_str), ' ');
                }
                return str_pad(chr(@hexdec($value)), strlen($full_str), ' ');
            } else {
                if ($is_oct) {
                    return @chr(octdec($value));
                }
                return @chr(hexdec($value));
            }
        }, $string);

        $string = preg_replace_callback('/[\'"]\s*?\.+\s*?[\'"]/smi', static function($m) use ($save_length) {
            if ($save_length) {
                return str_repeat(' ', strlen($m[0]));
            } else {
                return '';
            }
        }, $string);

        $string = preg_replace_callback('/[\'"]\s*?\++\s*?[\'"]/smi', static function($m) use ($save_length) {
            if ($save_length) {
                return str_repeat(' ', strlen($m[0]));
            } else {
                return '';
            }
        }, $string);

        if (!$save_length) {
            $string = str_replace('<?php', '<?php ', $string);
            $string = preg_replace('~\s+~', ' ', $string);
        }

        return $string;
    }

    /**
     * Code formatting. Not used in procu2 and ai-bolit
     *
     * @param $source
     * @return string
     */
    public static function format($source)
    {
        $t_count = 0;
        $in_object = false;
        $in_at = false;
        $in_php = false;
        $in_for = false;
        $in_comp = false;
        $in_quote = false;
        $in_var = false;

        if (!defined('T_ML_COMMENT')) {
            define('T_ML_COMMENT', T_COMMENT);
        }

        $result = '';
        @$tokens = token_get_all($source);
        foreach ($tokens as $token) {
            if (is_string($token)) {
                $token = trim($token);
                if ($token == '{') {
                    if ($in_for) {
                        $in_for = false;
                    }
                    if (!$in_quote && !$in_var) {
                        $t_count++;
                        $result = rtrim($result) . ' ' . $token . "\n" . str_repeat('    ', $t_count);
                    } else {
                        $result = rtrim($result) . $token;
                    }
                } elseif ($token == '$') {
                    $in_var = true;
                    $result .= $token;
                } elseif ($token == '}') {
                    if (!$in_quote && !$in_var) {
                        $new_line = true;
                        $t_count--;
                        if ($t_count < 0) {
                            $t_count = 0;
                        }
                        $result = rtrim($result) . "\n" . str_repeat('    ', $t_count) .
                            $token . "\n" . @str_repeat('    ', $t_count);
                    } else {
                        $result = rtrim($result) . $token;
                    }
                    if ($in_var) {
                        $in_var = false;
                    }
                } elseif ($token == ';') {
                    if ($in_comp) {
                        $in_comp = false;
                    }
                    if ($in_for) {
                        $result .= $token . ' ';
                    } else {
                        $result .= $token . "\n" . str_repeat('    ', $t_count);
                    }
                } elseif ($token == ':') {
                    if ($in_comp) {
                        $result .= ' ' . $token . ' ';
                    } else {
                        $result .= $token . "\n" . str_repeat('    ', $t_count);
                    }
                } elseif ($token == '(') {
                    $result .= ' ' . $token;
                } elseif ($token == ')') {
                    $result .= $token;
                } elseif ($token == '@') {
                    $in_at = true;
                    $result .= $token;
                } elseif ($token == '.') {
                    $result .= ' ' . $token . ' ';
                } elseif ($token == '=') {
                    $result .= ' ' . $token . ' ';
                } elseif ($token == '?') {
                    $in_comp = true;
                    $result .= ' ' . $token . ' ';
                } elseif ($token == '"') {
                    if ($in_quote) {
                        $in_quote = false;
                    } else {
                        $in_quote = true;
                    }
                    $result .= $token;
                } else {
                    $result .= $token;
                }
            } else {
                list($id, $text) = $token;
                switch ($id) {
                    case T_OPEN_TAG:
                    case T_OPEN_TAG_WITH_ECHO:
                        $in_php = true;
                        $result .= trim($text) . "\n";
                        break;
                    case T_CLOSE_TAG:
                        $in_php = false;
                        $result .= trim($text);
                        break;
                    case T_FOR:
                        $in_for = true;
                        $result .= trim($text);
                        break;
                    case T_OBJECT_OPERATOR:
                        $result .= trim($text);
                        $in_object = true;
                        break;

                    case T_ENCAPSED_AND_WHITESPACE:
                    case T_WHITESPACE:
                        $result .= trim($text);
                        break;
                    case T_RETURN:
                        $result = rtrim($result) . "\n" . str_repeat('    ', $t_count) . trim($text) . ' ';
                        break;
                    case T_ELSE:
                    case T_ELSEIF:
                        $result = rtrim($result) . ' ' . trim($text) . ' ';
                        break;
                    case T_CASE:
                    case T_DEFAULT:
                        $result = rtrim($result) . "\n" . str_repeat('    ', $t_count - 1) . trim($text) . ' ';
                        break;
                    case T_FUNCTION:
                    case T_CLASS:
                        $result .= "\n" . str_repeat('    ', $t_count) . trim($text) . ' ';
                        break;
                    case T_AND_EQUAL:
                    case T_AS:
                    case T_BOOLEAN_AND:
                    case T_BOOLEAN_OR:
                    case T_CONCAT_EQUAL:
                    case T_DIV_EQUAL:
                    case T_DOUBLE_ARROW:
                    case T_IS_EQUAL:
                    case T_IS_GREATER_OR_EQUAL:
                    case T_IS_IDENTICAL:
                    case T_IS_NOT_EQUAL:
                    case T_IS_NOT_IDENTICAL:
                    case T_LOGICAL_AND:
                    case T_LOGICAL_OR:
                    case T_LOGICAL_XOR:
                    case T_MINUS_EQUAL:
                    case T_MOD_EQUAL:
                    case T_MUL_EQUAL:
                    case T_OR_EQUAL:
                    case T_PLUS_EQUAL:
                    case T_SL:
                    case T_SL_EQUAL:
                    case T_SR:
                    case T_SR_EQUAL:
                    case T_START_HEREDOC:
                    case T_XOR_EQUAL:
                        $result = rtrim($result) . ' ' . trim($text) . ' ';
                        break;
                    case T_COMMENT:
                        $result = rtrim($result) . "\n" . str_repeat('    ', $t_count) . trim($text) . ' ';
                        break;
                    case T_ML_COMMENT:
                        $result = rtrim($result) . "\n";
                        $lines = explode("\n", $text);
                        foreach ($lines as $line) {
                            $result .= str_repeat('    ', $t_count) . trim($line);
                        }
                        $result .= "\n";
                        break;
                    case T_INLINE_HTML:
                        $result .= $text;
                        break;
                    default:
                        $result .= trim($text);
                        break;
                }
            }
        }
        return $result;
    }

    /**
     * Replace create_function(...) with function(){}
     *
     * @param $str
     * @return string
     */
    public static function replaceCreateFunction($str)
    {
        $hangs = 20;
        $str = stripcslashes($str);
        while (strpos($str, 'create_function') !== false && $hangs--) {
            $start_pos = strpos($str, 'create_function');
            $end_pos = 0;
            $brackets = 0;
            $started = false;
            $opened = 0;
            $closed = 0;
            for ($i = $start_pos, $iMax = strlen($str); $i < $iMax; $i++) {
                if ($str[$i] === '(') {
                    $started = true;
                    $brackets++;
                    $opened++;
                } else if ($str[$i] === ')') {
                    $closed++;
                    $brackets--;
                }
                if ($brackets == 0 && $started) {
                    $end_pos = $i + 1;
                    break;
                }
            }

            $cr_func = substr($str, $start_pos, $end_pos - $start_pos);
            $func = implode('function(', explode('create_function(\'', $cr_func, 2));
            $func = implode(') {', explode('\',\'', $func, 2));
            $func = substr($func, 0, -2) . '}';
            $str = str_replace($cr_func, $func, $str);
        }
        return $str;
    }

    /**
     * Calculate functions and simple mathematical expressions in code.
     * This function is applicable for simple expressions, if they are complex, then it may produce an incorrect result, in this case use MathCalc.
     *
     * @param $expr
     * @return string
     */
    public static function calc($expr)
    {
        if (is_array($expr)) {
            $expr = $expr[0];
        }
        $expr = str_replace([' ', "\r", "\n", "\t"], '', $expr);
        preg_match('~(chr|min|max|round)?\(([^\)]+)\)~msi', $expr, $expr_arr);
        if (@$expr_arr[1] == 'min' || @$expr_arr[1] == 'max') {
            return $expr_arr[1](explode(',', $expr_arr[2]));
        } elseif (@$expr_arr[1] == 'chr') {
            if ($expr_arr[2][0] === '(') {
                $expr_arr[2] = substr($expr_arr[2], 1);
            }
            $expr_arr[2] = self::calc($expr_arr[2]);
            return $expr_arr[1]((int)$expr_arr[2]);
        } elseif (@$expr_arr[1] == 'round') {
            $expr_arr[2] = self::calc($expr_arr[2]);
            return $expr_arr[1]($expr_arr[2]);
        } else {
            preg_match_all('~([\d\.a-fx]+)([\*\/\-\+\^\|\&])?~', $expr, $expr_arr);
            foreach ($expr_arr[1] as &$expr_arg) {
                if (strpos($expr_arg, "0x") !== false) {
                    $expr = str_replace($expr_arg, hexdec($expr_arg), $expr);
                    $expr_arg = hexdec($expr_arg);
                } else if ($expr_arg[0] === '0' && (strlen($expr_arg) > 1) && (strpos($expr_arg, '.') === false)) {
                    $expr = str_replace($expr_arg, octdec($expr_arg), $expr);
                    $expr_arg = octdec($expr_arg);
                }
            }
            if (in_array('*', $expr_arr[2]) !== false) {
                $pos = array_search('*', $expr_arr[2]);
                $res = $expr_arr[1][$pos] * $expr_arr[1][$pos + 1];
                $pos_subst = strpos($expr, $expr_arr[1][$pos] . '*' . $expr_arr[1][$pos + 1]);
                $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '*' . $expr_arr[1][$pos + 1]));
                $expr = self::calc($expr);
            } elseif (in_array('/', $expr_arr[2]) !== false) {
                $pos = array_search('/', $expr_arr[2]);
                $res = $expr_arr[1][$pos] / $expr_arr[1][$pos + 1];
                $pos_subst = strpos($expr, $expr_arr[1][$pos] . '/' . $expr_arr[1][$pos + 1]);
                $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '/' . $expr_arr[1][$pos + 1]));
                $expr = self::calc($expr);
            } elseif (in_array('-', $expr_arr[2]) !== false) {
                $pos = array_search('-', $expr_arr[2]);
                $res = $expr_arr[1][$pos] - $expr_arr[1][$pos + 1];
                $pos_subst = strpos($expr, $expr_arr[1][$pos] . '-' . $expr_arr[1][$pos + 1]);
                $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '-' . $expr_arr[1][$pos + 1]));
                $expr = self::calc($expr);
            } elseif (in_array('+', $expr_arr[2]) !== false) {
                $pos = array_search('+', $expr_arr[2]);
                $res = $expr_arr[1][$pos] + $expr_arr[1][$pos + 1];
                $pos_subst = strpos($expr, $expr_arr[1][$pos] . '+' . $expr_arr[1][$pos + 1]);
                $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '+' . $expr_arr[1][$pos + 1]));
                $expr = self::calc($expr);
            } elseif (in_array('^', $expr_arr[2]) !== false) {
                $pos = array_search('^', $expr_arr[2]);
                $res = (int)$expr_arr[1][$pos] ^ (int)$expr_arr[1][$pos + 1];
                $pos_subst = strpos($expr, $expr_arr[1][$pos] . '^' . $expr_arr[1][$pos + 1]);
                $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '^' . $expr_arr[1][$pos + 1]));
                $expr = self::calc($expr);
            } elseif (in_array('|', $expr_arr[2]) !== false) {
                $pos = array_search('|', $expr_arr[2]);
                $res = $expr_arr[1][$pos] | $expr_arr[1][$pos + 1];
                $pos_subst = strpos($expr, $expr_arr[1][$pos] . '|' . $expr_arr[1][$pos + 1]);
                $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '|' . $expr_arr[1][$pos + 1]));
                $expr = self::calc($expr);
            } elseif (in_array('&', $expr_arr[2]) !== false) {
                $pos = array_search('&', $expr_arr[2]);
                $res = $expr_arr[1][$pos] & $expr_arr[1][$pos + 1];
                $pos_subst = strpos($expr, $expr_arr[1][$pos] . '&' . $expr_arr[1][$pos + 1]);
                $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '&' . $expr_arr[1][$pos + 1]));
                $expr = self::calc($expr);
            } else {
                return $expr;
            }

            return $expr;
        }
    }

    /**
     * Get code inside eval()
     *
     * @param $string
     * @return string
     */
    public static function getEvalCode($string)
    {
        preg_match("/eval\(([^\)]+)\)/msi", $string, $matches);
        return (empty($matches)) ? '' : end($matches);
    }

    /**
     * Method for unwrapping goto constructs.
     *
     * @param string $content
     * @return string
     */
    public static function unwrapGoto(&$content): string
    {
        if (!preg_match('~\$[^\[\(\)\]=\+\-]{1,20}~msi', $content)) {
            return $content;
        }
        $label_num = 0;
        $label_name = 'tmp_spec_label';

        $replaceVars = [];

        $content = preg_replace_callback('~\bgoto ([^\w;]+);~msi', function ($m) use (&$replaceVars, &$label_num, $label_name) {
            $label_num++;
            $newName = $label_name . $label_num;
            $replaceVars[] = [$m[1], $newName];
            return 'goto ' . $newName . '; ';
        }, $content);

        if (!empty($replaceVars)) {
            foreach ($replaceVars as $replaceVar) {
                $content = str_replace($replaceVar[0], $replaceVar[1], $content);
            }
        }

        $content = preg_replace_callback('~\b(if\s*(\([^)(]*+(?:(?2)[^)(]*)*+\))\s*)(goto\s*(?:\w+);)~msi', function($m) {
            return $m[1] . ' { ' . $m[3] . ' } ';
        }, $content);

        preg_match_all('~\bgoto\s?(\w+);~msi', $content, $gotoMatches, PREG_SET_ORDER);
        $gotoCount = count($gotoMatches);
        if (!$gotoCount || ($gotoCount <= 0 && $gotoCount > self::GOTO_MAX_HOPS)) {
            return $content;
        }

        $label_num = 0;
        $label_name = 'tmp_label';

        $res      = '';
        $hops     = self::GOTO_MAX_HOPS;
        if (preg_match('~(.*?)(?:goto\s\w+;|\w+:)~msi', $content, $m)) {
            $res .= trim($m[1]) . PHP_EOL;
        }

        if (preg_match('~\w{1,99}:\s*(<\?php)~msi', $content, $m, PREG_OFFSET_CAPTURE)) {
            $orig = substr($content, 0, $m[1][1]);
            $content = str_replace('<?php ' . $orig, '', $content);
        }

        $content = preg_replace_callback('~(?<!: )\}\s*goto\s*\w+;~mis', function($m) use (&$label_num, $label_name) {
            $label_num++;
            return $label_name . $label_num . ': ' . $m[0];
        }, $content);

        //try to match all if's conditions it can be if or loop
        preg_match_all('~\b(\w+):\s*if\s*(\([^)(]*+(?:(?2)[^)(]*)*+\))\s*\{\s*goto\s*(\w+); (' . $label_name . '\d+):\s*\}\s*goto\s*(\w+);~msi', $content, $conds, PREG_SET_ORDER);
        foreach ($conds as $cond) {
            preg_match('~\b\w+:\s*(\w+):\s*goto\s*' . $cond[1] . '~msi', $content, $while);
            if (preg_match('~\b\w+:\s*goto\s*' . $while[1] . ';\s*goto\s*\w+;~msi', $content) === 0) {
                $while = [];
            }
            preg_match('~\b' . $cond[5] . ':\s*(\w+):\s*goto\s*(\w+);~msi', $content, $do);
            preg_match('~\b(\w+):\s*' . $cond[3] . ':\s*goto\s*(\w+);~msi', $content, $m);
            preg_match('~\b(\w+):\s*goto\s*(\w+); goto\s*' . $m[1] . ';~msi', $content, $ifelse);
            preg_match('~\b(\w+):\s*\w+:\s*goto\s*' . $cond[1] . ';~msi', $content, $m);
            preg_match('~\b(\w+):[^:;]+[:;]\s*goto\s*(' . $m[1] . ');~msi', $content, $m);
            preg_match('~\b(\w+):\s*' . $ifelse[2] . ':\s*goto\s*(\w+);~msi', $content, $m);
            if (!empty($m) && ($m[2] === $cond[1])) { // if goto in last match point to this if statement - we have a loop, otherwise - if-else
                $ifelse = [];
            }

            if (empty($do) && empty($ifelse)) { //reverse conditions except do while & if else
                if ($cond[2][1] === '!') {
                    $cond[2] = substr_replace($cond[2], '', 1, 1);
                } else {
                    $cond[2] = '(!' . $cond[2] . ')';
                }
            }

            if (!empty($ifelse)) {
                $content = str_replace($cond[0],
                    $cond[1] . ': if ' . $cond[2] . ' { goto ' . $cond[3] . '; ' . $cond[4] . ': ' . '} else { goto ' . $cond[5] . ';',
                    $content);
                preg_match('~(\w+):\s*(' . $ifelse[2] . '):\s*goto\s*(\w+);~msi', $content, $m2);
                $content = str_replace($m2[0],
                    $m2[1] . ': goto ' . $cond[4] . '; ' . $m2[2] . ': } goto ' . $m2[3] . ';', $content);
            } elseif (!empty($do)) {
                preg_match('~(\w+):\s*(' . $cond[3] . '):\s*goto\s*~msi', $content, $match);
                $tmp = $cond[0];
                $content = str_replace($match[0], $match[1] . ': do { goto ' . $match[2] . '; ' . $match[2] . ': goto ',
                    $content);
                $cond[0] = $cond[1] . ': } while ' . $cond[2] . '; goto ' . $cond[5] . ';';
                $content = str_replace($tmp, $cond[0], $content);
            } else {
                if (!empty($while)) { //loop change if to while, reverse condition, exchange labels; in last goto $tmp_labelN
                    preg_match('~\w+:\s*goto\s*(' . $while[1] . ')~msi', $content, $match);
                    $content = str_replace($match[0], str_replace($match[1], $cond[4], $match[0]), $content);
                    $content = str_replace($cond[0],
                        $cond[1] . ': ' . 'while (' . $cond[2] . ') {' . 'goto ' . $cond[5] . '; ' . $cond[4] . ': } goto ' . $cond[3] . ';',
                        $content);
                } else { //just if - need to reverse condition and exchange labels; in last need goto to $tmp_labelN
                    $tmp = $cond[0];
                    $cond[0] = $cond[1] . ': ' . 'if ' . $cond[2] . ' { goto ' . $cond[5] . '; ' . $cond[4] . ': } goto ' . $cond[3] . ';';
                    $content = str_replace($tmp, $cond[0], $content);
                    preg_match('~(\w+):\s*(' . $cond[3] . '):\s*goto\s*(\w+)~msi', $content, $match);
                    $content = str_replace($match[0],
                        $match[1] . ': goto ' . $cond[4] . '; ' . $match[2] . ': goto ' . $match[3], $content);
                }
            }
        }

        $nextGotoPos = 0;
        while ($nextGotoPos !== false && $hops > 0 && preg_match('~goto\s(\w+);~msi',
                substr($content, $nextGotoPos),
                $gotoNameMatch,
                PREG_OFFSET_CAPTURE)) {

            $gotoNameStr    = $gotoNameMatch[1][0] . ':';
            $gotoNameStrLen = strlen($gotoNameStr);
            $gotoPos        = strpos($content, $gotoNameStr);
            $nextGotoPos    = strpos($content, 'goto ', $gotoPos);
            $cutUntilPos    = ($nextGotoPos - $gotoPos) - $gotoNameStrLen;

            $substr = '';

            if ($nextGotoPos) {
                $substr = substr($content, $gotoPos + $gotoNameStrLen, $cutUntilPos);
            } else {
                $substr = substr($content, $gotoPos + $gotoNameStrLen);
            }

            $piece = trim($substr);
            $piece === '' ?: $res .= $piece . ' ';
            $hops--;
        }
        $res = preg_replace('~\w{1,20}:~msi', '', $res);
        $res = stripcslashes($res);
        return $res;
    }

    /**
     * Get text inside quotes (' or ")
     *
     * @param $string
     * @return string
     */
    public static function getTextInsideQuotes($string)
    {
        if (preg_match_all('/("(.*)")/msi', $string, $matches)) {
            $array = end($matches);
            return @end($array);
        }

        if (preg_match_all('/\((\'(.*)\')/msi', $string, $matches)) {
            $array = end($matches);
            return @end($array);
        }

        return '';
    }

    /**
     * Get the value in quotes, the parity of the quotes is not checked.
     *
     * @param $string
     * @return array
     */
    public static function getNeedles($string)
    {
        preg_match_all("/'(.*?)'/msi", $string, $matches);

        return (empty($matches)) ? [] : $matches[1];
    }

    /**
     * Apply some formatting rules to the code
     *
     * @param $string
     * @return string
     */
    public static function formatPHP($string)
    {
        $string = str_replace('<?php', '', $string);
        $string = str_replace('?>', '', $string);
        $string = str_replace(PHP_EOL, "", $string);
        $string = str_replace(";", ";\n", $string);
        $string = str_replace("}", "}\n", $string);
        return $string;
    }

    /**
     * Parse array values om string and return array
     *
     * @param $string
     * @return array
     */
    public static function prepareArray($string)
    {
        $string = rtrim($string, ',');
        $array_string = Helpers::normalize($string);
        $list_str = explode(',', $array_string);
        $result = [];
        foreach ($list_str as $element) {
            $key = null;
            $value = $element;
            if (strpos($element, '=>') !== false) {
                list($key, $value) = explode('=>', $element);
            }
            $key = is_null($key) ? $key : trim($key, '\'"');
            $value = is_null($value) ? $value : trim($value, '\'"');

            if (is_null($key)) {
                $result[] = $value;
            }
            else {
                $result[$key] = $value;
            }
        }
        return $result;
    }

    /**
     * Detect text encoding
     *
     * @param $text
     * @return false|string
     */
    public static function detect_utf_encoding($text)
    {
        $first2 = substr($text, 0, 2);
        $first3 = substr($text, 0, 3);
        $first4 = substr($text, 0, 4);

        if ($first4 == chr(0x00) . chr(0x00) . chr(0xFE) . chr(0xFF)) {
            return 'UTF-32BE';
        } elseif ($first4 == chr(0xFF) . chr(0xFE) . chr(0x00) . chr(0x00)) {
            return 'UTF-32LE';
        } elseif ($first2 == chr(0xFE) . chr(0xFF)) {
            return 'UTF-16BE';
        } elseif ($first2 == chr(0xFF) . chr(0xFE)) {
            return 'UTF-16LE';
        }

        return false;
    }

    /**
     * Function safety check
     *
     * @param $func Function name
     * @return bool
     */
    public static function isSafeFunc($func)
    {
        $safeFuncs = [
            'base64_decode', 'gzinflate', 'gzdecode', 'gzuncompress', 'strrev', 'strlen',
            'str_rot13', 'urldecode', 'rawurldecode', 'stripslashes', 'chr',
            'htmlspecialchars_decode', 'convert_uudecode','pack', 'ord',
            'str_repeat', 'sprintf', 'str_replace', 'strtr', 'hex2bin',
            'helpers::unserialize',
        ];

        return in_array(strtolower($func), $safeFuncs);
    }

    /**
     * Convert the function to a safe one and return a boolean result was it possible to do it
     *
     * @param $func
     * @return bool
     */
    public static function convertToSafeFunc(&$func)
    {
        $replacedFuncs = [
            'unserialize' => 'Helpers::unserialize',
        ];

        $lowerFunc = strtolower($func);

        if (isset($replacedFuncs[$lowerFunc])) {
            $func = $replacedFuncs[$lowerFunc];
        }

        return self::isSafeFunc($func);
    }

    /**
     * Calculates a simple mathematical construct
     *
     * @param $task
     * @return string
     */
    public static function calculateMathStr($task)
    {
        $res = $task;

        while (preg_match('~\(?(\d+)\s?([+\-*\/])\s?(\d+)\)?~', $res, $subMatch)) {
            if (count($subMatch) === 4) {
                list($subSearch, $number_1, $operator, $number_2) = $subMatch;
                $res = str_replace($subSearch, self::calc("$number_1$operator$number_2"), $res);
            } else {
                return $res;
            }
        }

        return $res;
    }

    /**
     * From the content located in the input variable $content, get the values of the variables that can be calculated using the dictionary ($dictionary).
     * For example:
     * $dictionary: 'adnmpytr%uiqchsw_6jfoxkebzgl4v'
     * $content: $L1=$L1{8}.$L1{12}
     * return: ['$L1' => '%c']
     *
     * @param string $dictionary
     * @param string $content
     *
     * @return array
     */
    public static function getVarsFromDictionary($dictionary, $content) : array
    {
        $vars = [];
        preg_match_all('~(\$(?:[^\w]+|\w+)\s*=(\s?\.?\s?\$(?:[^\w]+|\w+)[{\[]\d+[\]}])+)~msi', $content, $concatMatches);
        for ($i = 0; $iMax = count($concatMatches[0]), $i <= $iMax; $i++) {
            preg_match_all('~(\$(?:[^\w]+|\w+)(=))?(\s?(\.?)\s?\$(?:[^\w]+|\w+)[{\[](\d+)[\]}])~msi',
                $concatMatches[0][$i], $varMatches);
            for ($j = 0; $jMax = count($varMatches[0]), $j < $jMax; $j++) {
                $varName = substr($varMatches[1][0], 0, -1);
                $value = $dictionary[(int)$varMatches[5][$j]] ?? '';

                if ($varMatches[2][$j] === '=') {
                    $vars[$varName] = $value;
                } else {
                    $vars[$varName] .= $value;
                }
            }
        }
        return $vars;
    }

    /**
     * From the content located in the input variable $content, calculate the variable values of which are concatenated from the variables of the dictionaries located in $vars.
     * Dictionary variables must already be in $vars when the function is run.
     *
     * @param array  $vars
     * @param string $content
     *
     * @return array
     */
    public static function getVarsFromDictionaryDynamically(array &$vars = [], string $content = ''): array
    {
        preg_match_all('~(\$\w+)(\.)?\s?=\s?(?:\$\w+[{\[]?\d+[}\]]?\.?)+;~msi', $content, $varsMatches, PREG_SET_ORDER);
        foreach ($varsMatches as $varsMatch) {
            preg_match_all('~(\$\w+)[{\[]?(\d+)?[}\]]?~msi', $varsMatch[0], $subVarsMatches, PREG_SET_ORDER);
            $concat = '';
            foreach ($subVarsMatches as $subVarsMatch) {
                if (isset($subVarsMatch[2])) {
                    $concat .= $vars[$subVarsMatch[1]][(int)$subVarsMatch[2]] ?? '';
                } else if ($varsMatch[1] !== $subVarsMatch[1]) {
                    $concat .= $vars[$subVarsMatch[1]];
                }
            }
            if (isset($vars[$varsMatch[1]])) {
                $vars[$varsMatch[1]] .= $concat;
            } else {
                $vars[$varsMatch[1]] = $concat;
            }
        }
        return $vars;
    }

    /**
     * Concatenate content of variables.
     * Examples: CheckDeobfuscationHelpersTest::testConcatVariableValues
     *
     * @param string $str
     * @return string
     */
    public static function concatVariableValues($str) : string
    {
        preg_match_all('/\$\w+\s?(\.?)=\s?"([\w=\+\/]+)"/', $str, $concatVars);
        $strVar = '';
        foreach ($concatVars[2] as $index => $concatVar) {
            if ($concatVars[1][$index] === '.') {
                $strVar .= $concatVar;
            } else {
                $strVar = $concatVar;
            }
        }
        return $strVar;
    }

    /**
     * Concatenate simple strings inside which there may be chunks of PHP code
     * Examples: CheckDeobfuscationHelpersTest::testConcatStr
     *
     * @param string $str
     * @return string
     */
    public static function concatStr($str) : string
    {
        preg_match_all('~(\.?)\s?[\'"]([\w=\+/%&();]+)[\'"]\s?~msi', $str, $concatStrings);
        $strVar = '';
        foreach ($concatStrings[2] as $index => $concatString) {
            if ($concatStrings[1][$index] === '.') {
                $strVar .= $concatString;
            } else {
                $strVar = $concatString;
            }
        }
        return $strVar;
    }

    /**
     * Concats simple strings without variable in content globally
     * Examples: CheckDeobfuscationHelpersTest::concatStringsInContent()
     *
     * @param string $str
     * @return string
     */
    public static function concatStringsInContent($str) : string
    {
        $strVar = preg_replace_callback('~(?:[\'"][\w=();]*[\'"]\.?){2,}~msi', static function ($m) {
            return '\'' . self::concatStr($m[0]) . '\'';
        }, $str);
        return $strVar;
    }

    /**
     * Replace the elements of the dictionary array with its values.
     * Examples: CheckDeobfuscationHelpersTest::testReplaceVarsFromDictionary()
     *
     * @param string $dictionaryVar
     * @param array $dictionaryValue
     * @param string $str
     * @param bool $quote
     *
     * @return string
     */
    public static function replaceVarsFromDictionary($dictionaryVar, $dictionaryValue, $str, $quote = true) : string
    {
        $result = $str;
        $result = preg_replace_callback('~(?:(\$(?:GLOBALS\[[\'"])?\w+(?:[\'"]\])?)[\[{][\'"]?(\d+)[\'"]?[\]}]\s?(\.)?\s?)~msi',
            function ($match) use ($dictionaryValue, $dictionaryVar, $quote) {
                if ($match[1] !== $dictionaryVar && !isset($dictionaryValue[(int)$match[2]])) {
                    return $match[0];
                }
                $lastChar = $match[3] ?? '';
                $value = $dictionaryValue[(int)$match[2]];
                $value = str_replace(['\'', '.'], ['@@quote@@', '@@dot@@'], $value);
                $value = $quote ? '\'' . $value . '\'' : $value;
                return $value . $lastChar;
            },
            $result
        );
        $result = str_replace('\'.\'', '', $result);
        $result = str_replace(['@@quote@@', '@@dot@@'], ['\\\'', '.'], $result);
        return $result;
    }

    /**
     * @param string $arrayName
     * @param array  $array
     * @param string $str
     *
     * @return string
     */
    public static function replaceVarsByArrayName(string $arrayName, array $array, string $str): string
    {
        $result = preg_replace_callback('~\s?(\$\w+)\s?\[\s?(\d+)\s?\]\s?~msi',
            function ($match) use ($array, $arrayName) {
                if ($match[1] !== $arrayName) {
                    return $match[0];
                }
                return $array[$match[2]] ?? $match[0];
            },
            $str
        );

        return $result;
    }

    /**
     * Collects simple or concated vars from str
     * @param string $str
     * @param string $trimQuote
     * @param array $vars
     * @param bool $remove
     *
     * @return array
     */
    public static function collectVars(&$str, string $trimQuote = '"', &$vars = [], $remove = false) : array
    {
        if (!is_string($str)) {
            return $vars;
        }
        preg_match_all('~(\$\w+)\s?(\.)?=\s?([\'"].*?[\'"]);~msi', $str, $matches);

        foreach ($matches[1] as $index => $match) {
            $varName = $match;
            $varValue = str_replace("$trimQuote.$trimQuote", '', $matches[3][$index]);
            $varValue = stripcslashes(trim($varValue, $trimQuote));
            if ($matches[2][$index] !== '.') {
                $vars[$varName] = $varValue;
            } else {
                $vars[$varName] .= $varValue;
            }
        }
        if ($remove) {
            $str = str_replace($matches[0], '', $str);
        }

        return $vars;
    }

    /**
     * Collects concated variable vars or str from str
     * @param string $str
     * @param string $trimQuote
     * @param array $vars
     * @param bool $remove
     *
     */
    public static function collectConcatedVars(&$str, string $trimQuote = '"', &$vars = [], $remove = false): array
    {
        if (!is_string($str)) {
            return $vars;
        }
        preg_match_all('~(\$\w+)\s?(\.)?=((?:\s?\.?\s?(?:[\'"][^"\']+[\'"]|\$\w{1,50}))+);~msi', $str, $matches, PREG_SET_ORDER);

        foreach ($matches as $match) {
            $varName = $match[1];
            $varValue = '';

            preg_match_all('~[\'"]([^"\']+)[\'"]|(\$\w{1,50})~msi', $match[3], $varsMatch, PREG_SET_ORDER);
            foreach ($varsMatch as $varMatch) {

                if ($varMatch[1] !== '') {
                    $varValue .= $varMatch[1];
                } else {
                    $varValue .= $vars[$varMatch[2]] ?? '';
                }

                $varValue = str_replace("$trimQuote.$trimQuote", '', $varValue);
                $varValue = stripcslashes(trim($varValue, $trimQuote));
            }

            if ($match[2] !== '.') {
                $vars[$varName] = $varValue;
            } else {
                $vars[$varName] .= $varValue;
            }

            if ($remove) {
                $str = str_replace($match[0], '', $str);
            }
        }

        return $vars;
    }

    /**
     * Collects simple or concated str
     * @param string $str
     * @param string $trimQuote
     *
     * @return string
     */
    public static function collectStr($str, string $trimQuote = '"') : string
    {
        preg_match('~["\'\w%=\.\+\/]+~msi', $str, $match);

        $str = str_replace("$trimQuote.$trimQuote", '', $match[0]);
        $str = trim($str, $trimQuote);

        return $str;
    }

    /**
     * Collects function wrapped vars with one arg from str
     * ex. var1 = base64_decode(str1); var2 = gzinflate(str2); and etc.
     *
     * @param string $str
     *
     * @return array
     */
    public static function collectFuncVars(string &$str, &$vars = [], $quotes = true, $delete = false): array
    {
        preg_match_all('~(\$\w+)\s*=\s*(\w+)\([\'"]([\w+/=]+)[\'"](?:,\s*[\'"]([\w+/=]*)[\'"],\s*[\'"]([\w+/=]+)[\'"])?\);~msi', $str, $matches, PREG_SET_ORDER);

        foreach ($matches as $match) {
            $func = $match[2];
            $param1 = $match[3];
            $param2 = $match[4];
            $param3 = $match[5];

            if (self::convertToSafeFunc($func)) {
                if ($func === 'str_replace') {
                    $ret = @$func($param1, $param2, $param3);
                } else {
                    $ret = @$func($param1);
                }
            }
            $vars[$match[1]] = self::convertToSafeFunc($ret) ? $ret : ($quotes ? "'$ret'" : $ret);

            if ($delete) {
                $str = str_replace($match[0], '', $str);
            }
        }

        return $vars;
    }

    /**
     * @param array  $vars
     * @param string $str
     *
     * @return string
     */
    public static function replaceVarsFromArray(array $vars, string $str, bool $isFunc = false, $toStr = false) : string
    {
        $result = $str;

        uksort($vars, static function($a, $b) {
            return strlen($b) <=> strlen($a);
        });
        foreach ($vars as $name => $value) {
            $sub_name = substr($name, 1);
            $result = preg_replace_callback('~{?(@)?\${?[\'"]?GLOBALS[\'"]?}?\[[\'"](\w+)[\'"]\]}?~msi',
                function ($m) use ($value, $sub_name) {
                    if ($m[2] !== $sub_name) {
                        return $m[0];
                    }
                    return $m[1] . $value;
                }, $result);

            if (!is_string($value)) {
                continue;
            }
            $result = str_replace(['{' . $name . '}', $name . '('], [$value, trim($value, '\'"') . '('],
                $result);

            if (!$isFunc && !$toStr) {
                $result = str_replace($name, $value, $result);
            } else if ($toStr) {
                $result = str_replace($name, "'$value'", $result);
            }

        }

        return $result;
    }

    /**
     * @param $str
     * @return array
     */
    public static function collectVarsChars($str)
    {
        $vars = [];
        preg_match_all('~(\$\w+)=\'(\w)\';~msi', $str, $matches, PREG_SET_ORDER);
        foreach ($matches as $m) {
            $vars[$m[1]] = $m[2];
        }
        return $vars;
    }

    /**
     * Removes duplicated string variables after replacing
     *
     * @param string $str
     *
     * @return string
     */
    public static function removeDuplicatedStrVars($str) : string
    {
        return preg_replace('~[\'"]?([^\'"]+)[\'"]?\s?=\s?[\'"]?\1[\'"]?;~msi','', $str);
    }

    /**
     * @param $chars
     * @param $str
     * @return array
     */
    public static function assembleStrings($chars, $str)
    {
        $vars = [];
        array_walk($chars, static function(&$x) {
            $x = "'$x'";
        });
        $parts = explode(';', $str);
        foreach ($parts as &$part) {
            $vals = explode('=', $part);
            $part = str_replace($vals[1], strtr($vals[1], $chars), $part);
        }
        $str = implode(';', $parts);
        $vars = self::collectVars($str, '\'');
        return $vars;
    }

    /**
     * Expand base64decode() function
     *
     * @param string $str
     * @param string $quote
     * @return string
     */
    public static function replaceBase64Decode($str, $quote = '\'')
    {
        return preg_replace_callback(self::REGEXP_BASE64_DECODE, static function ($m) use ($quote) {
            return $quote . base64_decode($m[1]) . $quote;
        }, $str);
    }

    /**
     * Calc min(), max() and round().
     * This function can be used with simple constructions, if they are complex, then it is better to use a separate MathCalc class.
     *
     * @param string $string
     * @param int $max_iterations
     * @return string
     */
    public static function replaceMinMaxRound($string, $max_iterations = 15)
    {
        $i = 0;
        $regexp_for_multi_min_max_round = '~(?:min|max|round)\(\s*\d+[\.\,\|\s\|+\|\-\|\*\|\/]([\d\s\.\,\+\-\*\/]+)?\)~msi';
        while (preg_match($regexp_for_multi_min_max_round, $string) && $i < $max_iterations) {
            $string = preg_replace_callback($regexp_for_multi_min_max_round, ['Helpers','calc'], $string);
            $i++;
        }

        $regexp_for_single_min_max_round = '~(?:min|max|round)\(\s*\d+\s*\)~msi';
        while (preg_match($regexp_for_single_min_max_round, $string) && $i < $max_iterations) {
            $string = preg_replace_callback($regexp_for_single_min_max_round, ['Helpers','calc'], $string);
            $i++;
        }

        $regexp_for_brackets = '~\(\s*\d+[\.\|\s\|+\|\-\|\*\|\/]([\d\s\.\+\-\*\/]+)?\)~msi';
        while (preg_match($regexp_for_brackets, $string) && $i < $max_iterations) {
            $string = preg_replace_callback($regexp_for_brackets, ['Helpers','calc'], $string);
            $i++;
        }

        return $string;
    }

    /**
     * Calc XOR with key
     *
     * @param string $encrypted
     * @param string $key
     * @return string
     */
    public static function xorWithKey($encrypted, $key)
    {
        $res = '';
        for ($i = 0, $iMax = strlen($encrypted); $i < $iMax; ) {
            for ($j = 0; $j < strlen($key) && $i < strlen($encrypted); $j++, $i++) {
                $res .= $encrypted[$i] ^ $key[$j];
            }
        }
        return $res;
    }

    /**
     * Similar to the native PHP function unserialize(), but it is safe as it only supports simple data types.
     *
     * @param string $string
     * @return array|bool|float|int|string|null
     */
    public static function unserialize(&$string)
    {
        $type = substr($string, 0, 2);
        $string = substr($string, 2);
        switch ($type) {
            case 'N;':
                return null;
            case 'b:':
                list($ret, $string) = explode(';', $string, 2);
                return (bool)(int)$ret;
            case 'i:':
                list($ret, $string) = explode(';', $string, 2);
                return (int)$ret;
            case 'd:':
                list($ret, $string) = explode(';', $string, 2);
                return (float)$ret;
            case 's:':
                list($length, $string) = explode(':', $string, 2);
                $length = (int) $length;
                if (($length > strlen($string) - 3) || ($string[0] !== '"') || (substr($string, $length + 1, 2) !== '";')) {
                    return '';
                }
                $ret = substr($string, 1, $length);
                $string = substr($string, $length + 3);
                return $ret;
            case 'a:':
                $ret = [];
                list($length, $string) = explode(':', $string, 2);
                if ($string[0] !== '{') {
                    return '';
                }
                $length = (int) $length;
                $string = substr($string, 1);
                for ($i= 0; $i < $length; $i++) {
                    $ret[self::unserialize($string)] = self::unserialize($string);
                }
                if ($string === '') {
                    return $ret;
                }
                $end = substr($string, 0, 2);
                if ($end !== '' && $end !== '};' && $end !== '}' && $end !== '}}') {
                    return '';
                }
                $string = substr($string, 2);
                return $ret;
            case 'O:':
                list($length, $string) = explode(':', $string, 2);
                $length = (int) $length;
                $string = substr($string, $length + 3);
                list($length, $string) = explode(':', $string, 2);
                $string = preg_replace('~{([^{}]*+(?:(?R)[^{}]*)*+)}~msi', '', $string);
                return '';
            default:
                return '';
        }
    }

    /**
     * Post processing after deobfuscation
     *
     * @param string $deobfuscated
     * @return string
     */
    public static function postProcess($deobfuscated) : string
    {
        $deobfuscated = preg_replace_callback('~"[\w\\\\\s=;_<>&/\.-]+"~msi', static function ($matches) {
            return preg_match('~\\\\x[2-7][0-9a-f]|\\\\1[0-2][0-9]|\\\\[3-9][0-9]|\\\\0[0-4][0-9]|\\\\1[0-7][0-9]~msi', $matches[0]) ? stripcslashes($matches[0]) : $matches[0];
        }, $deobfuscated);

        $deobfuscated = preg_replace_callback('~echo\s*"((.*?[^\\\\])??((\\\\\\\\)+)?+)"~msi', static function ($matches) {
            return preg_match('~\\\\x[2-7][0-9a-f]|\\\\1[0-2][0-9]|\\\\[3-9][0-9]|\\\\0[0-4][0-9]|\\\\1[0-7][0-9]~msi', $matches[0]) ? stripcslashes($matches[0]) : $matches[0];
        }, $deobfuscated);

        preg_match_all('~(global\s*(\$[\w_]+);)\2\s*=\s*"[^"]+";~msi', $deobfuscated, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $deobfuscated = str_replace($match[0], '', $deobfuscated);
            $deobfuscated = str_replace($match[1], '', $deobfuscated);
        }

        preg_match_all('~\$\{"GLOBALS"\}\[[\'"](\w+)[\'"]\]=["\'](\w+)[\'"];~msi', $deobfuscated, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $deobfuscated = preg_replace_callback('~\$\{\$\{"GLOBALS"\}\[[\'"](\w+)[\'"]\]\}~msi', static function ($matches) use ($match) {
                if ($matches[1] !== $match[1]) {
                    return $matches[0];
                }
                return '$' . $match[2];
            }, $deobfuscated);
            $deobfuscated = str_replace($match[0], '', $deobfuscated);
        }

        if (strpos($deobfuscated, '${$') !== false) {
            preg_match_all('~\$\{(\$\w+)\}~msi', $deobfuscated, $matches);
            preg_match_all('~(\$\w+)\s*=\s*["\'](\w+)[\'"];~msi', $deobfuscated, $matches2);
            $replace_to = [];
            foreach ($matches[1] as $k => $match) {
                $index = array_search($match, $matches2[1]);
                if ($index !== false) {
                    $replace_to[] = '$' . $matches2[2][$index];
                } else {
                    unset($matches[0][$k]);
                }
            }
            if (!empty($replace_to)) {
                $deobfuscated = str_replace($matches[0], $replace_to, $deobfuscated);
            }
        }

        if (strpos($deobfuscated, 'chr(')) {
            $deobfuscated = preg_replace_callback('~chr\((\d+)\)~msi', static function ($matches) {
                return "'" . chr($matches[1]) . "'";
            }, $deobfuscated);
        }
        return $deobfuscated;
    }

    /*************************************************************************************************************/
    /*                                Helper functions for individual obfuscators                                */
    /*************************************************************************************************************/

    /**
     * @param $a
     * @param $b
     *
     * @return string
     */
    public static function decodefuncDictVars($a, $b)
    {
        $c = preg_split("//", $a, -1, PREG_SPLIT_NO_EMPTY);
        foreach ($c as $d => $e) {
            $c[$d] = chr(ord($e) + $b);
        }
        $res = implode("", $c);

        return $res;
    }

    /**
     * @param $string
     * @param $amount
     *
     * @return string
     */
    public static function rotencode($string, $amount)
    {
        $key = substr($string, 0, 1);
        if (strlen($string) == 1) {
            return chr(ord($key) + $amount);
        } else {
            return chr(ord($key) + $amount) . self::rotencode(
                    substr($string, 1, strlen($string) - 1),
                    $amount);
        }
    }

    /**
     * @param string $data
     * @param string $key
     *
     * @return string
     */
    public static function decodeEvalFileContentBySize(string $data, string $key): string
    {
        $res = '';
        $key = md5($key) . md5($key . $key);
        $key_len = strlen($key);
        $data_len = strlen($data);
        for ($i = 0; $i < $data_len; $i++) {
            $res .= chr(ord($data[$i]) ^ ord($key[$i % $key_len]));
        }

        return $res;
    }

    /**
     * @param string $key
     * @param string $data
     *
     * @return string
     */
    public static function decodeFuncVars(string $key, string $data): string
    {
        $hakfku = $data;
        $keyLen = strlen($key);
        $dataLen = strlen($hakfku);
        $res = "";
        for ($i = 0; $i < $dataLen;) {
            for ($j = 0; ($j < $keyLen && $i < $dataLen); $j++, $i++) {
                $res .= $hakfku[$i] ^ $key[$j];
            }
        }

        return $res;
    }

    public static function dictionarySampleDecode($string)
    {
        $str1 = substr($string, 0, 5);
        $str2 = substr($string, 7, -7);
        $str3 = substr($string, -5);
        return gzinflate(base64_decode($str1 . $str2 . $str3));
    }

    public static function codelock_dec($codelock_v)
    {
        switch ($codelock_v) {
            case "A":
                $dv = 0;
                break;
            case "B":
                $dv = 1;
                break;
            case "C":
                $dv = 2;
                break;
            case "D":
                $dv = 3;
                break;
            case "E":
                $dv = 4;
                break;
            case "F":
                $dv = 5;
                break;
            case "G":
                $dv = 6;
                break;
            case "H":
                $dv = 7;
                break;
            case "I":
                $dv = 8;
                break;
            case "J":
                $dv = 9;
                break;
            case "K":
                $dv = 10;
                break;
            case "L":
                $dv = 11;
                break;
            case "M":
                $dv = 12;
                break;
            case "N":
                $dv = 13;
                break;
            case "O":
                $dv = 14;
                break;
            case "P":
                $dv = 15;
                break;
            case "Q":
                $dv = 16;
                break;
            case "R":
                $dv = 17;
                break;
            case "S":
                $dv = 18;
                break;
            case "T":
                $dv = 19;
                break;
            case "U":
                $dv = 20;
                break;
            case "V":
                $dv = 21;
                break;
            case "W":
                $dv = 22;
                break;
            case "X":
                $dv = 23;
                break;
            case "Y":
                $dv = 24;
                break;
            case "Z":
                $dv = 25;
                break;
            case "a":
                $dv = 26;
                break;
            case "b":
                $dv = 27;
                break;
            case "c":
                $dv = 28;
                break;
            case "d":
                $dv = 29;
                break;
            case "e":
                $dv = 30;
                break;
            case "f":
                $dv = 31;
                break;
            case "g":
                $dv = 32;
                break;
            case "h":
                $dv = 33;
                break;
            case "i":
                $dv = 34;
                break;
            case "j":
                $dv = 35;
                break;
            case "k":
                $dv = 36;
                break;
            case "l":
                $dv = 37;
                break;
            case "m":
                $dv = 38;
                break;
            case "n":
                $dv = 39;
                break;
            case "o":
                $dv = 40;
                break;
            case "p":
                $dv = 41;
                break;
            case "q":
                $dv = 42;
                break;
            case "r":
                $dv = 43;
                break;
            case "s":
                $dv = 44;
                break;
            case "t":
                $dv = 45;
                break;
            case "u":
                $dv = 46;
                break;
            case "v":
                $dv = 47;
                break;
            case "w":
                $dv = 48;
                break;
            case "x":
                $dv = 49;
                break;
            case "y":
                $dv = 50;
                break;
            case "z":
                $dv = 51;
                break;
            case "0":
                $dv = 52;
                break;
            case "1":
                $dv = 53;
                break;
            case "2":
                $dv = 54;
                break;
            case "3":
                $dv = 55;
                break;
            case "4":
                $dv = 56;
                break;
            case "5":
                $dv = 57;
                break;
            case "6":
                $dv = 58;
                break;
            case "7":
                $dv = 59;
                break;
            case "8":
                $dv = 60;
                break;
            case "9":
                $dv = 61;
                break;
            case "+":
                $dv = 62;
                break;
            case "/":
                $dv = 63;
                break;
            case "=":
                $dv = 64;
                break;
            default:
                $dv = 0;
                break;
        }
        return $dv;
    }

    public static function codelock_run($ciph, $key)
    {
        $m = 0;
        $abc = "";
        for ($i = 0, $iMax = strlen($ciph); $i < $iMax; $i++) {
            $c = substr($ciph, $i, 1);
            $dv = Helpers::codelock_dec($c);
            $dv = ($dv - $m) / 4;
            $fb = decbin($dv);
            while (strlen($fb) < 4) {
                $fb = "0" . $fb;
            }
            $abc = $abc . $fb;
            $m++;
            if ($m > 3) {
                $m = 0;
            }
        }
        $kl = 0;
        $pd = "";
        for ($j = 0, $jMax = strlen($abc); $j < $jMax; $j = $j + 8) {
            $c = substr($abc, $j, 8);
            $k = substr($key, $kl, 1);
            $dc = bindec($c);
            $dc = $dc - strlen($key);
            $c = chr($dc);
            $kl++;
            if ($kl >= strlen($key)) {
                $kl = 0;
            }
            $dc = ord($c) ^ ord($k);
            $p = chr($dc);
            $pd = $pd . $p;
        }
        return $pd;
    }

    public static function codelock_dec_int($codelock_decint_code, $codelock_calc_key)
    {
        if ($codelock_calc_key !== "") {
            $codelock_calc_key = base64_encode($codelock_calc_key);
            $codelock_k1 = substr($codelock_calc_key, 0, 1);
            $codelock_k2 = substr($codelock_calc_key, 1, 1);
            $codelock_k3 = substr($codelock_calc_key, 2, 1);
            $codelock_decint_code = str_replace("$", "$codelock_k1", $codelock_decint_code);
            $codelock_decint_code = str_replace("(", "$codelock_k2", $codelock_decint_code);
            $codelock_decint_code = str_replace(")", "$codelock_k3", $codelock_decint_code);
        }
        $codelock_decint_code = base64_decode($codelock_decint_code);
        return $codelock_decint_code;
    }

    public static function decodeClassDecryptedWithKey(string $data, int $num, string $key): string
    {
        function CTL($start, &$data, &$data_long)
        {
            $n = strlen($data);
            $tmp = unpack('N*', $data);
            $j = $start;
            foreach ($tmp as $value) $data_long[$j++] = $value;
            return $j;
        }

        function LtoC($l)
        {
            return pack('N', $l);
        }

        function add($i1, $i2)
        {
            $result = 0.0;
            foreach (func_get_args() as $value) {
                if (0.0 > $value) {
                    $value -= 1.0 + 0xffffffff;
                }
                $result += $value;
            }
            if (0xffffffff < $result || -0xffffffff > $result) {
                $result = fmod($result, 0xffffffff + 1);
            }
            if (0x7fffffff < $result) {
                $result -= 0xffffffff + 1.0;
            } elseif (-0x80000000 > $result) {
                $result += 0xffffffff + 1.0;
            }
            return $result;
        }

        function delg($y, $z, &$w, &$k, $num)
        {
            $sum = 0xC6EF3720;
            $klhys = 0x9E3779B9;
            $n = $num;
            while ($n-- > 0) {
                $z = add($z, -(add($y << 4 ^ rsLT($y, 5), $y) ^ add($sum, $k[rsLT($sum, 11) & 3])));
                $sum = add($sum, -$klhys);
                $y = add($y, -(add($z << 4 ^ rsLT($z, 5), $z) ^ add($sum, $k[$sum & 3])));
            }
            $w[0] = $y;
            $w[1] = $z;
        }

        function rsLT($integer, $n)
        {
            if (0xffffffff < $integer || -0xffffffff > $integer) {
                $integer = fmod($integer, 0xffffffff + 1);
            }
            if (0x7fffffff < $integer) {
                $integer -= 0xffffffff + 1.0;
            } elseif (-0x80000000 > $integer) {
                $integer += 0xffffffff + 1.0;
            }
            if (0 > $integer) {
                $integer &= 0x7fffffff;
                $integer >>= $n;
                $integer |= 1 << (31 - $n);
            } else {
                $integer >>= $n;
            }
            return $integer;
        }

        function resize(&$data, $size, $nonull = false)
        {
            $n = strlen($data);
            $nmod = $n % $size;
            if (0 == $nmod) $nmod = $size;
            if ($nmod > 0) {
                if ($nonull) {
                    for ($i = $n; $i < $n - $nmod + $size; ++$i) {
                        $data[$i] = $data[$i % $n];
                    }
                } else {
                    for ($i = $n; $i < $n - $nmod + $size; ++$i) {
                        $data[$i] = chr(0);
                    }
                }
            }
            return $n;
        }

        $ncdL = CTL(0, $data, $enc_data_long);
        resize($key, 16, true);
        $n_key_long = CTL(0, $key, $key_long);
        $data = '';
        $w = array(0, 0);
        $j = 0;
        $len = 0;
        $k = array(0, 0, 0, 0);
        $pos = 0;
        for ($i = 0; $i < $ncdL; $i += 2) {
            if ($j + 4 <= $n_key_long) {
                $k[0] = $key_long[$j];
                $k[1] = $key_long[$j + 1];
                $k[2] = $key_long[$j + 2];
                $k[3] = $key_long[$j + 3];
            } else {
                $k[0] = $key_long[$j % $n_key_long];
                $k[1] = $key_long[($j + 1) % $n_key_long];
                $k[2] = $key_long[($j + 2) % $n_key_long];
                $k[3] = $key_long[($j + 3) % $n_key_long];
            }
            $j = ($j + 4) % $n_key_long;
            delg($enc_data_long[$i], $enc_data_long[$i + 1], $w, $k, $num);
            if (0 == $i) {
                $len = $w[0];
                if (4 <= $len) {
                    $data .= LtoC($w[1]);
                } else {
                    $data .= substr(LtoC($w[1]), 0, $len % 4);
                }
            } else {
                $pos = ($i - 1) * 4;
                if ($pos + 4 <= $len) {
                    $data .= LtoC($w[0]);
                    if ($pos + 8 <= $len) {
                        $data .= LtoC($w[1]);
                    } elseif ($pos + 4 < $len) {
                        $data .= substr(LtoC($w[1]), 0, $len % 4);
                    }
                } else {
                    $data .= substr(LtoC($w[0]), 0, $len % 4);
                }
            }
        }
        return $data;
    }

    public static function stripsquoteslashes($str)
    {
        $res = '';
        for ($i = 0, $iMax = strlen($str); $i < $iMax; $i++) {
            if (isset($str[$i+1]) && ($str[$i] == '\\' && ($str[$i+1] == '\\' || $str[$i+1] == '\''))) {
                continue;
            } else {
                $res .= $str[$i];
            }
        }
        return $res;
    }

    public static function decodeFileGetContentsWithFunc($data, $key)
    {
        $out_data = "";

        for ($i = 0; $i < strlen($data);) {
            for ($j = 0; $j < strlen($key) && $i < strlen($data); $j++, $i++) {
                $out_data .= chr(ord($data[$i]) ^ ord($key[$j]));
            }
        }

        return $out_data;
    }

    public static function decrypt_T_func($l)
    {
        $x2 = 256;
        $W2 = 8;
        $cY = [];
        $I3 = 0;
        $C4 = 0;
        for ($bs = 0, $bsMax = strlen($l); $bs < $bsMax; $bs++) {
            $I3 = ($I3 << 8) + ord($l[$bs]);
            $C4 += 8;
            if ($C4 >= $W2) {
                $C4 -= $W2;
                $cY[] = $I3 >> $C4;
                $I3 &= (1 << $C4) - 1;
                $x2++;
                if ($x2 >> $W2) {
                    $W2++;
                }
            }
        }
        $K5 = range("\x0", "\377");
        $UH = '';
        foreach ($cY as $bs => $xd) {
            if (!isset($K5[$xd])) {
                $iU = $Co . $Co[0];
            } else {
                $iU = $K5[$xd];
            }
            $UH .= $iU;
            if ($bs) {
                $K5[] = $Co . $iU[0];
            }
            $Co = $iU;
        }
        return $UH;
    }

    //from sample_16
    public static function someDecoder($str)
    {
        $str = base64_decode($str);
        $TC9A16C47DA8EEE87 = 0;
        $TA7FB8B0A1C0E2E9E = 0;
        $T17D35BB9DF7A47E4 = 0;
        $T65CE9F6823D588A7 = (ord($str[1]) << 8) + ord($str[2]);
        $i = 3;
        $T77605D5F26DD5248 = 0;
        $block = 16;
        $T7C7E72B89B83E235 = "";
        $T43D5686285035C13 = "";
        $len = strlen($str);

        $T6BBC58A3B5B11DC4 = 0;

        for (; $i < $len;) {
            if ($block == 0) {
                $T65CE9F6823D588A7 = (ord($str[$i++]) << 8);
                $T65CE9F6823D588A7 += ord($str[$i++]);
                $block = 16;
            }
            if ($T65CE9F6823D588A7 & 0x8000) {
                $TC9A16C47DA8EEE87 = (ord($str[$i++]) << 4);
                $TC9A16C47DA8EEE87 += (ord($str[$i]) >> 4);
                if ($TC9A16C47DA8EEE87) {
                    $TA7FB8B0A1C0E2E9E = (ord($str[$i++]) & 0x0F) + 3;
                    for ($T17D35BB9DF7A47E4 = 0; $T17D35BB9DF7A47E4 < $TA7FB8B0A1C0E2E9E; $T17D35BB9DF7A47E4++) {
                        $T7C7E72B89B83E235[$T77605D5F26DD5248 + $T17D35BB9DF7A47E4] =
                            $T7C7E72B89B83E235[$T77605D5F26DD5248 - $TC9A16C47DA8EEE87 + $T17D35BB9DF7A47E4];
                    }
                    $T77605D5F26DD5248 += $TA7FB8B0A1C0E2E9E;
                } else {
                    $TA7FB8B0A1C0E2E9E = (ord($str[$i++]) << 8);
                    $TA7FB8B0A1C0E2E9E += ord($str[$i++]) + 16;
                    for ($T17D35BB9DF7A47E4 = 0; $T17D35BB9DF7A47E4 < $TA7FB8B0A1C0E2E9E;
                         $T7C7E72B89B83E235[$T77605D5F26DD5248 + $T17D35BB9DF7A47E4++] = $str[$i]) {
                    }
                    $i++;
                    $T77605D5F26DD5248 += $TA7FB8B0A1C0E2E9E;
                }
            } else {
                $T7C7E72B89B83E235[$T77605D5F26DD5248++] = $str[$i++];
            }
            $T65CE9F6823D588A7 <<= 1;
            $block--;
            if ($i == $len) {
                $T43D5686285035C13 = $T7C7E72B89B83E235;
                if (is_array($T43D5686285035C13)) {
                    $T43D5686285035C13 = implode($T43D5686285035C13);
                }
                $T43D5686285035C13 = "?" . ">" . $T43D5686285035C13;
                return $T43D5686285035C13;
            }
        }
    }

    public static function someDecoder2($WWAcmoxRAZq, $sBtUiFZaz)   //sample_05
    {
        $JYekrRTYM = str_rot13(gzinflate(str_rot13(base64_decode('y8svKCwqLiktK6+orFdZV0FWWljPyMzKzsmNNzQyNjE1M7ewNAAA'))));
        if ($WWAcmoxRAZq == 'asedferg456789034689gd') {
            $cEerbvwKPI = $JYekrRTYM[18] . $JYekrRTYM[19] . $JYekrRTYM[17] . $JYekrRTYM[17] . $JYekrRTYM[4] . $JYekrRTYM[21];
            return Helpers::convertToSafeFunc($cEerbvwKPI) ? $cEerbvwKPI($sBtUiFZaz) : '';
        } elseif ($WWAcmoxRAZq == 'zfcxdrtgyu678954ftyuip') {
            $JWTDeUKphI = $JYekrRTYM[1] . $JYekrRTYM[0] . $JYekrRTYM[18] . $JYekrRTYM[4] . $JYekrRTYM[32] .
                $JYekrRTYM[30] . $JYekrRTYM[26] . $JYekrRTYM[3] . $JYekrRTYM[4] . $JYekrRTYM[2] . $JYekrRTYM[14] .
                $JYekrRTYM[3] . $JYekrRTYM[4];
            return Helpers::convertToSafeFunc($JWTDeUKphI) ? $JWTDeUKphI($sBtUiFZaz) : '';
        } elseif ($WWAcmoxRAZq == 'gyurt456cdfewqzswexcd7890df') {
            $rezmMBMev = $JYekrRTYM[6] . $JYekrRTYM[25] . $JYekrRTYM[8] . $JYekrRTYM[13] . $JYekrRTYM[5] . $JYekrRTYM[11] . $JYekrRTYM[0] . $JYekrRTYM[19] . $JYekrRTYM[4];
            return Helpers::convertToSafeFunc($rezmMBMev) ? $rezmMBMev($sBtUiFZaz) : '';
        } elseif ($WWAcmoxRAZq == 'zcdfer45dferrttuihvs4321890mj') {
            $WbbQXOQbH = $JYekrRTYM[18] . $JYekrRTYM[19] . $JYekrRTYM[17] . $JYekrRTYM[26] . $JYekrRTYM[17] . $JYekrRTYM[14] . $JYekrRTYM[19] . $JYekrRTYM[27] . $JYekrRTYM[29];
            return Helpers::convertToSafeFunc($WbbQXOQbH) ? $WbbQXOQbH($sBtUiFZaz) : '';
        } elseif ($WWAcmoxRAZq == 'zsedrtre4565fbghgrtyrssdxv456') {
            $jPnPLPZcMHgH = $JYekrRTYM[2] . $JYekrRTYM[14] . $JYekrRTYM[13] . $JYekrRTYM[21] . $JYekrRTYM[4] . $JYekrRTYM[17] . $JYekrRTYM[19] . $JYekrRTYM[26] . $JYekrRTYM[20] . $JYekrRTYM[20] . $JYekrRTYM[3] . $JYekrRTYM[4] . $JYekrRTYM[2] . $JYekrRTYM[14] . $JYekrRTYM[3] . $JYekrRTYM[4];
            return Helpers::convertToSafeFunc($jPnPLPZcMHgH) ? $jPnPLPZcMHgH($sBtUiFZaz) : '';
        }
    }

    public static function someDecoder3($str)
    {
        $l = base64_decode($str);
        $lllllll = 0;
        $lllll = 3;
        $llllll = (ord($l[1]) << 8) + ord($l[2]);
        $lllllllll = 16;
        $llllllll = [];
        for ($lllllMax = strlen($l); $lllll < $lllllMax;) {
            if ($lllllllll == 0) {
                $llllll = (ord($l[$lllll++]) << 8);
                $llllll+= ord($l[$lllll++]);
                $lllllllll = 16;
            }
            if ($llllll & 0x8000) {
                $lll = (ord($l[$lllll++]) << 4);
                $lll+= (ord($l[$lllll]) >> 4);
                if ($lll) {
                    $ll = (ord($l[$lllll++]) & 0x0f) + 3;
                    for ($llll = 0;$llll < $ll;$llll++) $llllllll[$lllllll + $llll] = $llllllll[$lllllll - $lll + $llll];
                    $lllllll+= $ll;
                } else {
                    $ll = (ord($l[$lllll++]) << 8);
                    $ll+= ord($l[$lllll++]) + 16;
                    for ($llll = 0;$llll < $ll;$llllllll[$lllllll + $llll++] = ord($l[$lllll]));
                    $lllll++;
                    $lllllll+= $ll;
                }
            } else {
                $llllllll[$lllllll++] = ord($l[$lllll++]);
            }
            $llllll <<= 1;
            $lllllllll--;
        }
        $lllll = 0;
        $lllllllll="?".chr(62);
        $llllllllll = "";
        for (;$lllll < $lllllll;) {
            $llllllllll.= chr($llllllll[$lllll++] ^ 0x07);
        }
        $lllllllll.=$llllllllll.chr(60)."?";
        return $lllllllll;
    }

    public static function PHPJiaMi_decoder($str, $md5, $rand, $lower_range = '')
    {
        $md5_xor = md5($md5);
        $lower_range = !$lower_range ? ord($rand) : $lower_range;
        $layer1 = '';
        for ($i=0, $iMax = strlen($str); $i < $iMax; $i++) {
            $layer1 .= ord($str[$i]) < 245 ? ((ord($str[$i]) > $lower_range && ord($str[$i]) < 245) ? chr(ord($str[$i]) / 2) : $str[$i]) : '';
        }
        $layer1 = base64_decode($layer1);
        $result = '';
        $j = $len_md5_xor = strlen($md5_xor);
        for ($i=0, $iMax = strlen($layer1); $i < $iMax; $i++) {
            $j = $j ? $j : $len_md5_xor;
            $j--;
            $result .= $layer1[$i] ^ $md5_xor[$j];
        }
        return $result;
    }

    public static function someDecoder4($ae, $key)
    {
        $at = [];
        for ($i = 0, $iMax = strlen($key); $i < $iMax; $i++) {
            if ((int)$key[$i] > 0) {
                $at[$i] = $key[$i];
            }
        }
        $at = array_values($at);
        $str = "";
        for ($i = 0, $iMax = count($ae); $i < $iMax; $i++) {
            if ($i < count($ae) - 1) {
                $str .= str_replace(md5($at[$i]), "", $ae[$i]);
            } else {
                $str .= $ae[$i];
            }
        }
        return $str;
    }

    public static function OELoveDecoder($arg1, $arg2 = '')
    {
        if (empty($arg1)) {
            return '';
        }
        $arg1 = base64_decode($arg1);
        if ($arg2 == '') return ~$arg1;
        //if ($arg2 == '-1') @271552362217();
        $len = strlen($arg1);
        $arg2 = str_pad($arg2, $len, $arg2);
        return $arg2 ^ $arg1;
    }

    public static function aanKFMDigitsDecode($digits)
    {
        $res = '';
        $len = ceil(strlen($digits) / 3) * 3;
        $cipher = str_pad($digits, $len, '0', STR_PAD_LEFT);
        for ($i = 0; $i < (strlen($cipher) / 3);$i++) {
            $res .= chr(substr($cipher, $i * 3, 3));
        }
        return $res;
    }

    public static function obf20200414_1_decrypt($data, $key)
    {
        $key = md5($key);
        $x = 0;
        $data = base64_decode($data);
        $len = strlen($data);
        $l = strlen($key);
        $char = '';
        for ($i = 0; $i < $len; $i++) {
            if ($x === $l) {
                $x = 0;
            }
            $char .= substr($key, $x, 1);
            $x++;
        }
        $str = '';
        for ($i = 0; $i < $len; $i++) {
            if (ord(substr($data, $i, 1)) < ord(substr($char, $i, 1))) {
                $str .= chr((ord(substr($data, $i, 1)) + 256) - ord(substr($char, $i, 1)));
            } else {
                $str .= chr(ord(substr($data, $i, 1)) - ord(substr($char, $i, 1)));
            }
        }
        return $str;
    }

    public static function Xtea_decrypt($text, $key)
    {
        $_key = '';
        $cbc = 1;

        if(is_array($key)) {
            $_key = $key;
        } else if(isset($key) && !empty($key)) {
            $_key = self::_str2long(str_pad($key, 16, $key));
        } else {
            $_key = [0, 0, 0, 0];
        }

        $plain = [];
        $cipher = self::_str2long(base64_decode($text));

        if($cbc == 1) {
            $i = 2;
        } else {
            $i = 0;
        }

        for ($i, $iMax = count($cipher); $i < $iMax; $i += 2) {
            $return = self::block_decrypt($cipher[$i], $cipher[$i+1], $_key);
            if($cbc == 1) {
                $plain[] = [$return[0] ^ $cipher[$i - 2], $return[1] ^ $cipher[$i - 1]];
            } else {
                $plain[] = $return;
            }
        }

        $output = "";
        for($i = 0, $iMax = count($plain); $i < $iMax; $i++) {
            $output .= self::_long2str($plain[$i][0]);
            $output .= self::_long2str($plain[$i][1]);
        }

        return $output;
    }

    public static function getDecryptKeyForTinkleShell($size)
    {
        $bx = md5(base64_encode($size));
        $len = strlen($bx);
        $arr = [];
        for ($i = 0; $i < $len; $i++) {
            $arr[] = substr($bx, $i, 1);
        }
        $arr = array_unique($arr);
        $newstr = "";
        foreach ($arr as $k => $v) {
            $newstr .= $v;
        }
        if (strlen($newstr) < 9) {
            if (strpos($newstr, 'A') === false) {
                $newstr .= 'A';
            }
            if (strpos($newstr, 'B') === false) {
                $newstr .= 'B';
            }
            if (strpos($newstr, 'C') === false) {
                $newstr .= 'C';
            }
            if (strpos($newstr, 'D') === false) {
                $newstr .= 'D';
            }
            if (strpos($newstr, 'E') === false) {
                $newstr .= 'E';
            }
            if (strpos($newstr, 'F') === false) {
                $newstr .= 'F';
            }
            if (strpos($newstr, 'G') === false) {
                $newstr .= 'G';
            }
        }

        return strtoupper($newstr);
    }

    /**
     * For 4 args
     * @param array $arr
     *
     * @return string
     */
    public static function decodeEvalCreateFunc_1(array $arr) : string
    {
        $args = $arr;

        for ($i = 0; $i < 4; $i++) {
            for ($j = 0, $jMax = strlen($args[$i]); $j < $jMax; $j++) {
                $args[$i][$j] = chr(ord($args[$i][$j]) - ($i ? $args[$j xor $j] : 1));
            }
            if ($i === 2 && self::convertToSafeFunc($args[1]) && self::convertToSafeFunc($args[2])) {
                $args[3] = @$args[1](@$args[2]($args[3]));
            }
        }

        return $args[3];
    }

    /**
     * For 3 args
     * @param array $arr
     *
     * @return string
     */
    public static function decodeEvalCreateFunc_2(array $arr) : string
    {
        $args = $arr;

        for ($i = 0; $i < 3; $i++) {
            for ($j = 0, $jMax = strlen($args[$i]); $j < $jMax; $j++) {
                $args[$i][$j] = chr(ord($args[$i][$j]) - 1);
            }
            if ($i === 1 && self::convertToSafeFunc($args[0]) && self::convertToSafeFunc($args[1])) {
                $args[2] = @$args[0](@$args[1]($args[2]));
            }
        }

        return $args[2];
    }

    public static function decodeACharCustom($encoded)
    {
        $result = '';
        $i = 0;
        $len = strlen($encoded);
        while ($i < $len) {
            if ($encoded[$i] === ' ') {
                $result .= ' ';
            } else if ($encoded[$i] === '!') {
                $result .= chr((ord($encoded[$i + 1]) - ord('A')) * 16 + (ord($encoded[$i + 2]) - ord('a')));
                $i += 2;
            } else {
                $result .= chr (ord($encoded[$i]) + 1);
            }
            $i++;
        }
        return $result;
    }

    public static function joomlaInjectDecoder($params, $op, $delta)
    {
        $params = explode(',', $params);
        $params = array_reverse($params);
        for ($i = 1, $iMax = count($params); $i < $iMax; $i++) {
            if ($i !== 0 ) {
                $params[$i] = substr($params[$i], 1, -1);
            }
            for ($j = 0, $jMax = strlen($params[$i]); $j < $jMax; $j++) {
                $tmp = ord($params[$i][$j]);
                if ($op === '-') {
                    $tmp = $tmp - $delta;

                } else if ($op === '+') {
                    $tmp = $tmp + $delta;
                }
                $params[$i][$j] = chr($tmp);
            }
            if ($i === 0) {
                break;
            }
            if (self::convertToSafeFunc($params[$i])) {
                $params[0] = $params[$i]($params[0]);
            }
            if ($i === $iMax - 1) {
                $i = -1;
            }
        }
        return $params[0];
    }

    public static function deobfuscatorIO_string($string, $key)
    {
        $m = [];
        $n = 0;
        $p = '';
        $string = base64_decode($string);
        for ($i = 0, $iMax = strlen($string); $i < $iMax; $i++) {
            if ($string[$i] === "\xC3") {
                $inc = 64;
                continue;
            } else if ($string[$i] === "\xC2") {
                continue;
            }
            $p .= chr(ord($string[$i]) + $inc);
            $inc = 0;
        }
        $string = $p;
        $p = '';
        for ($i = 0; $i < 256; $i++) {
            $m[$i] = $i;
        }
        for ($i = 0; $i < 256; $i++) {
            $n = ($n + $m[$i] + ord($key[$i % strlen($key)])) % 256;
            $o = $m[$i];
            $m[$i] = $m[$n];
            $m[$n] = $o;
        }
        $r = 0;
        $n = 0;
        for ($i = 0, $iMax = strlen($string); $i < $iMax; $i++) {
            $r = ($r + 1) % 256;
            $n = ($n + $m[$r]) % 256;
            $o = $m[$r];
            $m[$r] = $m[$n];
            $m[$n] = $o;
            $p .= chr(ord($string[$i]) ^ $m[($m[$r] + $m[$n]) % 256]);
        }
        return $p;
    }

    public static function decodeEvalFuncBinary($input)
    {
        if (empty($input)) {
            return;
        }
        $keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
        $chr1 = $chr2 = $chr3 = "";
        $enc1 = $enc2 = $enc3 = $enc4 = "";
        $i = 0;
        $output = "";
        $input = preg_replace("[^A-Za-z0-9\+\/\=]", "", $input);
        do {
            $enc1 = strpos($keyStr, substr($input, $i++, 1));
            $enc2 = strpos($keyStr, substr($input, $i++, 1));
            $enc3 = strpos($keyStr, substr($input, $i++, 1));
            $enc4 = strpos($keyStr, substr($input, $i++, 1));
            $chr1 = ($enc1 << 2) | ($enc2 >> 4);
            $chr2 = (($enc2 & 15) << 4) | ($enc3 >> 2);
            $chr3 = (($enc3 & 3) << 6) | $enc4;
            $output .= chr($chr1);
            if ($enc3 !== 64) {
                $output .= chr($chr2);
            }
            if ($enc4 !== 64) {
                $output .= chr($chr3);
            }
            $chr1 = $chr2 = $chr3 = "";
            $enc1 = $enc2 = $enc3 = $enc4 = "";
        } while ($i < strlen($input));

        return $output;
    }

    public static function jsPackerUnbaser($int, $radix)
    {
        if ($int < $radix) {
            $ret = '';
        } else {
            $ret = self::jsPackerUnbaser((int)($int / $radix), $radix);
        }

        if (($int = $int % $radix) > 35) {
            $ret .= chr($int + 29);
        } else {
            $ret .= base_convert((string)$int, 10, 36);
        }
        return $ret;
    }

    public static function jsObjectDecodeIndexToString($int)
    {
        $ret = base_convert((string)$int, 10, 36);
        $ret = preg_replace_callback('~[0-9]~', function ($m) {
            return chr((int)$m[0] + 65);
        }, $ret);
        return $ret;
    }

    public static function jsObjectStringDecoder($r, $t, $encoded)
    {
        $ret = '';
        $i = 1;
        for ($f = 0, $fMax = strlen($encoded); $f < $fMax; $f++) {
            $o = strpos($r, $encoded[$f]);
            if (in_array($encoded[$f], $t)) {
                $i = 0;
            }
            if ($o !== false) {
                $ret .= chr($i * strlen($r) + $o);
                $i = 1;
            }
        }
        return $ret;
    }

    public static function utfCharVarsFuncEvalVarDecoder($argOne, $argTwo = '')
    {
        $argOne = base64_decode($argOne);
        if (empty($argOne)) {
            return '';
        }
        if ($argTwo == '') {
            return ~$argOne;
        } else {
            //$temp   = $globalVar['¾”Ã‰Å”—˜']($argOne);//strlen
            //$argTwo = $globalVar['ÊƒÑÇ»µ½Èªº']($argTwo, $temp, $argTwo); //str_pad
            $temp   = strlen($argOne);//strlen
            $argTwo = str_pad($argTwo, $temp, $argTwo); //str_pad
            return $argOne ^ $argTwo;
        }
    }

    public static function utfCharVarsFuncEvalVarCollector($globalVarName, $funcName, &$str, &$vars = []): array
    {
        $varsMatchesRegex = '~\\' . $globalVarName . '\[\'([^\']+)\'\]\s?=\s?' . $funcName . '\(\'([^\']+)\',\'([^\']*)\'\);~msi';
        preg_match_all($varsMatchesRegex, $str, $varsMatches, PREG_SET_ORDER);

        foreach ($varsMatches as $varsMatch) {
            $vars[$varsMatch[1]] = self::utfCharVarsFuncEvalVarDecoder($varsMatch[2], $varsMatch[3]);
            $str = str_replace($varsMatch[0], '', $str);
        }

        return $vars;
    }

    public static function utfCharVarsFuncEvalCodeDecoder(&$str, &$vars, $globalVarName, $funcName): string
    {
        $vars = Helpers::utfCharVarsFuncEvalVarCollector($globalVarName, $funcName, $str, $vars);
        foreach ($vars as $name => $val) {
            $str = str_replace($globalVarName . '[\'' . $name . '\'](', $val . '(', $str);
        }

        return $str;
    }

    private static function block_decrypt($y, $z, $key)
    {
        $delta = 0x9e3779b9;
        $sum = 0xC6EF3720;
        $n = 32;

        for ($i = 0; $i < 32; $i++) {
            $z = self::_add($z, -(self::_add($y << 4 ^ self::_rshift($y, 5), $y)
                ^ self::_add($sum, $key[self::_rshift($sum, 11) & 3])));
            $sum = self::_add($sum, -$delta);
            $y = self::_add($y, -(self::_add($z << 4 ^ self::_rshift($z, 5), $z)
                ^ self::_add($sum, $key[$sum & 3])));

        }
        return [$y, $z];
    }

    private static function _rshift($integer, $n)
    {
        if (0xffffffff < $integer || -0xffffffff > $integer) {
            $integer = fmod($integer, 0xffffffff + 1);
        }

        if (0x7fffffff < $integer) {
            $integer -= 0xffffffff + 1.0;
        } else if (-0x80000000 > $integer) {
            $integer += 0xffffffff + 1.0;
        }

        if (0 > $integer) {
            $integer &= 0x7fffffff;
            $integer >>= $n;
            $integer |= 1 << (31 - $n);
        } else {
            $integer >>= $n;
        }
        return $integer;
    }

    private static function _add($i1, $i2)
    {
        $result = 0.0;

        foreach (func_get_args() as $value) {
            if (0.0 > $value) {
                $value -= 1.0 + 0xffffffff;
            }
            $result += $value;
        }

        if (0xffffffff < $result || -0xffffffff > $result) {
            $result = fmod($result, 0xffffffff + 1);
        }

        if (0x7fffffff < $result) {
            $result -= 0xffffffff + 1.0;
        } else if (-0x80000000 > $result) {
            $result += 0xffffffff + 1.0;
        }
        return $result;
    }

    private static function _str2long($data)
    {
        $tmp = unpack('N*', $data);
        $data_long = [];
        $j = 0;

        foreach ($tmp as $value) $data_long[$j++] = $value;
        return $data_long;
    }

    private static function _long2str($l){
        return pack('N', $l);
    }

}

/**
 * Class for calculating mathematical functions, examples can be found here tests/deobfuscator/CheckDeobfuscationHelpersTest.php
 */
class MathCalc {
    const ELEMENT_TYPE_OPERATION            = 'operation';
    const ELEMENT_TYPE_NUMBER               = 'number';
    const ELEMENT_TYPE_SIMPLE_PARENTHESES   = 'simple_parentheses';

    const ELEMENT       = 'element';
    const ELEMENT_TYPE  = 'type';

    const REGEXP_VALUE      = '[0-9]*\.[0-9]+|[1-9][0-9]*|0(?:x[\da-f]+|b[01]+|[0-7]+)|0';
    const REGEXP_OPERATION  = '\+|\-|/|\*\*|\*|%|&|\||\^|\~|<<|>>';
    const REGEXP_VALUE_SIGN = '\-|\+';

    private static $math_operations_order = [];

    public static function calcRawString($raw_string, $max_iterations = 10)
    {
        self::loadMathOperationsOrder();

        $iterations = 0;
        do {
            $old_string = $raw_string;
            $raw_string = self::calcRawStringOnePassWithParentheses($raw_string);
            $raw_string = FuncCalc::calcFuncInRawStringOnePassWithParentheses($raw_string);
            if ($raw_string == $old_string) {
                break;
            }
            $iterations++;
        } while($iterations < $max_iterations);

        $iterations = 0;
        do {
            $old_string = $raw_string;
            $raw_string = self::calcRawStringOnePassWithoutParentheses($raw_string);
            if ($raw_string == $old_string) {
                break;
            }
            $iterations++;
        } while($iterations < $max_iterations);

        return $raw_string;
    }

    ////////////////////////////////////////////////////////////////////////////

    private static function calcRawStringOnePassWithParentheses($raw_string)
    {
        self::loadMathOperationsOrder();
        $regexp_find_simple_math_operations = '('
            . '\s*(?:\(\s*[+-]?\s*(?:' . self::REGEXP_VALUE . ')\s*\))\s*'
            . '|'
            . '\s*(?:' . self::REGEXP_VALUE . ')\s*'
            . '|'
            . '\s*(?:' . self::REGEXP_OPERATION . ')\s*'
            . ')+';
        $regexp_find_math_operations_inside_brackets    = '\(' . $regexp_find_simple_math_operations . '\)';
        return preg_replace_callback('~' . $regexp_find_math_operations_inside_brackets . '~mis', function($matches) {
            $original = $matches[0];
            $math_string = substr($original, 1, strlen($original) - 2);
            if (self::haveOnlyValue($math_string) || self::haveOnlyOperation($math_string)) {
                return $original;
            }
            try {
                $result = self::calcSimpleMath($math_string);
            }
            catch (\Exception $e) {
                return $original;
            }
            return '(' . $result . ')';
        }, $raw_string);
    }

    private static function calcRawStringOnePassWithoutParentheses($raw_string)
    {
        self::loadMathOperationsOrder();
        $regexp_find_simple_math_operations = '(?:'
            . '\s*?(?:\(\s*[+-]?\s*(?:' . self::REGEXP_VALUE . ')\s*\))\s*?'
            . '|'
            . '\s*?(?:' . self::REGEXP_VALUE . ')\s*?'
            . '|'
            . '\s*?(?:' . self::REGEXP_OPERATION . ')\s*?'
            . ')+';
        return preg_replace_callback('~(\s*)(' . $regexp_find_simple_math_operations . ')(\s*)~mis', function($matches){
            $begin          = $matches[1];
            $math_string    = $matches[2];
            $end            = $matches[3];
            $original       = $begin . $math_string . $end;

            if (self::haveOnlyValueWithParentheses($math_string) || self::haveOnlyOperationWithParentheses($math_string)) {
                return $original;
            }
            if (self::haveOnlyValue($math_string)) {
                return $original;
            }
            if (self::haveOnlyOperation($math_string)) {
                return $original;
            }

            try {
                $result = self::calcSimpleMath($math_string);
            }
            catch (\Exception $e) {
                return $original;
            }

            return $begin . $result . $end;
        }, $raw_string);
    }

    private static function loadMathOperationsOrder()
    {
        if (!empty(self::$math_operations_order)) {
            return;
        }

        self::$math_operations_order = [
            [
                '**' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return $a ** $b;
                    },
                ],
            ],
            [
                '~' => [
                    'elements' => [+1],
                    'func' => function($a) {
                        return ~$a;
                    },
                ],
            ],
            [
                '*' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return $a * $b;
                    },
                ],
                '/' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        if ($b == 0) {
                            throw new Exception('Division by zero');
                        }
                        return $a / $b;
                    },
                ],
                '%' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        if ($b == 0) {
                            throw new Exception('Division by zero');
                        }
                        return $a % $b;
                    },
                ],
            ],
            [
                '+' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return $a + $b;
                    },
                ],
                '-' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return $a - $b;
                    },
                ],
            ],
            [
                '<<' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return $a << $b;
                    },
                ],
                '>>' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return $a >> $b;
                    },
                ],
            ],
            [
                '&' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return $a & $b;
                    },
                ],
            ],
            [
                '^' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return $a ^ $b;
                    },
                ],
            ],
            [
                '|' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return $a | $b;
                    },
                ],
            ],
        ];
    }

    private static function haveOnlyValue($string)
    {
        return preg_match('~^\s*[+-]?\s*(?:' . self::REGEXP_VALUE . ')\s*$~mis', $string);
    }

    private static function haveOnlyOperation($string)
    {
        return preg_match('~^(\s*(?:' . self::REGEXP_OPERATION . ')\s*)+$~mis', $string);
    }

    private static function haveOnlyValueWithParentheses($string)
    {
        return preg_match('~^\s*(?:\(\s*[+-]?\s*(?:' . self::REGEXP_VALUE . ')\s*\))\s*$~mis', $string);
    }

    private static function haveOnlyOperationWithParentheses($string)
    {
        return preg_match('~^\s*(?:\(\s*(?:' . self::REGEXP_OPERATION . ')\s*\))\s*$~mis', $string);
    }

    private static function calcSimpleMath($string, $max_iterations = 30)
    {

        $input_string = $string;
        $input_string = str_replace(' ', '', $input_string);
        $input_string = str_replace(['+-', '-+'], '-', $input_string);
        $input_string = str_replace(['--', '++'], '+', $input_string);

        $regexp_find_simple_math_operations = '('
                . '(?<' . self::ELEMENT_TYPE_SIMPLE_PARENTHESES . '>\(\s*[+-]?\s*(?:' . self::REGEXP_VALUE . ')\s*\))\s*'
                . '|'
                . '(?<' . self::ELEMENT_TYPE_NUMBER . '>' . self::REGEXP_VALUE . ')'
                . '|'
                . '(?<' . self::ELEMENT_TYPE_OPERATION . '>' . self::REGEXP_OPERATION . ')'
                . ')';
        if (!preg_match_all('~'.$regexp_find_simple_math_operations.'~mis', $input_string, $matches)) {
            return $string;
        }

        $math_array = [];
        foreach ($matches[0] as $index => $element) {
            if ($element === $matches[self::ELEMENT_TYPE_OPERATION][$index]) {
                $type = self::ELEMENT_TYPE_OPERATION;
            }
            elseif ($element === $matches[self::ELEMENT_TYPE_NUMBER][$index]) {
                $type       = self::ELEMENT_TYPE_NUMBER;
                $k = $element;
                $element    = self::convertNum($element);
            }
            elseif ($element === $matches[self::ELEMENT_TYPE_SIMPLE_PARENTHESES][$index]) {
                $type = self::ELEMENT_TYPE_NUMBER;
                $element = self::convertNum(trim($element, '()'));
            }
            else {
                throw new Exception();
            }

            $math_array[] = [
                self::ELEMENT       => $element,
                self::ELEMENT_TYPE  => $type,
            ];
        }

        if ($math_array[0][self::ELEMENT_TYPE] == self::ELEMENT_TYPE_OPERATION
            && $math_array[0][self::ELEMENT] == '-'
            && $math_array[1][self::ELEMENT_TYPE] == self::ELEMENT_TYPE_NUMBER
        ) {
            unset($math_array[0]);
            $math_array[1][self::ELEMENT] *= -1;
            $math_array = array_values($math_array);
        }

        $changed = false;
        foreach (self::$math_operations_order as $level => $operations) {
            $iterations = 0;
            do {
                $interrupted = false;
                foreach ($math_array as $index => &$element) {
                    if ($element[self::ELEMENT_TYPE] != self::ELEMENT_TYPE_OPERATION) {
                        continue;
                    }

                    if (!isset($operations[$element[self::ELEMENT]])) {
                        continue;
                    }

                    $func_params    = $operations[$element[self::ELEMENT]];
                    $val1_offset    = $func_params['elements'][0];
                    $val2_offset    = isset($func_params['elements'][1]) ? $func_params['elements'][1] : null;
                    $val1_index     = $index + $val1_offset;
                    $val2_index     = $index + $val2_offset;

                    if(!isset($math_array[$val1_index])) {
                        continue;
                    }

                    $val1 = $math_array[$val1_index][self::ELEMENT];

                    if (is_null($val2_offset)) {
                        try {
                            $result = $func_params['func']($val1);
                        }
                        catch (\Exception $e) {
                            continue;
                        }
                        $element[self::ELEMENT] = $result;
                    }
                    else {
                        if (!isset($math_array[$val2_index])) {
                            continue;
                        }
                        $val2 = $math_array[$val2_index][self::ELEMENT];

                        try {
                            $result = $func_params['func']($val1, $val2);
                        }
                        catch (\Exception $e) {
                            throw new \Exception('');
                        }
                        $element[self::ELEMENT] = $result;
                    }
                    $element[self::ELEMENT_TYPE] = self::ELEMENT_TYPE_NUMBER;

                    unset($math_array[$val1_index]);
                    if (!is_null($val2_offset)) {
                        unset($math_array[$val2_index]);
                    }
                    $changed        = true;
                    $interrupted    = true;
                    break;
                }
                unset($element);
                $math_array = array_values($math_array);
                $iterations++;
                if ($iterations >= $max_iterations) {
                    return $string;
                }
            } while ($interrupted);
        }

        if (!$changed) {
            return $string;
        }

        $return_value = '';
        foreach ($math_array as $element) {
            $return_value .= $element[self::ELEMENT];
        }
        return $return_value;
    }

    private static function convertNum(string $string)
    {
        if(stripos($string, '0x') === 0) {
            return (float)hexdec($string);
        }
        elseif(stripos($string, '0b') === 0) {
            return (float)bindec($string);
        }
        elseif(stripos($string, '0.') === 0) {
            return (float)$string;
        }
        elseif ($string !== '0' && substr($string, 0, 1) == '0') {
            return (float)octdec($string);
        }
        return (float)$string;
    }
}

/**
 * The class is auxiliary for MathCalc, calculates certain specific mathematical functions with explicit values
 */
class FuncCalc {
    private static $functions = [];

    private static $functions_regexp = '';

    public static function calcFuncInRawStringOnePassWithParentheses($raw_string)
    {
        if (empty(self::$functions)) {
            self::loadFunctions();
        }

        $regexp_find_functions = '(?:'
                . '('.self::$functions_regexp.')'
                . '\s*\(([^)]+)\)'
                . ')+';

        return preg_replace_callback('~' . $regexp_find_functions . '~mis', function($matches) {
            $name   = $matches[1];
            $params = $matches[2];
            return self::calcFunction($name, $params);
        }, $raw_string);
    }

    ////////////////////////////////////////////////////////////////////////////

    private static function calcFunction($name, $params) {
        $result             = "$name($params)";//safely
        $name_lower         = strtolower($name);
        $function_otions    = isset(self::$functions[$name_lower]) ? self::$functions[$name_lower] : false;
        if (!$function_otions) {
            return $result;
        }

        $params_array = explode(',', $params);
        $params_array = array_map('trim', $params_array);

        try {
            return $function_otions['func'](...$params_array);//safely
        } catch (Exception $ex) {
            return $result;
        }
    }

    private static function loadFunctions()
    {
        self::$functions = [
            'min' => [
                'func' => function(...$a) {
                    return min($a);
                },
            ],
            'max' => [
                'func' => function(...$a) {
                    return max($a);
                },
            ],
            'round' => [
                'func' => function($a, $b = 0) {
                    return round($a, $b);
                },
            ],
            'abs' => [
                'func' => function($a) {
                    return abs($a);
                },
            ],
        ];
        self::$functions_regexp = implode('|', array_keys(self::$functions));
    }

}




///////////////////////////////////////////////////////////////////////////

function parseArgs($argv)
{
    array_shift($argv);
    $o = [];
    foreach ($argv as $a) {
        if (substr($a, 0, 2) == '--') {
            $eq = strpos($a, '=');
            if ($eq !== false) {
                $o[substr($a, 2, $eq - 2)] = substr($a, $eq + 1);
            } else {
                $k = substr($a, 2);
                if (!isset($o[$k])) {
                    $o[$k] = true;
                }
            }
        } else {
            if (strpos($a, '-') === 0) {
                if (substr($a, 2, 1) === '=') {
                    $o[substr($a, 1, 1)] = substr($a, 3);
                } else {
                    foreach (str_split(substr($a, 1)) as $k) {
                        if (!isset($o[$k])) {
                            $o[$k] = true;
                        }
                    }
                }
            } else {
                $o[] = $a;
            }
        }
    }
    return $o;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////
// cli handler
if (!defined('AIBOLIT_START_TIME') && !defined('PROCU_CLEAN_DB') && @strpos(__FILE__, @$argv[0])!==false) {
    set_time_limit(0);
    ini_set('max_execution_time', '900000');
    ini_set('realpath_cache_size', '16M');
    ini_set('realpath_cache_ttl', '1200');
    ini_set('pcre.jit', '1');
    $options = parseArgs($argv);
    $str = php_strip_whitespace($options[0]);
    $str2 = file_get_contents($options[0]);
    $l_UnicodeContent = Helpers::detect_utf_encoding($str);
    $l_UnicodeContent2 = Helpers::detect_utf_encoding($str2);
    if ($l_UnicodeContent !== false) {
        if (function_exists('iconv')) {
            $str = iconv($l_UnicodeContent, "UTF-8", $str);
            $str2 = iconv($l_UnicodeContent2, "UTF-8", $str2);
        }
    }
    $d = new Deobfuscator($str, $str2);
    $start = microtime(true);
    $deobf_type = $d->getObfuscateType($str);
    if ($deobf_type != '') {
        $str = $d->deobfuscate();
    }
    $code = $str;
    if (isset($options['prettyprint'])) {
        $code = Helpers::normalize($code);
        $code = Helpers::format($code);
    }
    if ($l_UnicodeContent !== false) {
        if (function_exists('iconv')) {
            $code = iconv('UTF-8', $l_UnicodeContent . '//IGNORE', $code);
        }
    }
    echo $code;
    echo "\n";
    //echo 'Execution time: ' . round(microtime(true) - $start, 4) . ' sec.';
}

class Deobfuscator
{
    const PCRE_BACKTRACKLIMIT = 4000000;
    const PCRE_RECURSIONLIMIT = 40000;

    private static $signatures = [
        [
            'full' => '~(\$\w+)=(\'[^\']+\');\s*eval\(gzinflate\(str_rot13\((\$_D)\(\1\)+;~msi',
            'id' => 'undefinedDFunc',
        ],
        [
            'full' => '~(\$[\w_]{1,50})\s*=\s*\[\s*base64_decode\s*\(\s*[\'"]([\w=]+)[\'"]\s*\)\s*,\s*([^;]{2,200})\]\s*;\s*(if\s*[^}]+}\s*else\s*{[^}]+}\s*function\s\w+[^}]+})~msi',
            'id' => 'base64Array',
        ],
        [
            'full' => '~for\((\$\w{1,40})=\d+,(\$\w+)=\'([^\$]+)\',(\$\w+)=\'\';@?ord\(\2\[\1\]\);\1\+\+\)\{if\(\1<\d+\)\{(\$\w+)\[\2\[\1\]\]=\1;\}else\{\$\w+\.\=@?chr\(\(\5\[\2\[\1\]\]<<\d+\)\+\(\5\[\2\[\+\+\1\]\]\)\);\}\}\s*.{0,500}eval\(\4\);(if\(isset\(\$_(GET|REQUEST|POST|COOKIE)\[[\'"][^\'"]+[\'"]\]\)\)\{[^}]+;\})?~msi',
            'fast' => '~for\((\$\w{1,40})=\d+,(\$\w+)=\'([^\$]+)\',(\$\w+)=\'\';@?ord\(\2\[\1\]\);\1\+\+\)\{if\(\1<\d+\)\{(\$\w+)\[\2\[\1\]\]=\1;\}else\{\$\w+\.\=@?chr\(\(\5\[\2\[\1\]\]<<\d+\)\+\(\5\[\2\[\+\+\1\]\]\)\);\}\}\s*.{0,500}eval\(\4\);~msi',
            'id'   => 'parenthesesString',
        ],
        [
            'full' => '~\$codelock_rfiled=dirname\(__FILE__\);(?:\s*\$codelock_fixpath=\'\';)?\s*if\s*\(\$codelock_file\s*==\s*\'\'\)\s*\{\s*echo\s*"[^"]+";\s*die\(\);\s*\}\s*else\s*\{\}\s*\$codelock_lock="([^"]+)";\s*eval\((gzinflate\()?base64_decode\(\$codelock_lock\)\)\)?;\s*return;\s*\?>\s*([\w\+\/=\$\)\(]+)~msi',
            'id' => 'codeLockDecoder',
        ],
        [
            'full' => '~error_reporting\(0\);\s*set_time_limit\(0\);\s*session_start\(\);\s*\$\w+\s*=\s*"[^"]+";(\s*function\s*(\w+)\((\$\w+)\)\{\s*@?((?:\w+\()+)\3(\)+);\s*}\s*(\$\w+)="([^"]+)";\s*\2\(\6\);)~msi',
            'id' => 'agustus1945',
        ],
        [
            'full' => '~@?eval\(str_rot13\(\s*(["\'])(riny\(pbaireg_hhqrpbqr\((?:[^;]+;)+)\1\s*\)\);~msi',
            'id' => 'strRot13ConvertUUDecode',
        ],
        [
            'full' => '~(\$\w+)="([^"]+)";\s*(\$\w+)=@?\1\(\'([^\']+)\',"([^"]+)"\);\s*@?\3\("([^"]+)"\);~msi',
            'id' => 'createFuncHex',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*"([^"]+)";\s*function\s*(\w+)\(\$\w+\)\s*\{\s*\$\w+\s*=\s*strrev\("\(lave"\);\s*(\$\w+)\s*=\s*\$\w+\s*\.\s*"base64_decode\("\s*\.\s*base64_decode\(strrev\(\$\w+\)\)\s*\.\s*"\)\);";\s*eval\(strrev\(strrev\(\4\)\)\);\s*}\s*\$\w+\s*=\s*strrev\("\("\);\s*\$\w+\s*=\s*strrev\(""\{\$\w+\}""\);\s*\$\w+\s*=\s*strrev\("\)"\);\s*\$\w+\s*=\s*strrev\("\)"\);\s*(\$\w+)\s*=(?:\s*\$\w+\s*\.?)+;\s*\3\(strrev\(base64_encode\(\5\)\)\);~msi',
            'id' => 'evalStrrev',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*"([^"]+)";\s*eval\(base64_decode\(substr\(strrev\(\1\),\s*(\d+),(\-\d+)\)\)\);~msi',
            'id' => 'evalSubstr',
        ],
        [
            'full' => '~((?:\$\w+\.?=\'[^\']+\';\s*)+)\$\w+=\$\w+;function\s*(\w+)\((\$\w+),(\$\w+)\)\s*\{(\$\w+)=\'\';for\((\$\w+)=0;\6<strlen\(\3\);\)for\(\5=0;\5<strlen\(\4\);\5\+\+,\6\+\+\)(\$\w+)\.=\3\{\6\}\^\4\{\5\};return\s*\7;\};(\$\w+)=base64_decode\(\8\);@?(\$\w+)=\2\(\8,\'([^\']+)\'\);@?eval\(@?gzuncompress\(\9\)\);~msi',
            'id' => 'XorGzUncompress',
        ],
        [
            'full' => '~(\$\w+)="([^"]+)";\s*(\$\w+)\s*=\s*str_replace\("([^"]+)","","([^"]+)"\);\s*(\$\w+)=\'([base64_dco\.\']+)\';\s*@?eval\(\6\(\3\("([^"]+)",\s*"",\s*\1\)\)\);~msi',
            'id' => 'evalStrReplace',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*"([^"]+)";(\$\w+)\s*=\s*base64_decode\("([^"]+)"\);eval\(base64_decode\(\3\)\);(?:\s*\$\w+\s*=\s*"[^"]+";)?~msi',
            'id'   => 'sistemitComEnc',
        ],
        [
            'full' => '~(function\s*(\w+)\((\$\w+)\){\s*return\s*(base64_decode|gzinflate|eval)\(\$\w+(,\d+)?\);}\s*)+(\$\w+)="([^"]+)";(preg_replace\(\'/\.\*/e\',"([\\\\x0-9a-f]+)",\'\.\'\);)~msi',
            'id'   => 'funcs',
        ],
        [
            'full' => '~if\(!defined\(\'(\w+)\'\)\)define\(\'\1\',__FILE__\);(?:\s*@eval\(base64_decode\(\'([^\']+)\'\)\);)+\s*@chop\(base64_decode\(\'([^\']+)\'\)~msi',
            'id'   => 'fakeChop',
        ],
        [
            'full' => '~(?:\$\w+\s*=\s*"[^"]*"(?:\.\$\w+)?;\s*)+(\$\w+)=(?:\$\w+\.?)+;\s*eval\(str_rot13\(gzinflate\(str_rot13\(base64_decode\(\(\1\)\)\)\)\)\);~msi',
            'id' => 'R4C',
        ],
        [
            'full' => '~((?:\$GLOBALS\["[^"]+"\]=base64_decode\("[^"]*"\);)+).{0,10}((?:\$GLOBALS\[\$GLOBALS\["[^"]+"\]\]=base64_decode\(\$GLOBALS\["[^"]+"\]\);)+).{0,10}(?:((?:\$GLOBALS\[\$GLOBALS\[\$GLOBALS\["[^"]+"\]\]\]=base64_decode\(\$GLOBALS\[\$GLOBALS\["[^"]+"\]\]\);)+).{0,10}(\$\w+)=\$_POST\[\$GLOBALS\[\$GLOBALS\[\$GLOBALS\["[^"]+"\]\]\]\];if\(\4\!=\$GLOBALS\[\$GLOBALS\[\$GLOBALS\["[^"]+"\]\]\]\)\s*\{(\$\w+)=base64_decode\(\$_POST\[\$GLOBALS\[\$GLOBALS\[\$GLOBALS\["[^"]+"\]\]\]\]\);)?@?eval\((?:"\\\\\$\w+=\5;"\);\}|(?:\w+\()+\$GLOBALS\[\$GLOBALS\["([^"]+)"\]\]\)\)\)\);)~msi',
            'id' => 'manyGlobals',
        ],
        [
            'full' => '~eval\(\'\$(\w+)\s*=\s*"([^"]+)";\$(\w+)\s*=\s*"([^"]+)";(eval\((?:\w+\()+)(\$\{"\3"\}\s*\.\s*\$\{"\1"})(\)+;)\'\);~msi',
            'id' => 'blackshadow',
        ],
        [
            'full' => '~(?:\$[^;\s]+\s*=\s*\d;\s*[^;\s]+:\s*if\s*\([^\)]+\)+\s*\{\s*goto\s*[^;\s]+;\s*\}\s*\$[^;\s]+[^:]+:\s*[^;]+;\s*)?goto [^;\s]+;\s*([^;\s]+:\s*([^;\s]+:\s*)?.*?goto\s*[^;\s]+;\s*(}\s*goto\s*[^;\s]+;)?(goto\s*[^;\s]+;)?\s*)+[^;\s]+:\s*[^;>]+;(\s*goto\s*[^;\s]+;\s*[^;\s]+:\s*[^;\s]+:\s*|(?:\s*die;\s*}\s*)?\s*goto\s*[^;\s]+;\s*[^;\s]+:\s*\}?)?(?:(?:.*?goto\s*\w{1,50};)?(?:\s*\w{1,50}:\s?)+)?(?:(?:[^;]+;\s*goto\s*\w+;\s*)+\w+:\s*include\s*[^;]+;)?~msi',
            'fast' => '~goto [^;\s]+;\s*([^;\s]+:\s*([^;\s]+:\s*)?.*?goto\s*[^;\s]+;\s*(}\s*goto\s*[^;\s]+;)?(goto\s*[^;\s]+;)?\s*)+[^;\s]+:\s*[^;]+(?:;|\?>)~msi',
            'id' => 'goto',
        ],
        [
            'full' => '~\$\w+\s=\sfile_get_contents\(base64_decode\(["\'][^"\']+["\']\)\s\.\sbase64_decode\(["\'][^"\']+[\'"]\)\s\.\s\$\w+\s\.\s["\'][^\'"]+["\']\s\.\s\$_SERVER\[["\'][^\'"]+[\'"]\]\s\.\s["\'][^"\']+["\']\s\.\s\$_SERVER\[["\'][^"\']+["\']\]\);.*?\s\$\w+\s=\sbase64_decode\(["\'][^"\']+["\']\);\s.*?\s@unlink\(\$_SERVER\[["\'][^"\']+["\']\]\);~msi',
            'id' => 'gotoBase64Decode',
        ],
        [
            'full' => '~(?:\$\w{1,50}\s?=\s?(?:str_rot13\(\$\w{1,50}\)|[\'"][^"\']+[\'"]|base64_decode\("(?:{\$\w{1,50}})+"\));\s*)+(\$\w{1,50})\s?=\s?base64_decode\("((?:{\$\w{1,50}})+)"\);\s?eval\(\1\);~msi',
            'id' => 'gotoStrRot13Vars',
        ],
        [
            'full' => '~(\$\{"GLOBALS"\}\["\w+"\])\s*=\s*"\w+";\s*(?:\$\{"GLOBALS"\}\["(\w+)"\]\s*=\s*"\w+";\s*)+.*?;\s*\$\{\1\}\s*=\s*[\"\'][^;]+[\"\'];\s*exec\(\$\w+\);\s*echo\s*"[^"]+";\s*\}\s*\}~msi',
            'id' => 'gotoShell',
        ],
        [
            'full' => '~(?:\$\w+\s*=\s*\'[^\']++\';\s*)*eval\(base64_decode\(substr\("(?:[^"]++)",(?:\d+),(?:-?\d+)\)\.base64_decode\(strrev\("[^"]++"(?:\.(?:substr\("(?:[^"]++)",(?:\d++),(?:-?\d++)\)|"(?:[^"]+)"))++\)\)\)\);(?:\$\w+\s*=\s*\'[^\']++\';\s*)*~msi',
            'id'   => 'substrEmpty',
        ],
        [
            'full' => '~function\s{0,50}(\w+)\((\$\w+)\)\s{0,50}\{\s{0,50}\2\s{0,50}=\s{0,50}substr\(\2,\s{0,50}\(int\)\s{0,50}\(?hex2bin\(([\'"])([0-9a-f]+)\3\)\)\)?;\s{0,50}\2\s{0,50}=\s{0,50}substr\(\2,\s{0,50}\(int\)\s{0,50}\(?hex2bin\(([\'"])([0-9a-f]+)\5\)\)?,\s{0,50}\(int\)\s{0,50}\(?hex2bin\(([\'"])([0-9a-f]+)\7\)\)\)?;\s{0,50}return\s{0,50}\2;\s{0,50}\}\s{0,50}(\$\w+)\s{0,50}=\s{0,50}([\'"])[^\'"]+\10;\s{0,50}(\$\w+)\s{0,50}=\s{0,50}[\'"]base64_decode[\'"];\s{0,50}function\s{0,50}\w+\((\$\w+)\)\s{0,50}{\s{0,50}global\s{0,50}\9;\s{0,50}global\s{0,50}\11;\s{0,50}return\s{0,50}strrev\(gzinflate\(\11\(\1\(\12\)\)\)\);\s{0,50}\}\s{0,50}(?:(?:eval\()+\w+\(([\'"]))?([^\'"]+)\13\)+;~msi',
            'id'   => 'Obf_20200522_1',
        ],
        [
            'full' => '~(\$auth_pass\s*=\s*"[^"]+";\s*(?:/\*[^\*]+\*/\s*)?)\$__="";((?:\$__=\$__\."[^"]+";\s*)+)\$\w+=\$__;function\s*(\w+)\((\$\w+),\s*(\$\w+)\)\{\s*for\((\$\w+)=0;\6<strlen\(\4\);\)\s*for\((\$\w+)=0;\7<strlen\(\5\);\7\+\+,\s*\6\+\+\)\s*(\$\w+)\s*\.=\s*\4\{\6\}\s*\^\s*\5\{\7\};\s*return\s*\8;\s*\};(\$\w+)=base64_decode\(\9\);\$__=\3\(\9,"([^"]+)"\);\$_=create_function\("",\$__\);\$_\(\);~msi',
            'id' => 'b64xoredkey',
        ],
        [
            'full' => '~(eval\(gzinflate\(base64_decode\("([^"]+)"\)\)\);\s*)((?:eval\((?:\$\w+\()+"[^"]+"\)+;\s*)+)~msi',
            'id' => 'linesCond',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*\'[\'.error_reporting]+;\s*\1\(0\);((?:\s*\$\w+\s*=\s*[\'abcdefgilnorstz64_.]+;)+)((?:\s*\$\w+\s*=\s*\'[^;]+\';)+)((?:\s*\$\w+\()+)(\$\w+)[\s\)]+;\s*die\(\);~mis',
            'id'   => 'blackScorpShell',
        ],
        [
            'full' => '~(?(DEFINE)(?\'c\'(?:/\*\w+\*/)*))(\$\w+)\s*=\s*basename(?&c)\((?&c)trim(?&c)\((?&c)preg_replace(?&c)\((?&c)rawurldecode(?&c)\((?&c)"[%0-9A-F\.]+"(?&c)\)(?&c),\s*\'\',\s*__FILE__(?&c)\)(?&c)\)(?&c)\)(?&c);(\$\w+)\s*=\s*"([%\w\.\-\~]+)";(?:(\$\w+)=[^;]+;\5(?&c)\((?&c)\'\',\s*\'};\'\s*\.\s*(?&c)\()?(?:eval(?&c)\()?(?&c)rawurldecode(?&c)\((?&c)\3(?&c)\)(?&c)\s*\^\s*substr(?&c)\((?&c)str_repeat(?&c)\((?&c)\2,\s*(?&c)\((?&c)strlen(?&c)\((?&c)\3(?&c)\)(?&c)/strlen(?&c)\((?&c)\2(?&c)\)(?&c)\)(?&c)\s*\+\s*1(?&c)\)(?&c),\s*0,(?&c)\s*strlen(?&c)\((?&c)\3(?&c)\)(?&c)\)(?&c)\)(?:(?&c)\s*\.\s*\'{\'(?&c)\))?(?&c);~msi',
            'id'   => 'xorFName',
        ],
        [
            'full' => '~(\$\w{1,40})=base64_decode\(\'[^\']+\'\);(\$\w+)=base64_decode\(\'[^\']+\'\);(\$\w+)=base64_decode\(\'([^\']+)\'\);eval\(\1\(gzuncompress\(\2\(\3\)\)\)\);~msi',
            'id'   => 'phpMess',
        ],
        [
            'full' => '~(\$\w{1,40})\s*=\s*\"([^\"]+)\";\s*\$\w+\s*=\s*\$\w+\(\1,\"[^\"]+\",\"[^\"]+\"\);\s*\$\w+\(\"[^\"]+\",\"[^\"]+\",\"\.\"\);~msi',
            'id'   => 'pregReplaceSample05',
        ],
        [
            'full' => '~(\$\w{1,40})\s*=\s*\w+\(\'.+?\'\);\s*(\$\w+)\s*=\s*\w+\(\'.+?\'\);\s*(\$\w+)\s*=\s*\"([^\"]+)\";\s*(\$\w+)\s*=\s*.+?;\s*\2\(\5,\"[^\']+\'\3\'[^\"]+\",\"\.\"\);~msi',
            'id'   => 'pregReplaceB64',
        ],
        [
            'full' => '~preg_replace\([\'"]/\(\.\*\)/e[\'"],[\'"]([^\'"]+)[\'"],\s?NULL\);~msi',
            'id'   => 'pregReplaceStr',
        ],
        [
            'full' => '~(\$\w{1,40})\s*=\s*\'([^\']+)\';\s*\1\s*=\s*gzinflate\s*\(base64_decode\s*\(\1\)\);\s*\1\s*=\s*str_replace\s*\(\"__FILE__\",\"\'\$\w+\'\",\1\);\s*eval\s*\(\1\);~msi',
            'id'   => 'GBE',
        ],
        [
            'full' => '~(\$GLOBALS\[\s*[\'"]_+\w{1,60}[\'"]\s*\])\s*=\s*\s*array\s*\(\s*base64_decode\s*\(.+?((.+?\1\[\d+\]).+?)+[^;]+;(\s*include\(\$_\d+\);)?}?((.+?_+\d+\(\d+\))+[^;]+;)?(.*?(\$[a-z]+).+\8_\d+;)?(echo\s*\$\w+;})?}?(?:unset.*?[^}]+})?~msi',
            'fast' => '~\$GLOBALS\[\s*[\'"]_+\w{1,60}[\'"]\s*\]\s*=\s*\s*array\s*\(\s*base64_decode\s*\(~msi',
            'id'   => 'Bitrix',
        ],
        [
            'full' => '~\$\w{1,40}\s*=\s*(__FILE__|__LINE__);\s*\$\w{1,40}\s*=\s*(\d+);\s*eval(\s*\()+\$?\w+\s*\([\'"][^\'"]+[\'"](\s*\))+;\s*return\s*;\s*\?>(.+)~msi',
            'id'   => 'B64inHTML',
        ],
        [
            'full' => '~<\?php\s+(?:/[*/].*?)?(?:\$[O0]*=__FILE__;\s*)?(\$[O0]*)=urldecode\(\'([%a-f0-9]+)\'\);(\$(GLOBALS\[\')?[O0]*(\'\])?=(\d+);)?(.*?)(\$(GLOBALS\[\')?[O0]*(\'\])?\.?=(\$(GLOBALS\[\')?[O0]*(\'\])?([{\[]\d+[}\]])?\.?)+;)+([^\?]+)\?\>[\s\w\~=/+\\\\^{`%|@[}]+~msi',
            'fast' => '~(\$[O0]*)=urldecode\(\'([%a-f0-9]+)\'\);(\$(GLOBALS\[\')?[O0]*(\'\])?=(\d+);)?(.*?)(\$(GLOBALS\[\')?[O0]*(\'\])?\.?=(\$(GLOBALS\[\')?[O0]*(\'\])?([{\[]\d+[}\]])?\.?)+;)+([^\?]+)\?\>[\s\w\~=/+\\\\^{`%|@[}]+~msi',
            'id'   => 'LockIt',
        ],
        [
            'full' => '~(\$\w{1,40})\s*=\s*\"(\\\\142|\\\\x62)[0-9a-fx\\\\]+";\s*@?eval\s*\(\1\s*\([^\)]+\)+\s*;~msi',
            'fast' => '~(\$\w{1,40})\s*=\s*\"(\\\\142|\\\\x62)[0-9a-fx\\\\]+";\s*@?eval\s*\(\1\s*\(~msi',
            'id'   => 'FOPO',
        ],
        [
            'full' => '~\$_F=__FILE__;\$_X=\'([^\']+\');eval\([^\)]+\)+;~msi',
            'fast' => '~\$_F=__FILE__;\$_X=\'([^\']+\');eval\(~ms',
            'id'   => 'ByteRun',
        ],
        [
            'full' => '~(\$\w{1,40}=\'[^\']+\';\s*)+(\$[\w{1,40}]+)=(urldecode|base64_decode){0,1}\(?[\'"]([\w+%=-]+)[\'"]\)?;((\$\w+)=[^;]+;)+[^\(]+\(\'Content-Type.*?;\${"[^"]+"}\["[\\\\x0-9a-f]+"\]\(\);~msi',
            'id'   => 'Urldecode',
        ],
        [
            'full' => '~(\$[\w{1,40}]+)\s?=\s?(urldecode|base64_decode)\(?[\'"]([\w+%=\-/\\\\\*]+)[\'"]\);(\s*\$\w+\.?\s?=\s?((?:\$\w+\s*\.\s*)?\$\w+[{\[]\d+[}\]]\s*[\.;]?\s*)+)+((\$\w+=["\']([^\'"]+)[\'"];\s*eval\(\'\?>\'\.[\$\w\(\)\*\d,\s]+);|(eval\(\s*\$\w+\([\'"]([^\'"]+)[\'"][)\s]+;)|header\(\'[^\']+\'\);(?:\$\w+=\${[^}]+}\[[^\]]+\]\(\'.*?\'?;}?\'\);)+\${[^}]+}\[[^\]]+\]\(\);)~msi',
            'id'   => 'UrlDecode2',
        ],
        [
            'full' => '~(?:\$\w{1,40}\s?=\s?[\'"]?[\d\w]+[\'"]?;\s*)*()(?|(?:(\$\w{1,40})=[\'"]([^\'"]+)[\'"];\s*)+(?:global\s*\$\w+;\s*)?(\$[\w{1,40}]+)=urldecode\(\2\);|(\$\w{1,40})=urldecode\([\'"]([^\'"]+)[\'"]\);function\s*\w+\([^{]+\{global\s*(\$\w+);)\s*.+?\4(?:.{1,1000}\4[{\[]\d+[}\]]\.?)+?.*?(?:function\s*(\w+)\(\$\w+\s*=\s*\'\'\)\{global\s*\4;@.+\5\(\);|function\s*\w+\(\$\w+,\s*\$\w+,\s*\$\w+\)\s*\{\$\w+\s*[^)]+\)[^}]+;\}|header\((?:\4[\[\{]\d+[\]\}]\.?)+\);})~msi',
            'id'   => 'UrlDecode3',
        ],
        [
            'full' => '~(?:@?session_start\(\);)?(?:@?(?:set_time_limit|error_reporting)\(\d+\);){1,2}(?:ini_set\(base64_decode\([\'"][^\'"]+[\'"]\)|@\$\w{1,50}=\$_POST\[base64_decode\([\'"][^\'"]+[\'"]\)\];|if\((?:\w{1,50}\(\)\){foreach\(\$_POST\s{0,50}as\s{0,50}\$\w{1,50}=>\$\w{1,50}\)|\$_GET|!empty\(\$_SERVER\[))(?:.*?base64_decode\([\'"][^\'"]+[\'"]\)+\.?){1,200}\]?(?:\)\)|;})?(?:;return\s?\$\w{1,50};})?;?~msi',
            'id' => 'manyBase64DecodeContent',
        ],
        [
            'full' => '~echo\s{0,50}base64_decode\(\'[^\']+\'\);\s{0,50}echo\s{0,50}base64_decode\(\'[^\']+\'\)\.php_uname\(\)\.base64_decode\(\'[^\']+\'\);.*?else\s{0,50}{\s{0,50}echo\s{0,50}base64_decode\(\'[^\']+\'\);\s{0,50}}}}~msi',
            'id' => 'manyBase64DecodeContent',
        ],
        [
            'full' => '~{(\$\w{1,100})\s?=(?:\s?base64_decode\(\'[^\']+\'\)\.?)+;(\$\w{1,100})\s?=\s?\1\(base64_decode\(\'[^\']+\'\),(?:\s?base64_decode\(\'[^\']+\'\)\.?)+\);\2\(base64_decode\(\'([^\']+)\'\)\);exit;}~msi',
            'id' => 'manyBase64DecodeContent',
        ],
        [
            'full' => '~eval\(base64_decode\(\'[^\']+\'\)\.file_get_contents\(base64_decode\(\'[^\']+\'\)\)\);~msi',
            'id' => 'manyBase64DecodeContent',
        ],
        [
            'full' => '~\$\w{1,50}\s?=\s?\$\w{1,50}->get\(base64_decode\([\'"][^\'"]+[\'"]\)(?:.*?base64_decode\([\'"][^\'"]+[\'"]\)){1,200}\)\s?\)\s?{~msi',
            'id' => 'manyBase64DecodeContent',
        ],
        [
            'full' => '~explode\(\"\*\*\*\",\s*\$\w+\);\s*eval\(eval\(\"return strrev\(base64_decode\([^\)]+\)+;~msi',
            'fast' => '~explode\(\"\*\*\*\",\s*\$\w+\);\s*eval\(eval\(\"return strrev\(base64_decode\(~msi',
            'id'   => 'cobra',
        ],
        [
            'full' => '~\$[O0]+=\(base64_decode\(strtr\(fread\(\$[O0]+,(\d+)\),\'([^\']+)\',\'([^\']+)\'\)\)\);eval\([^\)]+\)+;~msi',
            'fast' => '~\$[O0]+=\(base64_decode\(strtr\(fread\(\$[O0]+,(\d+)\),\'([^\']+)\',\'([^\']+)\'\)\)\);eval\(~msi',
            'id'   => 'strtrFread',
        ],
        [
            'full' => '~if\s*\(\!extension_loaded\(\'IonCube_loader\'\)\).+pack\(\"H\*\",\s*\$__ln\(\"/\[A-Z,\\\\r,\\\\n\]/\",\s*\"\",\s*substr\(\$__lp,\s*([0-9a-fx]+\-[0-9a-fx]+)\)\)\)[^\?]+\?\>\s*[0-9a-z\r\n]+~msi',
            'fast' => '~IonCube_loader~ms',
            'id'   => 'FakeIonCube',
        ],
        [
            'full' => '~(\$\w{1,40})="([\w\]\[\<\&\*\_+=/]{300,})";\$\w+=\$\w+\(\1,"([\w\]\[\<\&\*\_+=/]+)","([\w\]\[\<\&\*\_+=/]+)"\);~msi',
            'id'   => 'strtrBase64',
        ],
        [
            'full' => '~\$\w+\s*=\s*array\((\'[^\']+\',?)+\);\s*.+?(\$_\w{1,40}\[\w+\])\s*=\s*explode\(\'([^\']+)\',\s*\'([^\']+)\'\);.+?(\2\[[a-fx\d]+\])\(\);(.+?\2)+.+}~msi',
            'fast' => '~(\$_\w{1,40}\[\w+\])\s*=\s*explode\(\'([^\']+)\',\s*\'([^\']+)\'\);.+?(\1\[[a-fx\d]+\])\(\);~msi',
            'id'   => 'explodeSubst',
        ],
        [
            'full' => '~(\$[\w{1,40}]+)\s*=\s*\'([\w+%=\-\#\\\\\'\*]+)\';(\$[\w+]+)\s*=\s*Array\(\);(\3\[\]\s*=\s*(\1\[\d+\]\.?)+;+)+(.+\3)[^}]+}~msi',
            'fast' => '~(\$[\w{1,40}]+)\s*=\s*\'([\w+%=\-\#\\\\\'\*]+)\';(\$[\w+]+)\s*=\s*Array\(\);(\3\[\]\s*=\s*(\1\[\d+\]\.?)+;+)+~msi',
            'id'   => 'subst',
        ],
        [
            'full' => '~if\s{0,50}\(!(?:function_exists|\$\W{1,50})\(\"([\w\W]{1,50})\"\)\)\s{0,50}{\s{0,50}function \1\(.+?eval\(\1\(\"([^\"]+)\"\)\);~msi',
            'fast' => '~if\s{0,50}\(!(?:function_exists|\$\W{1,50})\(\"([\w\W]{1,50})\"\)\)\s{0,50}{\s{0,50}function \1\(.+?eval\(\1\(\"[^\"]+\"\)\);~msi',
            'id'   => 'decoder',
        ],
        [
            'full' => '~(\$\w{1,40})\s*=\s*\"riny\(\"\.(\$\w+)\(\"base64_decode\"\);\s*(\$\w+)\s*=\s*\2\(\1\.\'\("([^"]+)"\)\);\'\);\s*\$\w+\(\3\);~msi',
            'id'   => 'GBZ',
        ],
        [
            'full' => '~\$\w+\s*=\s*\d+;\s*\$GLOBALS\[\'[^\']+\'\]\s*=\s*Array\(\);\s*global\s*\$\w+;(\$\w{1,40})\s*=\s*\$GLOBALS;\$\{"\\\\x[a-z0-9\\\\]+"\}\[(\'\w+\')\]\s*=\s*\"(([^\"\\\\]|\\\\.)*)\";\1\[(\1\[\2\]\[\d+\].?).+?exit\(\);\}+~msi',
            'fast' => '~(\$\w{1,40})\s*=\s*\$GLOBALS;\$\{"\\\\x[a-z0-9\\\\]+"\}\[(\'\w+\')\]\s*=\s*\"(([^\"\\\\]|\\\\.)*)\";\1\[(\1\[\2\]\[\d+\].?)~msi',
            'id'   => 'globalsArray',
        ],
        [
            'full' => '~(\${(["\w\\\\]+)}\[["\w\\\\]+\]=["\w\\\\]+;)+((\${\${(["\w\\\\]+)}\[["\w\\\\]+\]}).?=((urldecode\(["%\w]+\);)|(\${\${["\w\\\\]+}\[["\w\\\\]+\]}{\d+}.?)+;))+eval\(\${\${["\w\\\\]+}\[["\w\\\\]+\]}\(["\w+=]+\)\);~msi',
            'id'   => 'xbrangwolf',
        ],
        [
            'full' => '~(\$\w{1,40})\s*=\s*\'(\\\\.|[^\']){0,100}\';\s*\$\w+\s*=\s*\'(\\\\.|[^\']){0,100}\'\^\1;[^)]+\)+;\s*\$\w+\(\);~msi',
            'fast' => '~(\$\w{1,40})\s*=\s*\'(\\\\.|[^\']){0,100}\';\s*\$\w+\s*=\s*\'(\\\\.|[^\']){0,100}\'\^\1;~msi',
            'id'   => 'xoredVar',
        ],
        [
            'full' => '~(?:(?:\$\w+=\'[^\']+\';\s*)+(?:\$\w+=\'[^\']+\'\^\'[^\']+\';\s*)+.{0,50})?\$\w{1,40}=\'[^\']{0,100}(?:\'\^\')?[^\']*\';(?:\$\w{1,40}=\w{1,3};)?(?:\$\w{1,40}=\'[^\']+(?:\'\^\')?[^\']*\';)+(?:.{0,6000}?)if\(\$\w{1,40}==\$\w{1,40}\(\$\w{1,40}\)\){(?:.{0,6000}?)(\$\w+)=\$\w+\(\$\w+,\$\w+\);\1\(\'[^\']+\',\'[^\']+\'\);}.{0,300}\$\w{1,40}(?:\(\'[^\']{0,100}\',\'[^\']{0,100}\'\))?(?:.{0,300}\s*;\s*\'[^\']+\';){0,2}~msi',
            'fast' => '~\$\w{1,40}=\'[^\']{0,100}(?:\'\^\')[^\']*\';(?:\$\w{1,40}=\'[^\']+(?:\'\^\')?[^\']*\';)+~msi',
            'id'   => 'xoredVar',
        ],
        [
            'full' => '~(\$\w+)=fopen\(__FILE__,\'r\'\);(\$\w+)=fread\(\1,filesize\(__FILE__\)\);fclose\(\1\);(\$\w+)=explode\(hex2bin\(\'([^\']+)\'\),\2\)\[(\d)\];(\$\w+)=\[\];for\((\$\w+)=0;\7<strlen\(\3\);\7\+\+\)\6\[\]=ord\(\3\[\7\]\)\s*xor\s*\7;eval\(hex2bin\(base64_decode\(implode\(array_map\(hex2bin\(\'([^\']+)\'\),\6\)\)\)\)\);__halt_compiler\(\);\w+~msi',
            'id' => 'D5',
        ],
        [
            'full' => '~(\$\w{1,40})\s*=\s*\'([^\']*)\';\s*(\$\w{1,40})\s*=\s*explode\s*\((chr\s*\(\s*\(\d+\-\d+\)\)),substr\s*\(\1,\s*\((\d+\-\d+)\),\s*\(\s*(\d+\-\d+)\)\)\);\s*(\$\w{1,40})\s*=\s*\3\[\d+\]\s*\(\3\[\s*\(\d+\-\d+\)\]\);\s*(\$\w{1,40})\s*=\s*\3\[\d+\]\s*\(\3\[\s*\(\d+\-\d+\)\]\);\s*if\s*\(!function_exists\s*\(\'([^\']*)\'\)\)\s*\{\s*function\s*\9\s*\(.+\1\s*=\s*\$\w+[+\-\*]\d+;~msi',
            'fast' => '~(\$\w{1,40})\s=\s\'([^\']*)\';\s(\$\w{1,40})=explode\((chr\(\(\d+\-\d+\)\)),substr\(\1,\((\d+\-\d+)\),\((\d+\-\d+)\)\)\);\s(\$\w{1,40})\s=\s\3\[\d+\]\(\3\[\(\d+\-\d+\)\]\);\s(\$\w{1,40})\s=\s\3\[\d+\]\(\3\[\(\d+\-\d+\)\]\);\sif\s\(!function_exists\(\'([^\']*)\'\)\)\s\{\sfunction\s*\9\(~msi',
            'id'   => 'arrayOffsets',
        ],
        [
            'full' => '~(\$\w+)\s?=\s?[\'"](.*?)[\'"];\s?(\$\w+)\s?=\s?explode\(chr\(+(\d+\s?[-+]\s?\d+)\)+,\s?[\'"]((?:\d+,?)+)[\'"]\);\s?(\$\w+)\s?=\s?substr\(\1,\s?\(+(\d+\s?[-+]\s?\d+)\),\s?\(+(\d+\s?[-+]\s?\d+)\)\);\s?if\s?\(!function_exists\([\'"](\w+)[\'"]\)\)\s?{\s?function\s?\9\((\$\w+),\s?(\$\w+)\)\s?{\s?(\$\w+)\s?=\s?NULL;\s?for\s?\((\$\w+)\s?=\s0;\s?\13\s?<\s?\(sizeof\(\10\)\s?/\s?(\d+)\);\s?\13\+\+\)\s?{\s?\12\s?\.=\s?substr\(\11,\s?\10\[\(\13\s?\*\s?(\d+)\)\],\s?\10\[\(\13\s?\*\s?(\d+)\)\s?\+\s?(\d+)\]\);\s?}\s?return\s?\12;\s?}\s;\s?}\s?(\$\w+)\s?=\s?[\'"](.*?eval\(str_replace\(chr\(\(+(\d+\s?[-+]\s?\d+)\)\),\s?chr\(\(+(\d+\s?[-+]\s?\d+)\)\),\s?\9\(\3,\1\)\)\);.*?)[\'"];\s?(\$\w+)\s?=\s?substr\(\1,\s?\(+(\d+\s?[-+]\s?\d+)\),\s?\(+(\d+\s?[-+]\s?\d+)\)\);\s?\22\(\6,\s?\18,\s?NULL\);\s?\22\s?=\s?\18;\s?\22\s?=\s?\(+(\d+\s?[-+]\s?\d+)\);\s?\$\w+\s?=\s?\$\w+\s?\-\s?\d+;~msi',
            'fast' => '~(\$\w+)\s?=\s?[\'"](.*?)[\'"];\s?(\$\w+)\s?=\s?explode\(chr\(+(\d+\s?[-+]\s?\d+)\)+,\s?[\'"]((?:\d+,?)+)[\'"]\);\s?(\$\w+)\s?=\s?substr\(\1,\s?\(+(\d+\s?[-+]\s?\d+)\),\s?\(+(\d+\s?[-+]\s?\d+)\)\);\s?if\s?\(!function_exists\([\'"](\w+)[\'"]\)\)\s?{\s?function\s?\9\((\$\w+),\s?(\$\w+)\)\s?{\s?(\$\w+)\s?=\s?NULL;\s?for\s?\((\$\w+)\s?=\s0;\s?\13\s?<\s?\(sizeof\(\10\)\s?/\s?(\d+)\);\s?\13\+\+\)\s?{\s?\12\s?\.=\s?substr\(\11,\s?\10\[\(\13\s?\*\s?(\d+)\)\],\s?\10\[\(\13\s?\*\s?(\d+)\)\s?\+\s?(\d+)\]\);\s?}\s?return\s?\12;\s?}\s;\s?}\s?(\$\w+)\s?=\s?[\'"]([^\'"]+)[\'"];\s?(\$\w+)\s?=\s?substr\(\1,\s?\(+(\d+\s?[-+]\s?\d+)\),\s?\(+(\d+\s?[-+]\s?\d+)\)\);\s?\20\(\6,\s?\18,\s?NULL\);\s?\20\s?=\s?\18;\s?\20\s?=\s?\(+(\d+\s?[-+]\s?\d+)\);\s?\$\w+\s?=\s?\$\w+\s?\-\s?\d+;~msi',
            'id'   => 'arrayOffsetsEval',
        ],
        [
            'full' => '~(\$\w{1,50}\s*=\s*array\((\'\d+\',?)+\);)+\$\w{1,40}=\"([^\"]+)\";if\s*\(!function_exists\(\"\w{1,50}\"\)\)\s*\{\s*function\s*[^\}]+\}\s*return\s*\$\w+;\}[^}]+}~msi',
            'fast' => '~(\$\w{1,50}=\s*array\((\'\d+\',?)+\);)+\$\w{1,40}=\"[^\"]+\";if\s*\(!function_exists\(\"\w{1,50}\"\)\)\{\s*function ~msi',
            'id'   => 'obfB64',
        ],
        [
            'full' => '~if\(\!function_exists\(\'findsysfolder\'\)\){function findsysfolder\(\$fld\).+\$REXISTHEDOG4FBI=\'([^\']+)\';\$\w+=\'[^\']+\';\s*eval\(\w+\(\'([^\']+)\',\$REXISTHEDOG4FBI\)\);~msi',
            'fast' => '~if\(!function_exists\(\'findsysfolder\'\)\){function findsysfolder\(\$fld\)\{\$fld1=dirname\(\$fld\);\$fld=\$fld1\.\'/scopbin\';clearstatcache\(\);if\(!is_dir\(\$fld\)\)return findsysfolder\(\$fld1\);else return \$fld;\}\}require_once\(findsysfolder\(__FILE__\)\.\'/911006\.php\'\);~msi',
            'id'   => 'sourceCop',
        ],
        [
            'full' => '~function\s*(\w{1,40})\s*\(\s*(\$\w{1,40})\s*,\s*(\$\w{1,40})\s*\)\s*\{\s*(\$\w{1,40})\s*=\s*str_rot13\s*\(\s*gzinflate\s*\(\s*str_rot13\s*\(\s*base64_decode\s*\(\s*[\'"][^\'"]*[\'"]\s*\)\s*\)\s*\)\s*\)\s*;\s*(if\s*\(\s*\$\w+\s*==[\'"][^\'"]*[\'"]\s*\)\s*\{\s*(\$\w{1,40})\s*=(\$\w+[\{\[]\d+[\}\]]\.?)+;return\s*(\$\w+)\(\3\);\s*\}\s*else\s*)+\s*if\s*\(\s*\$\w+\s*==[\'"][^\'"]*[\'"]\s*\)\s*\{\s*return\s*eval\(\3\);\s*\}\s*\};\s*(\$\w{1,40})\s*=\s*[\'"][^\'"]*[\'"];(\s*\9\([\'"][^\'"]*[\'"],)+\s*[\'"][^\'"]*[\'"]\s*\)+;~msi',
            'id'   => 'webshellObf',

        ],
        [
            'full' => '~(\$\w{1,40})=\'([^\'\\\\]|.*?)\';\s*((\$\w{1,40})=(\1\[\d+].?)+;\s*)+(\$\w{1,40})=\'\';\s*(\$\w{1,40})\(\6,\$\w{1,40}\.\"([^\"]+)\"\.\$\w{1,40}\.\4\);~msi',
            'fast' => '~(\$\w{1,40})=\'([^\\\\\']|.*?)\';\s*((\$\w{1,40})=(\1\[\d+].?)+;\s*)+(\$\w{1,40})=\'\';~msi',
            'id'   => 'substCreateFunc',
        ],
        [
            'full' => '~@error_reporting\(0\);\s*@ini_set\(\'error_log\',NULL\);\s*@ini_set\(\'log_errors\',0\);\s*@ini_set\(\'display_errors\',\s*0\);\s*@(\$\w+)="[create_function"\.]+;\s*(\$\w+)=\1\("([^"]+)","[eval\."]+\(\'\?>\'\.[base64_decode"\.]+\(\3\)\);"\);\s*\2\("([^"]+)"\);exit;~msi',
            'id'   => 'Obf_20200507_2',
        ],
        [
            'full' => '~\$\w+=([create_function"\'.]+);\s?\$\w+=\$\w+\([\'"]\\\\?\$\w+[\'"],((?:[\'"][eval]{0,4}[\'"]\.?)+)\.([\'"](\([\'"]\?>[\'"]\.)\w+[\'"]\.[^)\\\\]+)\\\\?\$\w+\)+;[\'"]\);\s?\$\w+\([\'"]([\w\+=\\\\\'"%/]+)[\'"]\);~msi',
            'id'   => 'createFunc',
        ],
        [
            'full' => '~(?(DEFINE)(?\'foreach\'(?:/\*\w+\*/)?\s*foreach\(\[[\d,]+\]\s*as\s*\$\w+\)\s*\{\s*\$\w+\s*\.=\s*\$\w+\[\$\w+\];\s*\}\s*(?:/\*\w+\*/)?\s*))(\$\w+)\s*=\s*"([^"]+)";\s*\$\w+\s*=\s*"";(?P>foreach)if\(isset\(\$_REQUEST\s*(?:/\*\w+\*/)?\["\$\w+"\]\)+\{\s*\$\w+\s*=\s*\$_REQUEST\s*(?:/\*\w+\*/)?\["\$\w+"\];(?:\s*\$\w+\s*=\s*"";\s*)+(?P>foreach)+\$\w+\s*=\s*\$\w+\([create_function\'\.]+\);\s*\$\w+\s*=\s*\$\w+\("",\s*\$\w+\(\$\w+\)\);\s*\$\w+\(\);\s*(?:exit\(\);)?\s*}~msi',
            'fast' => '~(?(DEFINE)(?\'foreach\'(?:/\*\w+\*/)?\s*foreach\(\[[\d,]+\]\s*as\s*\$\w+\)\s*\{\s*\$\w+\s*\.=\s*\$\w+\[\$\w+\];\s*\}\s*(?:/\*\w+\*/)?\s*))(\$\w+)\s*=\s*"([^"]+)";\s*\$\w+\s*=\s*"";(?P>foreach)if\(isset\(\$_REQUEST\s*(?:/\*\w+\*/)?\["\$\w+"\]\)+\{\s*\$\w+\s*=\s*\$_REQUEST\s*(?:/\*\w+\*/)?\["\$\w+"\];(?:\s*\$\w+\s*=\s*"";\s*)+(?P>foreach)+\$\w+\s*=\s*\$\w+\([create_function\'\.]+\);\s*\$\w+\s*=\s*\$\w+\("",\s*\$\w+\(\$\w+\)\);\s*\$\w+\(\);~msi',
            'id'   => 'forEach',
        ],
        [
            'full' => '~\$\w+\s*=\s*base64_decode\s*\([\'"][^\'"]+[\'"]\);\s*if\s*\(!function_exists\s*\("rotencode"\)\).{0,1000}eval\s*\(\$\w+\s*\(base64_decode\s*\([\'"][^"\']+[\'"]\)+;~msi',
            'id'   => 'PHPMyLicense',
        ],
        [
            'full' => '~(\$\w{1,40})\s*=\s*file\(__FILE__\);\s*if\(!function_exists\(\"([^\"]*)\"\)\)\{function\s*\2\((\$\w{1,40}),(\$\w{1,40})=\d+\)\{(\$\w{1,40})=implode\(\"[^\"]*\",\3\);(\$\w{1,40})=array\((\d+),(\d+),(\d+)\);if\(\4==0\)\s*(\$\w{1,40})=substr\(\5,\6\[\d+\],\6\[\d+\]\);elseif\(\4==1\)\s*\10=substr\(\5,\6\[\d+\]\+\6\[\d+\],\6\[\d+\]\);else\s*\10=trim\(substr\(\5,\6\[\d+\]\+\6\[\d+\]\+\6\[\d+\]\)\);return\s*\(\10\);\}\}\s*eval\(base64_decode\(\2\(\1\)\)\);\s*eval\(\w{1,40}\(\2\(\1\s*,\s*2\)\s*,\s*\2\(\1\s*,\s*1\)\)\);\s*__halt_compiler\(\);\s*[\w\+\=/]+~msi',
            'fast' => '~(\$\w{1,40})\s*=\s*file\(__FILE__\);\s*if\(!function_exists\(\"([^\"]*)\"\)\)\{function\s*\2\((\$\w{1,40}),(\$\w{1,40})=\d+\)\{(\$\w{1,40})=implode\(\"[^\"]*\",\3\);(\$\w{1,40})=array\((\d+),(\d+),(\d+)\);if\(\4==0\)\s*(\$\w{1,40})=substr\(\5,\6\[\d+\],\6\[\d+\]\);elseif\(\4==1\)\s*\10=substr\(\5,\6\[\d+\]\+\6\[\d+\],\6\[\d+\]\);else\s*\10=trim\(substr\(\5,\6\[\d+\]\+\6\[\d+\]\+\6\[\d+\]\)\);return\s*\(\10\);\}\}\s*eval\(base64_decode\(\2\(\1\)\)\);\s*eval\(\w{1,40}\(\2\(\1\s*,\s*2\)\s*,\s*\2\(\1\s*,\s*1\)\)\);\s*__halt_compiler\(\);~msi',
            'id'   => 'zeura',
        ],
        [
            'full' => '~<\?php\s*(\$\w{1,40})\s*=\s*file\(__FILE__\);\s*function\s(\w{1,50})\((\$\w{1,50}),(\$\w{1,50})\){(\$\w{1,50})=array\(\d+,\d+,\d+,(\d+)\);if\(\4==\d+\){(\$\w{1,50})=substr\(\3,\5\[0\]\+\5\[1\],\5\[2\]\);}elseif\(\4==\d+\){\7=substr\(\3,\5\[0\],\5\[1\]\);}elseif\(\4==\d+\){\7=trim\(substr\(\3,\5\[0\]\+\5\[1\]\+\5\[2\]\)\);}return\7;}eval\(base64_decode\(\2\(\1\[0\],\d+\)\)\);eval\(\w{1,50}\(\2\(\1\[0\],\d+\),\2\(\1\[0\],41\),\1\)\);__halt_compiler\(\);[\w+=/]+~msi',
            'fast' => '~<\?php\s*(\$\w{1,40})\s*=\s*file\(__FILE__\);\s*function\s(\w{1,50})\((\$\w{1,50}),(\$\w{1,50})\){(\$\w{1,50})=array\(\d+,\d+,\d+,(\d+)\);if\(\4==\d+\){(\$\w{1,50})=substr\(\3,\5\[0\]\+\5\[1\],\5\[2\]\);}elseif\(\4==\d+\){\7=substr\(\3,\5\[0\],\5\[1\]\);}elseif\(\4==\d+\){\7=trim\(substr\(\3,\5\[0\]\+\5\[1\]\+\5\[2\]\)\);}return\7;}eval\(base64_decode\(\2\(\1\[0\],\d+\)\)\);eval\(\w{1,50}\(\2\(\1\[0\],\d+\),\2\(\1\[0\],41\),\1\)\);__halt_compiler\(\);~msi',
            'id'   => 'zeuraFourArgs',
        ],
        [
            'full' => '~(<\?php\s*/\* This file is protected by copyright law and provided under.*?\*/(?:\s*/\*.*?\*/\s*)+\$_[0O]+="(\w+)";.*?\$_[0O]+=__FILE__;.*?\$\w+=str_replace\("\\\\n","",\$\w+\);\$\w+=str_replace\("\\\\r","",\$\w+\);.*?function\s\w+\(\$\w+,\$\w+\){\$\w+=md5\(\$\w+\)\.md5\(\$\w+\.\$\w+\);.*?\$\w+=strlen\(\$\w+\);for\(\$\w+=0;\$\w+<strlen\(\$\w+\);\$\w+\+\+\){\$\w+\.=\s?chr\(ord\(\$\w+\[\$\w+\]\)\^ord\(\$\w+\[\$\w+%\$\w+\]\)\);}return\s\$\w+;}eval\(\w+\(\w+\("([^"]+)"\),\$\w+\)\);eval\(\w+\(\$\w+\)\);exit\(\);\?)>[^"\']+~msi',
            'id'   => 'evalFileContentBySize',
        ],
        [
            'full' => '~<\?php\s*(eval(?:\(\w+)+\((substr\(file_get_contents\(__FILE__\),\s?(\d+)\))\)+;)\s*__halt_compiler\(\);\s*[\w+/]+~msi',
            'id' => 'evalFileContentOffset',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*base64_decode\(((?:(?|[\'"][\w=]+[\'"]|chr\(\d+\))\.?)+)\);(\$\w+)\s*=\s*base64_decode\(((?:(?|[\'"][\w=]+[\'"]|chr\(\d+\))\.?)+)\);(\$\w+)\s*=\s*base64_decode\(((?:(?|[\'"][\w=]+[\'"]|chr\(\d+\))\.)[^;]+)\);(\1\((\(-(\d+)-\(-\9\)\))\);@set_time_limit\((\(-(\d+)-\(-\11\)\))\);)eval\(base64_decode\(((?:(?|[\'"]\d+[\'"]|chr\(\d+\))\.?)+)\)\.gzinflate\(str_rot13\(\3\(\5\){4};~msi',
            'fast' => '~@set_time_limit\((\(-(\d+)-\(-\2\)\))\);eval\(base64_decode\(((?:(?|[\'"]\d+[\'"]|chr\(\d+\))\.?)+)\)\.gzinflate\(str_rot13\(\$\w+\(\$\w+\){4};~msi',
            'id'   => 'evalConcatedVars',
        ],
        [
            'full' => '~(\$\{"[\\\\x47c2153fGLOBALS]+"\}\["[\w\\\\]+"\]="[\w\\\\]+";(\$\w+="\w+";)?){5,}.+\$\{"[\\\\x47c2153fGLOBALS]+"\}\["[\w\\\\]+"\].+?}+(?:exit;}+if\(@?file_exists\("[^"]+"\)+{include\("[^"]+"\);\}|==\(string\)\$\{\$\w+\}\)\s*\{\$\w+="[^"]+";\$\w+="[^"]+";\$\{\$\w+\}\.=\$\{\$\w+\};break;\}+eval\("[^"]+"\.gzinflate\(base64_decode\(\$\{\$\{"[^"]+"\}\["[^"]+"\]\}\)+;|\["[^"]+"\]\}\);)?~msi',
            'id'   => 'Obf_20200618_1',
        ],
        [
            'full' => '~(\$\w+\s?=\s?(\w+)\(\'\d+\'\);\s*)+\$\w+\s?=\s?new\s?\$\w+\(\2\(\'(\d+)\'\)+;\s?error_reporting\(0\);\s?eval\(\$\w+\(\$\w+->\$\w+\("([^"]+)"\)+;.+?function \2.+?return\s\$\w+;\s}~msi',
            'id'   => 'aanKFM',
        ],
        [
            'full' => '~error_reporting\(\d\);@?set_time_limit\(\d\);(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];(\$\w{1,50})\s?=\s?[\'"]([^\'"]{0,100})[\'"];(\$\w{1,50}\s?=\s?[\'"][^\'"]{0,500}[\'"];)eval\(gzinflate\(base64_decode\(\3\)\)\);rebirth\(\);eval\(gzinflate\(base64_decode\(hate\(\1,\5\){4};~msi',
            'fast' => '~error_reporting\(\d\);@?set_time_limit\(\d\);(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];(\$\w{1,50})\s?=\s?[\'"]([^\'"]{0,100})[\'"];(\$\w{1,50}\s?=\s?[\'"][^\'"]{0,500}[\'"];)eval\(gzinflate\(base64_decode\(\$\w{1,50}\)\)\);rebirth\(\);eval\(gzinflate\(base64_decode\(hate\(\$\w{1,50},\$\w{1,50}\){4};~msi',
            'id' => 'evalLoveHateFuncs',
        ],
        [
            'full' => '~function\s?(\w+)\(\){\s?(\$\w+)\s?=\s?[\'"]([^\'"]+)[\'"];\s?\2\s?=\s?str_rot13\(\2\);\s?(\w+)\(\2\);\s?}\s?function\s?\4\((\$\w+)\){\s?(?:global\s?\$\w+;\s?)?\5\s?=\s?pack\([\'"]H\*[\'"],\5\);\s?(\$\w+)\s?=\s?[\'"]{2};\s?eval\(((?:\6|\5)\.?)+\);\s?}\s?\1\(\);~msi',
            'id'   => 'evalPackStrrot',
        ],
        [
            'full' => '~error_reporting\(\d\);(?:\$\w+=[\'"]\w+[\'"];)?ini_set\([\'"]\w+[\'"],\d\);(?:(\$\w+=\[(?:"[^"]+"=>"[^"]+",?\s*)+\];)|eval\(base64_decode\([\'"]([\w\+=]+)[\'"]\)\);)\$\w+=str_split\([\'"]([}\w|,[=\'\.;\]&]+)[\'"]\);\$\w+=[\'"]{2};foreach\(\$\w+\s{0,50}as\s{0,50}\$\w+\){foreach\((\$\w+)\s{0,50}as\s{0,50}\$\w+\s{0,50}=>\s{0,50}\$\w+\){(?:\$\w+=[\'"]\w+[\'"];\$\w+=[\'"]\w+[\'"];)?if\(\$\w+\s{0,50}==\s{0,50}\(string\)\$\w+\){(?:\$\w+=[\'"]\w+[\'"];\$\w+=[\'"]\w+[\'"];)?\$\w+\s{0,50}\.=\s{0,50}\$\w+;break;}}}(?:eval\([\'"]\?>[\'"]\.gzinflate\(base64_decode\(\$\w+\)\)\);)?~msi',
            'id'   => 'evalArrayVar',
        ],
        [
            'full' => '~((\$\w+)\s*\.?=\s*"[^"]+";\s*)+eval\((\$\w+\s*\.?\s*)+\)~msi',
            'id'   => 'evalVarConcat',
        ],
        [
            'full' => '~(?:\${"[^"]+"}\["[^"]+"\]="[^"]+";)+(?:\${\${"[^"]+"}\["[^"]+"\]}="[^"]+";)+(eval\(htmlspecialchars_decode\(urldecode\(base64_decode\(\${\${"[^"]+"}\["[^"]+"\]}\)\)\)\);)~msi',
            'id' => 'evalVarSpecific',
        ],
        [
            'full' => '~(?:(?:\$\w+=(?:chr\(\d+\)[;.])+)+\$\w+="[^"]+";(\$\w+)=(?:\$\w+[.;])+\s*)?(\$\w+)=\'([^\']+)\';((?:\s*\2=str_replace\(\'[^\']+\',\s*\'\w\',\s*\2\);\s*)+)(?(1)\s*\1\s*=\s*str_replace\(\'[^+]\',\s*\'[^\']+\',\s*\1\);\s*(\$\w+)\s*=\s*[^;]+;";\s*@?\1\(\s*str_replace\((?:\s*array\(\'[^\']+\',\s*\'[^\']+\'\),){2}\s*\5\)\s*\);|\s*\2=base64_decode\(\2\);\s*eval\(\2\);)~msi',
            'id'   => 'evalVarReplace',
        ],
        [
            'full' => '~((\$[^\s=.;]+)\s*=\s*\(?[\'"]([^\'"]+)[\'"]\)?\s*;?\s*)+\s*.{0,10}?(?:error_reporting\(\d\);|@set_time_limit\(\d\);|@|ini_set\([\'"]\w{1,99}[\'"],\s?\d\);\s?){0,5}(?:eval\s*\(|assert\s*\(|echo)\s*([\'"?>.\s]+)?\(?(base64_decode\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|htmlspecialchars_decode\s*\(|convert_uudecode\s*\()+(\({0,1}[\s"\']?(\$[^\s=\'")]+)?(?:str_replace\((?:.+?,){3}\2?)?[\s"\']?\){0,1})(?:[\'"]?\)+;)+~msi',
            'id'   => 'evalVar',
        ],
        [
            'full' => '~((?:(?:\$\w+=[\'"]\\\\[^\'"]+)[\'"];)+)@(eval\((?:"\?>"\.)?(?:\$\w+\()+[\'"]([^\'"]+)[\'"]\)+;)~msi',
            'id'   => 'evalVarSlashed',
        ],
        [
            'full' => '~function\s*(\w{1,40})\((\$\w{1,40})\)\{(\$\w{1,40})=\'base64_decode\';(\$\w{1,40})=\'gzinflate\';return\s*\4\(\3\(\2\)\);\}\$\w{1,40}=\'[^\']*\';\$\w{1,40}=\'[^\']*\';eval\(\1\(\'([^\']*)\'\)\);~msi',
            'id'   => 'evalFunc',
        ],
        [
            'full' => '~function\s*(\w{1,40})\s*\((\$\w{1,40})\)\s*\{\s*(\$\w{1,40})\s*=\s*"\\\\x62\\\\x61\\\\x73\\\\x65\\\\x36\\\\x34\\\\x5f\\\\x64\\\\x65\\\\x63\\\\x6f\\\\x64\\\\x65";\s*(\$\w{1,40})\s*=\s*"\\\\x67\\\\x7a\\\\x69\\\\x6e\\\\x66\\\\x6c\\\\x61\\\\x74\\\\x65";\s*return\s*\4\s*\(\3\s*\(\2\)\);\s*\}\s*\$\w{1,40}\s*=\s*\"[^\"]*\";\s*\$\w{1,40}\s*=\s*\"[^\"]*\";\s*eval\s*\(\1\s*\(\"([^\"]*)\"\)\);~msi',
            'id'   => 'evalFunc',
        ],
        [
            'full' => '~(\$\w+)\s?=\s?[\'"]@?(([\w."]+\()+[\'"]([\w\/+]+)[\'"])\)+;[\'"]\s?;\s?(\$\w+)\s?=\s?([\w@."]+)\s?;\s?@?(\$\w+)\s?=\s\5\([\'"]+,\s?"\1;"\s?\);\7\([\'"]{2}\);~msi',
            'id'   => 'evalConcatFunc',
        ],
        [
            'full' => '~function\sT_\((\$\w+)\)\s{\s(\$\w+)\s=\s256;\s(\$w2)\s=\s8;\s(\$\w+)\s=\sarray\(\);\s(\$\w+)\s=\s0;\s(\$\w+)\s=\s0;\sfor\s\((\$\w+)\s=\s0;\s\7\s<\sstrlen\(\1\);\s\7\+\+\)\s{\s\5\s=\s\(\5\s<<\s8\)\s\+\sord\(\1\[\7\]\);\s\6\s\+=\s8;\sif\s\(\6\s>=\s\3\)\s{\s\6\s-=\s\3;\s(\$\w+)\[\]\s=\s\5\s>>\s\6;\s\5\s&=\s\(1\s<<\s\6\)\s-\s1;\s\2\+\+;\sif\s\(\2\s>>\s\3\)\s{\s\3\+\+;\s}\s}\s}\s(\$\w+)\s=\srange\("\\\\x0",\s"\\\\377"\);\s(\$\w+)\s=\s\'\';\sforeach\s\(\4\sas\s\7\s=>\s(\$\w+)\)\s{\sif\s\(!isset\(\9\[\11\]\)\)\s{\s(\$\w+)\s=\s(\$\w+)\s\.\s\13\[0\];\s}\selse\s{\s\12\s=\s\9\[\11\];\s}\s\10\s\.=\s\12;\sif\s\(\7\)\s{\s\9\[\]\s=\s\13\s\.\s\12\[0\];\s}\s\13\s=\s\12;\s}\sreturn\s\10;\s}\s(\$_\w+)="[\w\\\\]+";eval\(T_\(\14\("(.*)"\)\)\);~mis',
            'fast' => '~function\sT_\((\$\w+)\)\s{\s(\$\w+)\s=\s256;\s(\$w2)\s=\s8;\s(\$\w+)\s=\sarray\(\);\s(\$\w+)\s=\s0;\s(\$\w+)\s=\s0;\sfor\s\((\$\w+)\s=\s0;\s\7\s<\sstrlen\(\1\);\s\7\+\+\)\s{\s\5\s=\s\(\5\s<<\s8\)\s\+\sord\(\1\[\7\]\);\s\6\s\+=\s8;\sif\s\(\6\s>=\s\3\)\s{\s\6\s-=\s\3;\s(\$\w+)\[\]\s=\s\5\s>>\s\6;\s\5\s&=\s\(1\s<<\s\6\)\s-\s1;\s\2\+\+;\sif\s\(\2\s>>\s\3\)\s{\s\3\+\+;\s}\s}\s}\s(\$\w+)\s=\srange\("\\\\x0",\s"\\\\377"\);\s(\$\w+)\s=\s\'\';\sforeach\s\(\4\sas\s\7\s=>\s(\$\w+)\)\s{\sif\s\(!isset\(\9\[\11\]\)\)\s{\s(\$\w+)\s=\s(\$\w+)\s\.\s\13\[0\];\s}\selse\s{\s\12\s=\s\9\[\11\];\s}\s\10\s\.=\s\12;\sif\s\(\7\)\s{\s\9\[\]\s=\s\13\s\.\s\12\[0\];\s}\s\13\s=\s\12;\s}\sreturn\s\10;\s}\s(\$_\w+)="[\w\\\\]+";eval\(T_\(\14\("(.*)"\)\)\);~mis',
            'id'   => 'evalFuncFunc',
        ],
        [
            'full' => '~(\$\w+)\s?=\s?[\'"]([^\'"]+)[\'"];\s?(\$\w+)\s?=\s?[\'"]([^\'"]+)[\'"];\s?(\$\w+)\s?=\s?[\'"]([^\'"]+)[\'"];\s?(\$\w+)\s?=\s?bin2hex\(\5\);\s?(\$\w+)\s?=\s?hex2bin\(\7\);\s*(?:eval\()+[\'"]\?>[\'"]\.\1\(\3\(\8\)+;~msi',
            'id'   => 'evalBinHexVar',
        ],
        [
            'full' => '~((?:(?:\${"(?:\w{0,10}?\\\\x\w{1,10}){1,100}"}\["\w{0,10}?(?:\\\\x\w{1,10}){1,100}"\]|\$\w+)\s*=\s*[\'"][^\'"]+["\'];)+.*?define.*?)(?:\${)?\$\w{1,50}}?\s*=\s*array\(array\(([\'"][^\)]+[\'"])\)\);(.*?create_function\(.*?array_walk\((?:\${\${"(?:\\\\x\w{1,10}){1,10}"}\["(?:\\\\x\w{1,10}){1,10}"\]}|(?:\${)?\$\w+}?),\s*(?:\${\${"\w?(?:\\\\x\w{1,10}){1,10}"}\["(?:\w?\\\\x\w{1,10}){1,20}"\]}|\$\w+)\);)~msi',
            'fast' => '~create_function\([\'"][^"\']+[\'"],\s*(?:[\'"][^"\']+[\'"]\.?)+.*?\);\s*\$[^=]+=\s*array_walk\((?:\${\${"(?:\\\\x\w{1,10}){1,10}"}\["(?:\\\\x\w{1,10}){1,10}"\]}|(?:\${)?\$\w+}?),\s*(?:\${\${"\w?(?:\\\\x\w{1,10}){1,10}"}\["(?:\w?\\\\x\w{1,10}){1,20}"\]}|\$\w+)\);~msi',
            'id' => 'evalArrayWalkFunc'
        ],
        [
            'full' => '~(\$\w+)\s?=\s?[\'"]([^\'"]+)[\'"];\s*eval\([\'"]\?>[\'"]\s?\.\s?base64_decode\(strtr\(substr\(\1\s?,(\d+)\*(\d+)\)\s?,\s?substr\(\1\s?,(\d+)\s?,\s?(\d+)\)\s?,\s*substr\(\s?\1\s?,\s?(\d+)\s?,\s?(\d+)(?:\s?\))+;~msi',
            'id' => 'evalSubstrVal'
        ],
        [
            'full' => '~(\$\w{1,50})=[\'"]([^\'"]+)[\'"];\s?\1\s?=\s?base64_decode\(\1\);\s?eval\(gzinflate\(str_rot13\(\1\)+;~msi',
            'id' => 'evalGzStrRotB64',
        ],
        [
            'full' => '~(preg_replace\(["\'](?:/\.\*?/[^"\']+|[\\\\x0-9a-f]+)["\']\s*,\s*)[^\),]+(?:[\)\\\\0-5]+;[\'"])?(,\s*["\'][^"\']*["\'])\)+;~msi',
            'id'   => 'eval',
        ],
        [
            'full' => '~(\$\w{1,40})\s*=\s*[\'"]([^\'"]*)[\'"]\s*;\s*(\$\w{1,40}\s*=\s*(strtolower|strtoupper)\s*\((\s*\1[\[\{]\s*\d+\s*[\]\}]\s*\.?\s*)+\);\s*)+\s*if\s*\(\s*isset\s*\(\s*\$\{\s*\$\w{1,40}\s*\}\s*\[\s*[\'"][^\'"]*[\'"]\s*\]\s*\)\s*\)\s*\{\s*eval\s*\(\s*\$\w{1,40}\s*\(\s*\$\s*\{\s*\$\w{1,40}\s*\}\s*\[\s*[\'"][^\'"]*[\'"]\s*\]\s*\)\s*\)\s*;\s*\}\s*~msi',
            'id'   => 'evalInject',

        ],
        [
            'full' => '~((\$\w+)\s*=\s*(([base64_decode\'\.\s]+)|([eval\'\.\s]+)|([create_function\'\.\s]+)|([stripslashes\'\.\s]+)|([gzinflate\'\.\s]+)|([strrev\'\.\s]+)|([str_rot13\'\.\s]+)|([gzuncompress\'\.\s]+)|([urldecode\'\.\s]+)([rawurldecode\'\.\s]+));\s*)+\$\w+\s*=\s*\$\w+\(\'\',(\s*\$\w+\s*\(\s*)+\'[^\']+\'\)+;\s*\$\w+\(\);~msi',
            'fast' => '~\$\w+\s*=\s*\$\w+\(\'\',(\s*\$\w+\s*\(\s*)+\'[^\']+\'\)+;\s*\$\w+\(\);~msi',
            'id'   => 'createFuncConcat',

        ],
        [
            'full' => '~(\$\w+)\s*=\s*base64_decode\("([^"]+)"\);(\1\s*=\s*ereg_replace\("([^"]+)","([^"]+)",\1\);)+\1=base64_decode\(\1\);eval\(\1\);~msi',
            'id'   => 'evalEregReplace',

        ],
        [
            'full' => '~((\$\w+)\s*=\s*(([base64_decode"\'\.\s]+)|([eval"\'\.\s]+)|([create_function"\'\.\s]+)|([stripslashes"\'\.\s]+)|([gzinflate"\'\.\s]+)|([strrev"\'\.\s]+)|([str_rot13"\'\.\s]+)|([gzuncompress"\'\.\s]+)|([urldecode"\'\.\s]+)([rawurldecode"\'\.\s]+));\s*)+\s*@?eval\(\$[^)]+\)+;~msi',
            'id'   => 'evalWrapVar',

        ],
        [
            'full' => '~(?:\$\{"[^"]+"\}\["[^"]+"\]="[^"]+";)+(?:\$\{\$\{"[^"]+"\}\["[^"]+"\]\}="[^"]+";)+@?eval\s*\(\s*([\'"?>.]+)?@?\s*(base64_decode\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|eval\s*\()+\(?\$\{\$\{"[^\)]+\)+;~msi',
            'id'   => 'escapes',
        ],
        [
            'full' => '~(\$\w+)\s*=(?:\s*(?:(?:["\'][a-z0-9][\'"])|(?:chr\s*\(\d+\))|(?:[\'"]\\\\x[0-9a-f]+[\'"]))\s*?\.?)+;\s*(\$\w+)\s*=(?:\s*(?:(?:["\'][a-z0-9][\'"])|(?:chr\s*\(\d+\))|(?:[\'"]\\\\x[0-9a-f]+[\'"]))\s*?\.?)+;\s*@?\1\s*\(@?\2\s*\([\'"]([^\'"]+)[\'"]\)+;~msi',
            'id'   => 'assert',
        ],
        [
            'full' => '~eval\s*\(str_rot13\s*\([\'"]+\s*(?:.+(?=\\\\\')\\\\\'[^\'"]+)+[\'"]+\)+;~msi',
            'id'   => 'evalCodeFunc',
        ],
        [
            'full' => '~\$\{"GLOBALS"\}\[[\'"](\w+)[\'"]\]=["\'](\w+)[\'"];\$\{"GLOBALS"\}\[[\'"](\w+)[\'"]\]=["\']\2[\'"];\${\$\{"GLOBALS"\}\[[\'"]\3[\'"]\]}=[\'"]([^\'"]+)[\'"];eval.{10,50}?\$\{\$\{"GLOBALS"\}\[[\'"]\1[\'"]\]\}\)+;~msi',
            'id'   => 'evalVarVar',
        ],
        [
            'full' => '~(\$\w+)=[\'"][^"\']+[\'"];(\$\w+)=strrev\(\'edoced_46esab\'\);eval\(\2\([\'"][^\'"]+[\'"]\)+;~msi',
            'id'   => 'edoced_46esab',
        ],
        [
            'full' => '~(\$\w+)=strrev\([\'"](?:|ed|oc|_|4|6|es|ab|(?:"\."))+[\'"]\);\s*(\$\w+)=strrev\([\'"](?:|et|al|fn|iz|g|(?:"\."))+[\'"]\);\s?@?eval\(\2\(\1\([\'"]([\w\/\+=]+)[\'"]\)\)\);~msi',
            'id'   => 'edoced_46esab_etalfnizg',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*"((?:[^"]|(?<=\\\\)")*)";(\$\w+)\s*=\s*(\1\[\d+\]\.?)+;(\$\w+)\s*=\s*[^;]+;(\$\w+)\s*=\s*"[^"]+";\$\w+\s*=\s*\5\."[^"]+"\.\6;\3\((\1\[\d+\]\.?)+,\s*\$\w+\s*,"\d+"\);~smi',
            'fast' => '~(\$\w+)\s*=\s*"((?:[^"]|(?<=\\\\)"){0,1000})";(\$\w+)\s*=\s*(\1\[\d+\]\.?)+;(\$\w+)\s*=\s*[^;]+;(\$\w+)\s*=\s*"[^"]+";\$\w+\s*=\s*\5\."[^"]+"\.\6;\3\((\1\[\d+\]\.?)+,\s*\$\w+\s*,"\d+"\);~smi',
            'id'   => 'eval2',
        ],
        [
            'full' => '~(?:\${"\\\\x[\\\\\w]+"}\["\\\\x[\\\\\w]+"\]\s?=\s?"[\w\\\\]+";){1,10}\${\${"\\\\x[\\\\\w]+"}\["[\\\\\w]+"\]}\s?=\s?"\w{1,100}";\${\${\${"\\\\x[\\\\\w]+"}\["[\\\\\w]+"\]}\s?}="(\\\\x[^"]+)";eval\(((?|str_rot13\(|gzinflate\(|base64_decode\(){1,10})\(\${\${"\\\\x[\\\\\w]+"}\["[\\\\\w]+"\]}\){1,5};~msi',
            'id'   => 'evalEscapedCharsContent',
        ],
        [
            'full' => '~@?(eval|echo|(\$\w+)\s*=\s*create_function)(?:\/\*+\/)?\s*\((\'\',)?\s*([\'"][?>\s]+[\'".\s]+)?\s*\(?\s*@?\s*(?:base64_decode\s*\(|pack\s*\(\'H\*\',|convert_uudecode\s*\(|htmlspecialchars_decode\s*\(|gzdecode\s*\(|stripslashes\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|unserialize\s*\(|eval\s*\(|hex2bin\()+.*?[^\'");]+((\s*\.?[\'"]([^\'";]+[\'"]*\s*)+|,\s*true)?\s*[\'"\)]+)+\s*;?(\s*\2\(\);)?~msi',
            'id'   => 'eval',
        ],
        [
            'full' => '~eval\s*/\*[\w\s\.:,]+\*/\s*\([^\)]+\)+;~msi',
            'fast' => '~eval\s*/\*[\w\s\.:,]+\*/\s*\(~msi',
            'id'   => 'eval',
        ],
        [
            'full' => '~((?:\$\w+\s?=\s?(?:base64_decode|str_rot13)\([\'"][^\'"]+[\'"]\);)+)\s?(@?eval\((?:(?:\w+\()*\$\w+\(?)+(?:.*?)?\)+;)~msi',
            'id'   => 'evalFuncVars',
        ],
        [
            'full' => '~eval\("\\\\145\\\\166\\\\141\\\\154\\\\050\\\\142\\\\141\\\\163[^\)]+\)+;~msi',
            'fast' => '~eval\("\\\\145\\\\166\\\\141\\\\154\\\\050\\\\142\\\\141\\\\163~msi',
            'id'   => 'evalHex',
        ],
        [
            'full' => '~eval\s*\("\\\\x?\d+[^\)]+\)+;(?:[\'"]\)+;)?~msi',
            'fast' => '~eval\s*\("\\\\x?\d+~msi',
            'id'   => 'evalHex',
        ],
        [
            'full' => '~(\$\w+)\s=\s(["\']?[\w\/\+]+["\']?);\s(\$\w+)\s=\s((?:str_rot13\(|rawurldecode\(|convert_uudecode\(|gzinflate\(|str_rot13\(|base64_decode\(|rawurldecode\(|)+\1\)\)+);\secho\s(eval\(\3\);)~msi',
            'id'   => 'echoEval',
        ],
        [
            'full' => '~if\(!function_exists\([\'"](\w+)[\'"]\)\){function\s?\1\((\$\w+)\){(\$\w+)=array\((?:\'(\d+)\',)?\'([^\']+)\',\'([^\']+)\',\2\);for\((\$\w+)=0;\7<[34];\7\+\+\){for\((\$\w+)=0;\8<strlen\(\3\[\7\]\);\8\+\+\)\s?\3\[\7\]\[\8\]\s?=\s?chr\(ord\(\3\[\7\]\[\8\]\)-(?:\(\7\?\3\[\8\s?xor\s?\8\]:1\)|1)\);if\(\7==[21]\)\s?\3\[[32]\]=\3\[[01]\]\(\3\[[21]\]\(\3\[[32]\]\)\);}\s?return\s?\3\[[32]\];}(\$\w+)=["\']([\w\+\/=]+)["\'];(\$\w+)=[\'"]\1[\'"];(\$\w+)=\11\([\'"]([^\'"]+)[\'"]\);\$\w+=@?\12\(\'\',\11\(\9\)\);\$\w+\(\);}~msi',
            'id'   => 'evalCreateFunc',
        ],
        [
            'full' => '~(\$\w{1,1000})=[\'"]([\'"\w/\+=]+)[\'"];(\$\w{1,3000}=(?:base64_decode|gzinflate|convert_uudecode|str_rot13)\(\$\w{1,3000}\);){1,100}eval\((\$\w{1,3000})\);~msi',
            'id'   => 'evalAssignedVars',
        ],
        [
            'full' => '~(?:\$_{1,50}\s*=\s*[^;]{2,200}\s*;\s*)+(?:\$_{1,50}\s*=\s*\$_{1,50}\([^\)]+\);\s*|(?:if\(!function_exists\(\'[^\']+\'\)\){function\s\w{1,50}\(\$\w{1,50},\$\w{1,50}\){return\s?eval\("return function\(\$\w{1,50}\){{\$\w{1,50}}};"\);}}\s*)?)+(?:\$_{1,50}\s*=\s*\'[^\']+\';\s*)?(?:\s*(\$_{1,50}\s*=\s*)?\$_+\([^)]*\)+;\s*)+(?:echo\s*\$_{1,50};)?~msi',
            'id'   => 'seolyzer',
        ],
        [
            'full' => '~(\$\w+)="((?:[^"]|(?<=\\\\)")*)";(\s*\$GLOBALS\[\'\w+\'\]\s*=\s*(?:\${)?(\1\[\d+\]}?\.?)+;\s*)+(.{0,400}\s*\1\[\d+\]\.?)+;\s*}~msi',
            'fast' => '~(\$\w+)="((?:[^"]|(?<=\\\\)"){0,1000})";(\s*\$GLOBALS\[\'\w+\'\]\s*=\s*(?:\${)?(\1\[\d+\]}?\.?)+;\s*)+(.{0,400}\s*\1\[\d+\]\.?)+;\s*}~msi',
            'id'   => 'subst2',
        ],
        [
            'full' => '~(\$\w{1,50}\s*=\s*"[^"]{1,1000}";\s*)+(\$\w{1,50}\s*=\s*\$?\w{1,50}\("\w{1,50}"\s*,\s*""\s*,\s*"\w{1,50}"\);\s*)+\$\w{1,50}\s*=\s*\$\w{1,50}\("",\s*\$\w{1,50}\(\$\w{1,50}\("\w{1,50}",\s*"",(\s*\$\w{1,50}\.?)+\)+;\$\w{1,50}\(\);~msi',
            'id'   => 'strreplace',
        ],
        [
            'full' => '~\$\w{1,50}\s?=\s?(?:\'[^\']{1,500}\'|"[^}]{1,500}}");\s?\$\w{1,50}\s?=\s?str_replace\([\'"]\w{1,50}[\'"],\s?[\'"][\'"],\s?["\']\w{1,100}[\'"]\);\s?(?:\$\w{1,50}\s?=\s?(?:\'[^\']{1,500}\'|"[^\s]{1,500}?");\s){1,15}.*?\$\w{1,50}\s?=\s?str_replace\((?:\'[^\']{1,100}\'|"[^"]{1,100}?"),\s?\'\',\s?(?:\$\w{1,50}\s?\.?\s?){1,50}\);\s?\$\w{1,50}\s?=\s?\$\w{1,50}\(\'\',\s?\$\w{1,50}\);\s?\$\w{1,50}\(\);~msi',
            'id'   => 'strreplace',
        ],
        [
            'full' => '~function\s(\w{1,50})\((\$\w{1,50}),\$\w{1,50}\)\s?{if\(file_exists[^}]+}(\$\w{1,50})\s?=\s?str_replace\(array\(base64_decode\(\'([^\']+)\'\),base64_decode\(\'([^\']+)\'\)\),array\(base64_decode\(\'([^\']+)\'\),base64_decode\(\'([^\']+)\'\)\),\2\);(\$\w{1,50})\s?=\s?strrev[^;]+;(\$\w{1,50})\s?=\s?\8\(\3\);(\$\w{1,50})\s?=\s?strrev[^;]+;return@?\10\(\9\);}if.*?exit;}\s?((\$\w{1,50})\s?=\s?base64_decode\(\'([^\']+)\'\);preg_match\(base64_decode\(\'[^\']+\'\),\12,(\$\w{1,50})\);(\$\w{1,50})\s?=\s?\14\[1\];(\$\w{1,50})\s?=\s?\1\(\15,\$\w{1,50}\);if\(isset\(\16\)\){eval\(\16\);})~msi',
            'id' => 'pregB64FuncImgStr',
        ],
        [
            'full' => '~@?echo\s*([\'"?>.\s]+)?@?\s*(base64_decode\s*\(|stripslashes\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|eval\s*\()+[\s\/\'"].*?[^\'")]+((\s*\.?[\'"]([^\'";\$]+\s*)+)?\s*[\'"\);]+)+~msi',
            'id'   => 'echo',
        ],
        [
            'full' => '~(\$\w+)="([^"]+)";\s*(\$\w+)=strtoupper\s*\((\1\[\d+\]\s*\.?\s*)+\)\s*;\s*if\(\s*isset\s*\(\${\s*\3\s*}\[\d*\s*\'\w+\'\s*\]\s*\)\s*\)\s*{eval\(\${\3\s*}\[\'\w+\']\s*\)\s*;}~smi',
            'fast' => '~(\$\w+)="([^"]+)";\s*(\$\w+)=strtoupper\s*\((\1\[\d+\]\s*\.?\s*)+\)\s*;\s*if\(\s*isset\s*\(\${\s*\3\s*}\[\d*\s*\'\w+\'\s*\]\s*\)\s*\)\s*{eval\(\${\3\s*}\[\'\w+\']\s*\)\s*;}~smi',
            'id'   => 'strtoupper',
        ],
        [
            'full' => '~(\$\w+)="[^"]+";\s*(\$\w+)=str_ireplace\("[^"]+","",\1\);(\$\w+)\s*=\s*"[^"]+";\s*function\s*(\w+)\((\$\w+,?)+\){\s*(\$\w+)=\s*create_function\(\'\',\$\w+\);\s*array_map\(\6,array\(\'\'\)+;\s*}\s*set_error_handler\(\'\4\'\);(\$\w+)=\2\(\3\);user_error\(\7,E_USER_ERROR\);\s*if\s*.+?}~msi',
            'id'   => 'errorHandler',
        ],
        [
            'full' => '~(\$\w+)=strrev\(str_ireplace\("[^"]+","","[^"]+"\)\);(\$\w+)="([^"]+)";eval\(\1\(\2\)+;}~msi',
            'id'   => 'evalIReplace',
        ],
        [
            'full' => '~error_reporting\((?:0|E_ALL\^E_NOTICE)\);ini_set\("display_errors",\s*[01]\);if\(!defined\(\'(\w+)\'\)\){define\(\'\1\',__FILE__\);if\(!function_exists\("([^"]+)"\)\){function [^(]+\([^\)]+\).+?eval\(""\);.+?;}?eval\(\$[^\)]+\)\);[^\)]+\)+.*?;return\s*\$[^;]+;\s*\?>([^;]+);~msi',
            'id'   => 'PHPJiaMi',
        ],
        [
            'full' => '~\$\w+=0;(\$GLOBALS\[\'\w+\'\])\s*=\s*\'([^\']+)\';\s*(\$\w+)=pack\(\'H\*\',substr\(\1,\s*([-\d]+)\)\);if\s*\(!function_exists\(\'(\w+)\'\)\){function\s*\5\(\$\w+,\s*\$\w+\){\$\w+=\1;\s*\$d=pack\(\'H\*\',substr\(\1,\s*\4\)\);\s*return\s*\$\w+\(substr\(\$\w+,\s*\$\w+,\s*\$\w+\)\);}};eval\(\3\(\'[^\']+\'\)\);~msi',
            'id'   => 'substr',
        ],
        [
            'full' => '~(?:\$\{\'GLOBALS\'\}\[\'\w+\'\]=\'_F\';)?\$(?:_F|\{\$\{\'GLOBALS\'\}\[\'\w+\'\]\})=_{1,2}(?:FILE|hex)_{1,2};(?:\$\{\'GLOBALS\'\}\[\'\w+\'\]=\'_X\';)?\$(?:_X|\{\$\{\'GLOBALS\'\}\[\'\w+\'\]\})=["\']([^\'"]+)[\'"];\s*(?:\$[_\w]+\.=[\'"][\w\+\/=]+[\'"];){0,30}\$_\w+=base64_decode\(\$_X\);\$_X=strtr\(\$_X,\'([^\']+)\',\'([^\']+)\'\);\$_R=@?(?:(str_replace)|(ereg_replace)|(preg_replace))\(\'\~?__FILE__\~?\',"\'".\$_F."\'",\$_X\);eval\(\$_R\);\$_R=0;\$_X=0;~msi',
            'fast' => '~\$_\w+=base64_decode\(\$_X\);\$_X=strtr\(\$_X,\'([^\']+)\',\'([^\']+)\'\);\$_R=@?(?:(str_replace)|(ereg_replace)|(preg_replace))\(\'\~?__FILE__\~?\',"\'".\$_F."\'",\$_X\);eval\(\$_R\);\$_R=0;\$_X=0;~msi',
            'id'   => 'LockIt2',
        ],
        [
            'full' => '~(?:@error_reporting\(\d+\);\s*@set_time_limit\(\d+\);)?\s*(\$\w+)=([\s\'\w\/+=]+);\s*(\$\w+)=(__FILE__);\s*\1=gzinflate\(str_rot13\(base64_decode\(\$tr\)\)\);\1=strtr\(\1,\'([^\']+)\'\s*,\'([^\']+)\'\);(\$_R)=@?ereg_replace\(\'\~?\4\~?\',"\'".\3."\'",\1\);eval\(\7\);\7=0;\1=0;~msi',
            'fast' => '~(\$\w+)=([\s\'\w\/+=]+);\s*(\$\w+)=(__FILE__);\s*\1=\w+\(\w+\(\w+\(\$tr\)\)\);\1=\w+\(\1,\'([^\']+)\'\s*,\'([^\']+)\'\);(\$_R)=@?\w+\(\'\~?\4\~?\',"\'".\3."\'",\1\);\w+\(\7\);\7=0;\1=0;~msi',
            'id'   => 'anaski',
        ],
        [
            'full' => '~\$\w+="[^"]+";\$l+=0;\$l+=\'base64_decode\';\$l+=0;eval\([^\^]+\^[\dx]+\);}eval\(\$l+\("[^"]+"\)+;eval\(\$l+\);return;~msi',
            'id'   => 'custom1',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*"(\w{32})";\s*(\$\w+)\s*=\s*array\s*\(\);\s*(\3\[\d+\]\s*=\s*"[^"]+";\s*)+\s*(\$\w+)\s*=\s*"base64_decode";\s*\$\w+\s*=\s*(\w+)\s*\(\3,\1\);function\s*\6\(\s*.{200,500}return\s*\$\w+;\s*}\s*eval\s*\(\5\s*\(\$\w+\)\);~msi',
            'id'   => 'custom2',
        ],
        [
            'full' => '~\$\w+=\'=+\s*Obfuscation provided by Unknowndevice64 - Free Online PHP Obfuscator\s*(?:http://www\.ud64\.com/)?\s*=+\';\s*(\$ud64_c[o0]m="[\\\\0-9a-z\."]+;)+\$\w+=(\$ud64_c[o0]m\()+"([^"]+)"\)+;@eval\(\$ud64_c[o0]m\(\'[^\']+\'\)+;~msi',
            'id'   => 'ud64',
        ],
        [
            'full' => '~(\$[\w_]+=("[\\\\\\\\\w]+"\.?)+;)+\$\w+=(?:\$\w+\()+"([\w\/\+=]+)"\)+;@eval\(\$\w+\(\'.*?\'\)+;~msi',
            'id'   => 'ud64',
        ],
        [
            'full' => '~\$\w+=__FILE__;\$\w+=fopen\(\$\w+,\'rb\'\);fread\(\$\w+,(\d+)\);\$\w+=explode\("\\\\t",base64_decode\(fread\(\$\w+,(\d+)\)+;\$\w+=\$\w+\[[\d+]\];[\$l1=\d{}\.;\(\)\[\]]+eval\(\$\w+\(\'[^\']+\'\)+;\s*return\s*;\?>[\w=\+]+~msi',
            'id'   => 'qibosoft',
        ],
        [
            'full' => '~(\$\w+)=base64_decode\("([^"]+)"\);\s*eval\("return\s*eval\(\\\\"\1\\\\"\);"\)~msi',
            'id'   => 'evalReturn',
        ],
        [
            'full' => '~(?:\$[0O]+\[[\'"](\w+)[\'"]\]\.?="[\\\\\w]+";)+(?:\$[0O]+\[[\'"]\w+[\'"]\]\.?=\$[0O]+\[[\'"]\w+[\'"]\]\([\'"][\d\(]+[\'"](,__FILE__)?\);)+@eval\((?:\$[0O]+\[[\'"]\w+[\'"]\]\()+"([^"]+)"\)+;~mis',
            'fast' => '~(?:\$[0O]+\[[\'"](\w+)[\'"]\]\.?="[\\\\\w]+";)+(?:\$[0O]+\[[\'"]\w+[\'"]\]\.?=\$[0O]+\[[\'"]\w+[\'"]\]\([\'"][\d\(]+[\'"](,__FILE__)?\);)+@eval\((?:\$[0O]+\[[\'"]\w+[\'"]\]\()+"([^"]+)"\)+;~mis',
            'id'   => 'evalChars',
        ],
        [
            'full' => '~<\?php\s+((\$GLOBALS\[\s*[\'"]\w+[\'"]\s*\])\s*=\s*base64_decode\("([^"]*)"\);)+\s*\?><\?php\s.+\2.+exit;\s}\sfunction\s\w+\(\)\s{\sreturn\sarray\(\s\'favicon\'\s=>\s\'[^\']+\',\s+\'sprites\'\s=>\s\'[^\']+\',\s\);\s}~msi',
            'id'   => 'globalsBase64',
        ],
        [
            'full' => '~(\$\w+=strrev\("[^"]+"\);)+eval\((\$\w+\()+"[^"]+"\)+;~mis',
            'fast' => '~(\$\w+=strrev\("[^"]+"\);)+eval\((\$\w+\()+"[^"]+"\)+;~mis',
            'id'   => 'strrevVarEval',
        ],
        [
            'full' => '~\$\w+=basename/\*\w+\*/\(/\*\w+\*/trim/\*\w+\*/\(.+?(\$\w+)=.+\1.+?;~msi',
            'id'   => 'comments',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*(base64_decode\s*\(+|gzinflate\s*\(+|strrev\s*\(+|str_rot13\s*\(+|gzuncompress\s*\(+|convert_uudecode\s*\(+|urldecode\s*\(+|rawurldecode\s*\(+|htmlspecialchars_decode\s*\(+)+"([^"]+)"\)+;\s*@?eval\(([\'"?>.\s]+)?\1\);~',
            'fast' => '~(\$\w+)\s*=\s*(base64_decode\s*\(+|gzinflate\s*\(+|strrev\s*\(+|str_rot13\s*\(+|gzuncompress\s*\(+|convert_uudecode\s*\(+|urldecode\s*\(+|rawurldecode\s*\(+|htmlspecialchars_decode\s*\(+)+"([^"]+)"\)+;\s*@?eval\(([\'"?>.\s]+)?\1\);~',
            'id'   => 'varFuncsEval',
        ],
        [
            'full' => '~((\$\w+)="";\$\w+\s*\.=\s*"[^;]+;\s*)+(?:(?:\$\w+)?="";)?eval\((\s*\$\w+\s*\.)+\s*"[^"]+(?:"\);)+~msi',
            'id'   => 'evalConcatVars',
        ],
        [
            'full' => '~<\?php\s*defined\(\'[^\']+\'\)\s*\|\|\s*define\(\'[^\']+\',__FILE__\);(global\s*\$[^;]+;)+\s*(if\(!function_exists\(\'([^\']+)\'\)\){\s*function\s*[^\)]+\(\$[^,]+,\$[^=]+=\'\'\){\s*if\(empty\(\$[^\)]+\)\)\s*return\s*\'\';\s*\$[^=]+=base64_decode\(\$[^\)]+\);\s*if\(\$[^=]+==\'\'\)\s*return\s*\~\$[^;]+;\s*if\(\$[^=]+==\'-1\'\)\s*@[^\(]+\(\);\s*\$[^=]+=\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\(\$[^\)]+\);\s*\$[^=]+=\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\(\$[^,]+,\$[^,]+,\$[^\)]+\);\s*return\s*\$[^^]+\^\$[^;]+;\s*}}\s*)+(\$[^\[]+\["[^"]+"]=[^\(]+\(\'[^\']+\',\'[^\']*\'\);\s*)+(\$[^\[]+\[\'[^\']+\'\]=\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\([^\)]*\)+;\s*)+return\(eval\(\$[^\[]+\[\'[^\']+\'\]\)+;\s*\?>\s*#!/usr/bin/php\s*-q\s*(\s*[^\s]+)+~msi',
            'fast' => '~<\?php\s*defined\(\'[^\']{10,30}\'\)\s*\|\|\s*define\(\'[^\']{10,30}\',__FILE__\);(global\s*\$[^;]{10,30};)+\s*if\(!function_exists\(\'([^\']+)\'\)\){\s*function\s*[^\)]+\(\$[^,]{10,30},\$[^=]{10,30}=\'\'\){\s*if\(empty\(\$[^\)]+\)\)\s*return\s*\'\';\s*\$[^=]{10,30}=base64_decode~msi',
            'id'   => 'OELove',
        ],
        [
            'full' => '~(?:\$\w+\s*=(\s*(\d+)\+)*\d+;\s*)?(\$\w+="[^"]+";\s*)+\s*(?:\$\w+\s*=(?:\s*(?:\d+)\+)*\s*\d+;\s*)?(\$\w+)\s*=\s*\w+\(\'[^\']+\',\s*\$\w+,\s*\'[^\']+\'\);.+?\4\("[^"]+"\);\s*\$\w+\s*=\s*\4;\s*(\$\w+="[^"]+";\s*)+.+?\$\w+\(\$\w+,\$\w+\("",\s*\$\w+\(\$\w+\(\$\w+\(\$\w+\(\$\w+,\s*"(\d+)"\)+,\$\w+\);.+function \w+\((\$\w+),\s*\$\w+,\s(\$\w+)\)\s{\8\s=\s\8\s\.\s\8;.+return \7;\s*}~msi',
            'fast' => '~(\$\w+)\s*=\s*\w+\(\'[^\']+\',\s*\$\w+,\s*\'[^\']+\'\);.+?\1\("[^"]+"\);\s*\$\w+\s*=\s*\1;\s*(\$\w+="[^"]+";\s*)+~msi',
            'id'   => 'Obf_20200402_1',
        ],
        [
            'full' => '~(?:\$\w+\s*=\s*"[^"]+";\s*)?(?:((?:\$\w+\s*=\s*\'[^\']+\';\s*)+)(\$\w+=(?:\$\w+\.?)+);)?function\s(\w+)\((\$\w+),\s*(\$\w+),\s*(\$\w+)\)\s*{\s*return\s*([\'\. ]*(\4|\5|\6)[\'\. ]*)+;\s*}\s*(?:\$\w+\s*=\s*"[^"]+";)?(\s*\$\w+\s*=\s*\3\((((\'\')|(\$\w+)|(\$\w+[\[\{]\d+[\]\}](\.\'\')?)|(\$\w+[\[\{]\d+[\]\}]\.\$\w+[\[\{]\d+[\]\}]))\s*,?\s*)+\);\s*)+\s*\$\w+\s*=\s*\3[^"]+[^\']+\'([^\']+)\'"[^/]+\'//\'\)+;~msi',
            'fast' => '~function\s(\w+)\((\$\w+),\s*(\$\w+),\s*(\$\w+)\)\s*{\s*return\s*([\'\. ]*(\2|\3|\4)[\'\. ]*)+;\s*}\s*(?:\$\w+\s*=\s*"[^"]+";)?(\s*\$\w+\s*=\s*\1\((((\'\')|(\$\w+)|(\$\w+[\[\{]\d+[\]\}](\.\'\')?)|(\$\w+[\[\{]\d+[\]\}]\.\$\w+[\[\{]\d+[\]\}]))\s*,?\s*)+\);\s*)+\s*\$\w+\s*=\s*\1[^"]+[^\']+\'([^\']+)\'"[^/]+\'//\'\)+;~msi',
            'id'   => 'Obf_20200402_2',
        ],
        [
            'full' => '~(?:function\s*\w{1,50}\(\$\w{1,50},\s*\$\w{1,50}\)\s*\{(?:\s*\$\w{1,50}\s*=\s*(?:md5\(\$\w{1,50}\)|\d+|base64_decode\(\$\w{1,50}\)|strlen\(\$\w{1,50}\)|\'\');\s*)+\s*for\s*\(\$\w{1,50}\s*=\s\d+;\s*\$\w{1,50}\s*<\s*\$len;\s*\$\w{1,50}\+\+\)\s*\{\s*if\s*\(\$\w{1,50}\s*==\s*\$\w{1,50}\)\s*\{\s*\$\w{1,50}\s*=\s*\d+;\s*}\s*\$\w{1,50}\s*\.=\s*substr\(\$\w{1,50},\s*\$\w{1,50},\s*\d+\);\s*\$\w{1,50}\+\+;\s*\}(?:\s*\$\w{1,50}\s*=\s*\'\';)?\s*for\s*\(\$\w{1,50}\s*=\s*\d+;\s*\$\w{1,50}\s*<\s*\$\w{1,50};\s*\$\w{1,50}\+\+\)\s*{\s*if\s*\(ord\(substr\(\$\w{1,50},\s*\$\w{1,50},\s*\d+\)\)\s*<\s*ord\(substr\(\$\w{1,50},\s*\$\w{1,50},\s*\d+\)\)\)\s*\{\s*\$\w{1,50}\s*\.=\s*chr\(\(ord\(substr\(\$\w{1,50},\s*\$\w{1,50},\s*\d+\)\)\s*\+\s*\d+\)\s*-\s*ord\(substr\(\$\w{1,50},\s*\$\w{1,50},\s*\d+\)\)\);\s*}\s*else\s*{\s*\$\w{1,50}\s*\.=\s*chr\(ord\(substr\(\$\w{1,50},\s*\$\w{1,50},\s*\d+\)\)\s*-\s*ord\(substr\(\$\w{1,50},\s*\$\w{1,50},\s*\d+\)\)\);\s*}\s*}\s*return\s*\$\w{1,50};\s*\}\s*|\$\w{1,50}\s*=\s*"([^"]+)";\s*){2}\s*\$\w{1,50}\s*=\s*"([^"]+)";\s*\$\w{1,50}\s*=\s*\w{1,50}\(\$\w{1,50},\s*\$\w{1,50}\);\s*eval\(\$\w{1,50}\);~msi',
            'id'   => 'Obf_20200414_1',
        ],
        [
            'full' => '~(?:\$\w+\s*=\s*\'\w+\';)?\s*(\$\w+)\s*=\s*urldecode\(\'[%0-9a-f]+\'\);(\s*(\$\w+)\s*=(\s*\1\{\d+\}\.?)+;)+\s*(\$\w+)\s*=\s*"[^"]+"\.\3\("[^"]+"\);\s*eval\(\5\);~msi',
            'fast' => '~(\$\w+)\s*=\s*urldecode\(\'[%0-9a-f]+\'\);(\s*(\$\w+)\s*=(\s*\1\{\d+\}\.?)+;)+\s*(\$\w+)\s*=\s*"[^"]+"\.\3\("[^"]+"\);\s*eval\(\5\);~msi',
            'id'   => 'Obf_20200421_1',
        ],
        [
            'full' => '~(\$\w+)=\'([^\']+)\';(\$\w+)=str_rot13\(gzinflate\(str_rot13\(base64_decode\(\1\)\)\)\);eval\(\3\);~msi',
            'id'   => 'SmartToolsShop',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*\("\?>"\.gzuncompress\(base64_decode\("[^"]+"\)\)\);\s*@?eval\(\1\);~msi',
            'id'   => 'Obf_20200504_1',
        ],
        [
            'full' => '~(\$\w+)=base64_decode\(\'[^\']+\'\);\s*eval\(\1\);~mis',
            'fast' => '~(\$\w+)=base64_decode\(\'[^\']+\'\);\s*eval\(\1\);~mis',
            'id'   => 'Obf_20200507_1',
        ],
        [
            'full' => '~(?:error_reporting\(0\);\s*ini_set\("max_execution_time",0\);\s*(?:/\*.*?\*/)?\s*)?(\$\w+)=\s*\[(("."=>".",?\s*)+)];\s*(\$\w+)=str_split\("([^"]+)"\);\s*(?:\$\w+="";)?\s*foreach\(\4\s*as\s*(\$\w+)\)\s*{\s*foreach\(\s*\1\s*as\s*(\$\w+)=>(\$\w+)\)\s*{\s*if\(\6==\(string\)\8\)\s*\{\s*\$\w+\.=\7;\s*break;\s*}\s*}\s*}~msi',
            'fast' => '~(\$\w+)=\s*\[(("."=>".",?\s*)+)];\s*(\$\w+)=str_split\("([^"]+)"\);\s*(?:\$\w+="";)?\s*foreach\(\4\s*as\s*(\$\w+)\)\s*{\s*foreach\(\s*\1\s*as\s*(\$\w+)=>(\$\w+)\)\s*{\s*if\(\6==\(string\)\8\)\s*\{\s*\$\w+\.=\7;\s*break;\s*}\s*}\s*}~msi',
            'id'   => 'Obf_20200507_4',
        ],
        [
            'full' => '~assert\("[eval"\.]+\([base64_decode\."]+\(\'([^\']+)\'\)\)"\);~msi',
            'id'   => 'Obf_20200507_5',
        ],
        [
            'full' => '~parse_str\s*\(\'([^\']+)\'\s*,\s*(\$\w+)\)\s*;(\2\s*\[\s*\d+\s*\]\s*\(\s*)+\'[^\']+\'\s*\),\s*array\(\s*\),\s*array\s*\(\s*\'[^\']+\'\s*\.(\2\[\s*\d+\s*\]\()+\'([^\']+)\'\s*[\)\s]+\.\'//\'[\s\)]+;~msi',
            'id'   => 'Obf_20200513_1',
        ],
        [
            'full' => '~(\$\w+)=strrev\("[base64_decode"\.]+\);eval\(\1\(\'([^\']+)\'\)\);~msi',
            'id'   => 'Obf_20200526_1',
        ],
        [
            'full' => '~error_reporting\(0\);define\(\'\w+\',\s*__FILE__\);define\(\'\w+\',\s*fopen\(__FILE__,\s*\'r\'\)\);fseek\(\w+,\s*__COMPILER_HALT_OFFSET__\);((\$\w+="\\\\x[0-9a-f]+";)+(\$\w+="[^"]+";)+eval\("\?>"\.(\$\w+\()+"([^"]+)"\)+;)+(?:/\*\w+\*/)?__halt_compiler\(\);[\w#|>^%\[\.\]\\\\/=]+~msi',
            'id'   => 'Obf_20200527_1',
        ],
        [
            'full' => '~(\$\w+)=strrev\("[base64_decode]+"\)\.str_replace\(\'(\w+)\',\'\',\'\w+\'\);\s*eval\(\1\(\$\w+\)\);~msi',
            'id'   => 'Obf_20200602_1',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*"([^"]+)";\s*(\$\w+)\s*=\s*base64_decode\(\1\);\s*eval\(\3\);~msi',
            'id'   => 'Obf_20200720_1',
        ],
        [
            'full' => '~[\'".]+(\$\w+\s*=\s*[\'"]\w+[\'"];)+(\$\w+=\$\w+[\'.]+\$\w+;)+(\$\w+=(str_rot13|base64_decode|gzinflate)\(\$\w+\);)+eval\(\$\w+\);~msi',
            'id'   => 'flamux',
        ],
        [
            'full' => '~function\s*(\w+)\(\)\{\s*return\s*"([^"]+)";\s*\}\s*eval\("([^"]+)"\.\1\(\)\."([^"]+)"\);~msi',
            'id'   => 'bypass',
        ],
        [
            'full' => '~(?:\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";)+(echo)\s*"(?:[<\w\\\\>\/\s={:}#]+);(?:[\\\\\w\-:]+;)+(?:[\\\\\w}:{\s#]+;)+(?:[\\\\\w}:{#\-\s]+;)+[\\\\\w}<\/]+";\$\w+=["\\\\\w]+;(?:\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";)+\$\w+=["\\\\\w]+;\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";error_reporting\(\d\);\$\w+=["\\\\\w]+;\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\$\w+=["\\\\\w]+;set_time_limit\(\d\);\$\w+=["\\\\\w]+;(?:\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";)+(if\(empty\()[\$_\w\["\\\\\]]+\)\){\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=[\w()]+;(}else{)\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=[\$_\w\["\\\\\]]+;}chdir\(\${\$\w+}\);\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=htmlentities\(\$[_\w\["\\\\\].?]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\);\1[<\\\\\w>\/"]+;\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";(?:\$\w+=["\w\\\\]+;)+(?:\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;)+\$\w+=["\w\\\\]+;\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\1["\\\\\w<>=\s\'.]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."\\\\\w=\s\/<>]+;(?:\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";)+\1["<\\\\\w\s\'.\${}>\/]+;\1["<\\\\\w>\s\'.]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."&\w\\\\\'<\/]+;\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\$\w+=["\\\\\w]+;\1["<\\\\\w>\s=\'.\${}&\/]+;(?:\1["<\\\\\w>\/]+;)+\$\w+=["\\\\\w]+;\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=[\$_\w\["\\\\\]]+;\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";switch\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\){case"[\w\\\\\s]+":(?:\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=[\$_\w\["\\\\\]]+;)+\2\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){(?:\$\w+=["\\\\\w]+;)+(?:\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";)+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=fopen\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]},"\w"\);\$\w+=["\\\\\w]+;\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=(?:(?|fread|filesize)\(\${\$\w+},?)+\)\);\${\$\w+}=str_replace\("[\w\\\\\s]+",[<\w\\\\>"]+,\${\$\w+}\);\1["\\\\\w<>=\s\'.]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."\\\\\w=\s\/<>&\${}\']+;\1["\\\\\w\s.:]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\."[\w\\\\\s]+";\1["\\\\\w\s\'=]+\.\${\$\w+}\.["<\w\\\\>]+;\1["<\\\\\w>\s=\'\/;]+\3\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";(?:\$\w+=["\w\\\\]+;)+\${\$\w+}=fopen\(\${\$\w+},"\w"\);if\(fwrite\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]},\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\1\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."\s\\\\\w]+;\3\1["\\\\\w\s.]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."<\\\\\w]+;}}fclose\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\);(break;case")[\w\\\\\s]+":\${\$\w+}=[\$_\w\["\]\\\\]+;if\(unlink\([\${}\w]+\)\){\1\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\.["\s\w\\\\.>]+;\3\$\w+=["\w\\\\]+;\1["\\\\\w\s.${}<]+;}\4[\w\\\\\s]+":(?:\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=[\$_\w\["\\\\\]]+;)+\2\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\1["<\w\\\\\s=.]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}.["\\\\\w&.]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."\\\\\w\s=]+;(?:\1["\w\\\\:\s\'><=\/]+;)+\3(?:\$\w+=["\w\\\\]+;)+if\(copy\(\${\$\w+},\${\$\w+}\)\){\1"[\w\\\\\s]+";\3\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\1"[\w\\\\\s]+"\.\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."<\w>\\\\=&]+;}}\4[\w\\\\\s]+":(?:\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=[\$_\w\["\\\\\]]+;)+\2\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){\1"[\w\\\\\s]+"\.\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."<\w>\\\\=&]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."\'\\\\\w\s=>]+;\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;\1["\\\\\w\s\'=>\/;]+\3if\(rename\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]},\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;\3\$\w+=["\w\\\\]+;\1"[\w\\\\\s]+"\.\${\$\w+}[."\\\\\w>;]+}}\4[\w\\\\\s]+":\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=[\$_\w\["\\\\\]]+;\${\$\w+}=[\$_\w\["\]\\\\]+;\2\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\1["\\\\\w\s\'.]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\.["\\\\\w=.]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\.["\\\\\w\s>]+;(?:\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;)+\1["\\\\\w\s=\'<\/;]+\3if\(rename\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]},\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;\3\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\1"[\w\\\\\s]+"\.\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."<\w>\\\\=&]+;}}\4[\w\\\\\s]+":\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=[\$_\w\["\\\\\]]+;if\(rmdir\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;\3\$\w+=["\\\\\w]+;\1"[\w\\\\\s]+"\.\${\$\w+}[."\\\\\w]+;}\4[\w\\\\\s]+":\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=[\$_\w\["\\\\\]]+;\2\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){(?:\1["\\\\\w\s=.\${}\[\]&\':\/<>]+;)+\3\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";system\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\);}\4[\w\\\\\s]+":\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=[\$_\w\["\\\\\]]+;\2\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){\$\w+=["\w\\\\]+;(?:\1["\\\\\w\s=.\${}\[\]&\':\/<>]+;)+\3\$\w+=["\w\\\\]+;if\(\${\$\w+}=fopen\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]},"\w"\)\){\1["\\\\\w\s=.\${}\[\]&\':\/<>]+;\3\$\w+=["\w\\\\]+;\1["\\\\\w\s=.\${}\[\]&\':\/<>]+;}\$\w+=["\w\\\\]+;fclose\(\${\$\w+}\);}\4[\w\\\\\s]+":\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=[\$_\w\["\\\\\]]+;\${\$\w+}=basename\([\$_\w\["\\\\\]]+\);\2\${\$\w+}\)\){\1["<\\\\\w\s=\'.]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\.["&\w\\\\\s=\/\-\'>]+;(?:\1["\\\\\w\s=.\${}\[\]&\':\/<>]+;)+\3\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";if\(move_uploaded_file\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]},\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;unlink\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\);\3\1"[\w\\\\\s]+"\.\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."<\w>\\\\=&]+;}}\4[\w\\\\\s]+":\${\$\w+}=[\$_\w\["\]\\\\]+;\2\${\$\w+}\)\){(?:\1["\\\\\w\s=.\${}\[\]&\':\/<>]+;)+\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;\1["\\\\\w\s=.\${}\[\]&\':\/<>]+;\3\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\$\w+=["\\\\\w]+;\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=explode\(":",\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\);if\(\(!is_numeric\(\${\$\w+}\[\d\]\)\)or\(!is_numeric\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\[\d\]\)\)\){\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;\3(?:\$\w+=["\w\\\\]+;)+\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\$\w+=["\w\\\\]+;(?:\${\$\w+}=\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\[\d\];)+\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;while\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}<=\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\){\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\$\w+=["\\\\\w]+;\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=\d;\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=fsockopen\(\$\w+,\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)or\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=\d;if\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}==\d\){\$\w+=["\\\\\w]+;echo\${\$\w+}\.["\\\\\w>]+;}\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\+\+;fclose\(\${\$\w+}\);}}}break;}clearstatcache\(\);(?:\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;){2}\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=scandir\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\);foreach\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\s\w+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\){if\(is_file\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\){(?:\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";)+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=round\(filesize\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\/\d+,\d\);\$\w+=["\w\\\\]+;\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\1["<\\\\\w>.\s=]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."<\/\w\\\\>;]+\$\w+=["\\\\\w]+;\1["<\\\\\w>.\s=]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."\\\\\w\s<\/>]+;\1["<\\\\\w>.\s=]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."\\\\\w=&]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."\\\\\w\/<>;]+\$\w+=["\\\\\w]+;\1"[\w\\\\\s]+"\.\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."<\w>\\\\=&]+\${\$\w+}[.">\w\\\\\/<]+;(?:\1["\\\\\w\s=.\${}\[\]&\':\/<>]+;)+\3(?:\$\w+=["\\\\\w]+;){2}\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=scandir\(\${\$\w+}\);(?:\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";){2}\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}=count\(\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}\)\-\d;\1"[\w\\\\\s]+"\.\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."<\w>\\\\=&]+\/\w+>";\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]="[\w\\\\\s]+";\1["<\\\\\w>.\s=]+\${\${"[\w\\\\\s]+"}\["[\w\\\\\s]+"\]}[."\\\\\w\s=<\/]+;(?:\1["\\\\\w\s=.\${}\[\]&\':\/<>]+;){3}}}\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;~msi',
            'id'   => 'darkShell',
        ],
        [
            'full' => '~(\$\w+)=\'([\w\(;\$\)=\s\[\/\]."*]+)\';(\$\w+)=(?:\1\[[-+\(\d*\/\)]+\]\.?)+;(\$\w+)=(?:\1\[[-+\(\d*\/\)]+\]\.?)+;(\$\w+)=(?:\1\[[-+\(\d*\/\)]+\]\.?)+;(\$\w+)=\s+"([\'\w\/+=]+)";(\$\w+)\.=\4;\8\.=\6;\8\.=\5;@(\$\w+)=\3\(\(\'+\),\s+\(\8\)\);@\9\(\);~msi',
            'id'   => 'wso',
        ],
        [
            'full' => '~(?:(?:@?error_reporting|@?set_time_limit)\(\d+\);\s*){1,2}function\s*\w+\((\$\w{1,50})\)\s*{\s*(\$\w{1,50})\s*=\s*strlen\s*\(trim\(\1\)\);\s*(\$\w{1,50})\s*=\s*\'\';\s*(?|for\s*\((\$\w{1,50})\s*=\s*0;\s*\4\s*<\s*\2;\s*\4\s*\+=\s*2\)|(\$\w+)\s*=\s*0;\s*while\s*\(+\4\s*<\s*\2\)+)\s*{\s*\3\s*\.=\s*pack\s*\("C",\s*hexdec\s*\(substr\s*\(\1,\s*\4,\s*2\)\)\);\s*(?:\4\s*\+=\s*2;)?\s*}\s*return\s*\3;\s*}\s*(?:header\("\w+-(?:\w+:)?\s\w+\/\w+;\s*charset=(\w+)"\);\s*)?(\$\w{1,50})\s*=\s*(?:(?:\w+\("(\w+)"\)|\$\w{1,50})\s*\.?\s*)+\s*\.\s*\'([\w\/\+=\\\\]+\'\)\)\);)\';\s*(\$\w{1,50})\s*=\s*create_function\(\'\',\s*\6\);\s*\9\(\);~msi',
            'id'   => 'anonymousFox',
        ],
        [
            'full' => '~(\$my_sucuri_encoding)\s{0,10}=\s{0,10}[\'"]([^\'"]+)[\'"];\s{0,10}(\$tempb64)\s{0,10}=\s{0,10}base64_decode\(\s{0,10}\1\);\s{0,10}eval\(\s{0,10}\3\s{0,10}\);~msi',
            'id'   => 'wsoEval',
        ],
        [
            'full' => '~(?:(?:(\$\w+)\s*\.?=\s*["\'][assert]+["\'];)+\s*(if\s*\(\!\@\$\w+\)\s*\{\$\w+=1;)?\s*@?\1)(\((?:\w+\()+\'[^;]+;\'\)+;(?(2)}))~msi',
            'id'   => 'assertStr',
        ],
        [
            'full' => '~(function\s\w+\(\$\w+,\$\w+,\$\w+\){return\sstr_replace\(\$\w+,\$\w+,\$\w+\);}\s?){3}(\$\w+)\s=\s\'(\w+)\';\s\2\s=\s(\w+)\(\'(\w+)\',\'\',\2\);\s(\$\w+)\s=\s\'(\w+)\';\s\6\s=\s\4\(\'(\w+)\',\'\',\6\);\s(\$\w+)\s=\s\'(\w+)\';\s\9\s=\s\4\(\'(\w+)\',\'\',\9\);\s(\$\w+)\s=\s\'(\$\w+)\';\s(\$\w+)\s=\s\6\(\12,\9\.\'\(\'\.\2\.\'\(\'\.\12\.\'\)\);\'\);\s\14\(\'(\w+)\'\);~msi',
            'id'   => 'funcVar',
        ],
        [
            'full' => '~(\$\w+)=[\'"]([\w</,\s()\$\+}\\\\\'"?\[\]{;%=^&-]+)[\'"];(\$\w+=(?:\s?\1\[\d+\](?:\s?\.?))+;)+((?:\$\w+\(\d+\);)?(\$\w+=(\$\w+)\(["\']{2},(\$\w+\(\$\w+\(["\'][=\w\+\/]+[\'"]\)\))\);\$\w+\(\);|.*?if\s?\(isset\(\${(?:\$\w+\[\d+\]\.?)+}.*?function\s\w+.*?include\s\${(?:\$\w+\[\d+\]\.?)+}\[(?:\$\w+\[\d+\]\.?)+\];\s?}))~msi',
            'id'   => 'dictionaryVars',
        ],
        [
            'full' => '~(?:(?<concatVar>\$\w+)\s?=\s?""\s?;((?:\s?(?P=concatVar)\s?\.=\s?"[\w]+"\s?;\s?)+))?(\$\w+)\s?=\s?(?:(?P=concatVar)|"(?<strVal>[\w]+)")\s?;\s?if\s?\(\s?!function_exists\s?\(\s?"(\w+)"\)\){\s?function\s\5\(\s?(\$\w+)\){\s?(?:\$\w+\s?=\s?""\s?;)?\s?(\$\w+)\s?=\s?strlen\s?\(\s?\6\s?\)\s?\/\s?2\s?;\s?for\s?\(\s?(\$\w+)\s?=0\s?;\s?\8\s?<\s?\7\s?;\s?\8\+\+\s?\)\s?{\s?\$\w+\s?\.=\s?chr\s?\(\s?base_convert\s?\(\s?substr\s?\(\s?\6\s?,\s?\8\s?\*\s?2\s?,\s?2\s?\)\s?,\s?16\s?,\s?10\s?\)\s?\)\s?;\s?}\s?return\s?\$\w+;\s?}\s?}\s?\$\w+\s?=\s?create_function\s?\(\s?null\s?,\s?\5\(\s?\3\)\)\s?;\s?\3\(\)\s?;~msi',
            'id'   => 'concatVarFunc',
        ],
        [
            'full' => '~function\s?(\w+)\(\){(((\$\w+)\.?="\w+";)+)return\seval\(\4\(\w+\(\)\)\);}function\s(\w+)\((\$\w+)\){((?:(\$\w+)\.?="\w+";)+)return\s\8\(\6\);}function\s?(\w+)\(\){((\$\w+)\.?="([\w\/+=]+)";)return\s(\w+)\(\11\);}function\s\13\((\$\w+)\){(\$\w+)=(\w+)\((\w+)\((\w+)\(\14\)\)\);return\s\15;}function\s\17\(\14\){(((\$\w+)\.?="\w+";)+)return\s\21\(\14\);}\1\(\);function\s\16\(\14\){(((\$\w+)\.?="\w+";)+)return\s\24\(\14\);}~msi',
            'id'   => 'concatVarFuncFunc',
        ],
        [
            'full' => '~(?:(?:\s?\$\w+\s?=\s?strrev\([\'"][^\'"]+[\'"]\);\s?)|(?:\s?\$\w+\s?=\s?strrev\([\'"][^\'"]+[\'"]\);\s?)|(?:\s?eval\((?:\$\w+)?\([\'"][^\'"]+[\'"]\)\);\s?)|(?:\s?eval\(\$\w+\(\$\w+\([\'"][^\'"]+[\'"]\)\)\);\s?)){3,4}~msi',
            'id'   => 'evalVarDoubled',
        ],
        [
            'full' => '~(\$\w+)\s?=\s?(\w+)\("([\w+\/=]+)"\);\s?echo\s?\1;~msi',
            'id'   => 'varFuncsEcho',
        ],
        [
            'full' => '~(\$\w+)="";\s*(?:do\s?{[^}]+}\s?while\s?\(\d+>\d+\);\s*\1=\1\."[^"]+";)?.*?\s?.*?(\$\w+)=(\'[^\']+\'\s?\.\s?(?:\'[^\']+\'\s?\.?\s?)+);\s?.*?(?:\s(\$\w+)=((?:\4\[?{?\d+\]?}?\.?)+);\s?|\$\w{1,50}->\w{1,50}\(\);)?\s*(?:function\s\w+\(\){(?:.*?);\s}\s?\1=\w+\(\1,"\w+"\);\s?|\$\w+=array\((?:\'\w+\',?)+\);\s?|\1=\w+\(\1,\sjoin\(\'\',\s\$\w+\)\s?\);\s?|\s?\$\w+\+=\d+;\s?|\1=\w+\(\1,\w+\(\)\);\s?|function\s\w+\(\){\s?|do{\s?if\s?\(\d+<\d+\)\s?{\s?)*.*?(?:\$\w+\s?=\s?\$\w+\([\'"]{2},\s?\$\w+\(\$\w+(?:\(\1\),\s?(?:\$\w+\[\'\w+\'\]\)\s?)?|\)\s?)\);\s?\$\w+\(\);)(?:\s?function\s\w+\((?:\$\w+,\s?\$\w+)?\)(?:.*?);\s}|\s?class\s\w+\s?{(?:.*?);(?:\s}){1,2})+~msi',
            'fast' => '~function\s+\w+\(\)\{\s*global\s*(\$\w+);\s*return\s*(\1[\[{]\d+[\]}]\.?){15};\s*}~msi',
            'id'   => 'varFuncsMany',
        ],
        [
            'full' => '~((\$(?:GLOBALS|{"[\\\\\w]+"})\[[\'"]\w+["\']\])\s?=\s?[\'"]+([\\\\\w]+)["\'];)\s?(?:(\$GLOBALS\[?(\s?(?:\2|\$GLOBALS\[\'\w+\'\])\[\d+\]\.?)+\])\s?=\s?\g<5>+;\s?)+(?:\g<4>\s?=\s[\$_\w]+;\s)+(?:@\g<4>\(\g<5>+\s?,\s?\w+\s?\);\s?)+@\g<4>\(\d+\);\s{0,50}(?:if\s?\(!\g<4>\s?\(\g<5>+\)\)\s{\s{0,50}\g<4>\(\g<5>+,\s\g<5>*\d*\);\s{0,50}}?\s{0,50})*(?:\$\w+\s?=\s?\w+;\s?)*\g<4>\s?=\s\g<5>+;\s?global\s?\$\w+;\s?function\s\w+\(\$\w+,\s\$\w+\)\s{\s?\$\w+\s?=\s?["\']{2};\s?for\s?\(\$\w+\s?=\d+;\s?\$\w+\s?<\s?\g<4>\(\$\w+\)\s?;\s?\)\s?{\s?for\s?\(\s?\$\w+=\d+;\s?\$\w+\s?<\s?\g<4>\(\$\w+\)\s?&&\s?\$\w+\s?<\g<4>\(\$\w+\);\s?\$\w+\+{2},\s?\$\w+\+{2}\)\s?{\s?\$\w+\s?\.=\s?\g<4>\(\g<4>\(\$\w+\[\$\w+\]\)\s?\^\s?\g<4>\(\$\w+\[\$\w+\]\)\);\s?}\s?}\s?return\s\$\w+;\s?}\s?function\s?\w+\(\$\w+,\s?\$\w+\)\s?{\s?global\s?\$\w+;\s?return\s\g<4>\(\g<4>\(\$\w+,\s?\$\w+\),\s?\$\w+\)\s?;\s?}\s?foreach\s?\(\g<4>\sas\s\$\w+=>\$\w+\)\s?{\s?\$\w+\s?=\s?\$\w+;\s?\$\w+\s?=\s?\$\w+;\s?}\s?if\s?\(!\$\w+\)\s?{\s?foreach\s?\(\g<4>\sas\s\$\w+\s?=>\s?\$\w+\)\s?{\s?\$\w+\s?=\s?\$\w+;\s?\$\w+\s?=\s?\$\w+;\s?}\s?}\s?\$\w+\s?=\s?@\g<4>\(\g<4>\(@?\g<4>\(\$\w+\),\s?\$\w+\)\);\s?if\s?\(isset\(\$\w+\[\g<5>+\]\)\s?&&\s?\$\w+==\$\w+\[\g<5>+\]\)\s?{\s?if\s?\(\$\w+\[\g<5>\]\s?==\s?\g<5>\)\s?{\s?\$\w+\s?=\s?array\(\s?\g<5>+\s?=>\s?@\g<4>\(\),\s?\g<5>+\s?=>\s?\g<5>+,\s?\);\s?echo\s?@\g<4>\(\$\w+\);\s?}\s?elseif\s?\(\$\w+\[\g<5>\]\s?==\s?\g<5>\)\s?{\s?eval\(\$\w+\[\g<5>\]\);\s?}\s?(?:exit\(\);)?\s?}\s?}?~msi',
            'id'   => 'globalArrayEval',
        ],
        [
            'full' => '~<\?php\s{0,30}(\$\w+)\s{0,30}=\s{0,30}"(.+?)";\s{0,30}((?:\$\w+\s{0,30}=\s{0,30}(?:\1\[\'\w\s{0,30}\'\s{0,30}\+\s{0,30}\d+\s{0,30}\+\s{0,30}\'\s{0,30}\w\'\]\s{0,30}\.?\s{0,30})+;\s{0,30})+)(\$\w+)\s{0,30}=\s{0,30}"(\d+)";\s{0,30}(?:\$\w+\s{0,30}=\s{0,30}\$\w+\(\s{0,30}\$\w+\s{0,30},\s{0,30}\$\w+\(\s{0,30}"\s{0,30}"\)\s{0,30},\s{0,30}"[\w\+]+"\)\s{0,30};\s{0,30})+(?:\$\w+\s{0,30}=\s{0,30}\$\w+\(\s{0,30}\$\w+\(\s{0,30}\$\w+\)\s{0,30},\s{0,30}\$\w+\(\s{0,30}?\$\w+\)\s{0,30}\)\s{0,30};\s{0,30})+\$\w+\((?:\s{0,30}\$\w+\(\s{0,30}"\s{0,20}\w\s{0,20}"\)\s{0,30}\.?\s{0,30})+"\(\\\\"\w+\\\\"\s{0,30},\s{0,30}"\s{0,30}\.\s{0,30}\$\w+\(\s{0,30}\$\w+\(\s{0,30}"\d+"\s{0,30},\s{0,30}\$\w+\(\s{0,30}"\s{0,20}"\)\s{0,30},\s{0,30}"[\d\w=]+"\)\s{0,30}\)\s{0,30}\.\s{0,30}"\s{0,30}\)\s{0,30};"\)\s{0,30};\s{0,30}\$\w+\s{0,30}=\s{0,30}\$\w+\(\w+\)\s{0,30};\s{0,30}\$\w+\(\s{0,30}(?:\$\w+\(\s{0,30}"\s{0,30}[?>]\s{0,30}"\)\s{0,30}\.\s{0,30})+(\$\w+)\(\s{0,30}(\$\w+)\(\s{0,30}(\$\w+),\s{0,30}(\$\w+)\(\s{0,30}"\s{0,30}"\)\s{0,30},\s{0,30}(\$\w+)\(\s{0,30}"([()\w@|*#\[\]&\/\+=]+)"\s{0,30},\s{0,30}(\$\w+),\s{0,30}(\$\w+)\)\s{0,30}\)\)\s{0,30}\)\s{0,30};\s{0,30}\$\w+\s?=\s?\d+\s?;\s{0,30}\?>~msi',
            'id'   => 'tinkleShell',
        ],
        [
            'full' => '~(?:\$\w+="\w+";)+(\$\w+)="([\w_)(;\/\.*]+)";\$\w+="\w+";function\s(\w+)\((?:\$\w+,?){3}\){return\s?""(?:\.\$\w+\.""){3};}(?:\$\w+=(?:(?:"\w+")|(?:\3\((?:\1\[\d+\],?\.?)+\))|(?:(?:\3\()+(?:\$\w+\,?(?:\)\,)?)+)(?:(?:(?:\3\()+)*(?:(?:\$\w+,?)+)*(?:\),)*(?:\)*))+);)+\$\w+=\3\((?:\1\[\d+\]\.?)+(?:,"")+\);(?:\$\w+=\3\(\3\(\$\w+,\$\w+,\$\w+\),\3\((?:\$\w+,?)+\),\3\(\$\w+,\3\(\$\w+,\$\w+,""\),\$\w+\)\)\."\'(?<str>[\w\/\+]+)\'")\.\3\((?:\1\[\d+\],?\.?)+\);\$\w+\(\$\w+,array\("","}"\.\$\w+\."\/+"\)\);~msi',
            'id'   => 'wsoFunc',
        ],
        [
            'full' => '~\$\w+\[\'\w+\'\]\s?=\s?"[\w;\/\.*)(]+";\s?\$\w+\[\'\w+\'\]\s?=\s?(?:\$\w+\[\'\w+\'\]\[\d+\]\.?)+;\s?\$\w+\s?=\s?(?:"[\w()]*"\.chr\([\d-]+\)\.?)+"\(";\s?\$\w+\s?=\s?"[)\\\\\w;]+";\s?\$\w+\s?=\s?\$\w+\."\'(?<str>[\w\/\+]+)\'"\.\$\w+;\s?\$\w+\[\'\w+\'\]\((?:\$\w+\[\'\w+\'\]\[\d+\]\.?)+,\s?\$\w+\s?,"\d+"\);~msi',
            'id'   => 'wsoFunc',
        ],
        [
            'full' => '~function\s(\w+)\((\$\w+)\)\s{0,50}{\s{0,50}\2=gzinflate\(base64_decode\(\2\)\);\s{0,50}for\((\$\w+)=\d+;\3<strlen\(\2\);\3\+\+\)\s{0,50}{\s{0,50}\2\[\3\]\s?=\s?chr\(ord\(\2\[\3\]\)-(\d+)\);\s{0,50}}\s{0,50}return\s?\2;\s{0,50}}\s{0,50}eval\(\1\([\'"]([\w\+\/=]+)[\'"]\)\);~msi',
            'id'   => 'evalWanFunc',
        ],
        [
            'full' => '~(?:(?:if\s?\(file_exists\("\w+"\)\)\s?{\s?}\s?else\s?{\s?)?\$\w+\s?=\s?fopen\([\'"][^\'"]+\.php[\'"],\s?[\'"]w[\'"]\);)?\s?(\$\w+)\s?=\s?(?:base64_decode\()?[\'"]([^\'"]+)[\'"]\)?;\s?(?:\$\w{1,50}\s?=\s?fopen\([\'"][^\'"]+[\'"],\s?[\'"]\w[\'"]\);\s?)?(?:echo\s?)?fwrite\(\$\w{1,50}\s?,(?:base64_decode\()?\$\w{1,50}\)?\);\s?fclose\(\$\w{1,50}\);\s?}?~msi',
            'id'   => 'funcFile',
        ],
        [
                'full' => '~(\$(?:GLOBALS\[\')?\w+(?:\'\])?\s{0,100}=\s{0,100}array\(\s{0,100}(?:\s{0,100}\'[^\']+\'\s{0,100}=>\s{0,100}\'?[^\']+\'?,\s{0,100})+\s{0,100}\);\s{0,100}((?:\$\w+=(?:[\'"][^\'"]*[\'"]\.?)+;)+)?(?:if\(!\$?\w+\((?:\'\w*\'\.?|\$\w+)+\)\){function\s{0,100}\w+\(\$\w+\){.*?else{function\s{0,100}\w+\(\$\w+\){.*?return\s{0,100}\$\w+\(\$\w+\);\s?}}){2})\$\w+=(?:\'\w*\'\.?)+;\s?(\$\w+)\s{0,100}=\s{0,100}@?\$\w+\(\'\$\w+\',(?:\$\w+\.\'\(.\.\$\w+\.(?:\'[\w(\$);]*\'\.?)+\)|(?:\'[^\']+\'\.?)+\));.*?\3\([\'"]([^"\']+)[\'"]\);~msi',
            'id'   => 'gulf',
        ],
        [
            'full' => '~(\$\w+)=(\w+);\$\w+="(.+?)";(?:\$\w+=\$\w+;)?(\$\w+)=strlen\(\$\w+\);(\$\w+)=[\'"]{2};for\((\$\w+)=\d+;\6<\4;\6\+\+\)\s?\5\s?\.=\s?chr\(ord\(\$\w+\[\6\]\)\s?\^\s?\1\);eval\("\?>"\.\5\."<\?"\);~msi',
            'id'   => 'evalConcatAsciiChars',
        ],
        [
            'full' => '~(?:\$\w+="[\w=]+";\s?)+(\$\w+)\s?=\s?str_replace\((?:"\w*",?)+\);\s?(\$\w+)\s?=\s?\1\((?:"\w*",?\s?)+\);\s?(\$\w+)\s?=\s?\1\((?:"\w*",?)+\);\s?(\$\w+)\s?=\s?\3\("",\s?(\2\(\2\((\1\("([#;*,\.]+)",\s?"",\s?((?:\$\w+\.?)+)\))\)\))\);\s?\4\(\);~msi',
            'id'   => 'evalPost',
        ],
        [
            'full' => '~\$\w+\s?=\s?"e\/\*\.\/";\spreg_replace\(strrev\(\$\w+\),"([\\\\\w]+)\'([\w\/\+=]+)\'([\\\\\w]+)","\."\);~msi',
            'id'   => 'evalPregStr',
        ],
        [
            'full' => '~\$GLOBALS\[\'\w+\'\]=array\(\'preg_re\'\s?\.\'place\'\);\s?function\s\w+\(\$\w+\)\s?{\$\w+=array\("\/\.\*\/e","([\\\\\w]+)\'([\w\/\+]+)\'([\\\\\w]+)","{2}\);\s?return\s\$\w+\[\$\w+\];}\s?\$GLOBALS\[\'\w+\'\]\[\d+\]\(\w+\(\d+\),\w+\(\d+\),\w+\(\d+\)\);~msi',
            'id'   => 'evalPregStr',
        ],
        [
            'full' => '~class\s?\w+{\s?function\s?__destruct\(\){\s?\$this->\w+\(\'([\w&]+)\'\^"([\\\\\w]+)",array\(\(\'([#\w]+)\'\^"([\\\\\w]+)"\)\."\(base64_decode\(\'([\w\+\/=]+)\'\)\);"\)\);\s?}\s?function\s?\w+\(\$\w+,\$\w+\){\s?@array_map\(\$\w+,\$\w+\);\s?}\s?}\s?\$\w+\s?=\s?new\s?\w+\(\);~msi',
            'id'   => 'classDestructFunc',
        ],
        [
            'full' => '~\$\w+="([\\\\\w]+)";\s?\$\w+=\$\w+\(\'([\w\+\/=]+)\'\);\s?\$\w+\s?=\s?"([\\\\\w]+)";\s?\$\w+\s?=\s?\$\w+\([\'"]{2}.\s?eval\(\$\w+\)\);\s?\$\w+\([\'"]{2}\);~msi',
            'id'   => 'createFuncEval',
        ],
        [
            'full' => '~((\$\w+)="([\w-]+)";\s*(?:\$\w+=\'\d+\';\s*)*\s*((?:\$\w+=(?:\2{\d+}\.?)+;)+)+)(?:header[^\)]+\);)?(?:\$\w+=)?(\$\{"[GLOBALSx0-9a-f\\\\]+"})(.+?((.+?\5).+?)+)"[^"]+"\]\(\);~msi',
            'id'   => 'dictionaryCreateFuncs',
        ],
        [
            'full' => '~(\$\w+)\s?=\s?"([\w\s=]+)";\s?(\$\w+)\s?=\s?array\(((?:\d+,?\s?)+)\);\s?(\$\w+)\s?=\s?array\(((?:"[\w\d\s\/\.]+",?\s?)+)\);\s?(\$\w+)\s?=\s?\'\';\s?(?:\$\w+\s=(?:\s?\5\[\d+\]\s?\.?)+;\s?)+(\$\w+)\s?=\s?\$\w+\("\\\\r\\\\n",\s?\1\);\s?for\((\$\w+)=0;\9\s?<\s?sizeof\(\8\);\9\+\+\){\s?\7\s\.=\s?\$\w+\(\8\[\9\]\);\s?}\s?\1\s?=\s?\7;\s?(\$\w+)\s?=\s?\3;\s?(\$\w+)\s?=\s?"";\s?for\((\$\w+)=0;\s?\12<sizeof\(\10\);\s?\12\+=2\){\s?if\(\12\s?%\s?4\){\s?\11\.=\s?substr\(\1,\10\[\12\],\10\[\12\+1\]\);\s?}else{\s?\11\.=strrev\(substr\(\1,\10\[\12\],\10\[\12\+1\]\)\);\s?}\s?};\s?\1\s?=\s?\$\w+\(\11\);\s(\$\w+)\s?=\s?array\(\);\s?(\$\w+)\s?=\s?(?:\5\[\d+\]\s?\.?\s?;?)+;\s?(\$\w+)\s?=\s?(?:\5\[\d+\]\s?\.?\s?)+;\s?(\$\w+)\s?=\s?\'\';\s?for\((\$\w+)=0;\s?\17<strlen\(\1\);\s?\17\+=32\){\s?\13\[\]\s?=\s?substr\(\1,\s?\17,\s?32\);\s?}\s?(?:\$\w+\s?=\s?(?:\5\[\d+\]\s?\.?\s?)+;\s)+\$\w+\s?=\s?\'\';\s?\$\w+\s?=\s?\(\$\w+\(\$\w+\(\$\w+\)\)\)\s?%\s?sizeof\(\$\w+\);\s?\$\w+\s?=\s?\$\w+\[\$\w+\];\s?(\$\w+)\s?=\s?(?:\5\[\d+\]\s?\.?\s?)+;(\s?\18\s?=\s?\$_POST\[\18\];\s?(\14\s?=\s?\15\(\$_COOKIE\[\14\]\);)\s?\$\w+\s?=\s?\5\[\d+\]\s?\.\s?\5\[\d+\];\s?(eval\(\$\w+\(\18\)\);)\s?if\(!\16\){\s?((?:\$\w+\s?=\s?(?:\5\[\d+\]\s?\.?\s?)+;\s)+)(\$\w+\(\$\w+\);\s?echo\(\$\w+\);)\s?})~msi',
            'fast' => '~(\s?(\$\w+)\s?=\s?\$_POST\[\2\];\s?((\$\w+)\s?=\s?\$\w+\(\$_COOKIE\[\4\]\);)\s?(\$\w+)\s?=\s?(\$\w+)\[\d+\]\s?\.\s?\6\[\d+\];\s?(eval\(\$\w+\(\2\)\);)\s?if\(!\5\){\s?((?:\$\w+\s?=\s?(?:\6\[\d+\]\s?\.?\s?)+;\s)+)(\$\w+\(\$\w+\);\s?echo\(\$\w+\);)\s?})~msi',
            'id'   => 'evalPostDictionary',
        ],
        [
            'full' => '~(\$\w)\s?=\s?str_rot13\("([^"]+)"\);preg_replace\("//e","\1",""\);~msi',
            'id'   => 'strrotPregReplaceEval',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*[^\']+\'([^\']+)\';\s*(\$\w+)\s*=\s*\'([^\']+)\';\s*if\(!file_exists\(\$file\)+\{\s*@file_put_contents\(\1,base64_decode\(base64_decode\(\3\)+;\s*\}\s*\@include\s*\$file;~msi',
            'id'   => 'dropInclude',
        ],
        [
            'full' => '~(?(DEFINE)(?\'c\'(?:/\*[^/]*/?\*/)*))(?&c)@?(eval|echo|(\$\w+)\s*=\s*create_function)(?:\/\*+\/)?\s*(?&c)\((?&c)(\'\',)?\s*([\'"?>.\s]+)?\s*\(?\s*@?\s*((?&c)base64_decode(?&c)\s*\((?&c)|(?&c)pack(?&c)\s*\(\'H\*\',|(?&c)convert_uudecode(?&c)\s*\(|(?&c)htmlspecialchars_decode(?&c)\s*\(|(?&c)stripslashes(?&c)\s*\(|(?&c)gzinflate(?&c)\s*\(|(?&c)strrev(?&c)\s*\(|(?&c)str_rot13(?&c)\s*\(|(?&c)gzuncompress(?&c)\s*\(|(?&c)urldecode(?&c)\s*\(|(?&c)rawurldecode(?&c)\s*\(|(?&c)eval(?&c)\s*\()+.*?[^\'")]+(?&c)(((?&c)\s*(?&c)\.?(?&c)[\'"]((?&c)[^\'";]+(?&c)[\'"](?&c)*\s*)+(?&c))?(?&c)\s*[\'"\);]+(?&c))+(?&c)(\s*\2\(\);(?&c))?~msi',
            'id'   => 'evalComments',
        ],
        [
            'full' => '~\@?error_reporting\(0\);\@?set_time_limit\(0\);(?:\s*rename\([^;]+;)?\s*(\$\w+)="([^"]+)";\s*\1=\@?urldecode\(\1\);\1=\@?strrev\(\1\);\@?eval\(\1\);~msi',
            'id'   => 'strrevUrldecodeEval',
        ],
        [
            'full' => '~(\$\w+\s*=\s*"\w+";\s*\@?error_reporting\(E_ERROR\);\s*\@?ini_set\(\'display_errors\',\'Off\'\);\s*\@?ini_set\(\'max_execution_time\',\d+\);\s*header\("[^"]+"\);\s*)?(\$\w+)\s*=\s*"([^"]+)";\s*(\$\w+)\s*=\s*pack\("H\*",str_rot13\(\2\)+;\s*(?:eval\(\4\);|(\$\w+)=\$\w+\(\'\',\4\);\s*\5\(\);)~msi',
            'id'   => 'evalPackStrrot',
        ],
        [
            'full' => '~\$\w+\s*=\s*\d+;\s*function\s*(\w+)\(\$\w+,\s*\$\w+\)\{\$\w+\s*=\s*\'\';\s*for[^{]+\{([^}]+\}){2}\s*\$\w{1,40}\s*=\s*((\'[^\']+\'\s*\.?\s*)+);\s*\$\w+\s*=\s*Array\(((\'\w\'=>\'\w\',?\s*)+)\);\s*eval(?:/\*[^/]\*/)*\(\1\(\$\w+,\s*\$\w+\)+;~msi',
            'id'   => 'urlDecodeTable',
        ],
        [
            'full' => '~((?:\$\w+=\'\w\';)+)((?:\$\w+=(\$\w+\.?)+;)+)eval\((\$\w+\()+\'([^\']+)\'\)+;~msi',
            'id'   => 'evalVarChar',
        ],
        [
            'full' => '~(\$\w+\s*=\s*(base64_decode\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|htmlspecialchars_decode\s*\()+"([^"]+)"\);)\s*eval\("?(\$\w+)"?\);~msi',
            'id'   => 'evalVarFunc',
        ],
        [
            'full' => '~((?:\$\w+\s*=\s*("[\w=+/\\\\]+");\s*)+)(eval\((\$\w+\(+)+(\$\w+)\)+);~msi',
            'id'   => 'evalVarsFuncs',
        ],
        [
            'full' => '~<\?php\s*(?:/\*[^=\$\{\}/]{10,499}[^\*\$\(;\}\{=]{1,99}\*/\s*)?(\$[^\w=(,${)}]{0,50})=\'(\w{0,50})\';((?:\$[^\w=(,${)}]{0,50}=(?:\1{\d+}\.?){0,50};){1,20})(\$[^=]{0,50}=\$[^\w=(,${)}]{1,50}\(\$[^\w=(,${)}]{1,50}\(\'\\\\{2}\',\'/\',__FILE__\)\);(?:\$[^\w=(,${)}]{0,50}=\$[^\w=(,${)}]{0,50}\(\$[^\w=(,${)}]{0,50}\);){2}\$[^\w=(,${)}]{0,50}=\$[^\w=(,${)}]{0,50}\(\'\',\$[^\w=(,${)}]{0,50}\)\.\$[^\(]{0,50}\(\$[^\w=(,${)}]{0,50},\d+,\$[^\w=(,${)}]{0,50}\(\$[^\w=(,${)}]{0,50},\'@ev\'\)\);\$[^\w=(,${)}]{0,50}=\$[^\(]{0,50}\(\$[^\w=(,${)}]{0,50}\);\$[^\w=(,${)}]{0,50}=\$[^\w=(,${)}=]{0,50}=\$[^\w=(,${)}]{0,50}=NULL;@eval\(\$[^\w=(,${)}]{0,50}\(\$[^\w=(,${)}(]{0,50}\(\$[^\w=(,${)}]{0,50},\'\',\$[^\w=(,${)}]{0,50}\(\'([^\']{0,500})\',\'([^\']{0,500})\',\'([^\']{0,500})\'\){4};)unset\((?:\$[^,]{0,50},?){0,20};return;\?>.+~msi',
            'id'   => 'evalFileContent',
        ],
        [
            'full' => '~echo\s{0,50}"(\\\\\${\\\\x\d{2}(?:[^"]+(?:\\\\")*)*[^"]+)";~msi',
            'id'   => 'echoEscapedStr',
        ],
        [
            'full' => '~file_put_contents\(\$\w+\[[\'"]\w+[\'"]\]\.[\'"][/\w]+\.php[\'"],(base64_decode\([\'"]([\w=]+)[\'"]\))\)~msi',
            'id'   => 'filePutDecodedContents',
        ],
        [
            'full' => '~eval\(implode\(array_map\([\'"](\w+)[\'"],str_split\([\'"]([^\'"]+)[\'"]\)\)\)\);~msi',
            'id'   => 'evalImplodedArrStr',
        ],
        [
            'full' => '~(\$\w+)\s?=\s?\'(.*?NULL\);)\';\s*(\$\w+)\s?=\s?[\'"]([\w\\\\]+)[\'"];\s?\3\([\'"]/\(\.\*\)/e[\'"],\s?[\'"]([\w\\\\]+)[\'"],\s?NULL\);~msi',
            'id'   => 'pregReplaceCodeContent',
        ],
        [
            'full' => '~((?:\$\w+\s*\.?=\s*"[^"]*";\s*)+)(\$\w+)\s*=\s*str_replace\(\s*"([^"]+)",\s*"",\s*\$\w+\s*\);\s*(\$\w+)\s*=\s*str_replace\(\s*"([^"]+)",\s*"",\s*"([^"]+)"\s*\);\s*(\$\w+)\s*=\s*\4\(\s*\2\s*\);\s*\7\s*=\s*"[^"]+\7";\s*eval\(\s*\7\s*\);~msi',
            'id'   => 'concatVarsReplaceEval',
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?file_get_contents\(__FILE__\);\s?\1\s?=\s?base64_decode\(substr\(\1,\s?([+-]\d+)\)\);\s*\1\s?=\s?gzuncompress\(\1\);\s*eval\(\1\);\s*die\(\);\?>\s*([^"\']+)~msi',
            'fast' => '~\$\w{1,50}\s?=\s?file_get_contents\(__FILE__\);\s?\$\w{1,50}\s?=\s?base64_decode\(substr\(\$\w{1,50},\s?([+-]\d+)\)\);\s*\$\w{1,50}\s?=\s?gzuncompress\(\$\w{1,50}\);\s*eval\(\$\w{1,50}\);\s*die\(\);\?>\s*([^"\']+)~msi',
            'id' => 'decodeFileContent',
        ],
        [
            'full' => '~((\$\w+\s*=\s*\(?(base64_decode\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|htmlspecialchars_decode\s*\()*((?:"([^"]+)";\s*)|(?:\$\w+)\)*;\s*))+)(eval\("?(\$\w+)"?\);)~msi',
            'id'   => 'evalVarFunc2',
        ],
        [
            'full' => '~((\$\w+)\s*=\s*"([^"]+)";)\s*((\$\w+)\s*=\s*array\(((\s*\d+,?)+)\);)\s*((\$\w+)\s*=\s*array\(((\s*"[^"]+",?)+)\);)\s*(\$\w+)\s*=\s*\'\';(\s*\$\w+\s*=\s*(?:\9\[\d+\]\s*\.?\s*)+;)+(.+?(\s*\$\w+\s*=\s*\w+\((?:\9\[\d+\]\s*\.?\s*)+)\);\s*eval\(\$\w+\);\s*\})~msi',
            'fast' => '~((\s*(\$\w+)\s*=\s*\w+\((\$\w+)\[\d+\]\s*\.\s*(?:\4\[\d+\]\s*\.?\s*)+)\);\s*eval\(\3\);\s*\})~msi',
            'id'   => 'evalArrays',
        ],
        [
            'full' => '~\$\w+\s?=\s?preg_replace\([\'"]/([^\'"/]+)/\w{0,2}[\'"],[\'"]([^\'"]+)[\'"],[\'"]{2}\);~msi',
            'id'   => 'pregReplaceVar',
        ],
        [
            'full' => '~function\s(\w+)\((\$\w+),\s?(\$\w+)\){\s?(\$\w+)=[\'"]{2};\s?for\(\$\w+=0;\$\w+<strlen\(\2\);\)\s?for\(\$\w+=0;\$\w+<strlen\(\3\);\$\w+\+\+,\s?\$\w+\+\+\)\s?\4\s?\.=\s?\2{\$\w+}\s?\^\s?\3{\$\w+};\s?return\s?\4;\s?};eval\(\1\(base64_decode\([\'"]([^\'"]+)[\'"]\),[\'"]([^\'"]+)[\'"]\)\);~msi',
            'id'   => 'evalFuncTwoArgs',
        ],
        [
            'full' => '~function\s(\w+)\(\$\w+\)\s?{\s?\$\w+\s?=\s?[\'"]{2};\s?unset\(\$\w+\);\s?\$\w+\s?=\s?[\'"]([^\'"]+)[\'"];\s?\$\w+\s?=\s?preg_replace\("/([^"]+)/",\s?[\'"]{2},\s?\$\w+\);\s?\$\w+\s?=\s?(?:(?:[\'"]\w+[\'"]|\$\w+)\.?)+;\s?\$\w+\s?=\s?\$\w+\([\'"]\$\w+[\'"],\s?\$\w+\);\s?@?\$\w+\(\$\w+\);\s?}\s?function\s?(\w+)\(\$\w+\)\s?{\s?\$\w+\s?=\s?[\'"](.*?)[\'"];\s?\$\w+\s?=\s?preg_replace\("/([^\'"]+)/",\s?[\'"]{2},\s?\$\w+\);\s?return\s?\$\w+\(\$\w+\);\s?}\s?\1\(\4\(\s?join\([\'"]([^\'"]+)[\'"],\s?array\(((?:[\'"][^\'"]+[\'"][,\s]*)+)\)+;~msi',
            'id'   => 'evalPregReplaceFuncs',
        ],
        [
            'full' => '~error_reporting\(0\);((?:\$\w+=\'[^;]+;)+)error_reporting\(0\);((?:\$\w+=\$\w+\(\$\w+\(\'([^\']+)\'\)\);)+\$\w+=(?:\$\w+\()+\'([^\']+)\'\)+\.(?:\$\w+\()+\'([^\']+)\'\)+;\$\w+=(?:\$\w+\()+\'([^\']+)\'\)+;\$\w+=(?:\$\w+\()+"\\\\n",\s*\'\',\s*\'([^\']+)\'\)+;(?:[^}]+\})+}\s*echo\s*(?:\$\w+\()+\'([^\']+)\'\)+);exit;~msi',
            'id'   => 'urlMd5Passwd',
        ],
        [
            'full' => '~((?:\$\w+\s?=\s?\'(?:[^\']+)\';\s?)+)((?:\$\w+\s?=\s?(?:\$\w+(?:\[[\'"]?\d+[\'"]?\])?\s?\.?\s?)+;)+\$\w+\s?=\s?\$\w+\s?\(\$\w+,(?:\$\w+(?:\[[\'"]?\d+[\'"]?\])?\s?\.?\s?)+\);\s*\$\w+\(\$\w+,(?:\$\w+(?:\[[\'"]?\d+[\'"]?\])?\s?[.,]?\s?)+\);)~msi',
            'fast' => '~((?:\$\w+\s?=\s?(?:\$\w+(?:\[[\'"]?\d+[\'"]?\])?\s?\.?\s?)+;)+\$\w+\s?=\s?\$\w+\s?\(\$\w+,(?:\$\w+(?:\[[\'"]?\d+[\'"]?\])?\s?\.?\s?)+\);\s*\$\w+\(\$\w+,(?:\$\w+(?:\[[\'"]?\d+[\'"]?\])?\s?[.,]?\s?)+\);)~msi',
            'id'   => 'ManyDictionaryVars',
        ],
        [
            'full' => '~function\s(\w+)\(\$\w+\)\s?{\s?\$\w+\s?=\s?(?:[\'"][\\\\\w]+[\'"]\(\d+\s?[-+]\s?\d+\)\s?\.?\s?)+;\s?(?:\$\w+\s?=\s?\$\w+\([\'"](?:edoced_46esab|etalfnizg|ecalper_rts)[\'"]\);\s?)+\$\w+\s?=\s?\$\w+\(array\(((?:\s?"[^"]+",?)+)\),\s?[\'"]{2},\s?\$\w+\);\s?return\s?(?:\$\w+\(){2}\$\w+\)\);\s?}\s?(\$\w+\s?=\s?[\'"]\w+[\'"];)?\s?ob_start\(\);\s?\?>(.*?)<\?php\s?\$\w+\s?=\s?ob_get_clean\(\);\s?eval\(\1\(\$\w+\)\);\s?\?>~msi',
            'id'   => 'evalBuffer',
        ],
        [
            'full' => '~((?:\$\w+\s?=\s?[\'"]\w*[\'"];\s?){0,50}(\$\w+)\s?=\s?[\'"]([^\'"]+)[\'"];(?:\$\w+\s?\.?=\s?(?:\$\w+{\d+}\.?)+;)+)\s?(eval\((\$\w+)\([\'"]([^\'"]+)[\'"]\)\);)~msi',
            'id' => 'evalDictionaryVars',
        ],
        [
            'full' => '~\$\w+\s?=\s?[\'"]([^\'"]+)[\'"];(?:\$\w+\s?=\s?base64_decode\([\'"][^\'"]+[\'"]\);)+\$\w+\s?=\s?\$\w+\(\$\w+\(\$\w+\)\);\$\w+\s?=\s?\$\w+\(\$\w+\);(\$\w+)\s?=\s?[\'"]{2};for\(\$\w+\s?=\s?0\s?;\s?\$\w+\s?<\s?\$\w+\s?;\s?\$\w+\+\+\){\2\s?\.=\s?\$\w+\(\(\$\w+\(\$\w+\[\$\w+\]\)\^(\d+)\)\);}eval\(\2\);return;~msi',
            'id' => 'evalFuncXored',
        ],
        [
            'full' => '~[\'"]-;-[\'"];(.*?\(\'\\\\\\\\\',\'/\',__FILE__\)\);.*?,[\'"];[\'"]\),[\'"]"[\'"]\);.*?)[\'"]-;-[\'"];((\$\w+)=[\'"]([^\'"]+)[\'"];.*?\$\w+\s?\.\s?\3,\s?[\'"]([^\'"]+)[\'"],\s?[\'"]([^\'"]+)[\'"]\)\)\).*?)[\'"]-;-[\'"];(.*?)[\'"]-;-[\'"];~msi',
            'id' => 'evalFuncExplodedContent',
        ],
        [
            'full' => '~(\$\w{0,100}\s?=\s?(?:chr\(\w{1,10}\)\s?\.?\s?){1,100};\s?(?:\$\w{0,100}\s?=\s?(?:\s?(?:[\'"][\\\\\w]{1,10}[\'"]|[\d\.]{1,5}\s[*\+\-\.]\s\d{1,5})\s?\.?)+?;\s?){1,10}(?:\$\w{0,100}\s?=\s?(?:chr\(\w{1,10}\)\s?\.?){1,100};)?\s?\$\w{1,50}\s?=\s?\$\w{1,50}\(\$\w{1,50}\((?:[\'"][^\'"]{1,500}[\'"]\s?\.?\s?)+\),\s?(?:[\'"][^\'"]{1,500}[\'"]\s?\.?\s?)+,\s?substr\(hash\([\'"]SHA256[\'"],(?:\s?[\'"]\d{1,15}[\'"]\s?\.?){2},\s?true\),\s?(\d{1,10}),\s?(\d{1,10})\),\s?OPENSSL_RAW_DATA,\s?\$\w{1,50}\);.*?)(\$\w{1,50})\s?=\s?\$\w{1,50}\([\'"]([^\'"]+)[\'"],\s*[\'"]{2},\s*[\'"]([^\'"]+)[\'"]\);\s?return\s?@eval\(((?:\$\w{1,50}\s?\()+\$\w{1,50}(?:\)\s?)+);\s?exit;~msi',
            'id' => 'evalEncryptedVars',
        ],
        [
            'full' => '~function\s(\w+)\((\$\w+),\s*(\$\w+)[^)]+\)\s*\{\s*\$\w+\s*=\s*\2;\s*\$\w+\s*=\s*\'\';\s*for\s*\(\$\w+\s*=\s*0;\s*\$\w+\s*<\s*strlen\(\$\w+\);\)\s*{\s*for\s*\(\$\w+\s*=\s*0;\s*\$\w+\s*<\s*strlen\(\3\)\s*&&\s*\$\w+\s*<\s*strlen\(\$\w+\);\s*\$\w+\+\+,\s*\$\w+\+\+\)\s*{\s*\$\w+\s*\.=\s*\$\w+\[\$\w+\]\s*\^\s*\3\[\$\w+\];\s*}\s*}\s*return \$\w+;\s*}\s*\$\w+\s*=\s*["\'][^"\']+[\'"];\s*\$\w+\s*=\s*[\'"]([^\'"]+)["\'];\s*(?:\$\w+\s*=\s*["\']+;\s*)+(?:foreach[^{]+{[^}]+}\s*)+(\$\w+)\s*=\s*\$\w+\([create_funion\'. "]+\);\s*(\$\w+)\s*=\s*\5\(["\'][^"\']*[\'"],\s*\$\w+\(\1\(\$\w+\(\$\w+\),\s*["\']([^\'"]+)["\']\)+;\s*\6\(\);~msi',
            'id' => 'xoredKey',
        ],
        [
            'full' => '~(\$\w+)=str_rot13\(\'[^\']+\'\);(\$\w+)=str_rot13\(strrev\(\'[^\']+\'\)\);(\s*eval\(\1\(\2\(\'([^\']+)\'\)+;)+~msi',
            'id' => 'evalGzB64',
        ],
        [
            'full' => '~(function\s*(_\d+)\((\$\w+)\)\s*{(\$\w+)=Array\(\'[^)]+\'\);return\s*base64_decode\(\4\[\3\]\);\})(.+?\2\(\d+\))+[^;]+;exit;~msi',
            'id' => 'evalArrayB64',
        ],
        [
            'full' => '~http_response_code\(\d{1,3}\);function\s?(\w{1,100})\(\$\w{1,50}\){if\s?\(empty\(\$\w{1,50}\)\)\s?return;\$\w{1,50}\s?=\s?"[^"]{1,500}";(?:(?:\$\w{1,50}\s?=\s?[\'"]{0,2}){1,4};){1,2}\$\w{1,50}\s?=\s?0;\$\w{1,50}\s?=\s?"";\$\w{1,50}\s?=\s?preg_replace\("[^"]{1,50}",\s?"",\s?\$\w{1,50}\);do{.*?while\s?\(\$\w{1,50}\s?<\s?strlen\(\$\w{1,50}\)\);return\s?\$\w{1,50};}eval\(\1\(hex2bin\("(\w{1,30000})"\)\)\);~msi',
            'id' => 'evalFuncBinary',
        ],
        [
            'full' => '~(\$\w{1,50}\s?=\s?\'\w{1,500}\';){1,5}\$\w{1,50}\s?=\s?(?:\$\w{1,50}\.?){1,10};\$\w{1,50}=\$\w{1,50}\([\'"]H\*[\'"],[\'"](\w{1,200})[\'"]\);\s?\$\w{1,50}\("[^"]{1,100}","(\\\\x[^\']{1,500})(\'[^\']{1,50000}\')\\\\x[^"]{1,50}",[\'"]{2}\);~msi',
            'id' => 'evalPackFuncs',
        ],
        [
            'full' => '~parse_str\s*\(((?:\s?\'[^\,]+\'\s?\.?\s?){1,500}),\s?(\$\w{1,50})\s?\)\s?;\s?@?((?:eval\s?\()?\s?\2\s?\[\s?\d{1,5}\s?\]\s?\(\s?\2\s?\[\s?\d{1,5}\s?\]\s?(?:,\s?array\s?\(\s?\)\s?,\s?array\s?\(\s?\'([^\']{1,10})\'\s?\.(\$\w{1,50}\s?\[\s?\d\s?\]\s?\(\s?\$\w{1,50}\s?\[\s?\d\s?\]\s?\(\s?\$\w{1,50}\s?\[\s?\d{1,2}\s?\]\s?\()|\(\2\[\s?\d{1,5}\s?\]\s?\())\s?(\'[^\']+\'\s?)(\)\s*)?\)\s*\)\s*\.\s?\'([^\']{1,10})\'\s?\)\s?\)\s?;~msi',
            'id' => 'parseStrFunc',
        ],
        [
            'full' => '~eval\("\\\\(\$\w+)=(gz[^\)]+\)\);)"\);eval\("\?>"\.\1\);~msi',
            'id' => 'evalGzinflate',
        ],
        [
            'full' => '~function\s?(\w{1,50})\(\$\w{1,50}\)\s?{\s?(\$\w{1,50})\s?=\s?\("([^"]{1,500})"\);\s?(?:\$\w{1,50}\s?=\s?(?:"[^"]+"|\$\w{1,50}|[\'"]{2});\s?)+for\(\$\w{1,50}\s?=\s?0;\s?\$\w{1,50}<strlen\(\$\w{1,50}\);\s?\)\s?{\s?for\(\$\w{1,50}\s?=\s?0;\s?\(\$\w{1,50}<strlen\(\2\)\s?&&\s?\$\w{1,50}<strlen\(\$\w{1,50}\)\);\s?\$\w{1,50}\+\+,\$\w{1,50}\+\+\){\s?(?:\$\w{1,50}\s?=\s?"[^"]+";\s?){1,2}\$\w{1,50}\s?\.=\s?\$\w{1,50}{\$\w{1,50}}\s?\^\s?\$\w{1,50}{\$\w{1,50}};\s?\$\w{1,50}\s?=\s?"[^"]+";\s?}\s?}\s?return\s?\$\w{1,50};\s?}\s?(\$\w{1,50})\s?=\s?preg_replace\("([^"]+)",\s?"",\s?"([^"]+)"\);\s?(?:\s?\$\w{1,50}\s?=\s?(?:"[^"]+"|\w{1,50}\(\$\w{1,50}\("[^"]+"\)\)|\$\w{1,50}\(\)\.\s?\w{1,50}\(\$\w{1,50}\("[^"]+"\)\)|"[^"]+"\s*\.\s*\w+\(\$\w+\("[^"]+"\)\));\s?){1,50}(\$\w{1,50}\(\$\w{1,50},(?:\$\w{1,50}\.?)+\);)\s?(?:\$\w{1,50}\s?=\s?"[^"]+";\s?|include\s?\$\w{1,50};\s){1,50}~msi',
            'id' => 'funcVars',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*"([^"]+)";(?:\$\w+\s*=\s*(?:\1\[\d+\][\.;])+)+@?(?:\$\w+[\(,])+((?:\1\[\d+\][\.;\)])+)\)\),\$\w+\[\d+\],\$\w+\[\d+\]\);~msi',
            'id' => 'dictVars',
        ],
        [
            'full' => '~\$\w{1,50}\s?=\s?(?:\'\'|\.|chr\(\d+\)|\'\w+\')+\s?;\$\w{1,50}\s?=\s?\$\w{1,50}\(\'\',array\(((?:"[^"]+",?)+)\)\);(?:\$\w{1,50}\s?=\s?(?:\'\'|\.|chr\(\d+\)|\'\w+\')+\s?;)+\$\w{1,50}\s?=\s?\$\w{1,50}\(\'\',\$\w{1,50}\(((?:\'[^\']+\'\s?\.?)+)\)\);\$\w{1,50}\(\);\$\w{1,50}\(\$\w{1,50}\(\$\w{1,50}\)\);~msi',
            'id' => 'decodedDoubleStrSet',
        ],
        [
            'full' => '~(\$\w{1,100})=[\'"]([^"\']+)[\'"];(\$\w{1,100}=(?:(?:strrev\("[^"]+"\)|"[^"]+")\.?)+;(\$\w{1,100})\s?=\s?\$\w{1,100}\([\'"]([^"\']+)[\'"]\);\$\w{1,100}=(?:(?:strrev\("[^"]+"\)|"[^"]+")\.?)+;(\$\w{1,100})\s?=\s?\$\w{1,100}\(\'\1\',\$\w{1,100}\);\$\w{1,100}\(\1\);)~msi',
            'fast' => '~(\$\w{1,100})=[\'"]([^"\']+)[\'"];(\$\w{1,100}=(?:(?:strrev\("[^"]+"\)|"[^"]+")\.?)+;(\$\w{1,100})\s?=\s?\$\w{1,100}\([\'"]([^"\']+)[\'"]\);\$\w{1,100}=(?:(?:strrev\("[^"]+"\)|"[^"]+")\.?)+;(\$\w{1,100})\s?=\s?\$\w{1,100}\(\'\$\w{1,100}\',\$\w{1,100}\);\$\w{1,100}\(\$\w{1,100}\);)~msi',
            'id' => 'createFuncStrrev',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*create_function\(\'\$\w+\',strrev\(\'[^\']+\'\)\);\s*\1\(strrev\(\'([^\']+)\'\)\);~msi',
            'id' => 'strrevBase64',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*"([^"]+)";if\(!function_exists\("([^"]+)"\)\){function\s*\3\(\$\w+\)\{\$\w+=(\d+);foreach\(array\(((?:"[0-9a-f]+",?)+)\)as\$\w+=>\$\w+\)[^}]+\}\}\3\(\1\."([^"]+)"\);~msi',
            'id' => 'customDecode',
        ],
        [
            'full' => '~((?:\$\w+\s*=\s*[abcdehnoprstux\._64\'"]+;\s*)+)(\$\w+="?\w+["\(\)]*;\s*)+\$\w+="[^"]+";\s*\$\w+=(\$\w+\("([^"]+)"\);)[^/]+/pre>\';~msi',
            'id' => 'expDoorCode',
        ],
        [
            'full' => '~include\((base64_decode\(\'([^\']+)\'\))\);~msi',
            'id' => 'includeB64',
        ],
        [
            'full' => '~(\$\w+)=strrev\(\'nib2xeh\'\);(\$\w+)=array\(((?:\'[^\']+\',?)+)\);(\$\w+)\s*=\s*\'\';for\s*\(\$\w+\s*=\s*0;\s*\$\w+\s*<\s*\d+;\s*\$\w+\+\+\)\s*\{\4\s*\.=\s*str_replace\(array\(((?:\'([^\']*)\',?)+)\),\s*array\(((?:\'[^\']*\',?)+)\),\s*\2\[\$\w+\]\);\}eval\(\1\(\4\)\);~msi',
            'id' => 'nib2xeh',
        ],
        [
            'full' => '~error_reporting\(0\);\s*\$\w+\s*=\s*"[0-9a-f]{32}";\s*((\$\w+)\s*=\s*((?:\w+\()+)\'([^\']+)\'\)+;\$\w+\s*=\s*"";for\s*\(\$\w+\s*=\s*0;\s*\$\w+\s*<\s*120;\s*\$\w+\+\+\)[^}]+}\$\w+\s*=\s*strlen\(\2\);\$\w+\s*=\s*strlen\(sha1\(hash\(str_rot13\("fun256"\),\s*md5\(\$\w+\)+;for[^}]+}[^}]+}eval\(\$\w+\);)~msi',
            'id' => 'fun256',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*((?:\w+\()+)\'([^\']+)\'\)+;\s*if\s*\(\s*\'\w{40,40}\'\s*==\s*sha1\(\s*\1\s*\)\s*\)\s*{\s*\1\s*=\s*gzinflate\s*\(\s*gzinflate\s*\(\s*base64_decode\(\s*\1\s*\)\s*\)\s*\)\s*;\s*\$\w{1,10}\s*=\s*""\s*;for\s*\([^)]+\)\s*{[^}]+}\s*(?:\s*\$[^;]+;\s*)+for\s*\([^)]+\)\s*{\s*\$[^;]+;\s*if\s*\([^)]+\)\s*{[^}]+}(?:\s*\$[^;]+;\s*)+}\s*eval\s*\(\s*\$\w+\s*\)\s*;\s*}\s*else\s*{[^}]+}~msi',
            'id' => 'fun256',
        ],
        [
            'full' => '~(\$\w+)\s?=\s?\'([^\']+)\';\s?(\$\w+\s?=\s?(?:\1\[\d+\]\.?)+;\s?(?:(?:\$\w+\s?=\s?(?:\$\w+\()+(?:(?:\1\[\d+\])\.?|"[^"]+"\.?)+)\)+;\s?)+)(\$\w+\s?=\s?\$\w+\(\'H\*\',\s?\$\w+\(\'/\[([^]]+)\]\+/\w\',\'\',\s?(\$\w+)\(\1\)\)\);\s?eval\(\$\w+\);)~msi',
            'id' => 'evalPackPreg',
        ],
        [
            'full' => '~((?:\$_\w{1,50}\s?=\s?"[^"]{1,100}";)+)@eval\("\?>"\.(\$_\w{1,50}\((/\*.*?\*\/)\$\w{1,50}\("[^"]+"\)\))\);~msi',
            'id' => 'evalVarWithComment',
        ],
        [
            'full' => '~(?(DEFINE)(?\'s\'((?:chr\([0-9a-fx]+([/\-+\*][0-9a-fx]+)?\)|str_rot13\(\'[^\']+\'\)|base64_decode\(\'[^\']+\'\)|\'[^\']*\')[\.]?)+))(\$\w+)=create_function\(((?P>s)),((?P>s))\);\4\(base64_decode\(((?P>s))\)\);~msi',
            'id' => 'createFuncObf',
        ],
        [
            'full' => '~(\$[\w_]{1,50})\s*=\s*\[\s*base64_decode\s*\(\s*[\'"]([\w=]+)[\'"]\s*\)\s*,\s*([^;]{2,200})\]\s*;\s*(if\s*[^}]+}\s*else\s*{[^}]+}\s*function\s\w+[^}]+})~mis',
            'fast' => '~(\$[\w_]{1,50})\s*=\s*\[\s*base64_decode\s*\(\s*[\'"]([\w=]+)[\'"]\s*\)\s*,\s*([^;]{2,200})\]\s*;\s*(if\s*[^}]+}\s*else\s*{[^}]+}\s*function\s\w+[^}]+})~mis',
            'id' => 'base64Array',
        ],
        [
            'full' => '~(\$[\w]{1,34}\s*=\s*[\'"](?:[\\\\\w]{1,32}\\\[\\\\\w]{1,32})[\'"]\s*;\s*(?:\$[\w]{1,34}\s*=\s*[\'"][^\'"]+[\'"];){1,3})\s*@?eval\s*\(\s*([^;]{0,100})\);~mis',
            'id' => 'simpleVarsAndEval',
        ],
        [
            'full' => '~(if\(defined\(\'PHP_MAJOR_VERSION\'\)[^{]{1,30}{\s*if[^}]+}\s*}\s*.*?if\s*\(\s*!\s*function_exists\s*\(\s*\'nel\'\s*\)\s*\)\s*{\s*)(function\s*nel\s*\(\s*\$i\s*\)\s*{\s*\$[\w]+\s*=\s*array\(([^)]+)\);[^}]+})(.*}\s*exit\s*;\s*}\s*})~mis',
            'id' => 'replaceFuncWithBase64DecodeArray',
        ],
        [
            'full' => '~\$\w{1,50}\s?=\s?(?:\'[^\']+\'\.?)+;\$\w{1,50}\s?=\s?create_function\(\'\$\w{1,50}\',\$\w{1,50}\);((?:\$\w{1,50}\s?=\s?(?:\'[^\']+\'\.?)+;)+)\$\w{1,50}\(((?:\$\w{1,50}\()+"[^"]+"\)+;)~msi',
            'id' => 'createFuncVars',
        ],
        [
            'full' => '~\$\w{1,50}\s?=\s?json_decode\((base64_decode\([\'"][^\'"]+[\'"]\))\);~msi',
            'id' => 'jsonDecodedVar',
        ],
        [
            'full' => '~if\s?\(file_put_contents\(\$\w{1,50}\.[\'"][^\'"]+[\'"],(base64_Decode\([\'"][^\'"]+[\'"]\))\)\)echo\s?[\'"][^\'"]+[\'"];~msi',
            'id' => 'filePutPureEncodedContents',
        ],
        [
            'full' => '~function\s?(\w{1,50})\((\$\w{1,50})\){for\s?\((\$\w{1,50})\s?=\s?0;\s?\3\s?<=\s?strlen\(\2\)-1;\s?\3\+\+\s?\){(\$\w{1,50})\s?\.=\s?\2{strlen\(\2\)-\3-1};}return\(\4\);}((?:eval\(\1\(\'[^\']+\'\)\);)+)~msi',
            'id' => 'evalFuncReverse',
        ],
        [
            'full' => '~function\s?(\w{1,50})\(\$\w{1,50}\)\s?{return\s?base64_decode\(\$\w{1,50}\);}(?:.*?\1\("[^"]+"\))+~msi',
            'fast' => '~function\s?\w{1,50}\(\$\w{1,50}\)\s?{return\s?base64_decode\(\$\w{1,50}\);}(?:.*?\w{1,50}\("[^"]+"\))+~msi',
            'id' => 'base64decodeFuncs',
        ],
        [
            'full' => '~error_reporting\(\s?0\s?\);\s?(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];\s?(\$\w{1,50})\s?=\s?(?:\1\[\d+\]\.?)+;\s?(\$\w{1,50})\s?=\s?eval\s?\(\3\s?\("((?:\\\\x\w{1,50})+)"\s?\([\'"]{1,2}([^"\']+)[\'"]{1,2}\)\)\);\s?create_function\(\'\',\s?\'}\'\.\4\.\'//\'\);~msi',
            'fast' => '~error_reporting\(\s?0\s?\);\s?(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];\s?\$\w{1,50}\s?=\s?(?:\$\w{1,50}\[\d+\]\.?)+;\s?(\$\w{1,50})\s?=\s?eval\s?\(\$\w{1,50}\s?\("((?:\\\\x\w{1,5})+)"\s?\([\'"]{1,2}([^"\']+)[\'"]{1,2}\)\)\);\s?create_function\(\'\',\s?\'}\'\.\$\w{1,50}\.\'//\'\);~msi',
            'id' => 'evalCreateFuncWithDictionaryVar',
        ],
        [
            'full' => '~error_reporting\(\s?0\s?\);\s?(\$\w+)\s?=\s?"([^"]+)";(?:\$\w+\s?=\s?(?:\$\w+\[\d+\]\.?)+;)+function\s\w+\((?:\$\w+,?){5}\){\s*return\s?(?:\$\w+\.?){5};}(?:\$\w+\s?=\s?(?:[\'"][^\'"]*[\'"]\.?)+;)+\$\w+\s?=\s?\w+\((?:\$\w+,?){5}\);(?:\$\w+\s?=\s?(?:[\'"][^\'"]*[\'"]\.?)+;)+function\s(\w+)\((?:\$\w+,?){3}\){\s*return\s?(?:\$\w+\.?){3};}\$\w+\s?=\s?((?:\3\((?:(?:\$\w+|\.?[\'"][^"\']*[\'"]\.?)+,?){3}\)\.)+["\']{1,2}([^"\']+)[\'"]{1,2}\.\$\w+);\$\w+\(\'\',\s?\'}\'\.\$\w+\.\'//\'\);~msi',
            'id' => 'evalCreateFuncWithVars',
        ],
        [
            'full' => '~(?(DEFINE)(?\'v\'(?:\$(?:_GET|GLOBALS)\{\2\}[\{\[][a-fx\d]+[\}\]])))error_reporting\([^)]+\);define\(\'([^\']+)\',\s*\'[^\']+\'\);\$(?:_GET|GLOBALS)\[\2\]\s*=\s*explode\(\'([^\']+)\',\s*gzinflate\(substr\(\'(.*)\',([0-9a-fx]+),\s*([0-9\-]+)\)\)\);(?:.{1,250}(?:(?&v)|curl|\\\\[0-9a-fx]+))+[^;]+;(?:\s*(\$\w+\((?:\$\w+\.?)+\);|eval\(\$\w+\);\s*\}\s*function\s*\w+[^1]+!1\);\s*return\s*curl_exec\(\$\w+\);)?[^;]+;)~msi',
            'id' => 'explodeSubstrGzinflate',
        ],
        [
            'full' => '~error_reporting\([^)]+\);header\([^)]+\);ini_set\([^)]+\);ini_set\([^)]+\);define\(\'PASSWD\',\'[^)]+\);define\(\'VERSION\',\'Bypass[^)]+\);define\(\'THISFILE\'[^;]+;define\(\'THISDIR\',[^;]+;define\(\'ROOTDIR\',[^;]+;(((?:\$\w+=\'[^\']+\';)+)((?:\$\w+=str_replace\(\'[^\']+\',\'\',\'[^\']+\'\);)+)(\$\w+)=\$\w+\(\$\w+\(\'[^\']+\'\),\$\w+\(\'[^\']+\'\)\);\4\(((?:\$\w+\.?)+)\);)~msi',
            'id' => 'base64Vars',
        ],
        [
            'full' => '~function\s*(\w+)\(\$\w+,\$\w+\)\s*\{\$\w+=array\(\);for\(\$\w+=0;\$\w+<256;\$\w+\+\+\)(?:[^}]+}){2}return\s*\$res;\s*}\s*function\s*(\w+)\(\)\s*{(?:[^}]+}){12}(?:\$\w+=(?:chr\([0-9b]+\)\.?)+;)+\2\(\);@?eval\(\$\w+\(\1\(\$\{\'[^\']+\'\.(?:\(\'.\'\^\'.\'\)\.?)+}\[\(\'.\'\^\'.\'\)\.\(\'.\'\^\'.\'\)\],\$\w+\("([^"]+)"\)\)\)\);exit;~msi',
            'id' => 'chr0b',
        ],
        [
            'full' => '~@?error_reporting\(0\);\s*@?ini_set\(\'error_log\',NULL\);\s*@?ini_set\(\'log_errors\',0\);\s*(\$\w+)=strrev\([base64_decode\'\.]+\);(\$\w+)=gzinflate\(\1\(\'([^\']+)\'\)\);\s*create_function\("","}\2//"\);~msi',
            'id' => 'createFuncPlugin',
        ],
        [
            'full' => '~((?:\$\w+\s*=\s*str_replace\("[^"]+",\s*"",\s*"[^"]+"\);\s*)+)\s*(eval\((?:\$\w+\()+\'([^\']+)\'\)+;)~msi',
            'id' => 'strreplaceEval',
        ],
        [
            'full' => '~(\$\w+)\s*\s*=\s*"[a-f0-9]{32,40}";\s*(\$\w+)\s*=\s*"[create_fution".]+;\s*(\$\w+)=@?\2\(\'(\$\w+),(\$\w+)\',\'[eval\'\.]+\("\\\\\1=\\\\"\5\\\\";\?>"[gzinflate\.\']+\(\s*[base64_decode\'\.]+\(\4\)+;\'\);\s*@?\$\w+\("([^"]+)",\1\);~msi',
            'id' => 'hackM19',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*strrev\("[create_funtio"\.\s]+\);\s*(\$\w+)\s*=\s*\1\(\'(\$\w+)\',\s*strrev\(\';\)+\w+\$\([bas64_dcode\'\.\s]+\([bzdecompres\'\.\s]+">\?"\([eval\.\'\s]+\)\);\s*\2\("([^"]+)"\);~msi',
            'id' => 'ev404',
        ],
        [
            'full' => '~class\s+(_\w+)\s*{\s*private\s+static\s*\$\w{1,5}\s*;\s*public\s*static\s*function\s*(\w+)[^}]{1,1000}\s*}\s*private\s*static\s*function\s*\w{1,10}\s*\(\s*\)\s*{self::\$\w{1,5}\s*=\s*array\s*\(\s*([^)]+)\s*\);\s*}\s*}\s*class\s+(_\w+)\s*{\s*private\s+static\s*\$\w{1,5}\s*;\s*public\s*static\s*function\s*(\w+)[^}]{1,1000}\s*}\s*private\s*static\s*function\s*\w{1,10}\s*\(\s*\)\s*{self::\$\w{1,5}\s*=\s*array\s*\(\s*([^)]+)\s*\);\s*}\s*}\s*(.{1,5000}exit\s*;\s*})~mis',
            'id' => 'twoHashFunc',
        ],
        [
            'full' => '~(\s*function\s*(\w+)\((\$\w+)\)\s*\{\s*(?:\$\w+\s*=\s*[gzinflatebs64_dco\'\.]+;\s*)+\3\s*=\s*(?:\$\w+\()+\3\)+;\s*return\s*\3;}(\$\w+)\s*=\s*\'([^\']+)\';\s*(\$\w+)\s*=\s*\'\2\';\s*\3\s*=\s*\6\(\'[^)]+\);\s*(\$\w+)\s*=\s*\3\(\'\',\6\(\4\)+;\7\(\);)\s*\w+\(\d+(,\'[^\']+\',\'[^\']+\')?\);~msi',
            'id' => 'setVars',
        ],
        [
            'full' => '~(?:\$\w+=\'[gzuncompresbae64_dtfi\.\']+;\s*)+\$\w+=\$\w+\(\'(\$\w+)\',\'[eval\'\.]+\(\1\);\'\);\s*(\$\w+)=\'([^\']+)\';\s*\$\w+\("\?>"\.(\$\w+\()+\2\)+;~msi',
            'id' => 'createFuncGzB64',
        ],
        [
            'full' => '~(\$\w{1,50})=(?:[\'"][create_funcion]+[\'"]\.?)+;\$\w{1,50}=\1\([\'"](\$\w{1,50})[\'"],(?:[\'"][eval(gzuncomprsb64_d]+[\'"]\.?)+[\'"][decode(]+\2\)+;[\'"]\);\$\w{1,50}\([\'"]([^\'"]+)[\'"]\);~msi',
            'id' => 'createFuncGzB64',
        ],
        [
            'full' => '~(\$\w+)=strrev\(\'[base64_dco]+\'\);\s?(\$\w+)=gzinflate\(\1\(\'([^\']+)\'\)\);\s?create_function\("","}\2//"\);~msi',
            'id' => 'createFuncGzInflateB64',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*(\(?\s*gzinflate\s*\(\s*base64_decode\s*)\(\s*\'([^\']+)\'\s*\)\s*\)\s*\)?\s*;\s*\$\w+\s*=\s*@?create_function\(\'([^\']*)\',\s*(?:\1|\'@?eval\(\4\)[^\']+\')\)\s*;\s*@?\$\w+(?:\(\)|\(\1\));~msi',
            'id' => 'createFuncGzInflateB64',
        ],
        [
            'full' => '~(\$\w+)="((?:\\\\\w+)+)";((\$\w+)=\1\("[^"]+"\);)@(eval\(\1\("[^"]+"\)\);)(\$\w+=(?:\$\w+\[\d+\]\.?)+;)((\$\w+)=(\$\w+)\(\1\("([^"]+)"\),-1\);)((?:\$\w+=(?:\$\w+\[\d+\]\.?)+;)+)@(eval\(\$\w+\(\1\("[^"]+"\)\)\));~msi',
            'id' => 'wsoShellDictVars',
        ],
        [
            'full' => '~error_reporting\(\d+\);(\$\w+)="([^"]+)";(\$\w+)=explode\("([^"]+)","([^"]+)"\);foreach\(\3\sas\s\$\w+=>\$\w+\){\$\w+=preg_split\("//",\$\w+,-1,[^)]+\);\3\[\$\w+\]=implode\("",array_reverse\(\$\w+\)\);}(\$\w+)=explode\("([^"]+)","([^"]+)"\);foreach\(\6\sas\s\$\w+=>\$\w+\){\${\$\w+}=\3\[\$\w+\];}function\s(\w+)\(\$\w+,\$\w+\){\$\w+=\${"[^"]+"}\["([^"]+)"\]\("//",\$\w+,-1,[^)]+\);foreach\(\$\w+\sas\s\$\w+=>\$\w+\){\$\w+\[\$\w+\]=\${"[^"]+"}\["([^"]+)"\]\(\${"[^"]+"}\["([^"]+)"\]\(\$\w+\)\+\$\w+\);}\$\w=\${"[^"]+"}\["([^"]+)"\]\("",\$\w+\);return\s\$\w+;}(\$\w+)=\9\(\14,-2\);@ini_set\(\'[^\']+\',\'[^\']+\'\);((?:\$\w+=(?:\$\w+\[\d+\]\.?)+;)(\$\w+)=(?:\$\w+\[\d+\]\.?)+;)function\s(\w+)\(\$\w+\){\$\w+=\9\(\$\w+,1\);\$\w+=strtr\(\$\w+,"([^"]+)","([^"]+)"\);return\s\$\w+;}((?:\$\w+\.?=(?:\$\w+\[\d+\]\.?)+;)+)(\$\w+)=\${"[^"]+"}\["[^"]+"\]\(\'(?:\$\w+,?)+\',(\$\w+)\(\17\("([^"]+)"\)\)\);@\${"[^"]+"}\["[^"]+"\]\((?:@\$\w+,?)+\);~msi',
            'id' => 'funcDictVars',
        ],
        [
            'full' => '~((\$\w{1,10})\s*=\s*\(\s*[\'"]([^\'"]{40,50000})[\'"]\s*\)\s*;\s*(\$\w{1,10})\s*=\s*base64_decode\s*\(\s*\2\s*\)\s*;)\s*(\$\w{1,10}\s*=\s*fopen\s*[^;]+;\s*echo\s*fwrite[^;]+;\s*fclose[^;]+;)~mis',
            'id' => 'funcFile2',
        ],
        [
            'full' => '~function\s*(\w+)\((\$\w+)\)\s*\{\s*\2=((?:\w+\()+)\2(\)+);\s*for\(\$\w=0;\$\w+<strlen\(\2\);\$\w+\+\+\)\s*\{\s*\2\[\$\w+\]\s*=\s*chr\(ord\(\2\[\$\w+\]\)-(\d+)\);\s*\}\s*return\s*\2;\s*\}eval\(\1\(("[^"]+")\)\);~mis',
            'id' => 'sec7or',
        ],
        [
            'full' => '~error_reporting\(0\);\s*class\s*(\w+)\{\s*private\s*\$\w+=\s*array\(\s*((?:"[^"]+"=>"[^"]+",?\s*)+)\)\s*;\s*public\s*function\s*(\w+)\s*\(\s*\$\w+,\s*\$\w+\s*\)\s*{[^}]+}\s*public\s*function\s*(\w+)\s*\(\$\w+,\$\w+\)\s*{[^}]+}\s*private\s*function\s*\w+\((?:\$\w+,?){7}\)\s*{[^}]+}return\s*array\((?:\$\w+,?){3}\);}}\s*(\$\w+)=new\s*\1;\s*(\$\w+)=\5->\3\(\'tmhapbzcerff\',array\(\'onfr\',\'_qrpbqr\',\'fgeeri\'\)\);\5->\4\(\6,\'\'\);\s*die\(\);~msi',
            'id' => 'classWithArrays',
        ],
        [
            'full' => '~error_reporting\(0\);(\s*(\$\w+)="[asert\."]+;\s*\$(\w+)=\2\(strrev\("([^"]+)"\)\);\s*\$\{\'\3\'\};)~msi',
            'id' => 'assertStrrev',
        ],
        [
            'full' => '~error_reporting\(0\);\$\w+\="[^"]+";\$\w+\=explode\("[^"]+","[^"]+"\);foreach\(\$\w+ as \$\w+\=\>\$\w+\)\{\$\w+\=preg_split\("//",\$\w+,\-1,PREG_SPLIT_NO_EMPTY\);\$\w+\[\$\w+\]\=implode\("",array_reverse\(\$\w+\)\);\}\$\w+\=explode\("[^"]+","[^"]+"\);foreach\(\$\w+ as \$\w+\=\>\$\w+\)\{\$\{\$\w+\}\=\$\w+\[\$\w+\];\}function \w+\(\$\w+,\$\w+\)\{\$\w+\=\$\{"[^"]+"\}\["\w+"\]\("//",\$\w+,\-1,PREG_SPLIT_NO_EMPTY\);foreach\(\$\w+ as \$\w+\=\>\$\w+\)\{\$\w+\[\$\w+\]\=\$\{"[^"]+"\}\["[^"]+"\]\(\$\{"[^"]+"\}\["\w+"\]\(\$\w+\)\+\$\w+\);\}\$\w+\=\$\{"[^"]+"\}\["\w+"\]\("",\$\w+\);return \$\w+;\}\$\w+\=\w+\(\$\w+,\-2\);@ini_set\(\'memory_limit\',\'1024M\'\);(?:\$\w+\=(?:\$\w+\{\d+\}\.?)+;)+function \w+\(\$\w+\)\{\$\w+\=\w+\(\$\w+,(\d+)\);\$\w+\=strtr\(\$\w+,"([^"]+)","([^"]+)"\);return \$\w+;\}(?:\$\w+\.?=(?:\$\w+\{\d+\}\.?)+;)+\$\w+\=\$\{"[^"]+"\}\["\w+"\]\(\'\$\w+,\$\w+,\$\w+,\$\w+\',\$\w+\(\w+\("([^"]+)"\)\)\);@\$\{"[^"]+"\}\["\w+"\]\(@\$\w+,@\$\w+,@\$\w+,@\$\w+,@\$\w+,@\$\w+\);~msi',
            'id' => 'b64strtr',
        ],
        [
            'full' => '~error_reporting\(\d\);function\s(\w{1,50})\(\$\w{1,50},\$\w{1,50}\){if\(file_exists\("[^"]+"\)\){touch\(__FILE__,filemtime\("[^"]+"\)\);}\$\w{1,50}=str_replace\(array\(\'([^\']+)\',\'([^\']+)\'\),array\(\'([^\']+)\',\'([^\']+)\'\),\$\w{1,50}\);\$\w{1,50}=strrev\(\'[base64]+\'\)\."_"\.strrev\(\'[decode]+\'\);\$\w{1,50}=\$\w{1,50}\(\$\w{1,50}\);\$\w{1,50}=strrev\(\'[gzinflate]+\'\);return@\$\w{1,50}\(\$\w{1,50}\);}\s?\$\w{1,50}=\'([^;]+;)([^\']+)">\';preg_match\(\'#\6\(\.\*\)">#\',\$\w{1,50},\$\w{1,50}\);\$\w{1,50}=\$\w{1,50}\[1\];\$\w{1,50}=\1\(\$\w{1,50},\$\w{1,50}\);if\(isset\(\$\w{1,50}\)\){eval\(\$\w{1,50}\);}~msi',
            'id' => 'gzB64strReplaceDataImage',
        ],
        [
            'full' => '~(\$\w{1,50})=array\((?:base64_decode\([\'"][^\'"]+[\'"]\),?){2}base64_Decode\(strrev\(str_rot13\(explode\(base64_decode\([\'"][^\'"]+[\'"]\),file_get_contents\(__FILE__\)\)\[1\]\){4};preg_replace\(\1\[0\],serialize\(eval\(\1\[2\]\)\),\1\[1\]\);exit\(\);\s?\?>\s*([^\s]{1,})~msi',
            'id' => 'serializeFileContent',
        ],
        [
            'full' => '~(function\s\w{1,50}\(\$\w{1,50}\)\s?{\s?global\s(?:\$\w{1,50},?\s*)+;\s*\$\w{1,50}\(\$\w{1,50},\s?\$\w{1,50},\s?\$\w{1,50}\(\)\s?\+\s?\w{1,50}\(\$\w{1,50}\),\s?(?:\$\w{1,50}\s?,?\.?\s*)+\);\s*}\s*global\s?(?:\$\w{1,50},?\s*)+;\s*(?:\$\w{1,50}\s?=\s?\'[^\']+\';\s*)+function\s?\w{1,50}\(\$\w{1,50}\)\s{\s*global\s?(?:\$\w{1,50},?\s*)+;.*?return\s\$\w{1,50}\(\$\w{1,50}\);\s}\s*(?:\$\w{1,50}\s?=\s?\'[^\']*\';\s*)+(?:function\s\w{1,50}\(.*?(?:\$\w{1,50}\s?=\s?\'[^\']*\';\s*)+)+(?:\$\w{1,50}\s\.?=\s\$\w{1,50};\s*)+.*?extract\(\w{1,50}\(get_defined_vars\(\)\)\);)\s*(\$\w{1,50}\(\d\);\s*\$\w{1,50}\(\$\w{1,50},\s?0\);\s*\$\w{1,50}\s=\s\$\w{1,50}\(\$_REQUEST,\s?\$_COOKIE,\s?\$_SERVER\);.*?\$\w{1,50}\(\$\w{1,50}\);\s*echo\s?\$\w{1,50};)~msi',
            'id' => 'globalVarsManyReplace',
        ],
        [
            'full' => '~\$\w{1,50}\s{0,100}=\s{0,100}"([^"]{1,50000})";\s?(\$\w{1,50}\s?=\s?(?:["][^"]{1,5}["]\.?)+;\s?\s?(?:\s?\$\w{1,50}\s?\.?=(?:\s?(?:\s?"[^"]+"|\$\w{1,50})\s?\.?)+;\s?)+)\$\w{1,50}\s?\(\s?\$\w{1,50},((?:\$\w{1,50}\()+\$\w{1,50}\)+),"[^"]{1,100}"\);~msi',
            'id' => 'concatVarsPregReplace',
        ],
        [
            'full' => '~(?:\$\w{1,50}\s?=\s?(?:"[^"]+"\.?)+;)+\s?echo\sjson_encode\(array\([\'"][^"\']+[\'"]=>@\$\w{1,50}\(__FILE__,(\$\w{1,50}\([\'"][^"\']+[\'"]\)\))>0,[\'"][^"\']+[\'"]=>__FILE__\)\);exit;~msi',
            'id' => 'filePutContentsB64Decoded',
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?base64_decode\([\'"][^\'"]+[\'"]\);\s?\$\w{1,50}\s?=\s?\$_POST\[[\'"][^\'"]+[\'"]\]\.[\'"][^\'"]+[\'"];\s?\$\w{1,50}\s?=\s?fopen\([\'"][^\'"]+[\'"]\.\$\w{1,50},\s?[\'"]w[\'"]\);\s?fwrite\(\$\w{1,50},\1\);~msi',
            'id' => 'fwriteB64DecodedStr',
        ],
        [
            'full' => '~file_put_contents\(\$_SERVER\[\'[^\']+\'\]\.\'[^\']+\',base64_decode\(\'[^\']+\'\)\);~msi',
            'id' => 'filePutContentsB64Content',
        ],
        [
            'full' => '~((\$\w{1,50})\s?=\s?((?:chr\(\d{1,5}\)\.?)+);)(\$\w{1,50})\s?=\s?(?:\2\[\d{1,5}\]\.?)+;(\$\w{1,50})\s?=\s?(?:\2\[\d{1,5}\]\.?)+;\4\(\5\(null,\s?((?:\2\[\d{1,5}\]\.?)+)\)\);~msi',
            'id' => 'chrDictCreateFunc',
        ],
        [
            'full' => '~(?:function\s\w{1,50}\((?:\$\w{1,50}\,?)+\){return\sstr_replace\((?:\$\w{1,50}\,?)+\);}\s?){3}(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];\s?\$\w{1,50}\s?=\s?\w{1,50}\([\'"]([^\'"]+)[\'"],\'\',\1\);\s?(?:\$\w{1,50}\s?=\s?[\'"][^\'"]+[\'"];\s?\$\w{1,50}\s?=\s?\w{1,50}\([\'"][^\'"]+[\'"],\'\',\$\w{1,50}\);\s?){2}\$\w{1,50}\s?=\s?[\'"][^\'"]+[\'"];\s?\$\w{1,50}\s?=\s?\$\w{1,50}\(\$\w{1,50},\$\w{1,50}\.\'\(\'\.\1\.\'\(\'\.\$\w{1,50}\.\'\)\);\'\);\s?\$\w{1,50}\([\'"]([^\'"]+)[\'"]\);~msi',
            'id' => 'strReplaceFuncsEvalVar',
        ],
        [
            'full' => '~\$\w{1,50}\s?=\s?"\\\\x[^"]+";\${\$\w{1,50}}\s?=\s?base64_decode\("(.*?\\\\x[^"]+")\);\s?eval\(".*?\\\\x[^\$]+\$\w{1,50}\\\\"\);"\);~msi',
            'id' => 'B64SlashedStr',
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?array\((?:[\'"][base64_dco]+[\'"],?\s?)+\);\s?array_splice\(\1,\s?4,\s?0,\s?8\*8\);\s?(\$\w{1,50})\s?=\s?implode\(\'\',\s?array_reverse\(\1\)\);\s?(\$\w{1,50})\s?=\s?\2\([\'"]([^\'"]+)[\'"]\);\s?eval\(\3\);~msi',
            'id' => 'B64ArrayStrEval',
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];\s?\$\w{1,50}\s?=\s?(?:\1\[\d+\]\.?)+;\s?@\$\w{1,50}\((?:\1\[\d+\]\.?)+,(?:\1\[\d+\]\.?)+"\("\.(?:\1\[\d+\]\.?)+\'\([\'"]([^\'"]+)[\'"]\)\);\',"\."\);~msi',
            'id' => 'DictVarsPregReplaceB64',
        ],
        [
            'full' => '~(\$\w+\s*=\s*\'[bs64_dcogzinflate\.\'\s]+;\s*)+(\$\w+)\s*=\s*\'([^\']+)\';\s*eval\((?:\$\w+\()+\2\)+;~msi',
            'id' => 'evalVarB64',
        ],
        [
            'full' => '~(if\s*\(\!function_exists\s*\("([^"]+)"\)\)\s*\{\s*function\s*\2\s*\((\$\w+)\)\s*\{\s*(\$\w+)\s*=\s*"";\s*(\$\w+)\s*=\s*0;\s*\$\w+\s*=\s*strlen\s*\(\3\);\s*while\s*\(\$\w+\s*<\s*\$\w+\)\s*\{\s*if\s*\(\3\[\5\]\s*==\s*\'\s\'\)\s*\{\s*\4\s*\.=\s*"\s";\s*\}\s*else\sif\s*\(\3\[\5\]\s*==\s*\'!\'\)\s*\{\s*\4\s*\.=\s*chr\s*\(\s*\(ord\s*\(\3\[\5\+\d\]\)-ord\s*\(\'A\'\)\)\*16\+\s*\(ord\s*\(\3\[\5\+\d\]\)-ord\s*\(\'a\'\)\)\);\s*\5\s*\+=\s*2;\s*\}\s*else\s*\{\s*\4\s*\.=\s*chr\s*\(ord\s*\(\3\[\5\]\)\+1\);\s*\}\s*\5\+\+;\s*\}\s*return\s*\4;\s*\}\s*\}\s*)eval\s*\(\2\s*\(\'([^\']+)\'\)\);~msi',
            'id' => 'decodeAChar',
        ],
        [
            'full' => '~(\$\w+)="([^"]+)";(\$\w+)="[str_eplac"\.]+";((?:\$\w+\s*=\s*\3\("([^"]+)","","[^"]+"\);)+)(\$\w+)\s*=\s*\$\w+\(\'\',\s*((?:\$\w+\()+\1\)\))\);\6\(\);~msi',
            'id' => 'strReplaceCreateFunc',
        ],
        [
            'full' => '~function\s*(\w+)\((\$\w+)\)\s*\{\s*\$\w+\s*=\s*strlen\(trim\(\2\)+;\s*\$\w+\s*=\s*\'\';\s*(\$\w+)\s*=\s*0;\s*while\s*\(\(\(\$\w+\s*<\s*\$\w+\)+\s*\{\s*(\$\w+)\s*\.=\s*pack\([\'"]C[\'"],\s*hexdec\(substr\(\2,\s*\3,\s*2\)\)\);\s*\3\s*\+=\s*2;\s*\}\s*return\s*\4;\s*\}\s*eval\(\1\([\'"]([0-9a-f]+)[\'"]\)\s*\.\s*\'([^\']+\'\)+;)\s*\'\);~msi',
            'id' => 'evalbin2hex',
        ],
        [
            'full' => '~function\s\w{1,50}\(\$\w{1,50},\s?\$\w{1,50}\)\s?{\s?return;\s?}\s?function\s\w{1,50}\((?:\$\w{1,50}\s?=\s?"",?\s?){2}\)\s?{.*?(?:function\s\w{1,50}\((?:\$\w{1,50},?\s?)+\)\s?{\s?return\s\$\w{1,50};\s?}\s?)+function\s\w{1,50}\(\).*?(?:function\s\w{1,50}\((?:\$\w{1,50},?\s?)+\)\s?{\s?return\s\$\w{1,50};\s?}\s?)+function\s\w{1,50}\(\).*?(?:function\s\w{1,50}\((?:\$\w{1,50},?\s?)+\)\s?{\s?return\s\$\w{1,50};\s?}\s?)+(?:header\(\w{1,50}\([\'"][^\'"]+[\'"]\)\);\s?)+define.*?PDO\(.*?\$\w{1,50}\s?=\s?0;\s?function\s?\w{1,50}\(\$\w{1,50}\)\s?{\s?global.*?function\s(\w{1,50})\(\$\w{1,50}\)\s?{\s?\$\w{1,50}\s?=\s?"";\s?for\s?\(\$\w{1,50}\s?=\s?0;\s?\$\w{1,50}\s?<\s?strlen\(\$\w{1,50}\)\s?-\s?1;\s?\$\w{1,50}\s?\+=2\)\s?{\s?\$\w{1,50}\s?\.=\s?chr\(hexdec\(\$\w{1,50}\[\$\w{1,50}\]\s?\.\s?\$\w{1,50}\[\$\w{1,50}\s?\+\s?1\]\)\s?\^0x66\);\s?}\s?return\s\$\w{1,50};\}(?:.*?(?:function\s\w{1,50}\((?:\$\w{1,50},?\s?)+\)\s?{\s?return\s\$\w{1,50};\s?}\s?)+)+~msi',
            'id' => 'manyFuncsWithCode',
        ],
        [
            'full' => '~(\$[0o]+)="([\\\\x0-9a-f]+)";(\$[0o]+)=@?\1\(\'([^\']+)\',"([\\\\x0-9a-f]+)"\);@?\3\("([^"]+)"\);~msi',
            'id' => 'gzB64Func',
        ],
        [
            'full' => '~(?:(?:session_start|error_reporting|set_time_limit)\(\d*\);\s?)+(?:@?ini_set\([\'"][^\'"]+[\'"],[\'"][^\'"]+[\'"]\);\s?)+((\$\w{1,50})\s?=\s?(?:[\'"][base64_dco]+[\'"]\.?)+;\s(\$\w{1,50})\s?=\s?\2\(((?:[\'"][^\'"]+[\'"]\.?)+)\);)\s?(\$\w{1,50})\s?=\s?array\(((?:(?:\s?\3\((?:[\'"][^\'"]+[\'"]\.?)+\)(?:\.?)?|\3|\2|(?:chr\(\d+\)\.?))+,\s?)+\${(?:chr\(\d+\)\.?)+}\[(?:chr\(\d+\)\.?)+\])\);\s?(?:.*?\5\[\d+\])+~msi',
            'id' => 'dictArrayFuncVars',
        ],
        [
            'full' => '~function\s(\w{1,50})\(\){\$\w{1,50}\s?=\s?[\'"]([^\'"]+)[\'"];\$\w{1,50}\s?=\s?str_rot13\(\$\w{1,50}\);\$\w{1,50}\s?=\s?base64_decode\([\'"]([^\'"]+)[\'"]\);(\$\w{1,50})\s?=\s?@\$\w{1,50}\(\'\',\s?pack\(\'H\*\',\s?\$\w{1,50}\)\);\s?\4\(\);\s?}\1\(\);~msi',
            'id' => 'createFuncPackStrRot13',
        ],
        [
            'full' => '~error_reporting\(0\);\s?(?:\s?function\s(\w{1,50})\((?:\$\w{1,50}\,?\s?){3}\)\s?{\s?return\s?[\'"]{2}\s?\.\s?(?:\$\w{1,50}\s?\.\s?[\'"]{2}\s?\.?\s?)+;\s*}|\s?(?:\w{1,50}:)?(\$\w{1,50})\s?=\s?"([^"]+)";){2}\s?(?:\s?(?:\w{1,50}:)?\$\w{1,50}\s?=\s?\1\((?:\2\[0\d{1,5}\][,.\s\'"]*)+\);\s?)+\s?print_r\(\2\[0\d{1,5}\]\);\s?echo\s?"[^"]+";\s*(\$\w{1,50})=\1\((?:\1\((?:(?:\$\w{1,50}|""),?)+\),?\.?)+\)\."\'([^\'"]+)\'"\.\1\((?:\2\[0\d{1,5}\],?)+\."",\2\[0\d{1,5}\]\);\s?print_r\(\$\w{1,50}\);\s?(?:\$\w{1,50}=\1\((?:\2\[0\d{1,5}\][.,]?)+\);\s?)+\$\w{1,50}=\1\(\1\((?:\$\w{1,50},?)+\),\$\w{1,50},\1\((?:\$\w{1,50},?)+\)\);\s?\$\w{1,50}\(create_function,array\("","}"\.\4\."//"\)\);~msi',
            'id' => 'dictVarsCreateFunc',
        ],
        [
            'full' => '~(?:function\s(\w{1,50})\((?:\$\w{1,50}\,?\s?){3}\)\s?{\s?return\s?[\'"]{2}\s?\.\s?(?:\$\w{1,50}\s?\.\s?[\'"]{2}\s?\.?\s?)+;\s*}\s?|(?:\w{1,50}:)?(\$\w{1,50})\s?=\s?"([^"]+)";\s?){2}(?:\s?\$\w{1,50}\s?=\s?\1\((?:(?:(?:\2\[\d+\])?[,.\s\'"]*)+|(?:\s?\1\((?:\$\w{1,50}[,.\s\'"]*)+\),?)+)\);)+\s?(\$\w{1,50})\s?=\s?\1\((?:\s?\1\((?:\$\w{1,50}[,.\s\'"]*)+\),?)+\)\s?\.\s?"\'([^"]+)\'"\s?\.\s?\1\((?:(?:\2\[\d+\])?[,.\s\'"]*)+\);\s?\$\w{1,50}\(\$\w{1,50},\s?array\(\'\',\s?"}"\s?\.\s?\4\s?\.\s?"//"\)\);~msi',
            'id' => 'dictVarsCreateFunc',
        ],
        [
            'full' => '~function\s(\w{1,50})\((\$\w{1,50})\)\s?{.*?\$\w+\s?=\s?"[^"]+";\$\w{1,50}\s?=\s?str_split\(\$\w{1,50}\);\$\w{1,50}\s?=\s?array_flip\(\$\w{1,50}\);\$\w{1,50}\s?=\s?0;\$\w{1,50}\s?=\s?"";\$\w{1,50}\s?=\s?preg_replace\("[^"]+",\s?"",\s?\$\w{1,50}\);do\s?{(?:\$\w{1,50}\s?=\s?\$\w{1,50}\[\$\w{1,50}\[\$\w{1,50}\+\+\]\];){4}\$\w{1,50}\s?=\s?\(\$\w{1,50}\s?<<\s?2\)\s?\|\s?\(\$\w{1,50}\s?>>\s?4\);\$\w{1,50}\s?=\s?\(\(\$\w{1,50}\s?&\s?15\)\s?<<\s?4\)\s?\|\s?\(\$\w{1,50}\s?>>\s?2\);\$\w{1,50}\s?=\s?\(\(\$\w{1,50}\s?&\s?3\)\s?<<\s?6\)\s?\|\s?\$\w{1,50};\$\w{1,50}\s?=\s?\$\w{1,50}\s?\.\s?chr\(\$\w{1,50}\);if\s?\(\$\w{1,50}\s?!=\s?64\)\s?{\$\w{1,50}\s?=\s?\$\w{1,50}\s?\.\s?chr\(\$\w{1,50}\);}if\s?\(\$\w{1,50}\s?!=\s?64\)\s?{\$\w{1,50}\s?=\s?\$\w{1,50}\s?\.\s?chr\(\$\w{1,50}\);}}\s?while\s?\(\$\w{1,50}\s?<\s?strlen\(\$\w{1,50}\)\);return\s?\$\w{1,50};}\s?.*?function\s(\w{1,50})\(\){\$\w{1,50}\s?=\s?@file_get_contents\(\w{1,50}\(\)\);.*?(\$\w{1,50})\s?=\s?"([^"]{1,20000})";.*?\4\s?=\s?@unserialize\(\1\(\4\)\);.*?(function\s(\w{1,50})\(\$\w{1,50}=NULL\){foreach\s?\(\3\(\)\s?as.*?eval\(\$\w{1,50}\);}}}).*?(\7\(\);)~msi',
            'id' => 'decodedFileGetContentsWithFunc',
        ],
        [
            'full' => '~((?:\$\w{1,50}\s?\.?=\s?"\\\\[^"]+";)+)((?:\$\w{1,50}=\$\w{1,50}\(\$\w{1,50}\);){3})(\$\w{1,50})=[\'"]([^\'"]+)[\'"];(\$\w{1,50})=[\'"]([^\'"]+)[\'"];if\(function_exists\(\$\w{1,50}\)\){\$\w{1,50}=@\$\w{1,50}\(\'\3,\$\w{1,50}\',(\$\w{1,50}\(\$\w{1,50}\()\5\)\)\);if\(\$\w{1,50}\)\3=@\$\w{1,50}\(\3,\$\w{1,50}\);\s?}else{.*?};if\(function_exists\(\$\w{1,50}\)\)\s?{\$\w{1,50}=@\$\w{1,50}\("",\7\3\)\)\);if\(\$\w{1,50}\)@\$\w{1,50}\(\);}else{.*?};~msi',
            'id' => 'createFuncVarsCode',
        ],
        [
            'full' => '~(\$\w+)=\'[preg_lac.\']+\';\1\(\'[#\~\\\\1\'.e]+\',\'([^,]+)\',\'1\'\);~msi',
            'id' => 'pregConcat',
        ],
        [
            'full' => '~(?(DEFINE)(?\'c\'\s*/\*[^\*]+\*/\s*))(?:\$\{"[^"]+"(?&c)?\^(?&c)?"[^"]+"\}\s*=\s*"[^"]+"\s*(?&c)?\^(?&c)?\s*"[^"]+";\s*)+\$\{"[^"]+"(?&c)?\^(?&c)?"[^"]+"\}\s*=\s*\(\s*\$\{"[^"]+"(?&c)?\^(?&c)?"[^"]+"\}\(\s*\$\{"[^"]+"(?&c)?\^(?&c)?"[^"]+"\}\s*\(\s*\'([^\']+)\'\)\s*\)\s*\)\s*;\s*\$\{"[^"]+"(?&c)?\^(?&c)?"[^"]+"\}="[^"]+"\s*(?&c)?\^(?&c)?\s*"[^"]+";\s*\$\{"[^"]+"(?&c)?\^(?&c)?"[^"]+"\}\s*=\s*@?\$\{"[^"]+"(?&c)?\^(?&c)?"[^"]+"\}\(\'[^\']+\',\s*"[^"]+"\s*(?&c)?\^(?&c)?\s*"[^"]+"\)\s*;@?\${"[^"]+"(?&c)?\^(?&c)?"[^"]+"\}\(\$\{"[^"]+"(?&c)?\^(?&c)?"[^"]+"\}\);~msi',
            'id' => 'xoredStrings',
        ],
        [
            'full' => '~\$\w+\s*=\s*\'([^\']+)\';\s*//base64 - gzinflate - str_rot13 - convert_uu - gzinflate - base64~msi',
            'id' => 'commentWithAlgo',
        ],
        [
            'full' => '~error_reporting\(0\);\s*set_time_limit\(0\);\s*ini_set\(\'memory_limit\',\s*\'-1\'\);\s*if\(isset\(\$_POST\[\'pass\']\)\)\s*{\s*function\s*[^}]+}\s*file_put_contents\((\$\w+)\."[^"]+",\s*gzdeflate\(file_get_contents\(\1\),\s*\d\)\);\s*unlink\(\1\);\s*copy\(\'\.htaccess\',\'[^\']+\'\);\s*(\$\w+)\s*=\s*base64_decode\("[^"]+"\);\s*(?:\$\w+\s*=\s*str_replace\(\'[^\']+\',\s*[^;]+;\s*)+\$\w+\s*=\s*\$\w+;\s*(\$\w+)\s*=\s*"<\?php[^;]+;\s*\?>";\s*(\$\w+)\s*=\s*fopen\(\'[^\']+\',\'w\'\);\s*fwrite\(\4,\s*\3\);\s*fclose\(\4\);\s*(\$\w+)\s*=\s*base64_decode\("[^"]+"\);\s*(\$\w+)\s*=\s*fopen\(\'[^\']+\',\s*\'w\'\);\s*fwrite\(\6,\s*\5\);\s*fclose\(\6\);\s*echo\s*"[^"]+";\s*}\s*function\s*(\w+)[^}]+}[^}]+[\s}]+[^!]+!+\';[^!]+!+\';\s*}\s*exit\(\);\s*}\s*function\s*\w+\(\){~msi',
            'id' => 'fileEncryptor',
        ],
        [
            'full' => '~function\s?\w{1,50}\(\$\w{1,50}\)\s*{(\$\w{1,50}=true;)?((?:\$\w{1,50}\s?=\s?[\'"](?:base64_(?:de|en)code|[\\\\xa-f0-9]+)[\'"];)+).*?exit;}}\w{1,50}\([\'"][^\'"]+[\'"]\);~msi',
            'id' => 'base64decodedFuncContents',
        ],
        [
            'full' => '~((?:if\(!function_exists\(base64_[end]+code\)\)\{function\s*(\w+)[^{]+({([^{}]*+(?:(?3)[^{}]*)*+)})\}\s*else\s*\{function\s*\2\((\$\w+)\)\s*\{\s*global\s*base64_[end]+code;return\s*base64_[end]+code\(\5\);\}\})+).*?((?:function\s*(\w+)\(\$\w+\)\{return\s*\w+\(\$\w+\);\s*\}\s*)+).*?(eval\(gzinflate\(\7\(\'([^\']+)\'\)\)\);)~msi',
            'id' => 'definedB64',
        ],
        [
            'full' => '~(?(DEFINE)(?\'v\'(?:(?:\$\{)*"GLOBALS"\}\["\w+"\]\}?|\$\w+|"\w+")))(?:(?&v)\s*=\s*"\w+";\s*)+(?:if\s*\(isset\(\$_GET\["[^"]+"\]\)\)\s*\{\s*echo\s*(?:"[^"]+"|\$_GET\["[^"]+"\]);\s*die;\s*\}\s*)*(?:(?&v)\s*=\s*"\w+";\s*)*function\s*(\w+)\(\$\w+,\s*\$\w+\s*=\s*\'\'\)\s*\{\s*(?:(?&v)\s*=\s*(?&v);\s*)+[^\^]+\^\s*(?&v)\[(?&v)\];\s*\}\s*\}\s*return\s*(?&v);\s*\}\s*(?:\$\w+\s*=\s*"[^"]+";)?\s*(?&v)\s*=\s*"[^"]+";\s*(?:(?&v)\s*=\s*"[^"]+";)?\s*(?:\$\w+ = "D";)?\s*((?&v))\s*=\s*"([^"]+)";(?:\s*(?&v)\s*=\s*[\'"][^\'"]*[\'"];\s*)+(?:foreach\s*\(array\(([\d\s,]+)\)\s*as\s*(?&v)\)\s*\{\s*(?:(?&v)\s*=\s*"\w+";\s*)*\s*(?&v)\s*\.=\s*(?&v)\[(?&v)\];\s*\}\s*(?:\s*(?&v)\s*=\s*[\'"][^\'"]*[\'"];\s*)?)+\s*(?&v)\s*=\s*(?&v)\([creat_fuion"\'\s\.]+\);\s*(?&v)\s*=\s*(?&v)\("[^"]*",\s*(?&v)\s*\(\2\((?&v)\((?&v)\),\s*"([^"]+)"\)\)\);\s*(?&v)\(\);~msi',
            'id' => 'B64Xored',
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?<<<FILE\s*([\w\s+/=]+)FILE;\s*(\$\w{1,50}\s?=\s?(base64_decode\(\1\));)~msi',
            'id' => 'B64AssignedVarContent',
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?\'([^\']+)\';((?:\$\w{1,50}\s?=\s?(?:\1\[[()\d/+*-]+\]\.?)+;)+)\$\w{1,50}\s?=\s?"[^"]+";(?:\$\w{1,50}\s?\.?=\s?\$\w{1,50};)+@?\$\w{1,50}\s?=\s?\$\w{1,50}\(\(\'\'\),\s?\((\$\w{1,50})\)\);@?\$\w{1,50}\(\);~msi',
            'id' => 'dictVarsWithMath',
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?"([^"]+)";\s*class\s?(\w+){\s*var\s?\$\w{1,50};\s*function\s__construct\(\)\s?{\s?\$this->\w{1,50}\(\d+\);\s*}\s*function\s?(\w{1,50})\(\$\w{1,50}\)\s?{\s?\$\w{1,50}\s?=\s?\$_SERVER\[\'HTTP_USER_AGENT\'\];\s?if\s?\(\s?preg_match\(\'/\s?Apple\(\.\*\)\s?\\\\\(/is\',.*?str_replace.*?explode.*?\'0+\';(?:.*?function\s\w{1,50}\([^)]+\){.*?(?:unpack|pack|\$this->|fmod|chr))+.*?return\s\$\w{1,50};[\s}]+(\$\w{1,50})\s?=\s?hex2bin\(\1\);\s?\$\w{1,50}\s?=\s?new\s?\3\(\d+\);\s?(\$\w{1,50})\s?=\s?\$\w{1,50}->\4\(\5\);\s?eval\(\6\);~msi',
            'id' => 'classDecryptedWithKey',
        ],
        [
            'full' => '~((\$\w+)\s*=\s*str_rot13\(base64_decode\(\'([^\']+)\'\)\);\s*(\$\w+)\s*=\s*str_rot13\(base64_decode\(\'([^\']+)\'\)\);\s*\$\w+\s*=\s*\'[^\']+\';)\s*preg_match\(\$\w+\(\$\w+\(\'[^\']+\'\)\),\s*file_get_contents\(__FILE__\),\s*\$\w+\);\s*(eval\(\$\w+\(\$\w+\(\'([^\']+)\'\)\)\);)\s*eval\(\$\w+\(\$\w+\(\'[^\']+\'\)\)\);\s*unset\(\$\w+,\s*\$\w+\);\s*__halt_compiler\(\);\s*\?>\s*\[PHPkoru_Info\]\s*[^\]]+\]\s*\[PHPkoru_Code\]\s*([^\[]+)\[/PHPkoru_Code\]~msi',
            'id' => 'PHPkoru',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*"([^"]+)";\s*(\$\w+)\s*=\s*\$this->(\w+)\("([^"]+)"\);\s*(\$\w+)\s*=\s*\3\(\'\',\s*\$this->\4\(\1\)\);\s*\6\(\);~msi',
            'id' => 'JoomlaInject',
        ],
        [
            'full' => '~((\$\w{1,50})\s*=\s*[\'"]([^"\']+)[\'"];\s*)\$\w{1,50}\s*=\s*fopen\([^)]+\);\s*\$\w{1,50}\s*=\s*fwrite\s?\(\$\w{1,50}\s*,\s*(base64_decode\(\2\))\);~msi',
            'id' => 'fwriteB64Content',
        ],
        [
            'full' => '~(\$\w{1,50})\s*=\s*"([^"]+)";\s*(\$\w{1,50})\s*=\s*base64_decode\(\1\);\s*(\$\w{1,50})\s*=\s*base64_decode\("([^"]+)"\);\s*(\$\w{1,50}\s*=(\s*\3\s*\.\s*\4);)~msi',
            'id' => 'B64concatedVars',
        ],
        [
            'full' => '~(\$\w{1,50})\s*=\s*"(\\\\[\w\\\\]+)";\s*(\$\w{1,50})\s*=\s*@\1\([\'"](\$\w{1,50})[\'"]\s*,\s*"(\\\\[\w\\\\]+)"\);\s*@\3\(([\'"][^\'"]+[\'"])\);~msi',
            'id' => 'slashedCreateFunc',
        ],
        [
            'full' => '~(\$\w{1,50})\s*=\s*"([^"]+)";((?:\$\w{1,50}\s*=\s*(?:\$\w{1,50}\[\d+\]\.?)+;)+@?(?:\$\w{1,50}(?:\[\d+\]\.?)?[,()]*)+;)~msi',
            'id' => 'varDictCreateFunc',
        ],
        [
            'full' => '~@call_user_func\(create_function\([\'"]\s*[\'"],gzinflate\(base64_decode\([\'"\\\\]{1,3}([^\'"\\\\]+)[\'"\\\\]{1,3}\)\)\),[^)]+\);~msi',
            'id' => 'callFuncGzB64',
        ],
        [
            'full' => '~@?(\$\w{1,50})\s*=\s*"([^"]+)";@?(\$\w{1,50})\s*=\s*array\((\d+),(\d+),(\d+),(\d+),(\d+),(\d+)\);@?(\$\w{1,50})\s*=\s*"([^"]+)";@?(\$\w{1,50})\s*=\s*[\'"]{2};for\s*\(\$\w{1,50}\s?=\s?0;\s?\$\w{1,50}\s?<\s?6;\s?\$\w{1,50}\+\+\)\s*{@?\$\w{1,50}\s?=\s?@?\3\[@?\$\w{1,50}\]\s*;@?\12\.=\s?@?\1\[@?\$\w{1,50}\]\s?;\s*}@?\12\(((?:"\\\\x[^"]+"\.?)+)\);~msi',
            'id' => 'assertDictVarEval',
        ],
        [
            'full' => '~function\s+(\w{1,50})\((\$\w{1,50})\)\s*{\s*\$\w{1,50}\s?=\s?"[^"]+";\s?(?:(?:\$\w{1,50}\s?=\s?)+"";)+.*?<<\s?2.*?<<\s?6.*?!=\s?64.*return\s?\$\w{1,50};}\s?function\s+(\w{1,50})\(\$\w{1,50}\){\s*return\s\1\(\$\w{1,50}\);}\s*eval\(\3\(gzinflate\(\3\("([^"]+)"\),0\)+~msi',
            'id' => 'B64FuncEvalGz',
        ],
        [
            'full' => '~(\$\w{1,50})\s*=\s*"([^"]+)";\s*(\$\w{1,50})\s?=\s?(?:[\d\-+*])+;\s*\$\w{1,50}\s?=\s?[\'"]base[\'"]\s?\.\s?\3\.\s?[\'"]_decode[\'"];\s*\$\w{1,50}\s?=\s?\$\w{1,50}\(\$\w{1,50}\);(\$\w{1,50})\s?=\s?@?gzinflate\(\$\w{1,50}\);@?eval\(("\?>"\.?)?\4\);~msi',
            'id' => 'B64Gz',
        ],
        [
            'full' => '~function\s*(\w+)\((\$\w+)\)\s*\{\s*(?:\2=gzinflate\(base64_decode\(\2\)\);|\$\w+\s*=\s*base64_decode\(\2\);\s*\2\s*=\s*gzinflate\(\$\w+\);)\s*for\(\$\w+=0;\$\w+<strlen\s*\(\2\);\$\w+\+\+\)\s*\{\s*\2\[\$\w+\]\s*=\s*chr\(ord\(\2\[\$\w+\]\)(-?\d+)\);\s*\}\s*return\s*\2;\s*\}eval\(\1\s*\("([^"]+)"\)\);~msi',
            'id' => 'deltaOrd',
        ],
        [
            'full' => '~(?(DEFINE)(?\'g\'(?:\$\{)?\$\{"(?:G|\\\\x47)(?:L|\\\\x4c)(?:O|\\\\x4f)(?:B|\\\\x42)(?:A|\\\\x41)(?:L|\\\\x4c)(?:S|\\\\x53)"\}\["[^"]+"\](?:\})?))(?:(?&g)="[^"]+";)+function\s*(\w+)\(\$\w+\)\s*\{(?&g)="[^"]+";(?&g)=gzinflate\(base64_decode\((?&g)\)\);\$\w+="[^"]+";for\((?&g)=0;(?&g)<strlen\((?&g)\);(?&g)\+\+\)\s*\{\$\w+="[^"]+";(?&g)="[^"]+";(?&g)\[\$\{\$\w+\}\]=chr\(ord\((?&g)\[(?&g)\]\)([\-\+]\d+)\);\}return\$\{\$\w+\};\}eval\(\2\("([^"]+)"\)\);~msi',
            'id' => 'deltaOrd',
        ],
        [
            'fast' => '~<\?php\s(?:eval\(")?ob_start\(\);(?:"\))?\s\?>(.*?)<\?php\s(eval\(")?if\(!function_exists\("([^"]+)"\)\)\{function\s\3\(\)\{(\$[^=]+)=str_replace\(array\(([^)]+)\),array\(([^)]+)\),ob_get_clean\(\)\);for\((\$[^=]+)=1,(\$[^=]+)=ord\(\4\[0\]\);\7<strlen\(\4\);\7\+\+\)\4\[\7\]=chr\(ord\(\4\[\7\]\)-\8-\7\);\4\[0\]=\'\s\';return\s\4;\}\}(?:"\))?\s\?>(.*?)<\?php\s(\$[^=]+)=\3\(\);\s*eval\(\10\s*\)\s*(\?>\s*)+~msi',
            'full' => '~(?:<\?php\s*\$\w+\s*=\s*"[^"]+";\s*\?>\s*)?<\?php\s(?:eval\(")?ob_start\(\);(?:"\))?\s\?>(.*?)<\?php\s(eval\(")?if\(!function_exists\("([^"]+)"\)\)\{function\s\3\(\)\{(\$[^=]+)=str_replace\(array\(([^)]+)\),array\(([^)]+)\),ob_get_clean\(\)\);for\((\$[^=]+)=1,(\$[^=]+)=ord\(\4\[0\]\);\7<strlen\(\4\);\7\+\+\)\4\[\7\]=chr\(ord\(\4\[\7\]\)-\8-\7\);\4\[0\]=\'\s\';return\s\4;\}\}(?:"\))?\s\?>(.*?)<\?php\s(\$[^=]+)=\3\(\);\s*eval\(\10\s*\)\s*(\?>\s*)+~msi',
            'id' => 'outputBuffer',
        ],
        [
            'fast' => '~\s*(\$\w+)\s*=\s*[base64_decode"\./\-\*]+;.*?\1(?:.{0,300}?\1\((?:\$\w+|"[^"]+")\))+[^\}]+\}~msi',
            'full' => '~(?:\$\w+\s*=\s*\$_SERVER\["DOCUMENT_ROOT"\]\."/";)?\$\w+\s*=\s*"[^"]+";(?:\$\w+\s*=\s*\$_SERVER\["DOCUMENT_ROOT"\]\."/";)?\s*(\$\w+)\s*=\s*[base64_decode"\./\-\*]+;.*?\1(?:.{0,300}?\1\((?:\$\w+|"[^"]+")\))+[^\}]+\}~msi',
            'id' => 'doorwayInstaller',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*"([^"]+)";\s*(\$\w+)\s*=\s*str_replace\((\w),"","[^"]+"\);\s*\3\(\'[eval\'.]+\(\'[base64_dcod\'.]+\(\'[gzinflate.\']+\(\'[base64_dcod\'.]+\(\'[^\)]+\)[^;]+;~msi',
            'id' => 'strReplaceAssert',
        ],
        [
            'full' => '~(?:(\$\{\'GLOBALS\'\}\[\'[^\']+\'\])=\'\w+\';\s*)+.*\1\};\}~msi',
            'id' => 'anaLTEAMShell',
        ],
        [
            'full' => '~(\$\w+)=\'[function_exis\'\.]+;\$\w+=\'[charodet\'\.]+;(\$\w+)=\'[eval\'\.]+;(\$\w+)=\'[gzinflate\'\.]+;(if\(!\1\(\'[base64_dcon\'\.]+\)\)({([^{}]*+(?:(?5)[^{}]*)*+)})else{function\s*[^}]+\}\})+(\$\w+)=\'[create_funion\'\.]+;(\$\w+)\s*=\s*\7\(\'([^\']+)\',\2\.\'\(\'\.\3\.\'\(\'\.\'[^(]+\(\9\)\'\.\'\)\'\.\'\)\'\.\';\'\);\8\("([^"]+)"\);~msi',
            'id' => 'zeuraB64Gzinflate',
        ],
        [
            'full' => '~function\s*(\w+)\((\$\w+)\)\{((?:(\$\w+)\s*=\s*str_replace\(\'[^\']+\',\'[^\']+\',\'[^\']+\'\);\s*)+)return\s*(\$\w+\(\'\',\$\w+\(\2\)\);)\}(\$\w+)\s*=\'([^\']+)\';(\$\w+)=\1\(\6\);\8\(\);~msi',
            'id' => 'strReplaceFunc',
        ],
        [
            'full' => '~(\$\w+)=array\(array\(((?:\'[^\']+\',?)+)\)\);\s*(?:/\*[^\*]+\*/)?(\$\w+)(?:/\*[^\*]+\*/)?[^\?]+\?>\s*\.\s*base64_decode\s*\(\s*str_rot13\s*\(\s*join\s*\(\s*\'\'\s*,\s*\3\s*\)\s*\)\s*\)\s*\.\s*\'[^\']+\'\s*\);(?:/\*[^\*]+\*/)?\s*(\$\w+)=array_walk\s*\(\1,\$\w+\);~msi',
            'id' => 'arrayMapB64',
        ],
        [
            'full' => '~preg_replace\(\'/\.\+\/e\',str_replace\("([^"]+)","([^"])*","([^"]+)"\),\'\.\'\);~msi',
            'id' => 'pregReplaceStrReplace',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*(base64_decode\("([^"]+)"\));\s*(\$\w+)\s*=\s*(base64_decode\("([^"]+)"\));\s*echo\s*"[^"]+";\s*if\s*\(\$\w+\s*==\s*"[^"]+"\)\s*\$\w+\s*=\s*"[^"]+"\.\4\."[^"]+"\.\1;~msi',
            'id' => 'echoB64',
        ],
        [
            'full' => '~(\$\w+\s*=\s*"[^"]+"\^"[^"]+";)+\$\w+\s*=\s*\(?(?:@?\$\w+\()+\'([^\']+)\'\)+;(\$\w+\s*=\s*"[^"]+"\^"[^"]+";)+(\$\w+)\s*=\s*\(?(?:@?\$\w+\()+\'\$\w+\',"[^"]+"\^"[^"]+"\);@?\4\(\$\w+\);~msi',
            'id' => 'createFuncXored',
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?array\(((?:\'[^\']\',?)+)\);\s?(?:\$\w{1,50}\s?=\s?(?:\1\[\d+\]\.?)+;\s?)+(\$\w{1,50})\s?=\s?((?:\$\w{1,50}\.?)+)\'(\$\w{1,50})\'\.(?:\1\[\d+\]\.?)+;\5\s?=\s?"([^"]+)";\s?@?eval\(\3\);~msi',
            'id' => 'evalDictArrayConcat',
        ],
        [
            'full' => '~(?:(?:\$\w+="[^"]+"|\$\w+="[a-f0-9\\\\x]+"\^"[a-f0-9\\\\x]+"|\$\w+=(?:"[^"]+"\.?)+);)+\$\w+=(?:\$\w+\.?)+;\s*(\$\w+)\("/(\w+)/e",(\$\w+),"\2"\);(?:\s*\1\("/(\w+)/e",(\$\w+),"\4"\);)?~msi',
            'id' => 'pregReplaceXored',
        ],
        [
            'full' => '~\$\w{1,5}=\'([a-z0-9+/=]{1,100}\s[a-z0-9+/=\s]+)\';(\$\w)=["\']_COOK[\\\\x0-9]{1,10}";\s*if\(!empty\(\${\2}\[["\']key["\']\]\)\){(?:\$\w=[^;]{1,30};\s*){1,5}for\([^)]{1,40}\)(?:\$\w\[?\]?=[^;]{1,30};\s*){1,5}for\([^)]{1,40}\){[^}]{1,150}}if[^;]{1,50};\s*if\(\(\$\w=@?gzinflate\(\$\w\)\)&&\(md5\(substr\(\$\w,\d,\$\w\)\)===\'([a-f0-9]{32})\'\)\){\$\w{1,5}=[^;]{1,100};if\(PHP_VERSION<\'5\'\){[^}]{1,1000}}@create_function\(\'\',"[^"]{1,100}"\.\$\w{1,5}\.\'{\'\);}}\s*DIE\(.{1,500}>"\);~msi',
            'id' => 'base64EncryptedGz',
        ],
        [
            'full' => '~error_reporting\(0\);function\s*(\w+)\((\$\w+)\)\s*\{\s*return\s*strtr\(\2,\s*\'((?:(?=(?:\\\\)*)\\\\.|.)*?)\',\s*\'((?:(?=(?:\\\\)*)\\\\.|.)*?)\'\s*\);\s*\s*\}eval\(\1\(\'([^\']+)\'\)\);(\$\w+)\s*=\s*((?:\$\w+\[\d+\]\()+\'[^\']+\'\)+;)\$\w+\[\d+\]\(\6\);~msi',
            'id' => 'Bloos3rpent',
        ],
        [
            'full' => '~(@?eval\(@?gzinflate\(base64_decode\(preg_replace\(\'([^\']+)\',\s*\'([^\']*)\',\s*\'([^\']+)\'\)+;)\s*(preg_replace\("/(\w+)/e".\s*\'\')@?eval\(@?gzinflate\(\w+\(base64_decode\((preg_replace\(\'([^\']+)\',\s*\'([^\']*)\',\s*)\'([^\']+)\'\)+;(\'\',"\6"\);)~msi',
            'id' => 'doublePregReplace',
        ],
        [
            'full' => '~(\$\w+)="([^"]+)";(\$\w+)=array\(((?:\d+,?)+)\);(\$\w+)="([^"]+)";(\$\w+)="";for\s*\((\$\w+)=0;\8<\d+;\8\+\+\)\{(\$\w+)=\3\[\8\]\s*;\s*\7\.=\s*\1\[\9\]\s*;\s*\}\7\("eval\(base64_decode\(gzinflate\(base64_decode\(\5\),0\)\)\)"\);~msi',
            'id' => 'zeura2',
        ],
        [
            'full' => '~(\$\w+)="([\\\\a-fx0-9])+";(\$\w+)="([\\\\a-fx0-9])+";(\$\w+)=\1\("",\3\("([^"]+)"\)\);\5\(\);~msi',
            'id' => 'createFuncEscaped',
        ],
        [
            'full' => '~error_reporting\s*\(0\);\s*function\s*([^\(]+)\(\)\s*\{\s*\$[^= ]+\s*=\s*[0-9a-fx]+;\s*\$[^= ]+\s*=\s*func_get_args\s*\(\);\s*if\s*\(+\$[^}]+}\s*if\s*\(+[^{]+\{\s*return\(+parse_str\("[^=]+=([^"]+)",[^}]+\}\s*\}\s*function\s*([^(]+)\(\)\{\s*\$[^=]+=func_get_args\(\);\s*\$[^=]+=[0-9a-fx]+;(\s*if\s*\([^}]+\})+\s*\}\s*function\s*([^(]+)\(\$[^)]+\)\s*{[^}]+\}\s*return\s*\$[^;]+;\s*\}\s*eval\(\5\(\1\([0-9a-fx]+,[0-9a-fx]+\)+;~msi',
            'id' => 'maskedDeltaOrd',
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?(?:chr\(-?\d{1,5}[+\-*^/]-?\d{1,5}\)\s?\.?)+;\s?(\$\w{1,50})\s?=\s?"((?:[^-]-m\s+){10}[^"]+)";\s?\$\w{1,50}\s?=\s?\w{1,50}\(\s?\1\s?\(\s?array\("-m\s",\s?PHP_EOL\),\s?"",\s?\2\)\);\s?function\s?\w{1,50}\s?\((\$\w{1,50})\s?\){\s?.*?\$\w{1,50}\(\4\);}\s?\$\w{1,50}\s?=\s?(?:chr\(-?\d{1,5}[+\-*^/]-?\d{1,5}\)\s?\.?)+;\s?(\$\w{1,50})\s?=\s?"([^"]+)";\s?(\$\w{1,50})\s?=\s?array\(\);\s?for\s?\((\$\w+)\s?=0;\s?\8\s?<\s?256;\s?\+\+\8\)\s?{\s?\7\s?\[\8\]\s?=\s?\8;\s?}\s?\$\w{1,50}\s?=\s?0;\s?for\s?\(\8\s?=0;\s?\8\s?<\s?256;\s?\+\+\8\)\s?{.*?ord\(\$\w{1,50}\s?\[\$\w{1,50}\s?%\s?(\d+)\]\)\)\s?%\s?256;.*?for\s?\(.*?<(\d+);\s?\+\+\$\w{1,50}\).*?}\s?\$\w{1,50}\s?=\s?\4;\s?\$\w{1,50}\s?=\s?(?:chr\(-?\d{1,5}[+\-*^/]-?\d{1,5}\)\s?\.?)+;\s?\$\w{1,50}\("/\w+/e",\s?(?:chr\(-?\d{1,5}[+\-*^/]-?\d{1,5}\)\s?\.?)+,"\w+"\);~msi',
            'id' => 'decodeStrMultiForDict',
        ],
        [
            'full' => '~(?:\$\w{1,50}\s?=\s?\'[^\']+\';\s?)+(?:\$\w{1,50}\s?=\s?str_replace\([\'"][^\'"]+[\'"],\s?["\']{2},\s?[\'"][^\'"]+[\'"]\);\s?){2}(\$\w{1,50})\s?=\s?\$\w{1,50}\(\$\w{1,50}\([\'"][^\'"]+[\'"]\),\s?\$\w{1,50}\([\'"]([^\'"]+)[\'"]\)\);\s?\1\(((?:\$\w{1,50}\s?\.?)+)\);~msi',
            'id' => 'B64ConcatedStrVars',
        ],
        [
            'full' => '~\$\w{1,50}\s?=\s?(\w{1,50})\s?\(array\((?:\d+,?)+\)\);\s?\$\w{1,50}\s?=\s?\1\(array\((?:\d+,?)+\)\);\s?\$\w{1,50}\s?=\s?fopen\(\$\w{1,50},\s?\1\(array\((?:\d+,?)+\)\)\);\s?\$\w{1,50}\s?=\s?fputs\(\$\w{1,50},\s?\$\w{1,50}\);\s?fclose\(\$\w{1,50}\);\s?function\s?\1\(\s?array\s?(\$\w{1,50})\)\s?{\s?if\(\2\)\s?{\s?foreach\s?\(\2\s?as\s?\$\w{1,50}\)\s?{\s?\$\w{1,50}\s?\.=\s?chr\(\$\w{1,50}\);\s?}\s?}\s?return\s?\$\w{1,50};\s?}~msi',
            'id' => 'chrFuncVars',
        ],
        [
            'full' => '~((?:\$\w{1,50}\s?=\s?(?:"[^"]+"\.?)+;)+)\$\w{1,50}\((?:"[^"]+"\.?)+,((?:\$\w{1,50}\()+(?:"[^"]+"\.?)+\)\))\s?,\s?(?:"[^"]+"\.?)+\);~msi',
            'id' => 'concatVarsFuncs',
        ],
        [
            'full' => '~\$GLOBALS\[\'(\w+)\'\];\s*global\s*\$\1;\s*\$\1=\$GLOBALS;(\$\1\[\'(\w+)\']="([^"]+)";)\s*(?:@?\$\1\[(\$\1\[\'\3\'\]\[\d+\]\.?)+\]\s*=(?:\s*(?:\$\1\[\'\3\'\]\[\d+\]\.?)+|\$_POST|\$_COOKIE);\s*)+(?:.{1,120}\$\1\[\'\3\'\])+[^}]+\}exit\(\);\}~msi',
            'id' => 'globalDictVar',
        ],
        [
            'full' => '~\$\w+\s*=\s*\'(\w+)\'\^[^;\']+;\s*(\$\w+)\s*=\s*\w+\&\'[^\';]+\';\s*.*?\2\&\s*[^;]+;\s*\$\w+\s*=\s*\$\w+\&\$\w+;\s*\$\w+\s*=\s*[^;]+;\s*(?:\$\w+\s*=\s*\$\w+\&\$\w+;\s*)+if\s*\(\!(?:\$\w+\s*\()+[^;]+;\s*\'[^\']+\';~msi',
            'id' => 'garbageVars',
        ],
        [
            'full' => '~\$\w+\s*=(?:\s*chr\(-?\d+\^-?\d+\)\s*\.?\s*)+;\s*\$\w+\s*=\s*(?:<<<\'(\w+)\'\s*(.*?)\1|"([^"]+)");\s*\$\w+\s*=\s*(\w+)\((?:\s*\$\w+\s*\(\s*array\("([^"]+)"\),"",\$\w+\)|\s*\$\w+\s*\(\$\w+\))\);\s*function\s*\4\s*\(\$\w+\)\s*\{\s*(?:\$\w+=(?:chr\(-?\d+\^-?\d+\)\s*\.?)+;\s*)+\$\w+=\&\$\w+;\s*\$\w+\.=\$\w+;return\s*\$\w+\(\$\w+\);\}\s*\$\w+\s*=(?:\s*chr\(-?\d+\^-?\d+\)\s*\.?)+;\s*\$\w+\s*=\s*"([^"]+)";\s*(?:\s*\$\w+\s*=\s*array\(\);)?(?:(?:\s*for\s*\(\$\w+=0;\s*\$\w+<\d+;\s*\+\+\$\w+\)\s*\{\s*[^}]+\}(?:\s*\$\w+\s*=\s*(?:0;|\$\w+;))+)+|for\(\$\w+\s*=\s*0;\$\w+<\d+;\+\+\$\w+\)\{\s*\$\w+\{\s*\$\w+\}=\$\w+\{\s*\$\w+\}\^\$\w+\{\s*\$\w+%\d+\};\}\s*\$\w+\s*=\s*\$\w+;)\s*\$\w+\s*=\s*(?:chr\(-?\d+\^-?\d+\)\s*\.?\s*)+;\s*\$\w+\("/(\w+)/e",\s*(?:chr\(-?\d+\^-?\d+\)\s*\.?\s*)+,"\7"\);~msi',
            'id' => 'chrMinXor',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*"([^;]+;)";\s*@assert\(\1\);~msi',
            'id' => 'assertUrlDecode',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*array\(\'([^\)]+)\'\);\$\w+\s*=\s*array\(\'[base64_dco\'\.,]+\)\s*;\s*\$\w+\s*=\s*array\([gzuncompres\'\.,]+\)\s*;\s*(?:\$\w+\s*=\s*\$\w+\[\d\]\.\$\w+\[\d\];\s*)+eval\((?:\$\w+\()+implode\(\'\',\s*\1\)+;~msi',
            'id' => 'implodeB64Gz',
        ],
        [
            'full' => '~((?:\$\w+\s*=\s*"\w";\s*)+)((?:\$\w+\s*=(?:\s*\$\w+\s*\.?)+;\s*)+)(eval\((?:\$\w+\()+"[^"]+"\)+;)~msi',
            'id' => 'X12',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*function\((\$\w+)\)\s*\{\s*return\s*strtr\(\2,\s*"([^"]+)",\s*"([^"]+)"\);\s*\};\$\w\s+=\s*\$\w+\("([^"]+)"\);\$\w+\s*=\s*\$\w+\(\);\$\w+\s*=\s*\$\w+\[\1\("([^"]+)"\)\];foreach\s*\(\$\w+\s*as\s*\$\w+\s*=>\s*\$\w+\)\s*\{[^}]+\}(?:if\s*\([^}]+})+\}(\$\w+)\s*=\s*\$\w+\("",\s*(?:\$\w+\()+"([^"]+)"\)+;\7\(\);~msi',
            'id' => 'WpNightmare',
        ],
        [
            'full' => '~preg_replace\(\'/(\w+)/e\',strrev\(\'\)\)\\\\\'([^\']+)\'\([base64_dco(val]+\'\),\'\1\'\);~msi',
            'id' => 'pregB64Strrev',
        ],
        [
            'full' => '~global\s(\$[^;]+);if\(!defined\([\'"][^\'"]+[\'"]\)\){define\([\'"][^\'"]+[\'"],__FILE__\);function\s?([^(]+)\((\$[^,]+),(\$[^=]+)=[\'"]{2}\){global\s?\1;\3=base64_decode\(\3\);if\(empty\(\3\)\)\s?return\s?[\'"]{2};if\(\4==[\'"]{2}\){return\s?\~\3;}else{(\$[^=]+)=\1\[\'([^\']+)\'\]\(\3\);\4=\1\[\'([^\']+)\'\]\(\4,\5,\4\);return\s?\3\^\4;}}}((?:(?:\1\[\'[^\']+\'\]=\2\(\'[^\']+\',\'[^\']*\')\);)+)(?:\1\[\'[^\']+\'\]=isset[^;]+;)+(eval\(\1\[\'([^\']+)\'\]\(\'([^\']+)\'\)\);)return;\?>~msi',
            'id' => 'utfCharVarsFuncEval',
        ],
        [
            'full' => '~(?:\$\w{1,50}\s?=\s?[\'"][^\'"]+[\'"];\s?)+(\$\w{1,50})\s?=\s?(?:\d+[\+]*)+;.*?\$\w{1,50}\s?=\s?(\w+)\([\'"][^\'"]+[\'"],\s?\1,\s?[\'"][^\'"]+[\'"]\);.*?(\$\w{1,50})\s?=\s?(\$\w{1,50})\(\'\$\w{1,50}\',\s?(\$\w{1,50})\((\$\w{1,50})\((\$\w{1,50}),\s?[\'"](\d+)[\'"]\)\)\);(?:\$\w{1,50}\s?=\s?[\'"][^\'"]+[\'"];\s?)+\$\w{1,50}\(\$\w{1,50},\$\w{1,50}\([\'"]{2},\s?\3\(\$\w{1,50}\(\5\(\6\(\7,\s?[\'"](\d+)[\'"]\)\)\)\)\),\$\w{1,50}\);(?:\$\w{1,50}\s?=\s?[\'"][^\'"]+[\'"];)+\s?function\s\2\(.*return\s\$\w{1,50};}(?:\$\w{1,50}\s?=\s?[\'"][^\'"]+[\'"];\s?)+~msi',
            'id' => 'manyVarFuncCreateFuncWrap',
        ],
        /*[
            'full' => '~class\s*(\w+)\s*{\s*function\s*__construct\(\)\s*\{\s*(\$\w+)\s*=\s*\$this->(\w+)\(\$this->\w+\);\s*\2\s*=\s*\$this->(\w+)\(\$this->(\w+)\(\2\)\);\s*\2\s*=\s*\$this->(\w+)\(\2\);\s*if\(\2\)\s*\{\s*\$this->(\w+)\s*=\s*\2\[\d\];\s*\$this->(\w+)\s*=\s*\2\[\d\];\s*\$this->\w+\s*=\s*\2\[\d\];\s*\$this->(\w+)\(\2\[\d\],\s*\2\[\d\]\);\s*\}\s*\}\s(?:function\s*\w+\((?:(?:\$\w+),?\s?){0,3}\)\s*\{\s*(?:\$this->\w+\s*=\s*\$\w+;\s*\$this->\w+\s*=\s*\$\w+;\s*\$this->\w+\s*=\s*\$this->\3\(\$this->\w+\);\s*\$this->\w+\s*=\s*\$this->\5\(\$this->\w+\);\s*\$this->\w+\s*=\s*\$this->\w+\(\);\s*if\(strpos[^{]+{[^}]+}\s*\}\s*|\$\w+\s*=\s*(?:\$this->\w+\[\d\]\.?)+;\s*(?:\$\w+\s*=\s*@?\$\w+\((?:\'\',\s*)?(?:(?:\$\w+),?\s?){0,3}\);)?\s*(?:return\s*\$\w+(?:\((?:"[^"]+",\s*"",\s*\$\w+)?\))?;)?\s*\}\s*|\$\w+\s*=\s*strlen\(\$\w+\)\s*\+\s*strlen\(\$\w+\);\s*while\(strlen\(\$\w+\)\s*<\s*\$\w+\)\s*\{\s*\$\w+\s*=\s*ord\(\$\w+\[\$this->\w+\]\)\s*-\s*ord\(\$\w+\[\$this->\w+\]\);\s*\$\w+\[\$this->\w+\]\s*=\s*chr\(\$\w+\s*%\s*\(2048/8\)\);\s*\$\w+\s*\.=\s*\$\w+\[\$this->\w+\];\s*\$this->\w+\+\+;\s*\}\s*return\s*\$\w+;\s*\}\s*|\$this->\w+\s*=\s*\$this->\w+\(\$this->\w+,\s*\$this->\w+,\s*\$this->\w+\);\s*\$this->\w+\s*=\s*\$this->\w+\(\$this->\w+\);\s*return\s*\$this->\w+;\s*\}\s*))+var\s*\$\w+;\s*var\s*\$\w+\s*=\s*0;\s*(?:var\s*\$\w+\s*=\s*array\([\'gzinflatecr_utobs64dtkp, ]+\);\s*)+var\s*\$\w+\s*=\s*\'([^\']+)\';\s*var\s*\$\w+\s*=\s*\'([^\']+)\';\s*\}\s*new\s*\1\(\);~msi',
            'id' => 'classDecoder',
        ],
        [
            'full' => '~if\(isset\(\$_POST\[\'\w+\'\]\)\){echo[\s\'\w]+;\s*exit\(\);}\s*if\(isset\(\$_COOKIE\)\){(\$\w+)=\$_COOKIE;\(count\(\1\)==\d+&&in_array\(gettype\(\1\)\.count\(\1\),\1\)\)\?\(\(\1\[\d+\]=\1\[\d+\]\.\1\[\d+\]\)&&\(\1\[\d+\]=\1\[\d+\]\(\1\[\d+\]\)\)&&\(\1=\1\[\d+\]\(\1\[\d+\],\1\[\d+\]\(\1\[\d+\]\)\)\)&&\1\(\)\):\1;}\s*if\(!isset\(\$_POST\[\'\w+\'\]\)&&!isset\(\$_GET\[\'\w+\'\]\)\){exit\(\);}\s*(?:(\$\w+)\[\d+\]=\'\w+\';)+\s*if\(isset\(\$_POST\[\'\w+\'\]\)\){\$\w+=\$_POST\[\'\w+\'\];}else{\$\w+=\$_GET\[\'\w+\'\];}\s*\$\w+\s*=\s*array_flip\(str_split\(\'(\w+)\'\)\);\$\w+\s*=\s*str_split\(md5\(\$\w+\)\.md5\(\$\w+\)\);\$\w+\s*=\s*array\(\);\$\w+\s*=\s*\'\';\s*foreach\s*\(\$\w+\s*as\s*\$\w+\s*=>\s*\$\w+\)\s*{while\s*\(1\)\s*{if\(isset\(\$\w+\[\$\w+\[\$\w+\]\]\)\){\$\w+\[\$\w+\]\+\+;}else\{\$\w+\[\$\w+\[\$\w+\]\]=\'\';break;}}}\s*foreach\s*\(\$\w+\s*as\s*\$\w+\s*=>\s*\$\w+\)\s*{\$\w+\s*\.=\s*\$\w+\[\$\w+\];}\s*eval\(trim\(base64_decode\(base64_decode\(\$\w+\)\)\)\);~mis',
            'fast' => '~if\(isset\(\$_POST\[\'\w+\'\]\)\){echo[\s\'\w]+;\s*exit\(\);}\s*if\(isset\(\$_COOKIE\)\){(\$\w+)=\$_COOKIE;\(count\(\1\)==\d+&&in_array\(gettype\(\1\)\.count\(\1\),\1\)\)\?\(\(\1\[\d+\]=\1\[\d+\]\.\1\[\d+\]\)&&\(\1\[\d+\]=\1\[\d+\]\(\1\[\d+\]\)\)&&\(\1=\1\[\d+\]\(\1\[\d+\],\1\[\d+\]\(\1\[\d+\]\)\)\)&&\1\(\)\):\1;}\s*if\(!isset\(\$_POST\[\'\w+\'\]\)&&!isset\(\$_GET\[\'\w+\'\]\)\){exit\(\);}\s*(?:(\$\w+)\[\d+\]=\'\w+\';)+\s*if\(isset\(\$_POST\[\'\w+\'\]\)\){\$\w+=\$_POST\[\'\w+\'\];}else{\$\w+=\$_GET\[\'\w+\'\];}\s*\$\w+\s*=\s*array_flip\(str_split\(\'(\w+)\'\)\);\$\w+\s*=\s*str_split\(md5\(\$\w+\)\.md5\(\$\w+\)\);\$\w+\s*=\s*array\(\);\$\w+\s*=\s*\'\';\s*foreach\s*\(\$\w+\s*as\s*\$\w+\s*=>\s*\$\w+\)\s*{while\s*\(1\)\s*{if\(isset\(\$\w+\[\$\w+\[\$\w+\]\]\)\){\$\w+\[\$\w+\]\+\+;}else\{\$\w+\[\$\w+\[\$\w+\]\]=\'\';break;}}}\s*foreach\s*\(\$\w+\s*as\s*\$\w+\s*=>\s*\$\w+\)\s*{\$\w+\s*\.=\s*\$\w+\[\$\w+\];}\s*eval\(trim\(base64_decode\(base64_decode\(\$\w+\)\)\)\);~mis',
            'id' => 'scriptWithPass',
        ],*/

        /*************************************************************************************************************/
        /*                                          JS patterns                                                      */
        /*************************************************************************************************************/

        [
            'full' => '~((<script[^>]*>)\s*.{0,300}?)?(eval\()?String\.fromCharCode\(([\d,\s]+)\)(?(3)\);+|)(\s*.{0,300}?</script>)?~msi',
            'fast' => '~String\.fromCharCode\([\d,\s]+\)~msi',
            'id'   => 'JS_fromCharCode',
        ],
        [
            'full' => '~(?:eval\()?unescape\(\'([^\']+)\'\)\);\s{0,50}eval\(unescape\(\'([^\']+)\'\)\s{0,50}\+\s{0,50}\'([^\']+)\'\s{0,50}\+\s{0,50}unescape\(\'[^\']+\'\)\);~msi',
            'fast' => '~unescape\(\'([^\']+)\'\)\);\s{0,50}eval\(unescape\(\'([^\']+)\'\)\s{0,50}\+\s{0,50}\'([^\']+)\'\s{0,50}\+\s{0,50}unescape\(\'[^\']+\'\)\);~msi',
            'id'   => 'JS_unescapeContentFuncWrapped',
        ],
        [
            'full' => '~var\s*(\w+)=\s*\[((?:\'[^\']+\',?)+)\];\(function\(\w+,\w+\)\{var\s*\w+=function\(\w+\)\{while\(--\w+\)\{\w+\[\'push\'\]\(\w+\[\'shift\'\]\(\)\);\}\};.*?\(\1,(0x\w+)\)\);var\s*(\w+)=function\s*\((\w+),(\w+)\)\s*\{\5=\5-0x\d+;var\s*\w+=\w+\[\5\];if\(\4\[\'\w+\']===undefined\)\{\(function\(\)\{var\s*(\w+);try\{var\s*(\w+)=Function\(\'[^;]++;\'\);\7=\8\(\);\}catch\(\w+\)\{\7=window;\}var\s*\w+=\'[^\']+\';\7\[\'atob\'\]\|\|\(\7\[\'atob\'\]=function\(\w+\)\{[^}]+\}return\s*\w+;\}\);\}\(\)\);var\s*\w+=function\(\w+,\w+\)\{var\s*\w+=.+?String\[\'fromCharCode\'\].+?return\s*\w+;\};\4\[\'\w+\'\]=\w+;\4\[\'\w+\'\]=\{\};\4\[\'\w+\'\]=!!\[\];\}var\s*\w+=\4\[\'\w+\'\]\[\w+\];.+?((.+?\4\(\'0x\d+\',\'[^\']+\'\)).+?)+[^\s]+~msi',
            'fast' => '~var\s*(\w+)=\s*\[((?:\'[^\']+\',?)+)\];\(function\(\w+,\w+\)\{var\s*\w+=function\(\w+\)\{while\(--\w+\)\{\w+\[\'push\'\]\(\w+\[\'shift\'\]\(\)\);\}\};.*?var\s*(\w+)=function\s*\((\w+),(\w+)\)\s*\{\4=\4-0x\d+;var\s*\w+=\w+\[\4\];if\(\3\[\'\w+\']===undefined\)\{\(function\(\)\{var\s*(\w+);try\{var\s*(\w+)=Function\(\'[^;]++;\'\);\6=\7\(\);\}catch\(\w+\)\{\6=window;\}var\s*\w+=\'[^\']+\';\6\[\'atob\'\]\|\|\(\6\[\'atob\'\]=function\(\w+\)\{[^}]+\}return\s*\w+;\}\);\}\(\)\);var\s*\w+=function\(\w+,\w+\)\{var\s*\w+=.+?String\[\'fromCharCode\'\].+?return\s*\w+;\};\3\[\'\w+\'\]=\w+;\3\[\'\w+\'\]=\{\};\3\[\'\w+\'\]=!!\[\];\}var\s*\w+=\3\[\'\w+\'\]\[\w+\];.+?((.+?\3\(\'0x\d+\',\'[^\']+\'\)).+?)+[^\s]+~msi',
            'id'   => 'JS_ObfuscatorIO',
        ],
        [
            'full' => '~<script\s(?:language|type)=[\'"](?:text/)?javascript[\'"]>\s*(?:(?:<!--.*?-->)?\s?<!--\s*)?document\.write\((?:unescape\()?[\'"]([^\'"]+)[\'"]\)\)?;(?:\s?//-->)?\s*</script>~msi',
            'id'   => 'JS_documentWriteUnescapedStr',
        ],
        [
            'full' => '~eval\(function\(p,a,c,k,e,(?:d|r)\)\{.*?}\(\'(.*)\', *(\d+), *(\d+), *\'(.*?)\'\.split\(\'\|\'\),\d,\{\}\)\);~msi',
            'id'   => 'JS_deanPacker',
        ],
        [
            'full' => '~\(function\s*\(\$,\s*document\)\s*({([^{}]*+(?:(?1)[^{}]*)*+)})\)\(\(function\s*\((\w),\s*(\w)\)\s*\{\s*function\s*(\w)\((\w+)\)\s*\{\s*return\s*Number\(\6\)\.toString\(36\)\.replace\(/\[0\-9\]/g,\s*function\s*\((\w)\)\s*\{\s*return\s*String\.fromCharCode\(parseInt\(\7,\s*10\)\s*\+\s*65\);\s*\}\s*\);\s*\}\s*var\s*\w+\s*=\s*\{\s*\$:\s*function\s*\(\)\s*\{\s*var\s*\w+\s*=\s*\{\};\s*[^}]+\}\s*return\s*\w;\s*\}\s*\};\s*\3\s*=\s*\3\.split\(\'\+\'\);\s*for\s*\(var\s*\w\s*=\s*0;\s*\w\s*<\s*(\d+);\s*\w\+\+\)\s*\{\s*\(function\s*\(\w\)\s*\{\s*Object\.defineProperty\(\w,\s*\5\(\w\),\s*\{\s*get:\s*function\s*\(\)\s*\{\s*return\s*\w\[\w\]\[0\]\s*\!==\s*\';\'\s*\?\s*\4\(\w\[\w\]\)\s*:\s*parseFloat\(\w\[\w\]\.slice\(1\),\s*10\);\s*\}\s*\}\);\s*\}\(\w\)\);\s*\}\s*return\s*\w;\s*\}\(\'([^\']+)\',\s*function\s*\(\w\)\s*\{\s*for\s*\(var\s*(\w)\s*=\s*\'([^\']+)\',\s*(\w)\s*=\s*\[([^\]]+)\],\s*\w\s*=\s*\'\'[^{]+\{\s*var\s*(\w)\s*=\s*\10\.indexOf\(\w\[\w\]\);\s*\12\.indexOf\(\w\[\w\]\)\s*>\s*\-1\s*&&\s*0\s*===\s*\12\.indexOf\(\w\[\w\]\)\s*&&\s*\(\w\s*=\s*0\),\s*\14\s*>\s*-1\s*&&\s*\(\w\s*\+=\s*String\.fromCharCode\(\w\s*\*\s*\10\.length\s*\+\s*\14\),\s*\w\s*=\s*1\);\s*\}\s*return\s*\w;\s*\}\)\),\s*\(function\s*\(\w\)\s*\{\s*var\s*_\s*=\s*{};\s*for\s*\(\w\s*in\s*\w\)\s*\{\s*try\s*\{\s*_\[\w\]\s*=\s*\w\[\w\]\.bind\(\w\);\s*\}\s*catch\s*\(\w\)\s*\{\s*_\[\w\]\s*=\s*\w\[\w\];\s*\}\s*\}\s*return\s*_;\s*\}\)\(document\)\)~msi',
            'id'   => 'JS_objectDecode',
        ],
        /*************************************************************************************************************/
        /*                                          PYTHON patterns                                                 */
        /*************************************************************************************************************/

        [
            'full' => '~eval\(compile\(zlib\.decompress\(base64\.b64decode\([\'"]([^\'"]+)[\'"]\)\),[\'"]<string>[\'"],[\'"]exec[\'"]\)\)~msi',
            'id'   => 'PY_evalCompileStr',
        ],
    ];

    private $full_source;
    private $prev_step;
    private $cur;
    private $obfuscated;
    private $max_level;
    private $max_time;
    private $run_time;
    private $fragments;
    private $grabed_signature_ids;
    private $active_fragment;
    private $excludes;

    public function __construct($text, $origin_text = '', $max_level = 30, $max_time = 5)
    {
        $this->text         = $text;
        $this->full_source  = $text;

        if ($this->defineSpecificObfuscator($text, $origin_text)) {
            $this->text         = $origin_text;
            $this->full_source  = $origin_text;
        }

        $this->max_level            = $max_level;
        $this->max_time             = $max_time;
        $this->fragments            = [];
        $this->grabed_signature_ids = [];
        $this->excludes             = [];
    }

    private function getPreviouslyDeclaredVars($string, $level = 0)
    {
        $foundVar = false;
        foreach ($this->fragments as $frag => $fragment) {
            if ($foundVar || strpos($frag, '$codelock_lock') !== false) {
                break;
            }

            $subject = '';
            $pos     = strpos($fragment, $string . '=') ?: strpos($fragment, $string . ' ');
            if ($pos !== false && strpos(substr($fragment, $pos + strlen($string)), '$') !== 1) {
                $subject = substr($fragment, $pos);
            } else {
                $pos = strpos($frag, $string . '=') ?: strpos($frag, $string . ' ');
                if ($pos !== false) {
                    $subject = substr($frag, $pos);
                } else {
                    $pos = strpos($this->full_source, $string . '=') ?: strpos($this->full_source, $string . ' ');
                    if ($pos !== false) {
                        $subject = substr($this->full_source, $pos);
                    } else {
                        continue;
                    }
                }
            }

            if (@preg_match_all('~(\$\w{1,40})\s*=\s*((\(*(base64_decode\s*\(|pack\s*\(\'H\*\',|convert_uudecode\s*\(|htmlspecialchars_decode\s*\(|stripslashes\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|eval\s*\()+((?:(["\'])((.*?[^\\\\])??((\\\\\\\\)+)?+)\6[^;]+)|(?:\$\w+)\)*;*))|((["\'])((.*?[^\\\\])??((\\\\\\\\)+)?+)\12));~msi', $subject, $matches, PREG_SET_ORDER) > 0) {
                foreach ($matches as $m) {
                    if ($m[1] !== $string) {
                        continue;
                    }
                    if (isset($m[12]) && $m[12] !== '') {
                        $str = substr(@$m[2], 1, -1);
                        $foundVar = true;
                    }
                    if (isset($m[5]) && $m[5] !== '') {
                        $str = $this->unwrapFuncs($m[2], $level + 1);
                        $foundVar = true;
                    }

                    $this->fragments[$this->active_fragment] = str_replace($m[0], '', $this->fragments[$this->active_fragment]);
                    break;
                }
            }
        }
        return $str;
    }

    private function defineSpecificObfuscator($text, $origin_text)
    {
        if (strpos($origin_text, '#!/') === 0                                                                                                       //not a php file
            || strpos($origin_text, '0=__FILE__;')                                             &&
                (strpos($origin_text, ';return;?>') || strpos($origin_text, 'This file is protected by copyright law and provided under'))  //lockit1 || evalFileContentBySize
            || strpos($origin_text, 'The latest version of Encipher can be obtained from')  && strpos($origin_text, '\'@ev\'));')           //EvalFileContent
            || strpos($origin_text, 'substr(file_get_contents(__FILE__),')                  && strpos($origin_text, '__halt_compiler();')   //EvalFileContentOffset
            || strpos($text, 'create_function(\'\', base64_decode(@stream_get_contents(')   && strpos($text, '@fopen(__FILE__,')            //wpKey (eval)
            || strpos($origin_text, '//base64 - gzinflate - str_rot13 - convert_uu - gzinflate - base64')                                          //
        ) {
            return true;
        }

        $text_wo_ws = str_replace(' ', '', $text);
        if (strpos($text_wo_ws, '=file(__FILE__);eval(base64_decode(')      && strpos($text_wo_ws, '));__halt_compiler();') //zeura hack
            || strpos($text_wo_ws, 'define(\'__LOCALFILE__\',__FILE__);')   && strpos($text_wo_ws, '__halt_compiler();')    //obf_20200527_1
            || strpos($text_wo_ws, '");$cvsu=$gg') || strpos($text_wo_ws, '$cyk=$cyd[')                                     //TinkleShell
        ) {
            return true;
        }

        return false;
    }

    private function checkObfuscatorExcludes($str, $type = false, $matches = [])
    {
        switch ($type) {
            case '':
                if(strpos($str, '# Malware list detected by AI-Bolit (http') !== false) {
                    return '';
                }
                if(strpos($str, '#Malware list detected by AI-Bolit(http') !== false) {
                    return '';
                }
                if(strpos($str, '<div class="header">Отчет сканера ') !== false) {
                    return '';
                }
                if (strpos($str, '$default_action="FilesMan"') !== false) {
                    return '';
                }
                break;
            case 'echo':
                if (preg_match('~\$_[GPRC](?:OST|ET|EQUEST|OOKIE)~ms', $matches[0])) {
                    return '';
                }
                if (!isset($matches[5]) || $matches[5] === '') {
                    return '';
                }
                break;
            case 'eval':
                if (strpos($matches[0], 'file_get_contents') !== false) {
                    return '';
                }
                if (preg_match('~\$_[GPRC](?:OST|ET|EQUEST|OOKIE)~ms', $matches[0])) {
                    return '';
                }
                if (strpos($matches[0], '=> array(\'eval(base64_decode(\')') !== false) {
                    return '';
                }
                if (@$matches[6] === '\'";') {
                    return '';
                }
                break;
        }
        return $type;
    }

    public function getObfuscateType($str)
    {
        $btlimit = ini_get('pcre.backtrack_limit');
        $reclimit = ini_get('pcre.recursion_limit');
        $str = preg_replace('~\s+~', ' ', $str);
        $l_UnicodeContent = Helpers::detect_utf_encoding($str);
        $ret = '';
        if ($l_UnicodeContent !== false) {
            if (function_exists('iconv')) {
                $str = iconv($l_UnicodeContent, "CP1251//IGNORE", $str);
            }
        }
        if ($this->checkObfuscatorExcludes($str) === '') {
            return '';
        }
        ini_set('pcre.backtrack_limit', self::PCRE_BACKTRACKLIMIT);
        ini_set('pcre.recursion_limit', self::PCRE_RECURSIONLIMIT);
        foreach (self::$signatures as $signature) {
            $fast_regexp = isset($signature['fast']) ? $signature['fast'] : $signature['full'];
            if (isset($this->excludes[$str]) && in_array($signature['id'], $this->excludes[$str])) {
                continue;
            }

            if (preg_match($fast_regexp, $str, $matches)) {
                $ret = $this->checkObfuscatorExcludes($str, $signature['id'], $matches);
                break;
            }
        }
        ini_set('pcre.backtrack_limit', $btlimit);
        ini_set('pcre.recursion_limit', $reclimit);
        return $ret;
    }

    private function getObfuscateFragment($str, $type)
    {
        foreach (self::$signatures as $signature) {
            if ($signature['id'] == $type && preg_match($signature['full'], $str, $matches)) {
                return $matches;
            }
        }
        return '';
    }

    public function getFragments()
    {
        if (count($this->fragments) > 0) {
            return $this->fragments;
        }
        return false;
    }

    public function getGrabedSignatureIDs()
    {
        return array_keys($this->grabed_signature_ids);
    }

    private function grabFragments()
    {
        if ($this->cur === null) {
            $this->cur = $this->text;
        }
        $str = $this->cur;
        reset(self::$signatures);
        while ($sign = current(self::$signatures)) {
            $regex = $sign['full'];
            if (preg_match($regex, $str, $matches)) {
                $this->grabed_signature_ids[$sign['id']] = 1;
                $this->fragments[$matches[0]] = $matches[0];
                $str = str_replace($matches[0], '', $str);
            } else {
                next(self::$signatures);
            }
        }
    }

    private function deobfuscateFragments()
    {
        $prev_step = '';
        if (!count($this->fragments)) {
            return;
        }
        $i = 0;
        foreach ($this->fragments as $frag => $value) {
            if ($frag !== $value) {
                continue;
            }
            $this->active_fragment = $frag;
            $type = $this->getObfuscateType($value);

            while ($type !== '' && $i < 50) {
                $match  = $this->getObfuscateFragment($value, $type);
                if (!is_array($match)) {
                    break;
                }
                $find   = $match[0] ?? '';
                $func   = 'deobfuscate' . ucfirst($type);

                try {
                    $temp = @$this->$func($find, $match);
                } catch (Exception $e) {
                    $temp = '';
                }
                if ($temp !== '' && $temp !== $find) {
                    $value = str_replace($find, $temp, $value);
                } else {
                    $this->excludes[preg_replace('~\s+~', ' ', $value)][] = $type;
                    $this->fragments[$frag] = $value;
                    $type = $this->getObfuscateType($value);
                    continue;
                }

                $this->fragments[$frag] = $value;
                $type = $this->getObfuscateType($value);
                $value_hash = hash('sha256', $value);
                if ($prev_step === $value_hash) {
                    break;
                }
                $prev_step = $value_hash;
                $i++;
            }
            $this->fragments[$frag] = Helpers::postProcess($this->fragments[$frag]);
        }
    }

    public function deobfuscate($hangs = 0, $prev_step = '')
    {
        $btlimit = ini_get('pcre.backtrack_limit');
        $reclimit = ini_get('pcre.recursion_limit');
        ini_set('pcre.backtrack_limit', self::PCRE_BACKTRACKLIMIT);
        ini_set('pcre.recursion_limit', self::PCRE_RECURSIONLIMIT);
        $deobfuscated   = '';
        $this->run_time = microtime(true);
        $this->cur      = $this->text;

        $this->grabFragments();
        $this->deobfuscateFragments();

        $deobfuscated = $this->cur;

        if (count($this->fragments) > 0 ) {
            foreach ($this->fragments as $fragment => $text) {
                $deobfuscated = str_replace($fragment, $text, $deobfuscated);
            }
        }

        $deobfuscated = Helpers::postProcess($deobfuscated);

        if (substr_count(substr($deobfuscated, 0, 400), 'base64_decode(\'') > 3) {
            $deobfuscated = preg_replace_callback('~base64_decode\(\'([^\']+)\'\)~msi', static function ($matches) {
                return "'" . base64_decode($matches[1]) . "'";
            }, $deobfuscated);
        }

        if ($this->getObfuscateType($deobfuscated) !== '' && $hangs < 6) {
            $this->text = $deobfuscated;
            if ($prev_step === hash('sha256', $deobfuscated)) {
                return $deobfuscated;
            }
            $deobfuscated = $this->deobfuscate(++$hangs, hash('sha256', $deobfuscated));
        }
        ini_set('pcre.backtrack_limit', $btlimit);
        ini_set('pcre.recursion_limit', $reclimit);
        return $deobfuscated;
    }

    public static function getSignatures()
    {
        return self::$signatures;
    }

    public function unwrapFuncs($string, $level = 0)
    {
        $res = '';
        $close_tag = false;

        if (trim($string) == '') {
            return '';
        }
        if ($level > 100) {
            return '';
        }
        if ((($string[0] === '\'') || ($string[0] === '"')) && (substr($string, 1, 2) !== '?>')) {
            if($string[0] === '"' && preg_match('~\\\\x\d+~', $string)) {
                return stripcslashes($string);
            }
            $end = -2;
            if ($string[-3] === '\'') {
                $end = -3;
            }
            return substr($string, 1, $end);
        }

        if ($string[0] === '$') {
            preg_match('~\$\w{1,40}~', $string, $string);
            $string  = $string[0];
            return $this->getPreviouslyDeclaredVars($string, $level);
        }

        $pos      = strpos($string, '(');
        $function = substr($string, 0, $pos);
        $arg      = $this->unwrapFuncs(substr($string, $pos + 1), $level + 1);

        if (strpos($function, '?>') !== false || strpos($function, "'.") !== false) {
            $function = str_replace(["'?>'.", '"?>".', "'?>' .", '"?>" .', "'."], '', $function);
            $close_tag = true;
        }
        $function = str_replace(['@', ' '], '', $function);
        $safe = Helpers::convertToSafeFunc($function);

        if ($safe) {
            if ($function === 'pack') {
                $args = explode(',', $arg);
                $args[0] = substr(trim($args[0]), 0, -1);
                $args[1] = substr(trim($args[1]), 1);
                $res = @$function($args[0], $args[1]);
            } elseif ($function === 'unserialize') {
                $res = Helpers::unserialize($arg);
            } elseif ($function === 'str_replace') {
                $args = explode(',', $arg);
                $args[0] = substr(trim($args[0]), 0, -1 );
                $args[1] = substr(trim($args[1]), 0);
                if (trim($args[1]) === 'null') {
                    $args[1] = null;
                }
                $args[2] = $this->unwrapFuncs(trim($args[2]), $level + 1) ?? $args[2];
                $res = @$function($args[0], $args[1], $args[2]);
            } else if ($function === 'chr') {
                $res = @$function((int)$arg);
            } else {
                $res = @$function($arg);
            }
        } else {
            $res = $arg;
        }
        if ($close_tag) {
            $res = '?> ' . $res;
            $close_tag = false;
        }
        return $res;
    }

    /*************************************************************************************************************/
    /*                                          PHP deobfuscators                                                */
    /*************************************************************************************************************/

    private function deobfuscateStrrotPregReplaceEval($str, $matches)
    {
        $find = $matches[0];
        $res = str_rot13($matches[2]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200618_1($str, $matches)
    {
        return stripcslashes($str);
    }

    private function deobfuscateBypass($str, $matches)
    {
        $find = $matches[0];
        $bypass = stripcslashes($matches[2]);
        $eval = $matches[3] . $bypass . $matches[4];
        $res = str_replace($find, $eval, $str);
        return $res;
    }

    private function deobfuscateObf_20200720_1($str, $matches)
    {
        $find = $matches[0];
        $res = base64_decode($matches[2]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateGoto($str)
    {
        return Helpers::unwrapGoto($str);
    }

    private function deobfuscateObf_20200527_1($str)
    {
        preg_match('~error_reporting\(0\);define\(\'\w+\',\s*__FILE__\);define\(\'\w+\',\s*fopen\(__FILE__,\s*\'r\'\)\);fseek\(\w+,\s*__COMPILER_HALT_OFFSET__\);((\$\w+="\\\\x[0-9a-f]+";)+(\$\w+="[^"]+";)+eval\("\?>"\.(\$\w+\()+"([^"]+)"\)+;)+(?:/\*\w+\*/)?__halt_compiler\(\);([\w#|>^%\[\.\]\\\\/=]+)~msi', $str, $matches);
        $find = $matches[0];
        $res = $str;
        $encoded = $matches[6];
        $res = preg_replace_callback('~(\$\w+="\\\\x[0-9a-f]+";)+(\$\w+="[^"]+";)+eval\("\?>"\.(\$\w+\()+"([^"]+)"\)+;~msi', static function ($m) use ($str) {
            $layer1 = hex2bin(str_rot13(gzinflate(str_rot13(base64_decode($m[4])))));
            if (preg_match('~(\$\w+="[^"]+";)+eval\(\$\w\.(\$\w+\()+"([^"]+)"\)+;~msi', $layer1, $matches)) {
                $temp = "?>" . hex2bin(str_rot13(gzinflate(str_rot13(base64_decode($matches[3])))));
                while (preg_match('~(\$\w+)=strrev\(\1\);(\1=\s*str_replace\([\'"]([^"\']+)[\'"],"[^"]+",\1\);)+@?eval\("\?\>"\.\$\w+\(\1\)+;~msi', $temp, $matches)) {
                    if (preg_match_all('~(\$\w+)="([^"]+)";~msi', $layer1, $matches1)) {
                        foreach($matches1[1] as $k => $v) {
                            if ($v !== $matches[1]) {
                                continue;
                            }
                            $code = $matches1[2][$k];
                            $code = strrev($code);
                            if (preg_match_all('~str_replace\([\'"]([^"\']+)[\'"],"([^"]+)"~msi', $temp, $m, PREG_SET_ORDER)) {
                                foreach($m as $item) {
                                    $code = str_replace($item[1], $item[2], $code);
                                }
                                $temp = base64_decode($code);
                            }
                            break;
                        }
                    }
                }
                return $temp;
            }
        }, $res);
        if (preg_match_all('~str_replace\([\'"]([^"\']+)[\'"],[\'"]([^"\']+)[\'"]~msi', $res, $m, PREG_SET_ORDER)) {
            foreach($m as $item) {
                $encoded = str_replace($item[1], $item[2], $encoded);
            }
            $res = base64_decode($encoded);
        }

        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200602_1($str)
    {
        preg_match('~(\$\w+)=strrev\("[base64_decode]+"\)\.str_replace\(\'(\w+)\',\'\',\'\w+\'\);\s*eval\(\1\((\$\w+)\)\);~msi', $str, $matches);
        $find = $matches[0];
        $res = 'eval(base64_decode(' . $matches[3] . '));';
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200526_1($str, $matches)
    {
        $find = $matches[0];
        $res = base64_decode($matches[2]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200522_1($str, $matches)
    {
        $find = $matches[0];
        $res = strrev(gzinflate(base64_decode(substr($matches[14], (int)hex2bin($matches[4]) + (int)hex2bin($matches[6]), (int)hex2bin($matches[8])))));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200507_5($str, $matches)
    {
        $find = $matches[0];
        $res = base64_decode($matches[1]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200507_4($str, $matches)
    {
        $find = $matches[0];
        $ar = $matches[2];
        $ar = explode(",\n", $ar);
        $array = [];
        foreach ($ar as $v) {
            $array[substr(trim($v),1,1)] = substr(trim($v), -2, 1);
        }
        unset($ar);
        $res = '';
        $split = str_split($matches[5]);
        foreach ($split as $x) {
            foreach ($array as $main => $val) {
                if ($x == (string)$val) {
                    $res .= $main;
                    break;
                }
            }
        }
        $res = gzinflate(base64_decode($res));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200513_1($str, $matches)
    {
        $find = $matches[0];
        $res = gzuncompress(base64_decode(strrev($matches[5])));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200507_2($str, $matches)
    {
        $find = $matches[0];
        $res = base64_decode($matches[4]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200507_1($str)
    {
        preg_match('~(\$\w+)=base64_decode\(\'([^\']+)\'\);\s*eval\(\1\);~mis', $str, $matches);
        $find = $matches[0];
        $res = base64_decode($matches[2]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200504_1($str)
    {
        preg_match('~(\$\w+)\s*=\s*\("\?>"\.gzuncompress\(base64_decode\("([^"]+)"\)\)\);\s*@?eval\(\1\);~msi', $str, $matches);
        $find = $matches[0];
        $res = ' ?>' . gzuncompress(base64_decode($matches[2]));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateSmartToolsShop($str, $matches)
    {
        $find = $matches[0];
        $res = str_rot13(gzinflate(str_rot13(base64_decode($matches[2]))));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200421_1($str)
    {
        preg_match('~(?:\$\w+\s*=\s*\'\w+\';)?\s*(\$\w+)\s*=\s*urldecode\(\'[%0-9a-f]+\'\);(\s*(\$\w+)\s*=(\s*\1\{\d+\}\.?)+;)+\s*(\$\w+)\s*=\s*"[^"]+"\.\3\("([^"]+)"\);\s*eval\(\5\);~msi', $str, $matches);
        $find = $matches[0];
        $res = ' ?>' . base64_decode($matches[6]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200414_1($str, $matches)
    {
        $data = $matches[1];
        $key = $matches[2];
        $res = Helpers::obf20200414_1_decrypt($data, $key);
        return $res;
    }

    private function deobfuscateObf_20200402_2($str, $matches)
    {
        $find = $matches[0];
        $code = $matches[17];
        if (isset($matches[1]) && !empty($matches[1])) {
            $vars = Helpers::collectVars($matches[1], '\'');
            $code = Helpers::replaceVarsFromArray($vars, $matches[2], false, true);
            $code = Helpers::collectStr($code, '\'');
            $code = substr($code, strpos($code,'\'') + 1);
        }
        $code = preg_replace_callback('~\s*"\s*\.((?:min|max|round)?\(\s*\d+[\.\,\|\s\|+\|\-\|\*\|\/]([\d\s\.\,\+\-\*\/]+)?\))\s*\.\s*"~msi', static function($m) {
            return substr(Helpers::calc($m[1]), 1, -1);
        }, $code);
        $res = gzinflate(base64_decode($code)) ?:base64_decode($code);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateTwoHashFunc($str, $matches)
    {
        $funcs = [
            $matches[1].'::'.$matches[2] => [
                'data' => Helpers::prepareArray($matches[3]),
                'func' => null,
            ],
            $matches[4].'::'.$matches[5] => [
                'data' => Helpers::prepareArray($matches[6]),
                'func' => null,
            ],
        ];

        $code = Helpers::normalize($matches[7]);

        foreach ($funcs as $name => &$params){
            $data = $params['data'];
            if (isset($data[0]) && intval($data[0])) {
                $params['func'] = function ($n, $k) use ($data) {
                    if (!isset($data[$n])) {
                        return false;
                    }
                    return $data[$n];
                };
            }
            else {
                $params['func'] = function ($n, $k) use ($data){
                    $l = strlen($k);
                    if (!isset($data[$n])) {
                        return false;
                    }
                    $r = base64_decode($data[$n]);
                    for ($i = 0, $c = strlen($r); $i !== $c;  ++$i) {
                        $r[$i] = chr(ord($r[$i]) ^ ord($k[$i % $l]));
                    }
                    return '\'' . $r . '\'';
                };
            }
        }
        unset($params);

        $new_code = preg_replace_callback('~(_\w{1,5})::(\w{1,5})\s*\(([^)]+)\)~mis', function ($m) use ($funcs) {
            $original       = $m[0];
            $class_name     = $m[1];
            $method_name    = $m[2];
            $vars           = str_replace(['"', "'"], '', $m[3]);

            list($var1, $var2) = explode(',', $vars);
            $func_name = $class_name . '::' . $method_name;
            if (!isset($funcs[$func_name]['func'])) {
                return $original;
            }
            return $funcs[$func_name]['func']($var1, $var2);
        }, $code);
        return MathCalc::calcRawString($new_code);
    }

    private function deobfuscateObf_20200402_1($str, $matches)
    {
        $find = $matches[0];
        $res = gzinflate(hex2bin(pack('H*',$matches[6])));
        $res = preg_replace('~//.+$~m', '', $res);
        preg_match('~\$\w+\(\$\w+,\$\w+\("",\s*\$\w+\(\$\w+\(\$\w+\(\$\w+\(\$\w+,\s*"(\d+)"\)+,\$\w+\);.+function \w+\((\$\w+),\s*\$\w+,\s(\$\w+)\)\s{\3\s=\s\3\s\.\s\3;.+return \2;}~msi', $res, $matches);
        $res = gzinflate(hex2bin(pack('H*',$matches[1])));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateOELove($str)
    {
        preg_match('~<\?php\s*defined\(\'[^\']+\'\)\s*\|\|\s*define\(\'[^\']+\',__FILE__\);(global\s*\$[^;]+;)+\s*(if\(!function_exists\(\'([^\']+)\'\)\){\s*function\s*[^\)]+\(\$[^,]+,\$[^=]+=\'\'\){\s*if\(empty\(\$[^\)]+\)\)\s*return\s*\'\';\s*\$[^=]+=base64_decode\(\$[^\)]+\);\s*if\(\$[^=]+==\'\'\)\s*return\s*\~\$[^;]+;\s*if\(\$[^=]+==\'-1\'\)\s*@[^\(]+\(\);\s*\$[^=]+=\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\(\$[^\)]+\);\s*\$[^=]+=\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\(\$[^,]+,\$[^,]+,\$[^\)]+\);\s*return\s*\$[^^]+\^\$[^;]+;\s*}}\s*)+(\$[^\[]+\["[^"]+"]=[^\(]+\(\'[^\']+\',\'[^\']*\'\);\s*)+(\$[^\[]+\[\'[^\']+\'\]=\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\([^\)]*\)+;\s*)+return\(eval\(\$[^\[]+\[\'[^\']+\'\]\)+;\s*\?>\s*#!/usr/bin/php\s*-q\s*((\s*[^\s]+)+)~msi', $str, $matches);
        $find = $matches[0];
        $res = $str;
        $code = $matches[6];
        $res = iconv('UTF-8', 'ASCII//IGNORE', $res);

        preg_match('~\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\(\'([\da-f]{32})\'\);~msi', $res, $hash);
        $hash = strrev($hash[1]);
        preg_match_all('~\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\(\'([\d]{10})\'\)~msi', $res, $substr_offsets);
        $substr_offsets = $substr_offsets[1];
        $substr_offsets = array_map('strrev', $substr_offsets);
        $substr_offsets = array_map('intval', $substr_offsets);

        preg_match_all('~if\s*\(\!function_exists\(\'([^\']+)\'\)~msi', $res, $decoders);
        $decoders = $decoders[1];
        $var_array = [];
        preg_match_all('~\$([^\[]{3,20})\["([^"]+)"\]=(\w+)\(\'([^\']*)\',\'([^\']*)\'\);~msi', $res, $vars, PREG_SET_ORDER);
        $var_name = $vars[0][1];
        foreach ($vars as $var) {
            if ($var[3] === $decoders[0] || $var[3] === $decoders[1]) {
                $var_array[$var[2]] = Helpers::OELoveDecoder($var[4], $var[5]);
                $res = str_replace($var[0], '', $res);
            }
        }
        $layer1 = substr($code, 0, $substr_offsets[3] + 96);
        $layer1_dec = iconv('UTF-8', 'ASCII//IGNORE', gzuncompress(base64_decode($layer1)));
        $code = str_replace($layer1, $layer1_dec, $code);
        preg_match_all('~\$([^\[]{3,20})\["([^"]+)"\]=(\w+)\(\'([^\']*)\',\'([^\']*)\'\);~msi', $code, $vars, PREG_SET_ORDER);
        foreach ($vars as $var) {
            if ($var[3] === $decoders[0] || $var[3] === $decoders[1]) {
                $var_array[$var[2]] = Helpers::OELoveDecoder($var[4], $var[5]);
                $code = str_replace($var[0], '', $code);
            }
        }
        $layer2_start = strpos($code, '?>') + 2;
        $layer2 = substr($code, $layer2_start + $substr_offsets[2]);
        $layer2_dec = iconv('UTF-8', 'ASCII//IGNORE', gzuncompress(base64_decode(str_rot13($layer2))));
        $res = $layer2_dec;
        foreach($var_array as $k => $v) {
            $res = str_replace('$GLOBALS[\'' . $var_name . '\'][\'' . $k . '\'](', $v . '(', $res);
            $res = str_replace('$GLOBALS[\'' . $var_name . '\'][\'' . $k . '\']', '\'' . $v . '\'', $res);
        }

        $res = preg_replace_callback('~(\w+)\(\'([^\']*)\',\'([^\']*)\'\)~msi', static function ($m) use ($decoders) {
            if ($m[1] !== $decoders[0] && $m[1] !== $decoders[1]) {
                return $m[0];
            }
            return '\'' . Helpers::OELoveDecoder($m[2], $m[3]) . '\'';
        }, $res);

        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalConcatVars($str)
    {
        preg_match('~((\$\w+="";\$\w+\s*\.=\s*"[^;]+;\s*)+)(?:(?:\$\w+)="";)?(eval\((\s*(\$\w+)\s*\.)+\s*"([^"]+)(?:"\);)+)~msi', $str, $matches);
        $find = $matches[0];
        $res = $str;
        $parts = [];
        preg_match_all('~(\$\w+)="";\1\s*\.=\s*"([^"]+)"~msi', $matches[1], $matches1, PREG_SET_ORDER);
        foreach($matches1 as $match) {
            $parts[$match[1]] = stripcslashes(stripcslashes($match[2]));
        }
        $res = stripcslashes(stripcslashes($matches[3]));
        foreach($parts as $k => $v) {
            $res = str_replace($k, "'" . $v . "'", $res);
        }
        $res = preg_replace_callback('/[\'"]\s*?\.+\s*?[\'"]/smi', static function($m) {
            return '';
        }, $res);

        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalAssignedVars($str, $matches)
    {
        $res = $str;

        $vars = [$matches[1] => $matches[2]];

        $res = preg_replace_callback('~(\$\w{1,3000})=(base64_decode|gzinflate|convert_uudecode|str_rot13)\((\$\w{1,3000})\);~msi',
            function ($match) use (&$vars) {
                $func = $match[2];
                if (Helpers::convertToSafeFunc($func) && isset($vars[$match[3]])) {
                    $vars[$match[1]] = @$func($vars[$match[3]]);
                    return '';
                }
                return $match[1] . '=' . $match[2] . '(\'' . $match[3] . '\';';
            }, $res);

        $res = $vars[$matches[4]] ?? Helpers::replaceVarsFromArray($vars, $res);

        return $res;
    }

    private function deobfuscateVarFuncsEval($str)
    {
        preg_match('~((\$\w+)\s*=\s*)(base64_decode\s*\(+|gzinflate\s*\(+|strrev\s*\(+|str_rot13\s*\(+|gzuncompress\s*\(+|convert_uudecode\s*\(+|urldecode\s*\(+|rawurldecode\s*\(+|htmlspecialchars_decode\s*\(+)+"([^"]+)"\)+(;\s*@?eval\(([\'"?>.\s]+)?\2\);)~', $str, $matches);
        $find = $matches[0];
        $res = $str;
        $res = str_replace([$matches[5], $matches[1]], [');', 'eval('], $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateComments($str, $matches)
    {
        $find = $matches[0];
        $res = preg_replace('~/\*\w+\*/~msi', '', $str);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateStrrevVarEval($str)
    {
        preg_match('~(\$\w+=strrev\("[^"]+"\);)+eval\((\$\w+\()+"([^"]+)"\)+;~mis', $str, $matches);
        $find = $matches[0];
        $res = gzinflate(base64_decode($matches[3]));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateAanKFM($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        $key = Helpers::aanKFMDigitsDecode($matches[3]);
        $res = Helpers::Xtea_decrypt($matches[4], $key);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalChars($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        while(preg_match_all('~(?:@eval((?:\(\$[0O]+\[[\'"]\w+[\'"]\])+)\("([^"]+)"\)+;)|("\)\?\$[O0]+)~msi', $res, $matches, PREG_SET_ORDER)) {
            $match = $matches[0];
            if (isset($matches[1])) $match = $matches[1];
            $count = ($match[1] !== '') ? substr_count($match[1], '(') : 0;
            if ($count == 2) {
                $res = gzinflate(base64_decode($match[2]));
            } else if ($count == 3) {
                $res = gzinflate(base64_decode(str_rot13($match[2])));
            }
            if (isset($match[3]) && ($match[3] !== '')) {
                $res = preg_replace_callback('~(\$[0O]+\["\w+"\]\()+"([^"]+)"\)+;?~msi', static function($m) {
                    return gzinflate(base64_decode(str_rot13($m[2])));
                }, $res);
            }
        }
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateGlobalsBase64($str)
    {
        preg_match('~<\?php\s+((\$GLOBALS\[\s*[\'"]\w+[\'"]\s*\])\s*=\s*base64_decode\("([^"]*)"\);)+\s*\?>(<\?php\s.+\2.+exit;\s}\sfunction\s\w+\(\)\s{\sreturn\sarray\(\s\'favicon\'\s=>\s\'[^\']+\',\s+\'sprites\'\s=>\s\'[^\']+\',\s\);\s})~msi', $str, $matches);
        $find = $matches[0];
        $vars = [];
        preg_match_all('~(\$GLOBALS\[\s*[\'"]\w+[\'"]\s*\])\s*=\s*base64_decode\("([^"]*)"\);~msi', $matches[0], $matches1, PREG_SET_ORDER);
        foreach($matches1 as $match) {
            $vars[$match[1]] = base64_decode($match[2]);
        }
        $code = $matches[4];
        foreach ($vars as $var => $value) {
            $code = str_replace($var . '(', $value . '(', $code);
            $code = str_replace($var, "'" . $value . "'", $code);
        }
        $res = $code;
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalReturn($str, $matches)
    {
        $find = $matches[0];
        $res = stripcslashes(base64_decode($matches[2]));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateQibosoft($str)
    {
        preg_match('~\$\w+=__FILE__;\$\w+=fopen\(\$\w+,\'rb\'\);fread\(\$\w+,(\d+)\);\$\w+=explode\("\\\\t",base64_decode\(fread\(\$\w+,(\d+)\)+;\$\w+=\$\w+\[[\d+]\];[\$l1=\d{}\.;\(\)\[\]]+eval\(\$\w+\(\'([^\']+)\'\)+;\s*return\s*;\?>[\w=\+]+~msi', $str, $matches);
        $find = $matches[0];
        $res = $str;
        $hangs = 15;
        $obfPHP = explode('?>', $str);
        $obfPHP = $obfPHP[1];
        preg_match('~eval\(\$\w+\(\'([^\']+)\'\)+;~msi', $res, $temp);
        $res = str_replace($temp[0], base64_decode($temp[1]), $res);
        $offset = $matches[2];
        while (preg_match('~\$\w+\(\$\w+,(\d+)\);\s*eval\(\$\w+\(\$\w+\(\$\w+,(\d+)\)+;~msi', $res, $temp2) && $hangs--) {
            $offset += $temp2[1];
            $decode_loop = base64_decode(substr($obfPHP, $offset, $temp2[2]));
            $offset += $temp2[2];
            if (preg_match('~eval\(\$\w+\(\'([^\']+)\'\)+;~msi', $decode_loop, $temp)) {
                $res = str_replace($temp2[0], base64_decode($temp[1]), $res);
            } else {
                $res = $decode_loop;
            }

        }
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateUd64($str)
    {
        preg_match('~(\$ud64_c[o0]m="[\\\\0-9a-z\."]+;)+\$\w+=(\$ud64_c[o0]m\()+"([^"]+)"\)+;@eval\(\$ud64_c[o0]m\(\'[^\']+\'\)+;~msi', $str, $matches);
        $find = $matches[0];
        $res = gzinflate(convert_uudecode(base64_decode(gzinflate(base64_decode(str_rot13($matches[3]))))));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateCustom1($str)
    {
        preg_match('~\$\w+="([^"]+)";\$l+=0;\$l+=\'base64_decode\';\$l+=0;eval\(.+?;eval\(\$l+\);return;~msi', $str, $matches);
        return Helpers::someDecoder3($matches[1]);
    }

    private function deobfuscateCustom2($str, $matches)
    {
        $find = $matches[0];
        $key = $matches[2];
        $var = $matches[3];
        preg_match_all('~(\$\w+)\[\d+\]\s*=\s*"([^"]+)";~msi', $str, $matches);
        foreach ($matches[1] as $k => &$m) {
            if ($m !== $var) {
                unset($matches[2][$k]);
            }
        }
        $res = base64_decode(Helpers::someDecoder4($matches[2], $key));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateLockIt2($str, $matches)
    {
        $find = $matches[0];
        $res = $matches[1];

        if(strpos($str, '$_X="') !== false && strpos($res, '\\x') !== false) {
            $res = stripcslashes($res);
        }
        if (preg_match_all('~\$[_\w]+\.=[\'"]([\w\+\/=]+)[\'"];~', $matches[0], $concatVars)) {
            foreach ($concatVars[1] as $concatVar) {
                $res .= $concatVar;
            }
        }
        $res = base64_decode($res);
        $res = strtr($res, $matches[2], $matches[3]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateAnaski($str, $matches)
    {
        $find = $matches[0];

        $res = gzinflate(str_rot13(base64_decode($matches[2])));
        $res = strtr($res, $matches[5], $matches[6]);

        return $res;
    }

    private function deobfuscateFuncs($str, $matches)
    {
        $find = $matches[0];
        $funcs = [];
        $payload = $matches[7];
        $var = $matches[6];
        $res = str_replace($matches[8], stripcslashes($matches[9]), $str);
        $res = preg_replace_callback('~function\s*(\w+)\((\$\w+)\){\s*return\s*(\w+)\(\2(,\d+)?\);}\s*~msi', static function($matches2) use (&$funcs){
            $funcs[$matches2[1]] = $matches2[3];
            return '';
        }, $res);
        foreach ($funcs as $k => $v) {
            $res = str_replace($k . '(', $v . '(', $res);
        }
        $res = str_replace([$var . '="' . $payload . '";', $var], ['', '"' . $payload . '"'], $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateSubstr($str)
    {
        preg_match('~\$\w+=0;(\$GLOBALS\[\'\w+\'\])\s*=\s*\'([^\']+)\';\s*(\$\w+)=pack\(\'H\*\',substr\(\1,\s*([-\d]+)\)\);if\s*\(!function_exists\(\'(\w+)\'\)\){function\s*\5\(\$\w+,\s*\$\w+\){\$\w+=\1;\s*\$d=pack\(\'H\*\',substr\(\1,\s*\4\)\);\s*return\s*\$\w+\(substr\(\$\w+,\s*\$\w+,\s*\$\w+\)\);}};eval\(\3\(\'([^\']+)\'\)\);~msi', $str, $matches);
        $find = $matches[0];
        $substr_array = $matches[2];
        $offset = intval($matches[4]);
        $func = $matches[5];
        $eval = pack('H*',substr($substr_array, $offset));
        $res = Helpers::convertToSafeFunc($eval) ? @$eval($matches[6]) : $matches[6];
        $res = preg_replace_callback('~(\w+)\(([-\d]+),\s*([-\d]+)\)~mis', static function ($matches) use ($eval, $substr_array, $func) {
            if ($matches[1] !== $func) {
                return $matches[0];
            }
            $res = Helpers::convertToSafeFunc($eval) ? @$eval(substr($substr_array, $matches[2], $matches[3])) : $matches[0];
            return '\'' . $res . '\'';
        }, $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscatePHPJiaMi($str, $matches)
    {
        $find = $matches[0];
        $bin = bin2hex($str);
        preg_match('~6257513127293b24[a-z0-9]{2,30}3d24[a-z0-9]{2,30}2827([a-z0-9]{2,30})27293b~', $bin, $hash);
        preg_match('~2827([a-z0-9]{2})27293a24~', $bin, $rand);
        $hash = hex2bin($hash[1]);
        $rand = hex2bin($rand[1]);
        $res = Helpers::PHPJiaMi_decoder(substr($matches[3], 0, -45), $hash, $rand);
        $res = str_rot13(@gzuncompress($res) ?: $res);

        if (preg_match('~global\s*(\$[^,;]+);((?:\1\[\'[^\']+\'\]=[^(]+\(\'[^\']+\'\);)+)~msi', $str, $tmp))
        {
            $tmp = explode(';', $tmp[2]);
            foreach ($tmp as $entry) {
                if ($entry === '') {
                    continue;
                }
                preg_match('~\$([^\[]+)(\[\'[^\']+\'\])=([^\(]+)\(\'([^\']+)\'\)~', $entry, $parts);
                $res = str_replace('$GLOBALS[\'' . $parts[1] . '\']' . $parts[2], Helpers::PHPJiaMi_decoder($parts[4], $hash, $rand), $res);
            }
            $func_decrypt = $parts[3];
            $hangs = 20;
            while (($start = strpos($res, $func_decrypt . '(\'')) && $start !== false && $hangs--) {
                $end = strpos($res,'\'', $start + strlen($func_decrypt) + 2) + 1;
                $data = substr($res, $start + strlen($func_decrypt) + 2, $end - ($start + strlen($func_decrypt) + 2 + 1));
                $res = substr_replace($res, '\'' . Helpers::PHPJiaMi_decoder($data, $hash, $rand) . '\'', $start, ($end - $start) + 1);
            }
        }
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalIReplace($str, $matches)
    {
        $find = $matches[0];
        $res = base64_decode($matches[3]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateErrorHandler($str)
    {
        preg_match('~(\$\w+)="[^"]+";\s*(\$\w+)=str_ireplace\("[^"]+","",\1\);(\$\w+)\s*=\s*"([^"]+)";\s*function\s*(\w+)\((\$\w+,?)+\){\s*(\$\w+)=\s*create_function\(\'\',\$\w+\);\s*array_map\(\7,array\(\'\'\)+;\s*}\s*set_error_handler\(\'\5\'\);(\$\w+)=\2\(\3\);user_error\(\8,E_USER_ERROR\);\s*if\s*.+?}~msi', $str, $matches);
        $find = $matches[0];
        $res = base64_decode($matches[4]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateStrtoupper($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        $alph = $matches[2];
        $var = $matches[1];
        $res = str_replace("{$var}=\"{$alph}\";", '', $res);
        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace($var . '[' . $i . '].', "'" . $alph[$i] . "'", $res);
            $res = str_replace($var . '[' . $i . ']', "'" . $alph[$i] . "'", $res);
        }
        $res = str_replace("''", '', $res);
        $res = str_replace("' . '", '', $res);
        $res = str_replace("' '", '', $res);
        preg_match('~(\$\w+)\s*=\s*strtoupper\s*\(\s*\'(\w+)\'\s*\)\s*;~msi', $res, $matches);
        $matches[2] = strtoupper($matches[2]);
        $res = str_replace($matches[0], '', $res);
        $res = preg_replace_callback('~\${\s*(\$\w+)\s*}~msi', static function ($m) use ($matches) {
            if ($m[1] !== $matches[1]) {
                return $m[0];
            }
            return '$' . $matches[2];
        }, $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEval2($str)
    {
        preg_match('~(\$\w+)\s*=\s*"((?:[^"]|(?<=\\\\)")*)";(\$\w+)\s*=\s*(\1\[\d+\]\.?)+;(\$\w+)\s*=\s*[^;]+;(\$\w+)\s*=\s*"[^"]+";\$\w+\s*=\s*\5\."([^"]+)"\.\6;\3\((\1\[\d+\]\.?)+,\s*\$\w+\s*,"\d+"\);~smi', $str, $matches);
        $res = $str;
        list($find, $var, $alph) = $matches;
        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace($var . '[' . $i . '].', "'" . $alph[$i] . "'", $res);
            $res = str_replace($var . '[' . $i . ']', "'" . $alph[$i] . "'", $res);
        }
        $res = gzinflate(base64_decode(substr($matches[7], 1, -1)));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalEregReplace($str, $matches)
    {
        $find = $matches[0];
        $res = base64_decode($matches[2]);
        preg_match_all('~(\$\w+)\s*=\s*ereg_replace\("([^"]+)","([^"]+)",\1\);~smi', $str, $matches);
        foreach ($matches[2] as &$pat) {
            if ($pat[0] === '[') {
                $pat = substr($pat, 1, -1);
            }
        }
        unset($pat);
        $res = str_replace($matches[2], $matches[3], $res);
        $res = base64_decode($res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateStrreplace($str, $matches)
    {
        $find = $matches[0];
        $res = $str;

        $str_replace = '';
        $base64_decode = '';
        $layer = '';

        if (!preg_match_all('~(?:(\$\w{1,50})\s?=\s?((?:\'[^\']{1,500}\'|"[^\n]{1,500}?"));[\n\s])~msi', $str, $matches, PREG_SET_ORDER)) {
            preg_match_all('~(\$\w+)\s*=\s*([\'"](?|[^\']+\'|[^"]+"));~msi', $str, $matches, PREG_SET_ORDER);
        }
        foreach ($matches as $i => $match) {
            $vars[$match[1]] = substr($match[2], 1, -1);
        }

        $res = preg_replace_callback('~(\$\w+)\s*=\s*str_replace\([\'"](\w+)[\'"],\s*[\'"]{2},\s*[\'"](\w+)[\'"]\)~msi',
            static function ($matches) use (&$vars, &$str_replace) {
                $vars[$matches[1]] = str_replace($matches[2], "", $matches[3]);
                if ($vars[$matches[1]] === 'str_replace') {
                    $str_replace = $matches[1];
                }
                return $matches[1] . ' = "' . $vars[$matches[1]] . '"';
            }, $res);

        if ($str_replace !== '') {
            $res = preg_replace_callback('~(\$\w+)\s*=\s*(\$\w+)\("(\w+)",\s*"",\s*"(\w+)"\)~msi',
                static function ($matches) use (&$vars, &$base64_decode, $str_replace) {
                    if ($matches[2] !== $str_replace) {
                        return $matches[0];
                    }
                    $vars[$matches[1]] = str_replace($matches[3], "", $matches[4]);
                    if ($vars[$matches[1]] === 'base64_decode') {
                        $base64_decode = $matches[1];
                    }
                    return $matches[1] . ' = "' . $vars[$matches[1]] . '"';
                }, $res);

            $res = preg_replace_callback('~(\$\w+)\((\$\w+)\("(\w+)",\s*"",\s*([\$\w\.]+)\)~msi',
                static function ($matches) use (&$vars, &$layer, $base64_decode, $str_replace) {
                    if ($matches[1] !== $base64_decode && $matches[2] !== $str_replace) {
                        return $matches[0];
                    }
                    $tmp = explode('.', $matches[4]);
                    foreach ($tmp as &$item) {
                        $item = $vars[$item];
                    }
                    unset($item);
                    $tmp = implode('', $tmp);
                    $layer = base64_decode(str_replace($matches[1], "", $tmp));

                    return $matches[0];
                }, $res);
        }

        if ($base64_decode !== '') {
            $regex = '~(\$\w+)\((\$\w+)\("(\w+)",\s*"",\s*([\$\w\.]+)\)~msi';
        } else {
            $regex = '~(str_replace)\(([\'"])([^\'"]+)[\'"],\s*[\'"]{2},\s*([\$\w\. ]+)\);\s?(\$\w+)\s*=\s*\$\w+\([\'"]{2},\s*\$\w+\);\s*\5\(\);~msi';
        }
        preg_replace_callback($regex,
            static function ($matches) use (&$vars, &$layer, $base64_decode, $str_replace) {
                if ($base64_decode !== '' && $matches[1] !== $base64_decode && $matches[2] !== $str_replace) {
                    return $matches[0];
                }
                $tmp = preg_split('~\s*\.\s*~msi', $matches[4]);

                foreach ($tmp as &$item) {
                    $item = $vars[$item];
                }
                unset($item);
                $tmp = implode('', $tmp);
                $layer = str_replace($matches[3], "", $tmp);
                if ($base64_decode !== '') {
                    $layer = base64_decode($layer);
                }
                return $matches[0];
            }, $res);
        $res = str_replace($find, $layer, $str);
        return $res;
    }

    private function deobfuscateSeolyzer($str, $matches)
    {
        $find           = $matches[0];
        $res            = $str;
        $vars           = [];
        $base64_decode  = '';
        $layer          = '';
        $gzuncompress   = '';

        preg_match_all('~(\$\w+)\s*=\s*([^$][^;]+)\s*;~msi', $str, $matches, PREG_SET_ORDER);
        foreach ($matches as $i => $match) {
            $var_name   = $match[1];
            $var_val    = trim($match[2]);
            if (preg_match('~"[^"]{0,20}"\s*\.chr\s*\(~i', $var_val)) {
                $var_val = Helpers::normalize($var_val);
            }
            $var_val = preg_replace('~^["\'](.*)["\']$~i', '\1', $var_val);
            $vars[$var_name] = trim($var_val);
            if ($var_val === 'base64_decode') {
                $base64_decode = $var_name;
            }
        }

        $res = preg_replace_callback('~\s*=\s*(\$\w+)\((\$\w+)\)~msi', static function ($matches) use (&$vars, &$gzuncompress, &$layer, $base64_decode) {
            if ($matches[1] !== $base64_decode) {
                return $matches[0];
            }
            if (!isset($vars[$matches[2]])) {
                return $matches[2];
            }
            $tmp = base64_decode($vars[$matches[2]]);
            if ($tmp === 'gzuncompress') {
                $gzuncompress = $matches[2];
            }
            $vars[$matches[2]] = $tmp;
            return " = '{$tmp}'";
        }, $res);

        if ($gzuncompress !== '') {
            $res = preg_replace_callback('~(\$\w+)\(\s*(\$\w+)\((\$\w+)\)~msi',
                function ($matches) use (&$vars, $gzuncompress, &$layer, $base64_decode) {
                    if ($matches[1] !== $gzuncompress && $matches[2] !== $base64_decode) {
                        return $matches[0];
                    }
                    if (!isset($vars[$matches[3]])) {
                        return $matches[3];
                    }
                    $tmp = gzuncompress(base64_decode($vars[$matches[3]]));
                    $layer = $matches[3];
                    $vars[$matches[3]] = $tmp;
                    return "'{$tmp}'";
                }, $res);
            $res = $vars[$layer];
        } else if (preg_match('~\$\w+\(\s*(\$\w+)\((\$\w+)\)~msi', $res)) {
            $res = preg_replace_callback('~\$\w+\(\s*(\$\w+)\((\$\w+)\)~msi',
                function ($matches) use (&$vars, &$layer, $base64_decode) {
                    if ($matches[1] !== $base64_decode) {
                        return $matches[0];
                    }
                    if (!isset($vars[$matches[2]])) {
                        return $matches[2];
                    }
                    $tmp = base64_decode($vars[$matches[2]]);
                    $layer = $matches[2];
                    $vars[$matches[2]] = $tmp;
                    return "'{$tmp}'";
                }, $res);
            $res = $vars[$layer];
        }
        return str_replace($find, $res, $str);
    }

    private function deobfuscateCreateFunc($str, $matches)
    {
        $result = $str;
        $funcs = str_replace($matches[4], '', $matches[3]);

        if (Helpers::concatStr($matches[1]) === 'create_function'
            && Helpers::concatStr($matches[2]) === 'eval') {
            $funcs = explode('(', $funcs);
            $iMax = count($funcs) - 2;
            $final_code = $matches[5];

            for ($i = $iMax; $i >= 0; $i--) {
                if ($funcs[$i][0] !== '\'' && $funcs[$i][0] !== '"') {
                    $funcs[$i] = '\'' . $funcs[$i];
                }
                $func = Helpers::concatStr($funcs[$i] . '"');
                if (Helpers::convertToSafeFunc($func)) {
                    $final_code = @$func($final_code);
                }
            }
            $result = $final_code;
        }
        $result = ' ?>' . $result;

        return $result;
    }

    private function deobfuscateGotoShell($str, $matches)
    {
        $str = Helpers::normalize($str);

        $str = preg_replace('~\${\'GLOBALS\'}\[\'(\w+)\'\]~msi', '$\1', $str);

        $vars = Helpers::collectVars($str, '\'');
        $need_remove_vars = [];
        foreach ($vars as $name => $value) {
            $last_str = $str;
            $str = str_replace('${' . $name . '}', '$' . $value, $str);
            if ($last_str != $str) {
                $need_remove_vars[$name] = $value;
            }
        }

        foreach ($need_remove_vars as $name => $value) {
            if (substr_count($str, $name) != 1) {
                continue;
            }
            $str = str_replace($name.'=\'' . $value . '\';', '', $str);
        }
        return $str;
    }

    private function deobfuscateCreateFuncConcat($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        $vars = [];
        $res = preg_replace_callback('~(?|(\$\w+)\s*=\s*(([base64_decode\'\.\s]+)|([eval\'\.\s]+)|([create_function\'\.\s]+)|([stripslashes\'\.\s]+)|([gzinflate\'\.\s]+)|([strrev\'\.\s]+)|([str_rot13\'\.\s]+)|([gzuncompress\'\.\s]+)|([urldecode\'\.\s]+)([rawurldecode\'\.\s]+));)~', static function($matches) use (&$vars) {
            $tmp = str_replace('\' . \'', '', $matches[0]);
            $tmp = str_replace('\'.\'', '', $tmp);
            $value = str_replace('\' . \'', '', $matches[2]);
            $value = str_replace('\'.\'', '', $value);
            $vars[$matches[1]] = substr($value, 1, -1);
            return $tmp;
        }, $res);
        foreach($vars as $key => $var) {
            $res = str_replace($key, $var, $res);
            $res = str_replace($var . ' = \'' . $var . '\';', '', $res);
            $res = str_replace($var . ' = "";', '', $res);
        }
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalWrapVar($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        $vars = [];
        $res = preg_replace_callback('~(?|(\$\w+)\s*=\s*(([base64_decode"\'\.\s]+)|([eval"\'\.\s]+)|([create_function"\'\.\s]+)|([stripslashes"\'\.\s]+)|([gzinflate"\'\.\s]+)|([strrev"\'\.\s]+)|([str_rot13"\'\.\s]+)|([gzuncompress"\'\.\s]+)|([urldecode"\'\.\s]+)([rawurldecode"\'\.\s]+));)~msi', static function($matches) use (&$vars) {
            $tmp = preg_replace('~[\'"]\s*?[\+\.]+\s*?[\'"]~msi', '', $matches[0]);
            $value = preg_replace('~[\'"]\s*?[\+\.]+\s*?[\'"]~msi', '', $matches[2]);
            $vars[$matches[1]] = substr($value, 1, -1);
            return $tmp;
        }, $res);
        $res = preg_replace_callback('~\("([^\)]+)\'\)~msi',  function ($m) {
            return '(\'' . preg_replace('~[\'"]\s*?[\+\.]+\s*?[\'"]~msi', '', $m[1]) . '\'\)';
        }, $res);
        $temp = substr($res, strpos($res, '@eval'));
        $before = substr($res, 0, strpos($res, '@eval'));
        $temp1 = $temp;
        foreach($vars as $key => $var) {
            $temp = str_replace($key, $var, $temp);
        }
        $res = str_replace($temp1, $temp, $res);
        $res = str_replace($find, $res, $str);
        $res = $this->deobfuscateEval($res, []);
        $res = preg_replace('~/\*[^\*]+\*/~msi', '', $res);
        return $before . $res;
    }

    private function deobfuscateForEach($str, $matches)
    {
        $find = $matches[0];
        $alph = $matches[3];
        $vars = [];
        $res = $str;

        preg_replace('~\s*/\*\w+\*/\s*~msi', '', $res);

        $res = preg_replace_callback('~foreach\(\[([\d,]+)\]\s*as\s*\$\w+\)\s*\{\s*(\$\w+)\s*\.=\s*\$\w+\[\$\w+\];\s*\}~mis', static function($matches) use ($alph, &$vars) {
            $chars = explode(',', $matches[1]);
            $value = '';
            foreach ($chars as $char) {
                $value .= $alph[$char];
            }
            $vars[$matches[2]] = $value;
            return "{$matches[2]} = '{$value}';";
        }, $res);

        foreach($vars as $key => $var) {
            $res = str_replace($key, $var, $res);
            $res = str_replace($var . " = '" . $var . "';", '', $res);
            $res = str_replace($var . ' = "";', '', $res);
        }

        preg_match('~(\$\w+)\s*=\s*strrev\([create_function\.\']+\);~ms', $res, $matches);
        $res = str_replace($matches[0], '', $res);
        $res = str_replace($matches[1], 'create_function', $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateSubst2($str)
    {
        preg_match('~(\$\w+)="([^"])+(.{0,70}\1.{0,400})+;\s*}~msi', $str, $matches);
        $find = $matches[0];
        $res = $str;
        preg_match('~(\$\w+)="(.+?)";~msi', $str, $matches);
        $alph = stripcslashes($matches[2]);
        $var = $matches[1];
        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace($var . '[' . $i . '].', "'" . $alph[$i] . "'", $res);
            $res = str_replace($var . '[' . $i . ']', "'" . $alph[$i] . "'", $res);
        }
        $res = str_replace("''", '', $res);
        preg_match_all('~(\$GLOBALS\[\'\w{1,40}\'\])\s*=\s*\'(([^\'\\\\]++|\\\\.)*)\';~msi', $res, $matches, PREG_SET_ORDER);

        foreach ($matches as $index => $var) {
            $res = str_replace($var[1], $var[2], $res);
            $res = str_replace($var[2] . " = '" . $var[2] . "';", '', $res);
        }

        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateAssert($str, $matches)
    {
        $find = $matches[0];
        $res = base64_decode($matches[3]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateUrlDecode2($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        if (isset($matches[10])) {
            $res = base64_decode($matches[10]);
        }
        if (preg_match('~\$\w+=["\']([^\'"]+)[\'"];\s*eval\(\'\?>\'\.[\$\w\(\)\*,\s]+;~msi', $res, $match)) {
            $res = base64_decode(strtr(substr($match[1], 52*2), substr($match[1], 52, 52), substr($match[1], 0, 52)));
        }

        if (preg_match('~function\s*(\w+)\(\$\w+\)[\w{\$=\s*();<+\[\]\-]+\}\s+return[\$\s\w;]+}eval\(\1\("([\w\/+=]+)?"\)\);~', $res, $matchEval)) {
            $res = gzinflate(base64_decode($matchEval[2]));
            for ($i=0, $iMax = strlen($res); $i < $iMax; $i++) {
                $res[$i] = chr(ord($res[$i])-1);
            }
            $res = str_replace($find, $res, $str);
            return $res;
        }

        if (preg_match('~header\(\'[^\']+\'\);(?:\$\w+=\${[^}]+}\[[^\]]+\]\(\'.*?\'?;}?\'\);)+\${[^}]+}\[[^\]]+\]\(\);~msi',
            $matches[6], $match)) {
            $res = stripcslashes($match[0]);
            $dictionaryValue = urldecode($matches[3]);
            $vars = Helpers::getVarsFromDictionary($dictionaryValue, $str);
            $res = Helpers::replaceVarsFromArray($vars, $res);
            $res = Helpers::replaceCreateFunction($res);

            preg_match('~\$([0_O]+)\s*=\s*function\s*\((\$\w+)\)\s*\{\s*\$[O_0]+\s*=\s*substr\s*\(\2,(\d+),(\d+)\);\s*\$[O_0]+\s*=\s*substr\s*\(\2,([\d-]+)\);\s*\$[O_0]+\s*=\s*substr\s*\(\2,(\d+),strlen\s*\(\2\)-(\d+)\);\s*return\s*gzinflate\s*\(base64_decode\s*\(\$[O_0]+\s*\.\s*\$[O_0]+\s*\.\s*\$[O_0]+\)+;~msi', $res, $m);
            $res = preg_replace_callback('~\$\{"GLOBALS"}\["([0_O]+)"\]\s*\(\'([^\']+)\'\)~msi', static function ($calls) use ($m) {
                if ($calls[1] !== $m[1]) {
                    return $calls[0];
                }
                $temp1 = substr($calls[2], $m[3], $m[4]);
                $temp2 = substr($calls[2], $m[5]);
                $temp3 = substr($calls[2], $m[6],strlen($calls[2]) - $m[7]);
                return "'" . gzinflate(base64_decode($temp1 . $temp3 . $temp2)) . "'";
            }, $res);
            return $res;
        }


        $res = str_replace($find, ' ?>' . $res, $str);
        return $res;
    }

    private function deobfuscatePHPMyLicense($str)
    {
        preg_match('~\$\w+\s*=\s*base64_decode\s*\([\'"][^\'"]+[\'"]\);\s*if\s*\(!function_exists\s*\("rotencode"\)\).{0,1000}eval\s*\(\$\w+\s*\(base64_decode\s*\([\'"]([^"\']+)[\'"]\)+;~msi', $str, $matches);
        $find = $matches[0];
        $res = $str;
        $hang = 10;
        while(preg_match('~eval\s*\(\$\w+\s*\(base64_decode\s*\([\'"]([^"\']+)[\'"]\)+;~msi', $res, $matches) && $hang--) {
            $res = gzinflate(base64_decode($matches[1]));
        }
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEdoced_46esab($str)
    {
        preg_match('~(\$\w+)=[\'"]([^"\']+)[\'"];(\$\w+)=strrev\(\'edoced_46esab\'\);eval\(\3\([\'"]([^\'"]+)[\'"]\)+;~msi', $str, $matches);
        $find = $matches[0];
        $res = '';
        $decoder = base64_decode($matches[4]);
        preg_match('~(\$\w+)=base64_decode\(\$\w+\);\1=strtr\(\1,[\'"]([^\'"]+)[\'"],[\'"]([^\'"]+)[\'"]\);~msi', $decoder, $matches2);
        $res = base64_decode($matches[2]);
        $res = strtr($res, $matches2[2], $matches2[3]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEdoced_46esab_etalfnizg($str, $matches)
    {
        return gzinflate(base64_decode($matches[3]));
    }

    private function deobfuscateEvalVarVar($str)
    {
        preg_match('~\$\{"GLOBALS"\}\[[\'"](\w+)[\'"]\]=["\'](\w+)[\'"];\$\{"GLOBALS"\}\[[\'"](\w+)[\'"]\]=["\']\2[\'"];(\${\$\{"GLOBALS"\}\[[\'"]\3[\'"]\]})=[\'"]([^\'"]+)[\'"];eval.{10,50}?(\$\{\$\{"GLOBALS"\}\[[\'"]\1[\'"]\]\})\)+;~msi', $str, $matches);
        $find = $matches[0];
        $res = str_replace($matches[4], '$' . $matches[2], $str);
        $res = str_replace($matches[6], '$' . $matches[2], $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEscapes($str, $matches)
    {
        $find = $matches[0];
        $res = stripcslashes($str);
        $res = str_replace($find, $res, $str);
        preg_match_all('~(\$\{"GLOBALS"\}\[[\'"](\w+)[\'"]\])=["\'](\w+)[\'"];~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $res = str_replace([$match[0], '${' . $match[1] . '}'], ['', '$' . $match[3]], $res);
        }

        return $res;
    }

    private function deobfuscateparenthesesString($str)
    {
        $hangs = 5;
        $res = $str;
        $find = '';
        while (preg_match('~for\((\$\w+)=\d+,(\$\w+)=\'([^\$]+)\',(\$\w+)=\'\';@?ord\(\2\[\1\]\);\1\+\+\)\{if\(\1<\d+\)\{(\$\w+)\[\2\[\1\]\]=\1;\}else\{\$\w+\.\=@?chr\(\(\5\[\2\[\1\]\]<<\d+\)\+\(\5\[\2\[\+\+\1\]\]\)\);\}\}\s*.{0,500}eval\(\4\);(if\(isset\(\$_(GET|REQUEST|POST|COOKIE)\[[\'"][^\'"]+[\'"]\]\)\)\{[^}]+;\})?~msi', $res, $matches) && $hangs--) {
            if($hangs == 4) {
                $find = $matches[0];
            }
            $res = '';
            $temp = [];
            $matches[3] = stripcslashes($matches[3]);
            for($i=0, $iMax = strlen($matches[3]); $i < $iMax; $i++)
            {
                if($i < 16) $temp[$matches[3][$i]] = $i;
                else $res .= @chr(($temp[$matches[3][$i]]<<4) + ($temp[$matches[3][++$i]]));
            }
        }
        if(!isset($matches[6])) {
            //$xor_key = 'SjJVkE6rkRYj';
            $xor_key = $res^"\n//adjust sy"; //\n//adjust system variables";
            $res = $res ^ substr(str_repeat($xor_key, (strlen($res) / strlen($xor_key)) + 1), 0, strlen($res));
        }
        if(substr($res,0,12)=="\n//adjust sy") {
            $res = str_replace($find, $res, $str);
            return $res;
        } else return $str;
    }

    private function deobfuscateEvalInject($str, $matches)
    {
        $res = $str;
        $find = $matches[0];
        $alph = $matches[2];

        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace($matches[1] . '[' . $i . '].', "'" . $alph[$i] . "'", $res);
            $res = str_replace($matches[1] . '[' . $i . ']', "'" . $alph[$i] . "'", $res);
        }

        $res = str_replace("''", '', $res);
        $res = str_replace("' '", '', $res);

        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateWebshellObf($str)
    {
        $res = $str;
        preg_match('~function\s*(\w{1,40})\s*\(\s*(\$\w{1,40})\s*,\s*(\$\w{1,40})\s*\)\s*\{\s*(\$\w{1,40})\s*=\s*str_rot13\s*\(\s*gzinflate\s*\(\s*str_rot13\s*\(\s*base64_decode\s*\(\s*[\'"]([^\'"]*)[\'"]\s*\)\s*\)\s*\)\s*\)\s*;\s*(if\s*\(\s*\$\w+\s*==[\'"][^\'"]*[\'"]\s*\)\s*\{\s*(\$\w{1,40})\s*=(\$\w+[\{\[]\d+[\}\]]\.?)+;return\s*(\$\w+)\(\3\);\s*\}\s*else\s*)+\s*if\s*\(\s*\$\w+\s*==[\'"][^\'"]*[\'"]\s*\)\s*\{\s*return\s*eval\(\3\);\s*\}\s*\};\s*(\$\w{1,40})\s*=\s*[\'"][^\'"]*[\'"];(\s*\10\([\'"][^\'"]*[\'"],)+\s*[\'"]([^\'"]*)[\'"]\s*\)+;~msi',$str, $matches);
        $find = $matches[0];

        $alph = str_rot13(gzinflate(str_rot13(base64_decode($matches[5]))));

        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace($matches[4] . '{' . $i . '}.', "'" . $alph[$i] . "'", $res);
            $res = str_replace($matches[4] . '{' . $i . '}', "'" . $alph[$i] . "'", $res);
        }
        $res = base64_decode(gzinflate(str_rot13(convert_uudecode(gzinflate(base64_decode(strrev($matches[12])))))));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateXorFName($str, $matches, $xor_key = null)
    {
        if (!isset($matches)) {
            preg_match('~(?(DEFINE)(?\'c\'(?:/\*\w+\*/)*))(\$\w+)\s*=\s*basename(?&c)\((?&c)trim(?&c)\((?&c)preg_replace(?&c)\((?&c)rawurldecode(?&c)\((?&c)"[%0-9A-F\.]+"(?&c)\)(?&c),\s*\'\',\s*__FILE__(?&c)\)(?&c)\)(?&c)\)(?&c);(\$\w+)\s*=\s*"([%\w\.\-\~]+)";(?:(\$\w+)=[^;]+;\5(?&c)\((?&c)\'\',\s*\'};\'\s*\.\s*(?&c)\()?(?:eval(?&c)\()?(?&c)rawurldecode(?&c)\((?&c)\3(?&c)\)(?&c)\s*\^\s*substr(?&c)\((?&c)str_repeat(?&c)\((?&c)\2,\s*(?&c)\((?&c)strlen(?&c)\((?&c)\3(?&c)\)(?&c)/strlen(?&c)\((?&c)\2(?&c)\)(?&c)\)(?&c)\s*\+\s*1(?&c)\)(?&c),\s*0,(?&c)\s*strlen(?&c)\((?&c)\3(?&c)\)(?&c)\)(?&c)\)(?:(?&c)\s*\.\s*\'{\'(?&c)\))?(?&c);~msi', $str, $matches);
        }
        $encrypted = rawurldecode($matches[4]);
        if (!isset($xor_key)) {
            $plain_text = '@ini_set(\'error_log\', NULL);';
            $plain_text2 = 'if (!defined(';
            $xor_key = substr($encrypted, 0, strlen($plain_text)) ^ $plain_text;
            if (preg_match('~\.?[a-z0-9-_]{8,}\.\w{3}~', $xor_key, $m)) {
                $xor_key = $m[0];
            } else {
                $xor_key = substr($encrypted, 0, strlen($plain_text2)) ^ $plain_text2;
                if (preg_match('~\.?[a-z0-9-_]{8,}\.\w{3}~', $xor_key, $m)) {
                    $xor_key = $m[0];
                }
            }
        }
        $result = $encrypted ^ substr(str_repeat($xor_key, (strlen($encrypted) / strlen($xor_key)) + 1), 0, strlen($encrypted));
        return $result;
    }

    private function deobfuscateSubstCreateFunc($str)
    {
        preg_match('~(\$\w{1,40})=\'(([^\'\\\\]|\\\\.)*)\';\s*((\$\w{1,40})=(\1\[\d+].?)+;\s*)+(\$\w{1,40})=\'\';\s*(\$\w{1,40})\(\7,\$\w{1,40}\.\"([^\"]+)\"\.\$\w{1,40}\.\5\);~msi', $str, $matches);
        $find = $matches[0];
        $php = base64_decode($matches[9]);
        preg_match('~(\$\w{1,40})=(\$\w{1,40})\("([^\']+)"\)~msi', $php, $matches);
        $matches[3] = base64_decode($matches[3]);
        $php = '';
        for ($i = 1, $iMax = strlen($matches[3]); $i < $iMax; $i++) {
            if ($i % 2) {
                $php .= substr($matches[3], $i, 1);
            }
        }
        $php = str_replace($find, $php, $str);
        return $php;
    }

    private function deobfuscateZeura($str, $matches)
    {
        $offset = (int)$matches[8] + (int)$matches[9];
        $obfPHP = explode('__halt_compiler();', $str);
        $obfPHP = end($obfPHP);
        $php = gzinflate(base64_decode(substr(trim($obfPHP), $offset)));
        $php = stripcslashes($php);
        $php = str_replace($matches[0], $php, $str);
        return $php;
    }

    private function deobfuscateZeuraFourArgs($str, $matches)
    {
        $offset = $matches[6] * -1;
        $res    = gzinflate(base64_decode(substr(trim($str), $offset)));

        return $res;
    }

    private function deobfuscateSourceCop($str, $matches)
    {
        $key = $matches[2];
        $obfPHP = $matches[1];
        $res = '';
        $index = 0;
        $len = strlen($key);
        $temp = hexdec('&H' . substr($obfPHP, 0, 2));
        for ($i = 2, $iMax = strlen($obfPHP); $i < $iMax; $i += 2) {
            $bytes = hexdec(trim(substr($obfPHP, $i, 2)));
            $index = (($index < $len) ? $index + 1 : 1);
            $decoded = $bytes ^ ord(substr($key, $index - 1, 1));
            if ($decoded <= $temp) {
                $decoded = 255 + $decoded - $temp;
            } else {
                $decoded -= $temp;
            }
            $res .= chr($decoded);
            $temp = $bytes;
        }
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscateGlobalsArray($str, $matches)
    {
        $res = $str;
        $alph = stripcslashes($matches[3]);
        $res = preg_replace('~\${"[\\\\x0-9a-f]+"}\[\'\w+\'\]\s*=\s*"[\\\\x0-9a-f]+";~msi', '', $res);

        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace([
                $matches[1] . '[' . $matches[2] . ']' . '[' . $i . '].',
                $matches[1] . '[' . $matches[2] . ']' . '[' . $i . ']'
            ], array("'" . $alph[$i] . "'", "'" . $alph[$i] . "'"), $res);
        }
        $res = str_replace("''", '', $res);

        preg_match_all('~(\$\w+)\[(\'\w+\')]\s*=\s*\'(\w+)\';~msi', $res, $funcs);
        foreach ($funcs[1] as $k => $var) {
            if ($var !== $matches[1]) {
                continue;
            }
            $vars[] = $funcs[2][$k];
            $func[] = $funcs[3][$k];
        }

        foreach ($vars as $index => $var) {
            $res = str_replace($matches[1] . '[' . $var . ']', $func[$index], $res);
        }

        foreach ($func as $remove) {
            $res = str_replace($remove . " = '" . $remove . "';", '', $res);
            $res = str_replace($remove . "='" . $remove . "';", '', $res);
        }
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscateXbrangwolf($str, $match)
    {
        return $match[0];
    }

    private function deobfuscateObfB64($str, $matches)
    {
        $res = base64_decode($matches[3]);
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscateArrayOffsets($str)
    {
        $vars = [];
        preg_match('~(\$\w{1,40})\s*=\s*\'([^\']*)\';\s*(\$\w{1,40})\s*=\s*explode\s*\((chr\s*\(\s*\(\d+\-\d+\)\)),substr\s*\(\1,\s*\((\d+\-\d+)\),\s*\(\s*(\d+\-\d+)\)\)\);.+\1\s*=\s*\$\w+[+\-\*]\d+;~msi', $str, $matches);

        $find = $matches[0];
        $obfPHP = $matches[2];
        $matches[4] = Helpers::calc($matches[4]);
        $matches[5] = (int)Helpers::calc($matches[5]);
        $matches[6] = (int)Helpers::calc($matches[6]);

        $func = explode($matches[4], strtolower(substr($obfPHP, $matches[5], $matches[6])));
        $func[1] = strrev($func[1]);
        $func[2] = strrev($func[2]);

        preg_match('~\$\w{1,40}\s=\sexplode\((chr\(\(\d+\-\d+\)\)),\'([^\']+)\'\);~msi', $str, $matches);
        $matches[1] = Helpers::calc($matches[1]);
        $offsets = explode($matches[1], $matches[2]);

        $res = '';
        for ($i = 0; $i < (sizeof($offsets) / 2); $i++) {
            $res .= substr($obfPHP, $offsets[$i * 2], $offsets[($i * 2) + 1]);
        }

        preg_match('~return\s*\$\w{1,40}\((chr\(\(\d+\-\d+\)\)),(chr\(\(\d+\-\d+\)\)),\$\w{1,40}\);~msi', $str, $matches);
        $matches[1] = Helpers::calc($matches[1]);
        $matches[2] = Helpers::calc($matches[2]);

        $res = Helpers::stripsquoteslashes(str_replace($matches[1], $matches[2], $res));
        $res = "<?php\n" . $res . "?>";

        preg_match('~(\$\w{1,40})\s=\simplode\(array_map\(\"[^\"]+\",str_split\(\"(([^\"\\\\]++|\\\\.)*)\"\)\)\);(\$\w{1,40})\s=\s\$\w{1,40}\(\"\",\s\1\);\s\4\(\);~msi', $res, $matches);

        $matches[2] = stripcslashes($matches[2]);
        for ($i=0, $iMax = strlen($matches[2]); $i < $iMax; $i++) {
            $matches[2][$i] = chr(ord($matches[2][$i])-1);
        }

        $res = str_replace($matches[0], $matches[2], $res);

        preg_match_all('~(\$\w{1,40})\s*=\s*\"(([^\"\\\\]++|\\\\.)*)\";~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $vars[$match[1]] = stripcslashes($match[2]);
        }

        preg_match_all('~(\$\w{1,40})\s*=\s*\'(([^\'\\\\]++|\\\\.)*)\';~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $vars[$match[1]] = Helpers::stripsquoteslashes($match[2]);
        }

        preg_match('~(\$\w{1,40})\s*=\s*\"\\\\x73\\\\164\\\\x72\\\\137\\\\x72\\\\145\\\\x70\\\\154\\\\x61\\\\143\\\\x65";\s(\$\w{1,40})\s=\s\'(([^\'\\\\]++|\\\\.)*)\';\seval\(\1\(\"(([^\"\\\\]++|\\\\.)*)\",\s\"(([^\"\\\\]++|\\\\.)*)\",\s\2\)\);~msi', $res, $matches);

        $matches[7] = stripcslashes($matches[7]);
        $matches[3] = Helpers::stripsquoteslashes(str_replace($matches[5], $matches[7], $matches[3]));


        $res = str_replace($matches[0], $matches[3], $res);

        preg_match_all('~(\$\w{1,40})\s*=\s*\"(([^\"\\\\]++|\\\\.)*)\";~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $vars[$match[1]] = stripcslashes($match[2]);
        }

        preg_match_all('~(\$\w{1,40})\s*=\s*\'(([^\'\\\\]++|\\\\.)*)\';~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $vars[$match[1]] = Helpers::stripsquoteslashes($match[2]);
        }

        preg_match('~\$\w{1,40}\s=\sarray\(((\'(([^\'\\\\]++|\\\\.)*)\',?(\.(\$\w{1,40})\.)?)+)\);~msi', $res, $matches);

        foreach ($vars as $var => $value) {
            $matches[1] = str_replace("'." . $var . ".'", $value, $matches[1]);
        }

        $array2 = explode("','", substr($matches[1], 1, -1));
        preg_match('~eval\(\$\w{1,40}\(array\((((\"[^\"]\"+),?+)+)\),\s(\$\w{1,40}),\s(\$\w{1,40})\)\);~msi', $res, $matches);

        $array1 = explode('","', substr($matches[1], 1, -1));

        $temp = array_keys($vars);
        $temp = $temp[9];

        $arr = explode('|', $vars[$temp]);
        $off=0;
        $funcs=[];

        for ($i = 0, $iMax = count($arr); $i < $iMax; $i++) {
            if ($i === 0) {
                $off = 0;
            } else {
                $off = $arr[$i - 1] + $off;
            }
            $len = $arr[$i];
            $temp = array_keys($vars);
            $temp = $temp[7];

            $funcs[] = substr($vars[$temp], $off, $len);
        }

        for ($i = 0; $i < 5; $i++) {
            if ($i % 2 === 0) {
                $funcs[$i] = strrev($funcs[$i]);
                $g = substr($funcs[$i], strpos($funcs[$i], "9") + 1);
                $g = stripcslashes($g);
                $v = explode(":", substr($funcs[$i], 0, strpos($funcs[$i], "9")));
                for ($j = 0, $jMax = count($v); $j < $jMax; $j++) {
                    $q = explode("|", $v[$j]);
                    $g = str_replace($q[0], $q[1], $g);
                }
                $funcs[$i] = $g;
            } else {
                $h = explode("|", strrev($funcs[$i]));
                $d = explode("*", $h[0]);
                $b = $h[1];
                for ($j = 0, $jMax = count($d); $j < $jMax; $j++) {
                    $b = str_replace($j, $d[$j], $b);
                }
                $funcs[$i] = $b;
            }
        }
        $temp = array_keys($vars);
        $temp = $temp[8];
        $funcs[] = str_replace('9', ' ', strrev($vars[$temp]));
        $funcs = implode("\n", $funcs);
        preg_match('~\$\w{1,40}\s=\s\'.+?eval\([^;]+;~msi', $res, $matches);
        $res = str_replace($matches[0], $funcs, $res);
        $res = stripcslashes($res);
        $res = str_replace('}//}}', '}}', $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateArrayOffsetsEval($str, $matches)
    {
        $arg1 = explode(chr(Helpers::calculateMathStr($matches[4])), $matches[5]);
        $arg2 = $matches[2];
        $code = null;

        for ($enqvlelpmr = 0; $enqvlelpmr < (sizeof($arg1) / 2); $enqvlelpmr++) {
            $code .= substr($arg2, $arg1[($enqvlelpmr * 2)], $arg1[($enqvlelpmr * 2) + 1]);
        }

        $res = str_replace(
            chr(Helpers::calculateMathStr($matches[20])),
            chr(Helpers::calculateMathStr($matches[21])),
            $code
        );

        $arg1 = substr(
            $matches[2],
            Helpers::calculateMathStr($matches[7]),
            Helpers::calculateMathStr($matches[8])
        );

        $func = substr(
            $matches[2],
            Helpers::calculateMathStr($matches[23]),
            Helpers::calculateMathStr($matches[24])
        );

        return $res;
    }

    private function deobfuscateXoredVar($str, $matches)
    {
        $res = $str;
        $find = $matches[0];
        $str = str_replace('\\\'', '@@quote@@', $str);
        preg_match_all('~(\$\w{1,40})\s*=\s*\'([^\']*)\'\s*(?:\^\s*\'([^\']*)\')?;~msi', $str, $matches, PREG_SET_ORDER);
        $vars = [];
        foreach ($matches as $match) {
            $vars[$match[1]] = str_replace('@@quote@@', '\\\'', $match[2]);
            if (isset($match[3])) {
                $vars[$match[1]] ^= str_replace('@@quote@@', '\\\'', $match[3]);
            }
            $res = str_replace($match[0], $match[1] . "='" . $vars[$match[1]] . "';", $res);
        }

        preg_match_all('~(\$\w{1,40})\s*=\s*(\w+);~msi', $str, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $vars[$match[1]] = $match[2];
        }

        preg_match_all('~(\$\w{1,40})\s*=\s*\'([^\']*)\'\^(\$\w+);~msi', $str, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            if (isset($vars[$match[3]])) {
                $vars[$match[1]] = str_replace('@@quote@@', '\\\'', $match[2]) ^ $vars[$match[3]];
                $res = str_replace($match[0], $match[1] . "='" . $vars[$match[1]] . "';", $res);
            }
        }

        preg_match_all('~(\$\w{1,40})\s*=\s*(\$\w+)\^\'([^\']*)\';~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            if (isset($vars[$match[2]])) {
                $vars[$match[1]] = str_replace('@@quote@@', '\\\'', $match[3]) ^ $vars[$match[2]];
                $res = str_replace($match[0], $match[1] . "='" . $vars[$match[1]] . "';", $res);
            }
        }
        preg_match_all('~(?<!\.)\'([^\']*)\'\^(\$\w+)~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            if (isset($vars[$match[2]])) {
                $res = str_replace($match[0], "'" . addcslashes(str_replace('@@quote@@', '\\\'', $match[1]) ^ $vars[$match[2]], '\\\'') . "'", $res);
            }
        }
        preg_match_all('~(\$\w+)\^\'([^\']*)\'~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            if (isset($vars[$match[1]])) {
                $res = str_replace($match[0], "'" . addcslashes($vars[$match[1]] ^ str_replace('@@quote@@', '\\\'', $match[2]), '\\\'') . "'", $res);
            }
        }

        preg_match_all('~(\$\w+)(\.)?=(\$\w+)?(?:\'([^\']*)\')?\.?(\$\w+)?(?:\'([^\']*)\')?(?:\^(\$\w+))?(?:\.\'([^\']*)\')?;~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $val = '';

            //var
            if (isset($match[2]) && $match[2] !== '') {
                if (isset($vars[$match[1]])) {
                    $val .= $vars[$match[1]];
                } else {
                    continue;
                }
            }

            //var
            if (isset($match[3]) && $match[3] !== '') {
                if (isset($vars[$match[3]])) {
                    $val .= $vars[$match[3]];
                } else {
                    continue;
                }
            }

            //str
            if (isset($match[4]) && $match[4] !== '') {
                $val .= $match[4];
            }

            //var
            if (isset($match[5]) && $match[5] !== '') {
                if (isset($vars[$match[5]])) {
                    $val .= $vars[$match[5]];
                } else {
                    continue;
                }
            }

            //str
            if (isset($match[6]) && $match[6] !== '') {
                $val .= $match[6];
            }

            //var and str
            if (isset($match[7]) && $match[7] !== '') {
                if (isset($vars[$match[7]])) {
                    $additionalStr = '';
                    if (isset($match[8]) && $match[8] !== '') {
                        $additionalStr = $match[8];
                    }
                    $val ^= $vars[$match[7]] . $additionalStr;
                } else {
                    continue;
                }
            } else {
                if (isset($match[8]) && $match[8] !== '') {
                    $val .= $match[8];
                }
            }

            $vars[$match[1]] = $val;
            $res = str_replace($match[0], '', $res);
        }

        $res = preg_replace_callback('~(\$\w+)([()]|==)~msi', static function ($match) use ($vars) {
            $res = $vars[$match[1]] ?? $match[1];
            if (isset($vars[$match[1]]) && ($match[2] === ')' || $match[2] === '==')) {
                $res = "'$res'";
            }

            return $res . $match[2];
        }, $res);

        foreach ($vars as $var => $value) {
            $res = str_replace($var, $value, $res);
            $res = str_replace($value . "='" . $value . "';", '', $res);
        }
        $res = str_replace($find, $res, $str);

        if (preg_match('~((\$\w+)=\${\'(\w+)\'};)(?:.*?)((\$\w+)=\2(\[\'[^\']+\'\]);)~msi', $res, $matches)) {
            $res = str_replace($matches[1], '', $res);
            $res = str_replace($matches[4], '', $res);
            $cookieVar = sprintf('$%s%s', $matches[3], $matches[6]);
            $res = str_replace($matches[5], $cookieVar, $res);
        }

        return $res;
    }

    private function deobfuscatePhpMess($str, $matches)
    {
        $res = base64_decode(gzuncompress(base64_decode(base64_decode($matches[4]))));
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscatePregReplaceSample05($str)
    {
        $res = '';
        preg_match('~(\$\w{1,40})\s*=\s*\"([^\"]+)\";\s*\$\w+\s*=\s*\$\w+\(\1,\"([^\"]+)\",\"([^\"]+)\"\);\s*\$\w+\(\"[^\"]+\",\"[^\"]+\",\"\.\"\);~msi', $str, $matches);
        $res = strtr($matches[2], $matches[3], $matches[4]);
        $res = base64_decode($res);
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscatePregReplaceB64($str, $matches)
    {
        $find = $matches[0];
        $res = str_replace($find, base64_decode($matches[4]), $str);
        $res = stripcslashes($res);
        preg_match('~eval\(\${\$\{"GLOBALS"\}\[\"\w+\"\]}\(\${\$\{"GLOBALS"\}\[\"\w+\"]}\(\"([^\"]+)\"\)\)\);~msi', $res, $matches);
        $res = gzuncompress(base64_decode($matches[1]));
        preg_match('~eval\(\$\w+\(\$\w+\("([^"]+)"\)\)\);~msi', $res, $matches);
        $res = gzuncompress(base64_decode($matches[1]));
        preg_match('~eval\(\$\w+\(\$\w+\("([^"]+)"\)\)\);~msi', $res, $matches);
        $res = gzuncompress(base64_decode($matches[1]));
        preg_match_all('~\$(\w+)\s*(\.)?=\s*("[^"]*"|\$\w+);~msi', $res, $matches, PREG_SET_ORDER);
        $var = $matches[0][1];
        $vars = [];
        foreach ($matches as $match) {
            if($match[2]!=='.') {
                $vars[$match[1]] = substr($match[3], 1, -1);
            }
            else {
                $vars[$match[1]] .= $vars[substr($match[3], 1)];
            }
        }
        $res = str_replace("srrKePJUwrMZ", "=", $vars[$var]);
        $res = gzuncompress(base64_decode($res));
        preg_match_all('~function\s*(\w+)\(\$\w+,\$\w+\)\{.+?}\s*};\s*eval\(((\1\(\'(\w+)\',)+)\s*"([\w/\+]+)"\)\)\)\)\)\)\)\);~msi', $res, $matches);
        $decode = array_reverse(explode("',", str_replace($matches[1][0] . "('", '', $matches[2][0])));
        array_shift($decode);
        $arg = $matches[5][0];
        foreach ($decode as $val) {
            $arg = Helpers::someDecoder2($val, $arg);
        }
        $res = $arg;
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateDecoder($str, $matches)
    {
        $res = Helpers::someDecoder($matches[2]);
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscateGBE($str)
    {
        preg_match('~(\$\w{1,40})=\'([^\']+)\';\1=gzinflate\(base64_decode\(\1\)\);\1=str_replace\(\"__FILE__\",\"\'\$\w+\'\",\1\);eval\(\1\);~msi', $str, $matches);
        $res = str_replace($matches[0], gzinflate(base64_decode($matches[2])), $str);
        return $res;
    }

    private function deobfuscateGBZ($str, $matches)
    {
        $res = str_replace($matches[0], base64_decode(str_rot13($matches[4])), $str);
        return $res;
    }

    private function deobfuscateBitrix($str, $matches)
    {
        $find       = $matches[0];
        $res        = $str;
        $funclist   = [];
        $strlist    = [];

        $res = preg_replace("|[\"']\s*\.\s*['\"]|smi", '', $res);
        $res = Helpers::replaceMinMaxRound($res, 111);
        $res = Helpers::replaceBase64Decode($res, '"');
        $replace_from = [];
        $replace_to   = [];
        if (preg_match_all('|\$GLOBALS\[[\'"](.+?)[\'"]\]\s*=\s*Array\((.+?)\);|smi', $res, $founds, PREG_SET_ORDER)) {
            foreach ($founds as $found) {
                $varname = $found[1];
                $funclist[$varname] = explode(',', $found[2]);
                $funclist[$varname] = array_map(function ($value) {
                    return trim($value, "'\"");
                }, $funclist[$varname]);

                foreach ($funclist as $var => $funcs) {
                    foreach($funcs as $k => $func) {
                        $replace_from[] = '$GLOBALS["' . $var . '"][' . $k . ']';
                        $replace_from[] = '$GLOBALS[\'' . $var . '\'][' . $k . ']';
                        $replace_to[] = $func;
                        $replace_to[] = $func;
                    }
                }
                $replace_from[] = $found[0];
                $replace_to[] = '';
                $res = str_replace($replace_from, $replace_to, $res);
            }
        }

        $array_temp = [];
        while (preg_match('~function\s*(\w{1,60})\(\$\w+\)\s*{\s*\$\w{1,60}\s*=\s*Array\((.{1,40000}?)\);\s*return\s*base64_decode[^}]+}~msi', $res, $found)) {
            $strlist = explode(',', $found[2]);
            $array_temp[$found[1]] = array_map('base64_decode', $strlist);
            $replace_from = [];
            $replace_to = [];
            foreach($array_temp[$found[1]] as $k => $v) {
                $replace_from[] = $found[1] . '(' . $k . ')';
                $replace_to[] = '\'' . $v . '\'';
            }
            $replace_from[] = $found[0];
            $replace_to[] = '';
            $res = str_replace($replace_from, $replace_to, $res);
        }

        $res = preg_replace('~\'\s*\.\s*\'~', '', $res);
        if (preg_match_all('~\s*function\s*(_+(.{1,60}?))\(\$[_0-9]+\)\s*\{\s*static\s*\$([_0-9]+)\s*=\s*(true|false);.{1,30000}?\$\3\s*=\s*array\((.*?)\);\s*return\s*base64_decode\(\$\3~smi', $res, $founds, PREG_SET_ORDER)) {
            foreach ($founds as $found) {
                $strlist = explode('",', $found[5]);
                $strlist = implode("',", $strlist);
                $strlist = explode("',", $strlist);
                $array_temp[$found[1]] = array_map('base64_decode', $strlist);
                $replace_from = [];
                $replace_to = [];
                foreach($array_temp[$found[1]] as $k => $v) {
                    $replace_from[] = $found[1] . '(' . $k . ')';
                    $replace_to[] = '\'' . $v . '\'';
                }
                $res = str_replace($replace_from, $replace_to, $res);
            }
        }
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateLockIt($str, $matches)
    {
        $phpcode = base64_decode(Helpers::getTextInsideQuotes(Helpers::getEvalCode($str)));
        $result = $str;
        $offset = 0;
        $dictName = $matches[1];
        $dictVal = urldecode($matches[2]);
        $vars = [$dictName => $dictVal];

        $vars = Helpers::getVarsFromDictionaryDynamically($vars, $str);

        if (preg_match('~eval\(~msi', $matches[15])) {
            $phpcode = base64_decode(Helpers::getTextInsideQuotes(Helpers::getEvalCode($matches[15])));
        }

        if ($matches[7] !== '' && preg_match('~eval\(~msi', $matches[7])) {
            $phpcode2 = base64_decode(Helpers::getTextInsideQuotes(Helpers::getEvalCode($matches[7])));
            $vars = Helpers::collectVars($phpcode2, "'", $vars);
        }

        if (preg_match('~\$_F=__FILE__;\$_X=\'([^\']+)\';\s*eval\s*\(\s*\$?\w{1,60}\s*\(\s*[\'"][^\'"]+[\'"]\s*\)\s*\)\s*;~msi', $str, $matches)) {
            $needles = Helpers::getNeedles($phpcode);
            $needle        = $needles[0];
            $before_needle = $needles[1];
            $strToDecode = base64_decode($matches[1]);
            return '<?php ' . strtr($strToDecode, $needle, $before_needle);
        }

        $count = 0;
        preg_match_all('~,(\d+|0x\w+)\)~msi', $phpcode, $offsetMatches, PREG_SET_ORDER);
        if (count($offsetMatches) === 2) {
            foreach ($offsetMatches as $offsetMatch) {
                if (strpos($offsetMatch[1], '0x') !== false && isset($str[$offset + hexdec($offsetMatch[1])])) {
                    $count++;
                    $offset += hexdec($offsetMatch[1]);
                } else if (isset($str[$offset + (int)$offsetMatch[1]])) {
                    $count++;
                    $offset += (int)$offsetMatch[1];
                }
            }
        }

        $finalOffset = 0;
        if (preg_match('~(\$[O0]*)=(\d+|0x\w+);~msi', $str, $match) && $count === 2) {
            if (strpos($match[2], '0x') !== false) {
                $finalOffset = hexdec($match[2]);
            } else {
                $finalOffset = (int)$match[2];
            }
        }

        $result = substr($str, $offset);
        if ($finalOffset > 0) {
            $result = substr($result, 0, $finalOffset);
        }

        if (preg_match('~[\'"]([^\'"]+)[\'"],[\'"]([^\'"]+)[\'"]~msi', $phpcode, $needleMatches)) {
            $result = strtr($result, $needleMatches[1], $needleMatches[2]);
        }

        $result = base64_decode($result);

        $result = Helpers::replaceVarsFromArray($vars, $result, true);

        for ($i = 0; $i < 2; $i++) {
            $result = preg_replace_callback('~eval\s?\(((?:(?:gzinflate|str_rot13|base64_decode)\()+\'[^\']+\'\)+);~msi',
                function ($match) {
                    return $this->unwrapFuncs($match[1]);
                }, $result);

            $result = preg_replace_callback('~eval\s?\((?:str_rot13\()+\'((?|\\\\\'|[^\'])+\')\)\);~msi',
                function ($match) {
                    return str_rot13($match[1]);
                }, $result);
        }

        $result = preg_replace_callback(
            '~(echo\s*)?base64_decode\(\'([\w=\+\/]+)\'\)~',
            function ($match) {
                if ($match[1] != "") {
                    return 'echo \'' . base64_decode($match[2]) . '\'';
                }
                return '\'' . str_replace('\'', '\\\'', base64_decode($match[2])) . '\'';
            },
            $result
        );

        $result = Helpers::replaceVarsFromArray($vars, $result, true);

        return '<?php ' . $result;
    }

    private function deobfuscateB64inHTML($str, $matches)
    {
        $obfPHP        = $str;
        $phpcode       = base64_decode(Helpers::getTextInsideQuotes(Helpers::getEvalCode($obfPHP)));
        $needles       = Helpers::getNeedles($phpcode);
        $needle        = $needles[count($needles) - 2];
        $before_needle = end($needles);
        $pointer1 = $matches[2];
        $temp = strtr($obfPHP, $needle, $before_needle);
        $end = 8;
        for ($i = strlen($temp) - 1; $i > strlen($temp) - 15; $i--) {
            if ($temp[$i] === '=') {
                $end = strlen($temp) - 1 - $i;
            }
        }

        $phpcode = base64_decode(substr($temp, strlen($temp) - $pointer1 - ($end-1), $pointer1));
        $phpcode = str_replace($matches[0], $phpcode, $str);
        return $phpcode;
    }

    private function deobfuscateStrtrFread($str, $layer2)
    {
        $str = explode('?>', $str);
        $str = end($str);
        $res = substr($str, $layer2[1], strlen($str));
        $res = base64_decode(strtr($res, $layer2[2], $layer2[3]));
        $res = str_replace($layer2[0], $res, $str);
        return $res;
    }

    private function deobfuscateStrtrBase64($str, $matches)
    {
        $str = strtr($matches[2], $matches[3], $matches[4]);
        $res = base64_decode($str);
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscateByteRun($str)
    {
        preg_match('~\$_F=__FILE__;\$_X=\'([^\']+)\';\s*eval\s*\(\s*\$?\w{1,60}\s*\(\s*[\'"][^\'"]+[\'"]\s*\)\s*\)\s*;~msi', $str, $matches);
        $res = base64_decode($matches[1]);
        $res = strtr($res, '123456aouie', 'aouie123456');
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscateExplodeSubst($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        preg_match('~(\$_\w+\[\w+\])\s*=\s*explode\(\'([^\']+)\',\s*\'([^\']+)\'\);.+?(\1\[[a-fx\d]+\])\(\);~msi', $res, $matches);
        $subst_array = explode($matches[2], $matches[3]);
        $res = preg_replace_callback('~((\$_GET\[[O0]+\])|(\$[O0]+))\[([a-fx\d]+)\](\()?~msi', static function ($matches) use ($subst_array) {
            if (isset($matches[5])) {
                return $subst_array[hexdec($matches[4])] . '(';
            }
            return "'" . $subst_array[hexdec($matches[4])] . "'";
        }, $res);
        $res = str_replace($find, $res, $str);

        return $res;
    }

    private function deobfuscateSubst($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        $alph = stripcslashes($matches[2]);

        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace(
                [$matches[1] . '[' . $i . '].', $matches[1] . '[' . $i . ']'],
                ["'" . $alph[$i] . "'", "'" . $alph[$i] . "'"],
                $res
            );
        }
        $res = str_replace("''", '', $res);
        $var = $matches[3];


        preg_match_all('~(\$\w+)\[\]\s*=\s*\'([\w\*\-\#]+)\'~msi', $res, $matches);

        for ($i = 0, $iMax = count($matches[2]); $i <= $iMax; $i++) {
            if ($matches[1][$i] !== $var) {
                continue;
            }
            if (@function_exists($matches[2][$i])) {
                $res = str_replace($var . '[' . $i . ']', $matches[2][$i], $res);
            } else {
                $res = @str_replace($var . '[' . $i . ']', "'" . $matches[2][$i] . "'", $res);
            }
        }
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateUrldecode($str)
    {
        preg_match('~(\$\w+=\'[^\']+\';\s*)+(\$[\w{1,40}]+)=(urldecode|base64_decode)?\(?[\'"]([\w+%=-]+)[\'"]\)?;(\$[\w+]+=(\$(\w+\[\')?[O_0]*(\'\])?([\{\[]\d+[\}\]])?\.?)+;)+[^\?]+(\?\>[\w\~\=\/\+]+|.+\\\\x[^;]+;)~msi', $str, $matches);
        $find = $matches[0];
        $res = $str;
        $res = stripcslashes($res);
        if ($matches[3] === "urldecode") {
            $alph = urldecode($matches[4]);
            $res = str_replace('urldecode(\'' . $matches[4] . '\')', "'" . $alph . "'", $res);
        } elseif ($matches[3] === 'base64_decode') {
            $alph = base64_decode($matches[4]);
            $res = str_replace('base64_decode(\'' . $matches[4] . '\')', "'" . $alph . "'", $res);
        } else {
            $alph = $matches[4];
        }

        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace([
                    $matches[2] . '[' . $i . '].',
                    $matches[2] . '[' . $i . ']',
                    $matches[2] . '{' . $i . '}.',
                    $matches[2] . '{' . $i . '}'
                ], [
                    "'" . $alph[$i] . "'",
                    "'" . $alph[$i] . "'",
                    "'" . $alph[$i] . "'",
                    "'" . $alph[$i] . "'"],
                $res
            );
        }
        $res = str_replace("''", '', $res);

        preg_match_all('~\$(\w+)\s*=\s*\'([\w\*\-\#]+)\'~msi', $res, $matches, PREG_SET_ORDER);
        for ($i = 0, $iMax = count($matches); $i < $iMax; $i++) {
            $res = str_replace(['$' . $matches[$i][1] . '(' , '${"GLOBALS"}["' . $matches[$i][1] . '"]' . '('],
                $matches[$i][2] . '(', $res, $c);
            $res = str_replace(['$' . $matches[$i][1], '${"GLOBALS"}["' . $matches[$i][1] . '"]'],
                    "'" . $matches[$i][2] . "'", $res, $cc);

            if ($c > 0 || $cc > 0) {
                $res = str_replace([
                    "'" . $matches[$i][2] . "'='" . $matches[$i][2] . "';",
                    $matches[$i][2] . "='" . $matches[$i][2] . "';",
                    $matches[$i][2] . "=" . $matches[$i][2] . ';',
                    $matches[$i][0] . ';'
                ], '', $res);
            }
        }

        $res = Helpers::replaceCreateFunction($res);

        preg_match('~\$([0_O]+)\s*=\s*function\s*\((\$\w+)\)\s*\{\s*\$[O_0]+\s*=\s*substr\s*\(\2,(\d+),(\d+)\);\s*\$[O_0]+\s*=\s*substr\s*\(\2,([\d-]+)\);\s*\$[O_0]+\s*=\s*substr\s*\(\2,(\d+),strlen\s*\(\2\)-(\d+)\);\s*return\s*gzinflate\s*\(base64_decode\s*\(\$[O_0]+\s*\.\s*\$[O_0]+\s*\.\s*\$[O_0]+\)+;~msi', $res, $matches);
        $res = preg_replace_callback('~\$\{"GLOBALS"}\["([0_O]+)"\]\s*\(\'([^\']+)\'\)~msi', static function ($calls) use ($matches) {
            if ($calls[1] !== $matches[1]) {
                return $calls[0];
            }
            $temp1 = substr($calls[2], $matches[3], $matches[4]);
            $temp2 = substr($calls[2], $matches[5]);
            $temp3 = substr($calls[2], $matches[6],strlen($calls[2]) - $matches[7]);
            return "'" . gzinflate(base64_decode($temp1 . $temp3 . $temp2)) . "'";
        }, $res);

        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateUrlDecode3($str, $matches)
    {
        $dictionaryKey = $matches[4];
        $dictionaryVal = urldecode($matches[3]);

        $result = Helpers::replaceVarsFromDictionary($dictionaryKey, $dictionaryVal, $str);

        return $result;
    }

    private function deobfuscateEvalFunc($str)
    {
        $res = $str;
        $res = stripcslashes($res);
        preg_match('~function\s*(\w{1,40})\((\$\w{1,40})\)\s*\{\s*(\$\w{1,40})\s*=\s*\"base64_decode\";\s*(\$\w{1,40})\s*=\s*\"gzinflate\";\s*return\s*\4\(\3\(\2\)\);\s*\}\s*\$\w{1,40}\s*=\s*\"[^\"]*\";\s*\$\w{1,40}\s*=\s*\"[^\"]*\";\s*eval\(\1\(\"([^\"]*)\"\)\);~msi', $res, $matches);
        $res = gzinflate(base64_decode($matches[5]));
        $res = str_replace($str, $res, $str);
        return $res;
    }

    private function deobfuscateEvalConcatFunc($str, $matches)
    {
        $res = $matches[2];

        if (str_replace('"."', '', $matches[6]) === '"create_function"') {
            $brackets = '';
            $res = preg_replace_callback('~[\w."]+\(~', static function ($match) use (&$brackets) {
                $replace = strtolower(str_replace('"."', '', $match[0]));
                if (strpos($replace, 'eval') === false) {
                    $brackets .= ')';
                    return $replace;
                }
                return "";
            }, $res);

            $res .= "'$matches[4]'" . $brackets . ';';
            $res = $this->unwrapFuncs($res);
        }

        return $res;
    }

    private function deobfuscateEvalHex($str)
    {
        preg_match('~eval\s*\("(\\\\x?\d+[^"]+)"\);~msi', $str, $matches);
        $res = stripcslashes($matches[1]);
        $res = str_replace($matches[1], $res, $res);
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscateEvalVarConcat($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        preg_match_all('~(\$\w+)\s*\.?=\s*"([^"]+)";~msi', $str, $matches, PREG_SET_ORDER);
        $vars = [];
        foreach ($matches as $match) {
            $res = str_replace($match[0], '', $res);
            $res = str_replace($match[1], '"' . $match[2] . '"', $res);
        }
        $res = preg_replace('/[\'"]\s*?\.+\s*?[\'"]/smi', '', $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalVarSpecific($str, $matches)
    {
        $res = $str;

        if (preg_match('~\${"[^"]+"}\["[^"]+"\]|\${\${"[^"]+"}\["[^"]+"\]}~msi', $str)) {
            $res = stripcslashes($res);

            preg_match_all('~(\${"[^"]+"}\["[^"]+"\])="([^"]+)";~msi',$res, $match, PREG_SET_ORDER);
            foreach ($match as $m) {
                $res = str_replace('${' . $m[1] . '}', '$' . $m[2], $res);
            }
        }

        $vars = Helpers::collectVars($res);

        if (preg_match('~eval\(htmlspecialchars_decode\(urldecode\(base64_decode\((\$\w+)\)\)\)\);~msi', $res, $m) && isset($vars[$m[1]])) {
            $res = htmlspecialchars_decode(urldecode(base64_decode($vars[$m[1]])));
        }

        $res = Helpers::replaceVarsFromArray($vars, $res, false, true);

        return $res;
    }

    private function deobfuscateEvalVar($str, $matches)
    {
        $find = $matches[0];
        $evalVar = $matches[7];
        if (!$evalVar) {
            $evalVar = $matches[6];
            $pregVal = '\$\w+';
            $pregStr = '[\'"]?([\/\w\+=]+)[\'"]?';
            $pregFunc = '(?:base64_decode\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|htmlspecialchars_decode\s*\()+(?:["\']([\/\w\+=]+)["\'])';
            while (preg_match('~str_replace\(["\']([\/\w]+)["\'],\s?["\']([\/\w\+=]+)["\'],\s?(?|(' . $pregVal . ')|(?:' . $pregStr . ')|(' . $pregFunc . '))\)~msi', $evalVar, $match)) {
                $result = $match[0];
                if (preg_match('~' . $pregVal . '~', $match[3], $arg)) {
                    $result = str_replace($match[1], $match[2], $matches[3]);
                } elseif (preg_match('~' . $pregFunc . '~', $match[3], $arg)) {
                    $unwrappedVar = $this->unwrapFuncs($arg[0]);
                    $result = str_replace($match[1], $match[2], $unwrappedVar);
                } elseif (preg_match('~' . $pregStr . '~', $match[3], $arg)) {
                    $result = str_replace($match[1], $match[2], $match[3]);
                }

                $evalVar = str_replace($match[0], "\"$result\"" . ')', $evalVar);
            }
            return $this->unwrapFuncs($matches[5] . $evalVar);
        }

        $str = str_replace(['\\\'', '\\"'], ['@@slaquote@@', '@@sladquote@@'], $str);
        $val = '';
        $index = 0;
        if (@preg_match_all('~(\$[^\s=\'"\)]+)\s*=\s*\(?(?|("[^"]+")|(\'[^\']+\'))\)?\s*;?~msi', $str, $matches)) {
            $matches[1] = array_reverse($matches[1], true);
            $index = array_search($evalVar, $matches[1], true);
            if ($index !== false) {
                $val = @$matches[2][$index];
            }
        }

        $string = $str;
        if ($val !== '') {
            $string = str_replace($matches[0][$index], '', $string);
            $val = substr($val, 1, -1);
            $var_index = substr_count($string, $evalVar . ' = ');
            $text = "'" . addcslashes(stripcslashes($val), "\\'") . "'";
            preg_match_all('~(\$[^\s=\'"\)]+)(?=[^a-zA-Z0-9])~ms', $string, $matches, PREG_OFFSET_CAPTURE);
            $matches = array_reverse($matches[1]);
            foreach($matches as $match) {
                if ($match[0] === $evalVar) {
                    $string = substr_replace($string, $text, $match[1], strlen($match[0]));
                    break;
                }
            }

            $string = preg_replace_callback('~\(\s*(\$[^\s=\'"\)]+)~msi', static function($m) use ($evalVar, $text) {
                if ($m[1] !== $evalVar) {
                    return $m[0];
                }
                return '(' . $text;
            }, $string);
        }

        $string = str_replace('assert(', 'eval(', $string);
        $string = str_replace('@@slaquote@@', '\\\'', $string);
        $string = str_replace('@@sladquote@@', '\\"', $string);
        $string = str_replace("eval(''.", 'eval(', $string);
        $res = str_replace($find, $string, $str);
        if (strpos($string, 'gzinflate(\'') !== false) {
            $res = $this->deobfuscateEval(stripcslashes($res), []);
        }
        return $res;
    }

    private function deobfuscateEval($str, $matches)
    {
        if (preg_match('~\)+\..{0,30}base64_decode~msi', $str)) {
            $res = explode(').', $str);
            $res = implode(')); eval(', $res);
            return $res;
        }

        if (preg_match('~@?stream_get_contents\(\$\w+\),\s*true~msi', $str, $matches)) {
            if (preg_match('~(\$\w+)\s*=\s*@?fopen\(__FILE__,\s*\'\w+\'\);\s*@?fseek\(\1,\s*([0-9a-fx]+)~msi', $this->full_source, $m)) {
                $offset = hexdec($m[2]);
                $end = substr($this->full_source, $offset);
                $res = str_replace($matches[0], '\'' . $end . '\'', $str);
                return $res;
            }
        }

        $res = $str;
        $group = '';
        if (preg_match('~(preg_replace\(["\'](?:/\.\*?/[^"\']+|[\\\\x0-9a-f]+)["\']\s*,\s*)[^\),]+(?:[\)\\\\0-5]+;[\'"])?(,\s*["\'][^"\']*["\'])\)+;~msi', $res, $matches)) {
            if (strpos(stripcslashes($matches[1]), '(.*)') !== false || strpos(stripcslashes($matches[1]), '(.+)') !== false) {
                $group = substr(stripcslashes($matches[2]), 2, -1);
            }
            $res = str_replace([$matches[1], $matches[2]], ['eval(', ''], $res);
            if ($group !== '' && strpos(stripcslashes($res), '\1') !== false) {
                $res = stripcslashes($res);
                $res = str_replace('\1', $group, $res);
            }
            return $res;
        }

        if (strpos($res, 'e\x76al') !== false
            || strpos($res, '\x29') !== false
            || strpos($res, 'base64_decode("\\x') !== false
        ) {
            $res = stripcslashes($res);
        }
        if (strpos($res, '"."') !== false) {
            $res = str_replace('"."', '', $res);
        }

        if (preg_match('~((\$\w+)\s*=\s*create_function\(\'\',\s*)[^\)]+\)+;\s*(\2\(\);)~msi', $res, $matches)) {
            $res = str_replace($matches[1], 'eval(', $res);
            $res = str_replace($matches[3], '', $res);
            return $res;
        }

        if (preg_match('~eval\s*/\*[\w\s\.:,]+\*/\s*\(~msi', $res, $matches)) {
            $res = str_replace($matches[0], 'eval(', $res);
            return $res;
        }
        if (preg_match('~\$_(POST|GET|REQUEST|COOKIE)~ms', $res)) {
            return $res;
        }

        $res = preg_replace('~"\s+\?>\s*"\s*\.~m', '"?>".', $res, 3);

        $string = substr($res, 5, -2);
        $res = $this->unwrapFuncs($string);

        if (preg_match('~\?>\s*([\w/+]+==)~msi', $res, $match)) {
            $code = base64_decode($match[1]);
            if (strpos($code, 'error_reporting(') !== false) {
                $res = '?> ' . $code;
            }
        }

        if (preg_match('~chr\(\d+\^\d+\)~msi', $res)) {
            $res = Helpers::normalize($res);
        }
        $res = str_replace($str, $res, $str);
        return $res;
    }

    private function deobfuscateEvalCodeFunc($str, $matches)
    {
        $res = substr($str, 5, -2);
        $res = $this->unwrapFuncs($res);
        $res = stripcslashes($res);
        $res = str_replace($str, $res, $str);
        return $res;
    }

    private function deobfuscateEcho($str, $matches)
    {
        $res = $str;
        $string = $matches[0];
        if (preg_match('~\$_(POST|GET|REQUEST|COOKIE)~ms', $res)) {
            return $res;
        }
        $string = substr($string, 5);
        $res = $this->unwrapFuncs($string);
        $res = str_replace($string, '\'' . addcslashes($res, '\'') . '\';', $str);
        return $res;
    }

    private function deobfuscateFOPO($str, $matches)
    {
        $phpcode = Helpers::formatPHP($str);
        $eval = Helpers::getEvalCode($phpcode);
        $b64_count = substr_count($eval, $matches[1]);
        $b64 = Helpers::getTextInsideQuotes($eval);
        for ($i = 0; $i < $b64_count; $i++) {
            $b64 = base64_decode($b64);
        }
        $phpcode = $b64;
        if (preg_match('~eval\s*\(\s*\$[\w|]+\s*\(\s*\$[\w|]+\s*\(~msi', $phpcode)) {
            preg_match_all('~\$\w+\(\$\w+\(\$\w+\("[^"]+"\)+~msi', $phpcode, $matches2);
            $array = end($matches2);
            @$phpcode = gzinflate(base64_decode(str_rot13(Helpers::getTextInsideQuotes(end($array)))));
            $old = '';
            $hangs = 0;
            while (($old != $phpcode) && (strpos($phpcode, 'eval($') !== false)
                   && (strpos($phpcode, '__FILE__') === false) && $hangs < 30) {
                $old = $phpcode;
                $funcs = explode(';', $phpcode);
                if (count($funcs) === 5) {
                    $phpcode = gzinflate(base64_decode(str_rot13(Helpers::getTextInsideQuotes(Helpers::getEvalCode($phpcode)))));
                } elseif (count($funcs) === 4) {
                    $phpcode = gzinflate(base64_decode(Helpers::getTextInsideQuotes(Helpers::getEvalCode($phpcode))));
                }
                $hangs++;
            }
            $res = str_replace($matches[0], substr($phpcode, 2), $str);
        } else {
            $res = str_replace($matches[0], $phpcode, $str);
        }

        return $res;
    }

    private function deobfuscateFakeIonCube($str, $matches)
    {
        $subst_value = 0;
        $matches[1] = Helpers::calc($matches[1]);
        $subst_value = (int)$matches[1] - 21;
        $code = @pack("H*", preg_replace("/[A-Z,\r,\n]/", "", substr($str, $subst_value)));
        $res = str_replace($matches[0], $code, $str);
        return $res;
    }

    private function deobfuscateCobra($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        $res = preg_replace_callback(
            '~eval\(\"return strrev\(base64_decode\(\'([^\']+)\'\)\);\"\)~msi',
            static function ($matches) {
                return strrev(base64_decode($matches[1]));
            },
            $res
        );

        $res = preg_replace_callback(
            '~eval\(gzinflate\(base64_decode\(\.\"\'([^\']+)\'\)\)\)\;~msi',
            static function ($matches) {
                return gzinflate(base64_decode($matches[1]));
            },
            $res
        );

        preg_match('~(\$\w{1,40})\s*=\s*\"([^\"]+)\"\;\s*\1\s*=\s*explode\(\"([^\"]+)\",\s*\s*\1\);~msi', $res, $matches);
        $var = $matches[1];
        $decrypt = base64_decode(current(explode($matches[3], $matches[2])));
        $decrypt = preg_replace_callback(
            '~eval\(\"return strrev\(base64_decode\(\'([^\']+)\'\)\);\"\)~msi',
            static function ($matches) {
                return strrev(base64_decode($matches[1]));
            },
            $decrypt
        );

        $decrypt = preg_replace_callback(
            '~eval\(gzinflate\(base64_decode\(\.\"\'([^\']+)\'\)\)\)\;~msi',
            static function ($matches) {
                return gzinflate(base64_decode($matches[1]));
            },
            $decrypt
        );

        preg_match('~if\(\!function_exists\(\"(\w+)\"\)\)\s*\{\s*function\s*\1\(\$string\)\s*\{\s*\$string\s*=\s*base64_decode\(\$string\)\;\s*\$key\s*=\s*\"(\w+)\"\;~msi', $decrypt, $matches);

        $decrypt_func = $matches[1];
        $xor_key = $matches[2];

        $res = preg_replace_callback(
            '~\\' . $var . '\s*=\s*.*?eval\(' . $decrypt_func . '\(\"([^\"]+)\"\)\)\;\"\)\;~msi',
            static function ($matches) use ($xor_key) {
                $string = base64_decode($matches[1]);
                $key = $xor_key;
                $xor = "";
                for ($i = 0, $iMax = strlen($string); $i < $iMax;) {
                    for ($j = 0, $jMax = strlen($key); $j < $jMax; $j++,$i++) {
                        if (isset($string[$i])) {
                            $xor .= $string[$i] ^ $key[$j];
                        }
                    }
                }
                return $xor;
            },
            $res
        );
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateFlamux($str, $matches)
    {
        $str = $matches[0];

        $vars = [];
        preg_match_all('~(\$\w+=[\'"]\w+[\'"];)~', $str, $match);
        foreach ($match[0] as $var) {
            $split = explode('=', str_replace(';', '', $var));
            $vars[$split[0]] = $split[1];
        }

        $res = '';
        preg_match_all('~(\$\w+=\$\w+[\'.]+\$\w+;)~', $str, $match);
        for ($i = 0, $iMax = count($match[0]); $i < $iMax; $i++) {

            $split = explode('=', str_replace(';', '', $match[0][$i]));
            $concats = explode('.', $split[1]);
            $str_to_concat = '';
            foreach ($concats as $concat) {
                $str_to_concat .= $vars[$concat] ?? '';
            }

            $vars[$split[0]] = $str_to_concat;

            if ($i === ($iMax - 1)) {
                $res = gzinflate(base64_decode(base64_decode(str_rot13($str_to_concat))));
            }
        }

        return $res;
    }

    private function deobfuscateDarkShell($str, $matches)
    {
        return stripcslashes($matches[0]);
    }

    private function deobfuscateWso($str, $matches)
    {
        $result = $matches[0];
        $contentVar = $matches[8];

        preg_match_all('~(\[([-+\(\d*\/\)]+)\])+~', $result, $mathMatches);
        foreach ($mathMatches[0] as $index => $match) {
            $search = $mathMatches[2][$index];
            $mathResult = Helpers::calculateMathStr($search);

            $result = str_replace("[$search]", "[$mathResult]", $result);
        }

        $dictionary = $matches[2];

        $variables = Helpers::getVarsFromDictionary($dictionary, $result);
        $variables[$matches[6]] = $matches[7];

        preg_match_all('~(\$\w+)\.=(\$\w+)~', $result, $matches);
        foreach ($matches as $index => $match) {
            $var = $matches[1][$index];
            $value = $matches[2][$index];
            if (!isset($variables[$var])) {
                $variables[$var] = (string)$variables[$value] ?? '';
            } else {
                $variables[$var] .= (string)$variables[$value] ?? '';
            }
        }

        if (isset($variables[$contentVar])) {
            $result = $variables[$contentVar];
        }

        if (preg_match('~(\$\w+)\s+=\s+(["\'\w\/+]+);(\$\w+)=base64_decode\(\1\);(\$\w+)=gzinflate\(\3\);eval\(\4\);~msi', $result, $match)) {
            $result = gzinflate(base64_decode($match[2]));
        }

        $result = str_replace('<?php', '', $result);

        return $result;
    }

    private function deobfuscateAnonymousFox($str, $matches)
    {
        $string = $matches[7];
        $array = strlen(trim($string));
        $debuger = '';
        for ($one = 0; $one < $array; $one += 2) {
            $debuger .= pack("C", hexdec(substr($string, $one, 2)));
        }
        $string = $debuger;

        $result = $string . $matches[8];
        return $result;
    }

    private function deobfuscateWsoEval($str, $matches)
    {
        $result = base64_decode($matches[2]);

        preg_match('~data:image/png;(.*)">~im', $result, $match);
        $result = str_replace( array ('%', '#'), array ('/', '+'), $match[1]);
        $result = gzinflate(base64_decode($result));

        return $result;
    }

    private function deobfuscateAssertStr($str, $matches)
    {
        return 'eval' . $matches[3];
    }

    private function deobfuscateEvalFuncFunc($str, $matches)
    {
        return Helpers::decrypt_T_func(base64_decode($matches[15]));
    }

    private function deobfuscateFuncVar($str, $matches)
    {
        $arg1 = str_replace($matches[5], '', $matches[3]);
        $funcName = str_replace($matches[8], '', $matches[7]);
        $insidefuncName = str_replace($matches[11], '', $matches[10]);

        if ($funcName === 'create_function') {
            $result = sprintf('%s(%s(\'%s\');', $insidefuncName, $arg1, $matches[15]);
        } else {
            $result = sprintf(
                '%s = %s(\'%s\',\'%s(%s(%s));\');%s(\'%s\');',
                $matches[14],
                $funcName,
                $matches[13],
                $insidefuncName,
                $arg1,
                $matches[13],
                $matches[14],
                $matches[15]
            );
        }

        return $result;
    }

    private function deobfuscateEchoEval($str, $matches)
    {
        $content = $matches[4];
        $content = str_replace($matches[1], $matches[2], $content);
        $result = str_replace($matches[3], $content, $matches[5]);

        return $result;
    }

    private function deobfuscateDictionaryVars($str, $matches)
    {
        $dictionary = $matches[2];
        $dictionary = str_replace("\'", "'", $dictionary);
        $dictionary = str_replace('\"', '"', $dictionary);
        $content = $matches[4];
        $vars = Helpers::getVarsFromDictionary($dictionary, $matches[0]);

        if (isset($vars[$matches[6]]) && $vars[$matches[6]] === 'create_function') {
            $content = str_replace($matches[5], 'eval(' . $matches[7] . ');', $content);
        }

        $content = Helpers::replaceVarsFromDictionary($matches[1], $dictionary, $content);

        foreach ($vars as $key => $value) {
            $content = str_replace($key, $value, $content);
        }

        $content = preg_replace_callback('~\${[\'"](\w+)[\'"]}~msi', static function ($m) {
            return '$' . $m[1];
        }, $content);

        $content = str_replace("''}", "\''}", $content);

        return $content;
    }

    private function deobfuscateConcatVarFunc($str, $matches)
    {
        $strVar = "";
        if ($matches['concatVar'] !== "") {
            $strVar = Helpers::concatVariableValues($matches[2], false);
        } else {
            if ($matches['strVal'] !== "") {
                $strVar = $matches['strVal'];
            }
        }

        $result = "";
        $iMax = strlen($strVar) / 2;
        for ($i = 0; $i < $iMax; $i++) {
            $result .= chr(base_convert(substr($strVar, $i * 2, 2), 16, 10));
        }
        return $result;
    }

    private function deobfuscateConcatVarFuncFunc($str, $matches)
    {
        $result = $matches[12];

        $func1 = Helpers::concatVariableValues($matches[2]);
        $func2 = Helpers::concatVariableValues($matches[22]);
        $func3 = Helpers::concatVariableValues($matches[19]);
        $func4 = Helpers::concatVariableValues($matches[7]);

        $result = sprintf('eval(%s(%s(%s(%s("%s")))));', $func1, $func2, $func3, $func4, $result);

        return $result;
    }

    private function deobfuscateEvalVarDoubled($str)
    {
        $result = $str;

        preg_match_all('~(\$\w+)\s?=\s?(\w+)\([\'"]([^\'"]+)[\'"]\);~', $str, $varMatches);

        foreach ($varMatches[0] as $index => $varMatch) {
            $var_name = $varMatches[1][$index];
            $func_name = $varMatches[2][$index];
            $str = $varMatches[3][$index];

            if (Helpers::convertToSafeFunc($func_name)) {
                $str = @$func_name($str);
            }
            $result = str_replace($varMatch, '', $result);
            $result = str_replace($var_name, $str, $result);
        }

        return $result;
    }

    private function deobfuscateVarFuncsEcho($str, $matches)
    {
        $result = $str;
        $func = $matches[2];

        if (Helpers::convertToSafeFunc($func)) {
            $result = @$func($matches[3]);
            $result = str_replace('<?php', '', $result);
        }

        return $result;
    }

    private function deobfuscateVarFuncsMany($str, $matches)
    {
        $result          = $matches[0];
        $strName         = $matches[1];
        $dictionaryName  = $matches[2];
        $dictionaryValue = Helpers::collectStr("$matches[3]", "'");

        $funcs = [];
        $vars  = [];

        $result = preg_replace_callback('~(\$\w+)=((?:(\$\w{1,50})\[?{?\d+\]?}?\.?)+);~msi',
            function ($m) use (&$vars, $dictionaryValue) {
                $vars = array_merge($vars, Helpers::getVarsFromDictionary($dictionaryValue, $m[0]));
                return '';
            }, $result);

        $result = preg_replace_callback(
            '~(\$\w+)\s?=\s?array\([\'"]([\w+\/]+)[\'"]\s?,\s?[\'"]([\w+\/]+)[\'"](?:\s?,[\'"]([\w+\/]+)[\'"]\s?)?\);\s?((?:(?:\$\w+=\s?\w+\(\$\w+,\s?)|(?:return\s?))(join\([\'"]{2},\s?\1\))\s?\)?\s?;)~msi',
            function ($match) {
                $joinedVars = implode("", [$match[2], $match[3], $match[4]]);
                $replace    = str_replace($match[6], "'$joinedVars'", $match[5]);

                return $replace;
            },
            $result
        );

        $result = preg_replace_callback(
            '~global\s(\$\w+);\s?((\$\w+)\s?=\s?[\'"]([\w\/+]+)[\'"];\s?(\$\w+)\s?=\s?[\'"]([\w\/+]+)[\'"];\s?(\$\w+)\s?=\s?[\'"]([\w\/+]+)[\'"];\s?\1\s?\.=\s?"({\3}{\5}{\7})");~',
            function ($match) {
                $concatedVars = $match[4] . $match[6] . $match[8];
                $replace      = str_replace($match[2], sprintf('%s.="%s"', $match[1], $concatedVars), $match[0]);

                return $replace;
            },
            $result
        );

        $result = preg_replace_callback(
            '~((\$\w+)\s?=\s?[\'"]([\w\/+=]+)[\'"];\s?(\$\w+)\s?=\s?[\'"]([\w\/+=]+)[\'"];\s?return\s?"({\2}{\4})");~msi',
            function ($match) {
                $concatedVars = $match[3] . $match[5];
                $replace      = str_replace($match[1], sprintf('return "%s"', $concatedVars), $match[0]);

                return $replace;
            },
            $result
        );

        $result = preg_replace_callback(
            '~(?:class\s(?<className>\w+)\s?{\s?)?(?:public\s)?function\s(?<methodName>\w+\(\)){\s?(?<codeBlock>.*?;)\s}\s?(?:}\s?)?~msi',
            function ($match) use (&$funcs, $strName, $dictionaryName, $dictionaryValue) {
                $str      = "";
                $isConcat = false;

                if (preg_match(
                    '~return\s[\'"]([\w+\/+=]+)[\'"];~msi',
                    $match[0],
                    $returnCode
                )) {
                    $str = $returnCode[1];
                } else {
                    if (preg_match(
                        '~global\s(\$\w+);\s?\1\s?\.=\s?["\']([\w+\/+]+)["\'];?~msi',
                        $match[0],
                        $concatCode
                    )) {
                        $str      = $concatCode[2];
                        $isConcat = true;
                    } else {
                        if (preg_match(
                            '~global\s(\$' . substr(
                                $dictionaryName,
                                1
                            ) . ');\s*return\s*((?:\s?\1\[?{?\d+\]?}?\s?\.?\s?)+);?~msi',
                            $match[0],
                            $returnCode
                        )) {
                            $str      = Helpers::getVarsFromDictionary(
                                $dictionaryValue,
                                sprintf('%s=%s', $dictionaryName, $returnCode[2])
                            );
                            $str      = $str[$dictionaryName];
                            $isConcat = false;
                        }
                    }
                }
                $funcs[$match['methodName']]['str']    = $str;
                $funcs[$match['methodName']]['concat'] = $isConcat;

                return "";
            },
            $result
        );

        $result = preg_replace_callback(
            '~(\$[^' . substr($strName, 1) . ']\w+)\s?=\s?(\w+\(\));~ms',
            function ($match) use ($funcs, &$vars) {
                if (isset($funcs[$match[2]]) && !$funcs[$match[2]]['concat']) {
                    $vars[$match[1]] = $funcs[$match[2]]['str'];
                }
                return "";
            },
            $result
        );

        foreach ($vars as $name => $var) {
            $result = str_replace($name, $var, $result);
        }

        $result = preg_replace_callback(
            '~([\w_]+)\s?\(\s?([\w_]+)\s?\(\s?((?:\$' . substr($dictionaryName,
                1) . '[{\[]\d+[\]}]\s?\.?)+)\s?,\s?(\d+)\s?\),\s?((?:\d+,?)+)\);~msi',
            function ($match) use ($dictionaryValue, $dictionaryName) {
                $str = Helpers::getVarsFromDictionary(
                    $dictionaryValue,
                    sprintf('%s=%s', $dictionaryName, $match[3])
                );
                $res = "";
                if (Helpers::convertToSafeFunc($match[2])) {
                    $res = @$match[2]($str[$dictionaryName], $match[4]);
                }

                if (Helpers::convertToSafeFunc($match[1]) && function_exists($match[1])) {
                    $args   = [$res];
                    $digits = explode(',', $match[5]);
                    foreach ($digits as $digit) {
                        $args[] = (int)$digit;
                    }
                    $reflectionMethod = new ReflectionFunction($match[1]);
                    $res              = $reflectionMethod->invokeArgs($args);
                }
                return "\"$res\";";
            },
            $result
        );

        $strToDecode = "";

        $regexFinal = str_replace('mainVar', $strName,
            '~(?:\mainVar\s?=\s?\w+\(\s?\mainVar\s*,\s?["\'](?<concat>[\w+\/]+)[\'"]\s?\)\s?;)|(?:\mainVar\s?=\s?\w+\(\s?\mainVar\s?,\s?(?<concatFunc>\w+\(\))\)\s?;)|(?:\mainVar\s?\.?=\s?(?:\mainVar\.)?\s?["\'](?<concatStr>[\w+\/=]+)[\'"]\s?;)|(?:\mainVar\s?\.?=\s?(?<concatFuncSingle>\w+\(\))\s?;)|(\$\w+\s?=\s?new\s\w+\(\)\s?;\s?\mainVar\s?\.?=\s?\mainVar\s?\.\s?\$\w+->(?<concatFuncClass>\w+\(\)\s?))|(?:(?<func>[^,\s]\w+\(\)))~msi');

        $result = preg_replace_callback(
            $regexFinal,
            function ($match) use (&$strToDecode, $funcs) {
                if (isset($match['concat']) && $match['concat'] !== "") {
                    $strToDecode .= $match['concat'];
                    return;
                }
                if (isset($match['concatStr']) && $match['concatStr'] !== "") {
                    $strToDecode .= $match['concatStr'];
                    return;
                }
                if (isset($match['concatFunc']) && $match['concatFunc'] !== "") {
                    $strToDecode .= $funcs[$match['concatFunc']]['str'];
                    return;
                }
                if (isset($match['concatFuncSingle']) && $match['concatFuncSingle'] !== "") {
                    $strToDecode .= $funcs[$match['concatFuncSingle']]['str'];
                    return;
                }
                if (isset($match['concatFuncClass']) && $match['concatFuncClass'] !== "") {
                    $strToDecode .= $funcs[$match['concatFuncClass']]['str'];
                    return;
                }
                if (isset($match['func']) && $match['func'] !== "") {
                    $strToDecode .= $funcs[$match['func']]['str'];
                    return;
                }
            },
            $result
        );

        $code   = $result;
        $result = base64_decode($strToDecode);

        if (preg_match('~((\$\w+)="";).*?((\$\w+)=create_function\(\'(\$\w+,\$\w+)\',\s?(base64_decode\(((?:"[\w+=]+"\.?)+)\))\);).*?(\$\w+\s?=\s?create_function\("",\s?\4\(base64_decode\(\2\),\s?(\$_COOKIE\[\'\w+\'\])\)\s?\);)~msi',
            $code, $codeMatch)) {
            $initialCode = base64_decode(Helpers::collectStr($codeMatch[7]));

            $result = sprintf("function %s(%s){%s}%s='%s';%s(%s,%s);",
                substr($codeMatch[4], 1), $codeMatch[5], $initialCode, $codeMatch[2], $result,
                substr($codeMatch[4], 1), $codeMatch[2], $codeMatch[9]);
        }

        return $result;
    }

    private function deobfuscateGlobalArrayEval($str, $matches)
    {
        $result = str_replace($matches[1], "", $str);

        $dictionary = stripcslashes($matches[3]);
        $dictionaryVar = stripcslashes($matches[2]);
        $dictionaryVar = str_replace('{"GLOBALS"}', 'GLOBALS', $dictionaryVar);

        $result = Helpers::replaceVarsFromDictionary($dictionaryVar, $dictionary, $result);

        preg_match_all('~(\$GLOBALS\[[\'\w]+\])\s?=\s?[\'"]?([\w\-\_\$]+)["\']?;\s?~msi', $result, $varMatch);

        foreach ($varMatch[1] as $index => $var) {
            $result = str_replace([$varMatch[0][$index], $varMatch[1][$index]], ["", $varMatch[2][$index]],
                $result);
        }

        return $result;
    }

    private function deobfuscateTinkleShell($str, $matches)
    {
        $result = $str;
        $dictionaryStr = $matches[2];
        $decodeKey = Helpers::getDecryptKeyForTinkleShell(strlen($str));
        $vars = [
            $matches[4] => $matches[5],
        ];

        $result = str_replace(' ', '', $result);
        $matches[3] = str_replace(' ', '', $matches[3]);

        preg_match_all('~(\$\w+)=(?:\$\w+\[\'\w\'\+\d+\+\'\w\'\]\.?)+;~msi', $matches[3], $matchVars);
        foreach ($matchVars[0] as $index => $match) {
            preg_match_all('~\$\w+\[\'\w\'\+(\d+)\+\'\w\'\]\.?~msi', $match, $values);
            foreach ($values[1] as $value) {
                if (!isset($vars[$matchVars[1][$index]])) {
                    $vars[$matchVars[1][$index]] = $dictionaryStr[$value] ?? $value;
                } else {
                    $vars[$matchVars[1][$index]] .= $dictionaryStr[$value] ?? $value;
                }
            }
        }

        $result = str_replace($matches[3], "", $result);

        preg_match_all('~(\$\w+)=(\$\w+)\((\$\w+),(\$\w+)\(""\),"([\w\+]+)"\);~msi', $result, $matchVars);
        foreach ($matchVars[1] as $index => $varName) {
            $func = $vars[$matchVars[2][$index]] ?? $matchVars[2][$index];
            $arg1 = $vars[$matchVars[3][$index]] ?? $matchVars[3][$index];
            $arg2 = $vars[$matchVars[4][$index]] ?? $matchVars[4][$index];
            $argStr = $matchVars[5][$index];

            if (Helpers::convertToSafeFunc($func)) {
                $value = @$func($arg1, $arg2 === 'trim' ? "" : $arg2, $argStr);

                $vars[$varName] = $value;
            }
            $result = str_replace($matchVars[0][$index], '', $result);
        }

        $func = $vars[$matches[10]] ?? '';
        if (Helpers::convertToSafeFunc($func)) {
            $result = @$func($matches[11], $vars[$matches[12]] ?? "", $decodeKey);
        }
        $func = $vars[$matches[7]] ?? '';
        if (Helpers::convertToSafeFunc($func)) {
            $result = @$func($vars[$matches[8]] ?? '', "", $result);
        }
        $func = $vars[$matches[6]] ?? '';
        if (Helpers::convertToSafeFunc($func)) {
            $result = @$func($result);
        }

        return $result;
    }

    private function deobfuscateWsoFunc($str, $matches)
    {
        if (isset($matches['str'])) {
            return gzinflate(base64_decode($matches['str']));
        }

        return $matches[0];
    }

    private function deobfuscateEvalWanFunc($str, $matches)
    {
        $result = gzinflate(base64_decode($matches[5]));

        for ($i = 0, $iMax = strlen($result); $i < $iMax; $i++) {
            $result[$i] = chr(ord($result[$i]) - (int)$matches[4]);
        }

        return $result;
    }

    private function deobfuscateFuncFile($str, $matches)
    {
        return base64_decode($matches[2]);
    }

    private function deobfuscateFuncFile2($str, $matches)
    {
        $var_fragment   = $matches[1];
        $decoded_code   = base64_decode($matches[3]);
        $var_name       = $matches[4];
        $new_fragment   = "$var_name = '$decoded_code';";
        return str_replace($var_fragment, $new_fragment, $str);
    }

    private function deobfuscateGulf($str, $matches)
    {
        $result = str_replace('\'.\'', '', str_replace($matches[2], '', $matches[1]));

        $vars = Helpers::collectVars($matches[2], "'");
        $result = Helpers::replaceVarsFromArray($vars, $result);

        $tempCode = gzinflate(base64_decode($matches[4]));

        $result .= PHP_EOL . $tempCode;

        return $result;
    }

    private function deobfuscateEvalConcatAsciiChars($str, $matches)
    {
        $result = '';

        $num = (int)$matches[2];
        $str = (string)$matches[3];
        $len = strlen($str);

        for ($i = 0; $i < $len; $i++) {
            $result .= chr(ord($str[$i]) ^ $num);
        }

        $result = str_replace(['<?php', '?>', '', ''], '', $result);

        return $result;
    }

    private function deobfuscateEvalPost($str, $matches)
    {
        $vars = Helpers::collectVars($str);

        $result = str_replace('.', "", $matches[8]);
        $result = str_replace($matches[7], "", Helpers::replaceVarsFromArray($vars, $result));
        $result = base64_decode(base64_decode($result));

        return $result;
    }

    private function deobfuscateEvalPregStr($str, $matches)
    {
        $result = sprintf("%s'%s'%s", stripcslashes($matches[1]), $matches[2], stripcslashes($matches[3]));

        $result = $this->unwrapFuncs($result);

        return $result;
    }

    private function deobfuscateClassDestructFunc($str, $matches)
    {
        $result = $str;

        $arg1 = $matches[1] ^ stripcslashes($matches[2]);
        $arg2 = $matches[3] ^ stripcslashes($matches[4]);

        if ($arg1 === 'assert' && $arg2 === 'eval') {
            $result = base64_decode($matches[5]);
        }

        return $result;
    }

    private function deobfuscateCreateFuncEval($str, $matches)
    {
        $result = $str;

        $func = stripcslashes($matches[1]);

        if (Helpers::convertToSafeFunc($func)) {
            $result = @$func($matches[2]);
        }

        return $result;
    }

    private function deobfuscateEvalCreateFunc($str, $matches)
    {
        $result = $str;

        if (!(isset($matches[4]) && $matches[4] !== ''))
        {
            $arr = [
                0 => $matches[5],
                1 => $matches[6],
                2 => $matches[13],
            ];

            $func_1 = Helpers::decodeEvalCreateFunc_2($arr);
            if (strtoupper($func_1) === 'CREATE_FUNCTION') {
                $arr[2] = $matches[10];
                $result = Helpers::decodeEvalCreateFunc_2($arr);
                return $result;
            }
        }

        $arr = [
            0 => $matches[4],
            1 => $matches[5],
            2 => $matches[6],
            3 => $matches[13],
        ];

        $func_1 = Helpers::decodeEvalCreateFunc_1($arr);
        if (strtoupper($func_1) === 'CREATE_FUNCTION') {
            $arr[3] = $matches[10];

            $result = Helpers::decodeEvalCreateFunc_1($arr);

            $result = preg_replace_callback(Helpers::REGEXP_BASE64_DECODE, function ($match) {
                $extraCode = $this->unwrapFuncs($match[0]);

                if (preg_match('~if\(!function_exists\([\'"](\w+)[\'"]\)\){function\s?\1\((\$\w+)\){(\$\w+)=array\(\'([{\w\]]+)\',\'([\w`]+)\',\2\);for\((\$\w+)=0;\6<3;\6\+\+\){for\((\$\w+)=0;\7<strlen\(\3\[\6\]\);\7\+\+\)\s?\3\[\6\]\[\7\]\s?=\s?chr\(ord\(\3\[\6\]\[\7\]\)-1\);if\(\6==1\)\s?\3\[2\]=\3\[0\]\(\3\[1\]\(\3\[2\]\)\);}\s?return\s?\3\[2\];}(\$\w+)=["\']([\w\+\/=]+)["\'];(\$\w+)=[\'"]\1[\'"];(\$\w+)=\10\([\'"]([\w=]+)[\'"]\);\$\w+=\11\(\'\',\10\(\8\)\);\$\w+\(\);}~msi', $extraCode, $matchCode)) {
                    $arr = [
                        0 => $matchCode[4],
                        1 => $matchCode[5],
                        2 => $matchCode[12],
                    ];

                    $func_1 = Helpers::decodeEvalCreateFunc_2($arr);
                    if (strtoupper($func_1) === 'CREATE_FUNCTION') {
                        $arr[2] = $matchCode[9];

                        $extraCode = str_replace($matchCode[0], Helpers::decodeEvalCreateFunc_2($arr), $extraCode);
                    }
                }
                return $extraCode;
            }, $result);
        }

        return $result;
    }

    private function deobfuscateEvalFuncVars($str, $matches)
    {
        $result = $str;
        $vars = Helpers::collectFuncVars($matches[1]);

        $result = Helpers::replaceVarsFromArray($vars, $matches[2]);


        if (strpos($result, 'eval') !== false) {
            $result = $this->unwrapFuncs($result);
        }
        return $result;
    }

    private function deobfuscateDictionaryCreateFuncs($str, $matches)
    {
        $vars = Helpers::getVarsFromDictionary($matches[3], $matches[4]);
        $result = str_replace($matches[4], '', $str);

        $result = preg_replace_callback('~\${"[\\\\\w]+"}\["[\\\\\w]+"\]~msi', static function ($match) {
            return stripcslashes($match[0]);
        }, $result);

        $result = preg_replace_callback('~\${"GLOBALS"}\["(\w+)"\]~msi', static function ($match) use ($vars) {
            $varName = '$' . $match[1];

            return $vars[$varName] ?? $varName;
        }, $result);

        preg_match('~(\$\w+)=create_function\(\'(\$\w+)\',\'\$\w+=substr\(\2,0,5\);\$\w+=substr\(\2,-5\);\$\w+=substr\(\2,7,strlen\(\2\)-14\);return\s*gzinflate\(base64_decode\(\$\w+\.\$\w+\.\$\w+\)\);\'\);~msi', $result, $decoderFunc);
        $result = str_replace($decoderFunc[0], '', $result);
        $decoderFunc = $decoderFunc[1];
        $result = Helpers::replaceCreateFunction($result);
        $result = preg_replace_callback('~(\$\w+)\s*\(\'([^\']+)\'\)~msi', function($m) use ($decoderFunc) {
            if ($m[1] !== $decoderFunc) {
                return $m[0];
            }
            return '\'' . Helpers::dictionarySampleDecode($m[2]) .'\'';
        }, $result);

        $result = Helpers::normalize($result);

        return $result;
    }

    private function deobfuscateEvalPostDictionary($str, $matches)
    {
        $finalCode = $matches[19];
        $result = str_replace($finalCode, '', $str);
        $arrayNum = [];
        $arrayStr = [];

        $regex = '~"?([\w\.\/\s]+)"?,?\s?~msi';
        preg_match_all($regex, $matches[6], $arrayStrMatches);
        foreach ($arrayStrMatches[1] as $arrayStrMatch) {
            $arrayStr[] = $arrayStrMatch;
        }

        $result = Helpers::replaceVarsFromDictionary($matches[5], $arrayStr, $result);
        $vars = Helpers::collectVars($result, "'");

        $regexSpecialVars = '~(\$\w+)([()\]])~msi';
        $code1 = preg_replace_callback($regexSpecialVars, static function ($match) use ($vars) {
            $res = $vars[$match[1]] ?? $match[1];
            if ($match[2] === ']' || $match[2] === ')') {
                $res = "'$res'";
            }
            return $res . $match[2];
        }, $matches[20]);

        $code2 = str_replace($matches[18], '$_POST[\'' . ($vars[$matches[18]] ?? $matches[18]) . '\']', $matches[21]);
        $code2 = Helpers::replaceVarsFromArray($vars, $code2);

        $tempStr = Helpers::replaceVarsFromDictionary($matches[5], $arrayStr, $matches[22]);
        $vars = Helpers::collectVars($tempStr, "'");

        $code3 = preg_replace_callback($regexSpecialVars, static function ($match) use ($vars) {
            $res = $vars[$match[1]] ?? $match[1];
            if ($match[2] === ']' || $match[2] === ')') {
                $res = "'$res'";
            }
            return $res . $match[2];
        }, $matches[23]);

        $result = $code1 . $code2 . $code3;

        return $result;
    }

    private function deobfuscateDropInclude($str, $matches)
    {
        $key = basename($matches[2]);
        $encrypted = base64_decode(base64_decode($matches[4]));
        return $this->deobfuscateXorFName($encrypted, null, $key);
    }

    private function deobfuscateEvalComments($str, $matches)
    {
        return preg_replace('~/\*[^/]*/?\*/~msi', '', $str);
    }

    private function deobfuscateStrrevUrldecodeEval($str, $matches)
    {
        return strrev(urldecode($matches[2]));
    }

    private function deobfuscateEvalPackStrrot($str, $matches)
    {
        return pack("H*", str_rot13($matches[3]));
    }

    private function deobfuscateUrlDecodeTable($str, $matches)
    {
        $matches[3] = str_replace([" ", "\r", "\n", "\t", '\'.\''], '', $matches[3]);
        $matches[5] = str_replace([" ", "'", ">"], '', $matches[5]);
        $temp = explode(',', $matches[5]);
        $array = [];
        foreach ($temp as $value) {
            $temp = explode("=", $value);
            $array[$temp[0]] = $temp[1];
        }
        $res = '';
        for ($i=0, $iMax = strlen($matches[3]); $i < $iMax; $i++) {
            $res .= isset($array[$matches[3][$i]]) ? $array[$matches[3][$i]] : $matches[3][$i];
        }
        $res = substr(rawurldecode($res), 1, -2);
        return $res;
    }

    private function deobfuscateEvalVarChar($str, $matches)
    {
        $chars = Helpers::collectVarsChars($matches[1]);
        $vars = Helpers::assembleStrings($chars, $matches[2]);
        $str = str_replace($matches[1], '', $str);
        $str = str_replace($matches[2], '', $str);
        foreach ($vars as $var => $func) {
            $str = str_replace($var, $func, $str);
        }
        return $str;
    }

    private function deobfuscateEvalVarFunc($str, $matches)
    {
        $var = Helpers::collectFuncVars($matches[1]);
        return $var[$matches[4]];
    }

    private function deobfuscateEvalVarsFuncs($str, $matches)
    {
        $vars = Helpers::collectVars($matches[1]);
        $vars[$matches[5]] = $matches[2];
        $res = Helpers::replaceVarsFromArray($vars, $matches[3]);
        return $res;
    }

    private function deobfuscateEvalFileContent($str, $matches)
    {
        $res = $matches[4];
        $vars = Helpers::getVarsFromDictionary($matches[2], $matches[3]);
        $vars[$matches[1]] = $matches[2];
        $res = Helpers::replaceVarsFromArray($vars, $res);
        if (preg_match('~\$[^=]{0,50}=file\(str_replace\(\'\\\\{2}\',\'/\',__FILE__\)\);(\$[^=]{0,50})=array_pop\(\$[^)]{0,50}\);(\$[^=]{0,50})=array_pop\(\$[^)]{0,50}\);\$[^=]{0,50}=implode\(\'\',\$[^)]{0,50}\)\.substr\(\$[^,]{0,50},0,strrpos\(\$[^,]{0,50},\'@ev\'\)\);\$[^=]{0,50}=md5\(\$[^)]{0,50}\);(?:\$[^=]{0,50}=){0,3}NULL;@eval\(base64_decode\(str_replace\(\$[^,]{0,50},\'\',strtr\(\'~msi',
            $res, $match)) {
            $arr = explode(PHP_EOL, $str);
            foreach ($arr as $index => $val) {
                if ($index !== count($arr) - 1) {
                    $arr[$index] .= PHP_EOL;
                }
            }

            $arr1 = array_pop($arr);
            $arr2 = array_pop($arr);

            $vars[$match[1]] = $arr1;
            $vars[$match[2]] = $arr2;

            $res = implode('', $arr) . substr($arr2, 0, strrpos($arr2, '@ev'));
            $md5 = md5($res);
            $res = base64_decode(str_replace($md5, '', strtr($matches[5], $matches[6], $matches[7])));


            if (preg_match('~eval\((?:\$[^(]{0,50}\(){2}\$[^,]{0,50},\s{0,10}\'([^\']{1,500})\',\s{0,10}\'([^\']{1,500})\'\){3};~msi',
                $res, $match)) {
                $res = Helpers::replaceVarsFromArray($vars, $res);
                if (preg_match('~eval\(base64_decode\(strtr\(~msi', $res)) {
                    $res = base64_decode(strtr($arr1, $match[1], $match[2]));
                    $res = '<?php ' . PHP_EOL . $res;
                }
            }
        }

        return $res;
    }

    private function deobfuscateEvalArrayVar($str, $matches)
    {
        $result = $str;

        $array1 = str_split($matches[3]);
        $array2 = [];
        $arrayStr = (isset($matches[2]) && $matches[2] !== '') ? base64_decode($matches[2]) : $matches[1];

        if (preg_match('~(\$\w+)=\[(["\'][\w\[\];\'"|,.{}+=/&][\'"]=>["\'][\w\[\];\'"|,.{}+=/&][\'"],?\s{0,50})+\];~msi',
            $arrayStr, $match)) {
            preg_match_all('~["\']([\w\[\];\'"|,.{}+=/&])[\'"]=>["\']([\w\[\];\'"|,.{}+=/&])[\'"]~msi', $match[0],
                $arrayMatches);

            foreach ($arrayMatches[1] as $index => $arrayMatch) {
                $array2[$arrayMatches[1][$index]] = $arrayMatches[2][$index];
            }

            $newStr = "";
            foreach ($array1 as $xx) {
                foreach ($array2 as $main => $val) {
                    if ($xx == (string)$val) {
                        $newStr .= $main;
                        break;
                    }
                }
            }

            $result = gzinflate(base64_decode($newStr));
        }

        return $result;
    }

    private function deobfuscateEvalConcatedVars($str, $matches)
    {
        $iter = [2 => $matches[2], 4 => $matches[4], 6 => $matches[6], 12 => $matches[12]];
        foreach ($iter as $index => $item) {
            $matches[$index] = preg_replace_callback('~chr\((\d+)\)~msi', static function ($match) use (&$matches) {
                return '\'' . chr($match[1]) . '\'';
            }, $matches[$index]);

            $matches[$index] = Helpers::concatStr($matches[$index]);
            $matches[$index] = base64_decode($matches[$index]);
        }

        $result = str_replace([$matches[1], $matches[8], $matches[10]], [$matches[2], 0, 0], $matches[7]);

        if (Helpers::convertToSafeFunc($matches[4])) {
            $code = @$matches[4]($matches[6]);
            $code = gzinflate(str_rot13($code));
        } else {
            $code = 'gzinflate(str_rot13(\'' . $matches[4] . '\')));';
        }

        $result .= $matches[12] . $code;

        return $result;
    }

    private function deobfuscateEchoEscapedStr($str, $matches)
    {
        $i = 1;
        $result = $matches[1];
        $result = str_replace('\\\\\\', '\\\\', $result);

        while ($i < 3) {
            if (!preg_match('~(\\\\x[0-9a-f]{2,3})~msi', $result)) {
                break;
            }

            $result = preg_replace_callback('~(\\\\x[0-9a-f]{2,3})~msi', static function ($m) {
                return stripcslashes($m[1]);
            }, $result);

            $i++;
        }

        $result = stripslashes($result);
        $vars = Helpers::collectVars($result);

        $result = preg_replace_callback('~(?<!{)\${[\'"]GLOBALS[\'"]}\[[\'"](\w+)[\'"]\]=[\'"](\w+)[\'"];~msi',
            function ($m) use (&$vars) {
                $vars['$' . $m[1]] = $m[2];

                return '';
            }, $result);

        $result = Helpers::replaceVarsFromArray($vars, $result);

        foreach ($vars as $name => $val) {
            $result = str_replace("$val=\"$val\";", '', $result);
        }

        return $result;
    }

    private function deobfuscateFilePutDecodedContents($str, $matches)
    {
        $res = $str;
        $content = base64_decode($matches[2]);
        $res = str_replace($matches[1], $content, $res);

        $res = preg_replace_callback('~chr\((\d+)\)~msi', static function ($match) use (&$matches) {
            return '\'' . chr($match[1]) . '\'';
        }, $res);

        $res    = Helpers::concatStringsInContent($res);
        $res    = Helpers::replaceBase64Decode($res, '\'');
        $vars   = Helpers::collectVars($res);
        $res    = Helpers::replaceVarsFromArray($vars, $res);
        $res    = Helpers::removeDuplicatedStrVars($res);

        return $res;
    }

    private function deobfuscatePregReplaceStr($str, $matches)
    {
        return stripcslashes($matches[1]);
    }

    private function deobfuscateEvalImplodedArrStr($str, $matches)
    {
        $split = str_split(stripcslashes($matches[2]));
        $map = array_map(static function($str) {
            return chr(ord($str) - 1);
        }, $split);
        return implode($map);
    }

    private function deobfuscatePregReplaceCodeContent($str, $matches)
    {
        $func = stripcslashes($matches[5]);

        $res = $matches[2];

        if (preg_match('~eval\(preg_replace\([\'"]/([^/])/[\'"],\s?[\'"](.*?)[\'"],\s?(\$\w+)\)\);~msi', $func,
            $match)) {
            if ($match[3] === $matches[1]) {
                $res = str_replace($match[1], stripcslashes($match[2]), $res);
            }
        }

        $vars = [];

        $res = preg_replace_callback('~(\$\w+)\s?=\s?([\'"])(.*?)\2;~msi', static function ($m) use (&$vars) {
            $value = $m[3];
            if ($m[2] === '"') {
                $value = stripcslashes($value);
            }

            $vars[$m[1]] = $value;

            return sprintf('%s=\'%s\';', $m[1], $value);
        }, $res);

        $arrayVar = [];
        $arrayVarName = '';

        if (preg_match('~(\$\w+)\s?=\s?array\((?:\'[^\']+\',?)+\);~msi', $res, $m)) {
            $arrayVarName = $m[1];

            preg_match_all('~\'([^\']+)\',?~msi', $m[0], $arrMatch, PREG_PATTERN_ORDER);
            if (isset($arrMatch[1])) {
                foreach ($arrMatch[1] as $arr) {
                    $arrayVar[] = $arr;
                }
            }
        }

        if (preg_match('~(\$\w+)\((\$\w+),\s?(\$\w+)\s?\.\s?\'\(((?:["\']\w+[\'"],?)+)\)[\'"]\s?\.\s?(\$\w+),\s?null\);~msi',
            $res, $match)) {
            $arrayVar2 = [];
            preg_match_all('~[\'"](\w+)[\'"],?~msi', $match[4], $arrMatch2, PREG_PATTERN_ORDER);
            if (isset($arrMatch2[1])) {
                foreach ($arrMatch2[1] as $arr) {
                    $arrayVar2[] = $arr;
                }
            }

            if (isset($vars[$match[5]])
                && (preg_match('~,\s?(\$\w+),\s?(\$\w+)\)\);~msi', $vars[$match[5]], $m)
                    && $m[1] === $arrayVarName
                    && isset($vars[$m[2]])
                )) {
                $res = str_replace($arrayVar2, $arrayVar, $vars[$m[2]]);
            }
        }

        return $res;
    }

    private function deobfuscateSistemitComEnc($str, $matches)
    {
        $matches[4] = base64_decode(base64_decode($matches[4]));
        $res = gzinflate(base64_decode($matches[2]));
        preg_match_all('~\$\w+\s*=\s*\[((\'[^\']+\',?)+)~msi', $matches[4], $replace, PREG_SET_ORDER);
        $find = explode("','", substr($replace[0][1], 1, -1));
        $replace = explode("','", substr($replace[1][1], 1, -1));
        $res = str_replace($find, $replace, $res);
        return $res;
    }

    private function deobfuscateConcatVarsReplaceEval($str, $matches)
    {
        $res = Helpers::concatVariableValues($matches[1]);
        $res = str_replace($matches[5], '', $res);
        $res = base64_decode($res);
        return $res;
    }

    private function deobfuscateEvalVarFunc2($str, $matches)
    {
        return $this->unwrapFuncs($matches[6]);
    }

    private function deobfuscateEvalArrays($str, $matches)
    {
        $res = str_replace('\'\'', '@@empty@@', $str);
        $vars = explode('", "', substr($matches[10], 1, -1));

        $res = preg_replace_callback('~(\$\w+)\[(\d+)\]\s*\.?\s*~msi', static function($m) use ($vars, $matches) {
            if ($m[1] !== $matches[9]) {
                return $m[0];
            }
            return "'" . $vars[(int)$m[2]] . "'";
        }, $res);
        $res = str_replace(['\'\'', '@@empty@@', $matches[8]], ['', '\'\'', ''], $res);
        preg_match_all('~(\$\w+)\s*=\s*\'([^\']+)\';~msi', $res, $m, PREG_SET_ORDER);
        $vars = [];
        foreach ($m as $var) {
            $vars[$var[1]] = '\'' . $var[2] . '\'';
            $res = str_replace($var[0], '', $res);
        }
        $res = Helpers::replaceVarsFromArray($vars, $res);
        return $res;
    }

    private function deobfuscatePregReplaceVar($str, $matches)
    {
        $result = stripcslashes($matches[2]);

        $regex = stripcslashes($matches[1]);
        if ($regex === '.*') {
            return $result;
        }

        $result = preg_replace_callback($regex, static function ($m) {
            return '';
        }, $result);

        return $result;
    }

    private function deobfuscateEvalBinHexVar($str, $matches)
    {
        $func1 = stripcslashes($matches[2]);
        $func2 = stripcslashes($matches[4]);
        $result = '';

        if (Helpers::convertToSafeFunc($func2) && Helpers::convertToSafeFunc($func1)) {
            $result = '?>' . @$func1(@$func2($matches[6]));
        } else {
            $result = sprintf("'?>'.%s(%s('%s');", $func1, $func2, $matches[6]);
        }

        return $result;
    }

    private function deobfuscateEvalFuncTwoArgs($str, $matches)
    {
        $arg1 = base64_decode($matches[5]);
        $arg2 = $matches[6];

        $result = "";
        for ($o = 0, $oMax = strlen($arg1); $o < $oMax;) {
            for ($u = 0, $uMax = strlen($arg2); $u < $uMax; $u++, $o++) {
                $result .= $arg1[$o] ^ $arg2[$u];
            }
        }

        return $result;
    }

    private function deobfuscateEvalVarReplace($str, $matches)
    {
        $res = $matches[3];
        $replaces = explode(';', $matches[4]);
        foreach ($replaces as $replace) {
            if (preg_match('~(\$\w+)=str_replace\(\'([^\']+)\',\s*\'(\w)\',\s*\1\);~msi', $replace, $m)) {
                $res = str_replace($m[2], $m[3], $res);
            }
        }
        $res = base64_decode($res);
        return $res;
    }

    private function deobfuscateEvalPregReplaceFuncs($str, $matches)
    {
        $func1Str = preg_replace('/' . $matches[3] . '/', "", $matches[2]);
        $func2Str = preg_replace('/' . $matches[6] . '/', "", $matches[5]);

        $strToDecode = '';
        preg_match_all('~[\'"]([^\'"]+)[\'"],?~msi', $matches[8], $strMatches, PREG_SET_ORDER);
        foreach ($strMatches as $index => $strMatch) {
            if ($index > 0) {
                $strToDecode .= PHP_EOL;
            }
            $strToDecode .= $strMatch[1];
        }

        $result = '';
        if (Helpers::convertToSafeFunc($func2Str)) {
            $result = @$func2Str($strToDecode);
        }

        if (preg_match('~eval\(\$\w+\);~msi', $func1Str) && Helpers::convertToSafeFunc($func2Str)) {
            $result = @$func2Str($strToDecode);
            $result = stripcslashes($result);
            $vars = Helpers::collectVars($result);
            if (preg_match('~\$\w+=\$\w+\([\'"]\([\'"],__FILE.*?(?:\$\w+\(){3}[\'"][^\'"]+[\'"]\)\)\)\);~msi', $result,
                $m)) {
                $result = $m[0];
            }
            $result = Helpers::replaceVarsFromArray($vars, $result);
            $result = preg_replace_callback('~gzinflate\(base64_decode\(str_rot13\(["\']([^\'"]+)[\'"]\)\)\)~msi',
                function ($m) {
                    return gzinflate(base64_decode(str_rot13($m[1])));
                }, $result);
        }

        return $result;
    }

    private function deobfuscateEvalVarSlashed($str, $matches)
    {
        $vars = Helpers::collectVars($matches[1]);
        $result = Helpers::replaceVarsFromArray($vars, $matches[2]);
        $result = $this->unwrapFuncs($result);

        return $result;
    }

    private function deobfuscateUrlMd5Passwd($str, $matches)
    {
        while(preg_match('~((?:(\$\w+)=\'[^;]+\';)+)~mis', $str, $matches2)) {
            $vars = Helpers::collectVars($matches2[1], "'");
            $str = Helpers::replaceVarsFromArray($vars, $str, true);
            $str = preg_replace_callback('~str_rot13\(urldecode\(\'([%\da-f]+)\'\)\)~mis', static function($m) {
                return "'" . str_rot13(urldecode($m[1])) . "'";
            }, $str);
            $str = str_replace($matches2[0], '', $str);
        }
        return $str;
    }

    private function deobfuscateBlackScorpShell($str, $matches)
    {
        $vars = Helpers::collectVars($matches[2], "'");
        $vars2 = Helpers::collectVars($matches[3], "'");
        array_walk($vars2, static function(&$var) {
            $var = "'$var'";
        });
        $str = gzinflate(base64_decode($vars2[$matches[5]]));
        $str = Helpers::replaceVarsFromArray($vars, $str, true);
        $str = Helpers::replaceVarsFromArray($vars2, $str);
        $str = str_ireplace('assert', 'eval', $str);
        return $str;
    }

    private function deobfuscateManyDictionaryVars($str, $matches)
    {
        $vars = Helpers::collectVars($matches[1], "'");
        $result = $matches[2];

        foreach ($vars as $dictName => $dictVal) {
            $result = preg_replace_callback(
                '~(\$\w+)[\[{][\'"]?(\d+)[\'"]?[\]}]~msi',
                static function ($m) use ($dictVal, $dictName) {
                    if ($m[1] !== $dictName) {
                        return $m[0];
                    }
                    return "'" . $dictVal[(int)$m[2]] . "'";
                },
                $result
            );
        }
        $result = Helpers::replaceVarsFromArray($vars, $result, true, true);
        $result = preg_replace_callback('~(\.?)\s?[\'"]([\w=\+/()\$,;:"\s?\[\]]+)[\'"]\s?~msi', static function ($m) {
            return $m[2];
        }, $result);

        return $result;
    }

    private function deobfuscateEvalBuffer($str, $matches)
    {
        $result = $matches[4];

        preg_match_all('~"([^"]+)"~msi', $matches[2], $arrMatches, PREG_SET_ORDER);

        $array = [];
        foreach ($arrMatches as $arrMatch) {
            $array[] = stripcslashes($arrMatch[1]);
        }

        $result = str_replace($array, '', $result);

        $result = gzinflate(base64_decode($result));

        return $result;
    }

    private function deobfuscateEvalArrayWalkFunc($str, $matches)
    {
        $result = stripcslashes($matches[1]) . '?>' . PHP_EOL;
        $encodedStr = '';

        preg_match_all('~(?:[\'"]([^\'"]{1,500})[\'"])~msi', $matches[2], $arrayMatches, PREG_SET_ORDER);

        foreach ($arrayMatches as $arrayMatch) {
            $encodedStr .= stripcslashes($arrayMatch[1]);
        }

        $result .= base64_decode(str_rot13($encodedStr));

        return $result;
    }

    private function deobfuscateEvalDictionaryVars($str, $matches)
    {
        $result = $str;
        $vars = Helpers::collectVars($matches[1]);
        $vars[$matches[2]] = $matches[3];

        $vars = Helpers::getVarsFromDictionaryDynamically($vars, $matches[1]);

        $func = $vars[$matches[5]] ?? null;
        if ($func && Helpers::convertToSafeFunc($func)) {
            $result = @$func($matches[6]);
        }

        $result = Helpers::replaceVarsFromArray($vars, $result);

        return $result;
    }

    private function deobfuscateEvalSubstrVal($str, $matches)
    {
        $result = strtr(
            substr($matches[2], (int)$matches[3] * (int)$matches[4]),
            substr($matches[2], (int)$matches[5], (int)$matches[6]),
            substr($matches[2], (int)$matches[7], (int)$matches[8])
        );

        return '?> ' . base64_decode($result);
    }

    private function deobfuscateEvalFuncXored($str, $matches)
    {
        $vars = Helpers::collectFuncVars($str);
        $result = Helpers::replaceVarsFromArray($vars, $str);

        if (preg_match('~\$\w+\s?=\s?gzinflate\(base64_decode\(.*?strlen.*?chr\(\(ord.*?\^~msi', $result)) {
            $encodedStr = gzinflate(base64_decode($matches[1]));
            $len = strlen($encodedStr);
            $result = '';
            for ($i = 0; $i < $len; $i++) {
                $result .= chr((ord($encodedStr[$i]) ^ (int)$matches[3]));
            }
        }

        return $result;
    }

    private function deobfuscateEvalFileContentOffset($str, $matches)
    {
        $result = $matches[1];

        $encodedStr = substr($str, (int)$matches[3]);
        $result = str_replace($matches[2], "'$encodedStr'", $result);

        return '<?php ' . $this->unwrapFuncs($result);
    }

    private function deobfuscateEvalFuncExplodedContent($str, $matches)
    {
        $decodedStr = trim(trim($matches[7], ";"), '"');
        $strMD5 = md5($matches[1]);

        $result = base64_decode(
            str_replace($strMD5, '', strtr($decodedStr . $matches[4], $matches[5], $matches[6]))
        );

        return $result;
    }

    private function deobfuscateEvalEncryptedVars($str, $matches)
    {

        $vars_str = preg_replace_callback('~(\d{1,10}\.\d{1,10})\s?\*\s?(\d{1,10})~msi', static function ($m) {
            $res = (double)($m[1]) * (int)$m[2];

            return "'$res'";
        }, $matches[1]);

        $vars_str = str_replace('"', "'", Helpers::normalize($vars_str));

        $vars = Helpers::collectVars($vars_str, "'");
        $vars_str = Helpers::replaceVarsFromArray($vars, $vars_str);
        $vars = Helpers::collectFuncVars($vars_str, $vars);
        $vars_str = Helpers::removeDuplicatedStrVars($vars_str);

        if ($a = preg_match('~(\$\w{1,50})=openssl_decrypt\(base64_decode\([\'"]([^\'"]+)[\'"]\),\'AES-256-CBC\',substr\(hash\(\'SHA256\',[\'"]([^\'"]+)[\'"],true\),0,32\),OPENSSL_RAW_DATA,([^\)]{0,50})\);~msi',
            $vars_str, $varMatch)) {
            $vars[$varMatch[1]] = openssl_decrypt(base64_decode($varMatch[2]), 'AES-256-CBC',
                substr(hash('SHA256', $varMatch[3], true), 0, 32), OPENSSL_RAW_DATA, $varMatch[4]);
        }

        $result = Helpers::replaceVarsFromArray($vars, str_replace(' ', '', $matches[7]));
        $result = str_replace($matches[4], str_replace($matches[5], '', "'$matches[6]'"), $result);

        return $this->unwrapFuncs($result);
    }

    private function deobfuscateEvalLoveHateFuncs($str, $matches)
    {
        $result = $matches[7];
        $result .= gzinflate(base64_decode($matches[4]));

        /* hate function */
        $finalPHPCode = null;
        $problems = explode(".", gzinflate(base64_decode($matches[2])));
        for ($mistake = 0, $mistakeMax = count($problems); $mistake < $mistakeMax; $mistake += strlen($matches[6])) {
            for ($hug = 0, $hugMax = strlen($matches[6]); $hug < $hugMax; $hug++) {
                $past = (int)$problems[$mistake + $hug];
                $present = (int)ord(substr($matches[6], $hug, 1));
                $sweet = $past - $present;
                $finalPHPCode .= chr($sweet);
            }
        }

        $finalPHPCode = gzinflate(base64_decode($finalPHPCode));

        $result .= PHP_EOL . $finalPHPCode;

        return $result;
    }

    private function deobfuscateXoredKey($str, $matches)
    {
        $encrypted = base64_decode($matches[4]);
        $key = $matches[7];
        $res = Helpers::xorWithKey($encrypted, $key);
        $res = base64_decode($res);
        return $res;
    }

    private function deobfuscateEvalGzB64($str, $matches)
    {
        $res = '';
        preg_match_all('~eval\(\$\w+\(\$\w+\(\'([^\']+)\'\)+;~msi', $str, $m, PREG_SET_ORDER);
        foreach ($m as $match) {
            $res .= gzuncompress(base64_decode($match[1])) . "\n";
        }
        return $res;
    }

    private function deobfuscateEvalArrayB64($str, $matches)
    {
        if (preg_match('~function\s*(_\d+)\((\$\w+)\)\s*{(\$\w+)=Array\(\'([^)]+)\'\);return\s*base64_decode\(\3\[\2\]\);~msi', $str, $found)) {
            $strlist = explode("','", $found[4]);
            $res = preg_replace_callback(
                '|(\w+)\((\d+)\)|smi',
                function ($m) use ($strlist, $found) {
                    if ($m[1] !== $found[1]) {
                        return $m[0];
                    }
                    return "'" . addcslashes(base64_decode($strlist[$m[2]]), '\\\'') . "'";
                },
                $str
            );
            $res = str_replace($matches[1], '', $res);
            return $res;
        }
    }

    private function deobfuscateManyBase64DecodeContent($str)
    {
        return Helpers::replaceBase64Decode($str, "'");
    }

    private function deobfuscateEvalEscapedCharsContent($str, $matches)
    {
        $res = $matches[2] . "'" . stripcslashes($matches[1]) . "')";

        return $this->unwrapFuncs($res);
    }

    private function deobfuscateEvalFuncBinary($str, $matches)
    {
        $binaryVals = hex2bin($matches[2]);
        $res = Helpers::decodeEvalFuncBinary($binaryVals);

        return $res;
    }

    private function deobfuscateEvalPackFuncs($str, $matches)
    {
        return stripcslashes($matches[3]) . $matches[4];
    }

    private function deobfuscateParseStrFunc($str, $matches)
    {
        parse_str(Helpers::concatStr($matches[1]), $vars);
        $funcs = ($matches[5] && $matches[5] !== '') ? $matches[5] : $matches[3];
        $res = Helpers::replaceVarsByArrayName($matches[2], $vars, $funcs);
        $res = $this->unwrapFuncs($res . $matches[6] . ')');

        return $res;
    }

    private function deobfuscateEvalGzinflate($str, $match)
    {
        $res = stripcslashes($match[2]);
        $res = str_replace('"."', '', $res);
        return 'eval(' . $res . ');';
    }

    private function deobfuscateFuncVars($str, $matches)
    {
        $key = $matches[3];
        $res = $matches[7];
        $vars = [$matches[4] => preg_replace($matches[5], "", $matches[6])];

        preg_match_all('~(\$\w{1,50})\s?=\s?(?:(\$\w{1,50})\(\)\s?\.\s?)?\w{1,50}\(\\' . $matches[4] .'\(("[^"]+")\)\);~msi',
            $str, $match, PREG_SET_ORDER);
        foreach ($match as $matchVar) {
            $value = Helpers::decodeFuncVars($key,$this->unwrapFuncs($vars[$matches[4]] . '(' . $matchVar[3] . ')'));
            if ($matchVar[2] !== '') {
                $func = $vars[$matchVar[2]] ?? $matchVar[2];
                $value = $func . '() . \'' . $value . '\'';
            }
            $vars[$matchVar[1]] = $value;
        }

        foreach ($vars as $name => $val) {
            $res = str_replace($name, $val, $res);
        }
        return $res;
    }

    private function deobfuscateDictVars($str, $match)
    {
        $res = Helpers::replaceVarsFromDictionary($match[1], $match[2], $match[3]);
        $res = gzinflate(base64_decode(substr($res, 2, -3)));
        return $res;
    }

    private function deobfuscateGotoStrRot13Vars($str, $matches)
    {
        if (isset($matches[2])) {
            $vars = Helpers::collectVars($str);

            preg_match_all('~(\$\w{1,50})\s?=\s?str_rot13\(\1\);~msi', $str, $match, PREG_SET_ORDER);
            foreach ($match as $m) {
                if (isset($vars[$m[1]])) {
                    $vars[$m[1]] = str_rot13($vars[$m[1]]);
                }
            }

            preg_match_all('~(\$\w{1,50})~msi', $matches[2], $match, PREG_SET_ORDER);
            $strToDecode = '';
            foreach ($match as $var) {
                if (isset($vars[$var[1]])) {
                    $strToDecode .= $vars[$var[1]];
                }
            }

            return base64_decode($strToDecode);
        }

        return $str;
    }

    private function deobfuscateDecodedDoubleStrSet($str, $matches)
    {
        $strToDecode1 = '';
        $strToDecode2 = '';

        preg_match_all('~"([^"]+)"~msi', $matches[1], $match, PREG_SET_ORDER);
        foreach ($match as $m) {
            $strToDecode2 .= $m[1];
        }
        preg_match_all('~\'([^\']+)\'~msi', $matches[2], $match, PREG_SET_ORDER);
        foreach ($match as $m) {
            $strToDecode1 .= $m[1];
        }

        return base64_decode($strToDecode1) . PHP_EOL . base64_decode($strToDecode2);
    }

    private function deobfuscateCreateFuncStrrev($str, $matches)
    {
        $res = preg_replace_callback('~strrev\("([^"]+)"\)~msi', static function ($m) {
            return '"' . strrev($m[1]) . '"';
        }, $matches[3]);

        $res = Helpers::concatStringsInContent($res);
        $vars = Helpers::collectVars($res);
        $res = Helpers::replaceVarsFromArray($vars, $res);
        $res = Helpers::removeDuplicatedStrVars($res);

        if (preg_match('~\$\w+=base64_decode\([\'"][^\'"]+[\'"]\);\$\w+=create_function\(\'\$\w+\',\$\w+\);\$\w+\(\$\w+\);~msi',
            $res)) {
            $funcs = base64_decode($matches[5]);
            $res = str_replace($matches[1], '\'' . $matches[2] . '\'', $funcs);
        }

        return $res;
    }

    private function deobfuscateStrrevBase64($str, $matches)
    {
        return strrev($matches[2]);
    }

    private function deobfuscateCustomDecode($str, $matches)
    {
        return str_rot13($matches[2] . $matches[6]);
    }

    private function deobfuscateExpDoorCode($str, $matches)
    {
        $str = str_replace(
                [
                    $matches[1],
                    $matches[3]
                ],
                [
                    str_replace(['"."', '\'.\''], '', $matches[1]),
                    "'" . addcslashes(base64_decode($matches[4]), "'") . "'"
                ],
                $str
        );
        return $str;
    }

    private function deobfuscateAgustus1945($str, $matches)
    {
        return str_replace($matches[1], $matches[4] . '"' . $matches[7] . '"' . $matches[5], $str);
    }

    private function deobfuscateIncludeB64($str, $matches)
    {
        return str_replace($matches[1], "'" . base64_decode($matches[2]) . "'", $str);
    }

    private function deobfuscateDecodeFileContent($str, $matches)
    {
        return gzuncompress(base64_decode($matches[3]));
    }

    private function deobfuscateBase64decodedFuncContents($str, $matches)
    {
        $vars   = Helpers::collectVars($matches[2]);
        $res    = str_replace($matches[2], '', $str);
        $res    = Helpers::replaceVarsFromArray($vars, $res);

        return Helpers::replaceBase64Decode($res, '\'');
    }

    private function deobfuscateEvalVarWithComment($str, $matches)
    {
        $res = str_replace($matches[3], '', $matches[2]);
        $vars = Helpers::collectVars($matches[1]);
        $res = Helpers::replaceVarsFromArray($vars, $res);

        return '?> ' . $this->unwrapFuncs($res);
    }

    private function deobfuscateEvalPackPreg($str, $matches)
    {
        $varsStr = Helpers::replaceVarsFromDictionary($matches[1], $matches[2], $matches[3]);
        $vars = Helpers::collectVars($varsStr, "'");
        if (isset($vars[$matches[6]]) && Helpers::convertToSafeFunc($vars[$matches[6]])) {
            $strToDecode = @$vars[$matches[6]]($matches[2]);
            $strToDecode = preg_replace('~[' . $matches[5] . ']~i', '', $strToDecode);
            $strToDecode = pack('H*', $strToDecode);

            return $strToDecode;
        }

        return $str;
    }

    private function deobfuscateNib2xeh($str, $matches)
    {
        $matches[3] = str_replace("'", '', $matches[3]);
        $matches[5] = str_replace("'", '', $matches[5]);
        $matches[7] = str_replace("'", '', $matches[7]);
        $replace_from = explode(',', $matches[5]);
        $replace_from[] = ',';
        $replace_to = explode(',', $matches[7]);
        $replace_to[] = '';
        $hex = str_replace($replace_from, $replace_to, $matches[3]);
        return hex2bin($hex);
    }

    private function deobfuscateFun256($str, $matches)
    {
        $need_encode_twice  = !isset($matches[4]);
        $replace            = $need_encode_twice ? $str : $matches[1];
        $code               = $need_encode_twice ? $matches[3] : $matches[4];

        $chr = '';
        for ($i = 0; $i < 120; $i++) {
            $chr .= chr($i);
        }
        $encoded = gzinflate(gzinflate(base64_decode($code)));
        if ($need_encode_twice) {
            $encoded = gzinflate(gzinflate(base64_decode($encoded)));
        }
        $encoded_len = strlen ($encoded);
        $hash = sha1(hash('sha256', md5($chr)));
        $hash_len = strlen($hash);
        $result = '';
        for ($i = 0; $i < $encoded_len; $i += 2) {
            $char = hexdec(base_convert(strrev(substr($encoded, $i, 2)), 36, 16));
            if ($j === $hash_len) {
                $j = 0;
            }
            $delta = ord($hash[$j]);
            $j++;
            $result .= chr ($char - $delta);
        }
        $result = str_replace($replace, $result, $str);
        return $result;
    }

    private function deobfuscateCreateFuncObf($str, $matches)
    {
        $str = Helpers::replaceBase64Decode($matches[7], '\'');
        $str = preg_replace_callback('~str_rot13\(\'([^\']+)\'\)~msi', static function($m) {
            return '\'' . str_rot13($m[1]) . '\'';
        }, $str);
        $str = preg_replace_callback('~chr\(([^\)]+)\)~msi', static function($m) {
            return '\'' . Helpers::calc($m[0]) . '\'';
        }, $str);
        $str = str_replace('\'.\'', '', $str);
        return base64_decode(substr($str,1, -1));
    }

    private function deobfuscateEvalFileContentBySize($str, $matches)
    {
        $res = $str;
        $mainContent = str_replace(["\r", "\n"], '', $str);
        $mainContentLen = strlen($mainContent);
        $main_key = $matches[2] . $mainContentLen;

        $str_to_code = base64_decode($matches[3]);
        $code = Helpers::decodeEvalFileContentBySize($str_to_code, $main_key);

        if (preg_match('~\$\w+=strpos\(\$\w+,((?:chr\(\d+\)\.?)+)\);\$\w+=substr\(\$\w+,0,\$\w+\);eval\(\w+\(\w+\("([^"]+)"\),\$\w+\)\);function\s\w+\(\$\w+\){.*?strpos\(\$\w+,\1\);.*?substr\(\$\w+,\$\w+\+(\d)\)\);~msi',
            $code, $match)) {
            preg_match_all('~chr\((\d+\))~msi', $match[1], $chrMatches, PREG_SET_ORDER);

            $find = '';
            foreach ($chrMatches as $chrMatch) {
                $find .= chr((int)$chrMatch[1]);
            }
            $pos = strpos($mainContent, $find);
            $content = substr($mainContent, 0, $pos);

            $code = Helpers::decodeEvalFileContentBySize(base64_decode($match[2]), $main_key);
            if (preg_match('~\$\w+=md5\(\$\w+\)\.\$\w+;~msi', $code)) {
                $key = md5($content) . $mainContentLen;
                $content = base64_decode(substr($mainContent, $pos + (int)$match[3]));
                $res = Helpers::decodeEvalFileContentBySize($content, $key);
            }
        }

        return '<?php ' . $res;
    }

    private function deobfuscateBase64Array($str, $matches)
    {
        $var_name   = $matches[1];
        $el0        = base64_decode($matches[2]);
        $el1        = Helpers::replaceBase64Decode($matches[3], '\'');
        $code       = $matches[4];

        $code = str_replace($var_name . '[0]', '\'' . $el0 . '\'', $code);
        $code = str_replace($var_name . '[1]', $el1, $code);
        $code = Helpers::replaceBase64Decode($code, '\'');

        return $code;
    }

    private function deobfuscateSimpleVarsAndEval($str, $matches)
    {
        $vars_content = $matches[1];
        $eval_content = $matches[2];

        $vars = Helpers::collectVars($vars_content);
        $code = Helpers::replaceVarsFromArray($vars, $eval_content);

        return $this->unwrapFuncs($code);
    }

    private function deobfuscateReplaceFuncWithBase64DecodeArray($str, $matches)
    {
        $nel_function_content   = $matches[3];
        $other_content          = $matches[1] . $matches[4];
        $array_elements         = str_replace('\'.\'', '', $nel_function_content);

        $elements = array_map('base64_decode', explode(',', $array_elements));

        $result = preg_replace_callback('~nel\s*\(\s*(\d+)\s*\)~mis', function($match) use ($elements) {
                $index = $match[1];
                $value = isset($elements[$index]) ? $elements[$index] : null;
                if (!is_null($value)) {
                    if ($value === "\r") {
                        return '"\\r"';
                    }
                    return "'" . addcslashes($value, "'\\") . "'";
                }
                return $match[0];
            }, $other_content
        );

        return Helpers::replaceMinMaxRound($result);
    }

    private function deobfuscateCreateFuncVars($str, $matches)
    {
        $res = Helpers::concatStringsInContent($matches[1]);
        $vars = Helpers::collectVars($res);
        $res = Helpers::replaceVarsFromArray($vars, $matches[2]);

        return $this->unwrapFuncs($res);
    }

    private function deobfuscateJsonDecodedVar($str, $matches)
    {
        $decodedStr = Helpers::replaceBase64Decode($matches[1], 'QUOTE');
        $decodedStr = str_replace("'", "\'", $decodedStr);
        $decodedStr = str_replace("QUOTE", "'", $decodedStr);

        $res = str_replace($matches[1], $decodedStr, $str);

        return $res;
    }

    private function deobfuscateFilePutPureEncodedContents($str, $matches)
    {
        return $this->deobfuscateJsonDecodedVar($str, $matches);
    }

    private function deobfuscateEvalFuncReverse($str, $matches)
    {
        $decodedContent = $matches[5];
        $decodedContent = preg_replace_callback('~eval\((\w+\(\'([^\']+)\'\))\);~msi', function ($m) {
            $strLen = strlen($m[2]);
            $res = '';

            for ($i = 0; $i <= $strLen - 1; $i++) {
                $res .= $m[2][$strLen - $i - 1];
            }

            return str_replace($m[1], $res, $m[0]);
        }, $decodedContent);

        return str_replace($matches[5], $decodedContent, $str);
    }

    private function deobfuscateBase64decodeFuncs($str, $matches)
    {
        $res = $str;
        $res = preg_replace_callback('~\w+\("([^"]+)"\)~msi', function ($m) {
            return "'" . base64_decode($m[1]) . "'";
        }, $res);

        return $res;
    }

    private function deobfuscateEvalCreateFuncWithDictionaryVar($str, $matches)
    {
        $res = Helpers::replaceVarsFromDictionary($matches[1], $matches[2], $str);
        $vars = Helpers::collectVars($res, "'");
        $func = stripcslashes($matches[5]);

        return sprintf('eval(%s(%s(\'%s\'))));', $vars[$matches[3]] ?? $matches[3], $func, $matches[6]);
    }

    private function deobfuscateEvalCreateFuncWithVars($str, $matches)
    {
        $res = Helpers::concatStringsInContent($str);
        $vars = Helpers::collectVars($res, false);
        $res = Helpers::replaceVarsFromArray($vars, $matches[4]);
        $res = Helpers::concatStringsInContent($res);
        $res = preg_replace_callback('~\w+\(((?:[\'"][^\'"]*[\'"],?)+)\)~msi', function ($m) {
            return str_replace(',', '.', $m[1]);
        }, $res);
        $res = Helpers::concatStringsInContent($res);

        return trim($res, "'");
    }

    private function deobfuscateExplodeSubstrGzinflate($str, $matches)
    {
        $obfuscated = explode($matches[3], gzinflate(substr(stripcslashes($matches[4]), hexdec($matches[5]), (int)$matches[6])));
        $str = str_replace($matches[1], '', $str);
        $str = preg_replace_callback('~\$(?:_GET|GLOBALS)[\{\[][^}]+[\}\]][\{\[]([0-9a-fx]+)[\}\]]\]?(\()?~msi', function($m) use ($obfuscated) {
            $index = hexdec($m[1]);
            $func = (isset($m[2]) && $m[2] !== '');
            if ($func) {
                return $obfuscated[$index] . '(';
            } else {
                return '\'' . $obfuscated[$index] . '\'';
            }
        }, $str);
        $str = preg_replace('~define\(\'([^\']+)\',\s*\'[^\']+\'\);\$(?:_GET|GLOBALS)\[\1\]\s*=\s*explode\(\'([^\']+)\',\s*gzinflate\(substr\(\'(.*)\',([0-9a-fx]+),\s*([0-9\-]+)\)\)\);~msi', '', $str);
        $str = Helpers::normalize($str);
        return $str;
    }

    private function deobfuscateBase64Vars($str, $matches)
    {
        $vars = Helpers::collectVars($matches[2], '\'');
        $code = Helpers::replaceVarsFromArray($vars, $matches[5], false, true);
        $code = Helpers::collectStr($code, '\'');
        $code = base64_decode($code);
        $code = str_replace($matches[1], $code, $str);
        return $code;
    }

    private function deobfuscateChr0b($str, $matches)
    {
        $str = preg_replace_callback('~chr\(((0b|0x)?[0-9a-f]+)\)~msi', function($m) {
            if (isset($m[2]) && $m[2] === '0b') {
                return '\'' . chr(bindec($m[1])) . '\'';
            }
            if (isset($m[2]) && $m[2] === '0x') {
                return '\'' . chr(hexdec($m[1])) . '\'';
            }
            return '\'' . chr($m[1]) . '\'';
        }, $str);

        $str = preg_replace_callback('~\(\'(.)\'\^\'(.)\'\)~msi', function($m) {
            return '\'' . ($m[1] ^ $m[2]) . '\'';
        }, $str);

        $str = str_replace('\'.\'', '', $str);
        $str = preg_replace('~\$\{\'([^\']+)\'\}~msi', '\$\1', $str);
        $str = preg_replace_callback('~(\$\w+)\s*=\s*\'str_rot13\';\s*\1\s*=\s*\1\s*\(\'([^\']+)\'\);~msi', function ($m) {
            return $m[1] . ' = ' . '\'' . str_rot13($m[2]) . '\';';
        }, $str);
        return $str;
    }

    private function deobfuscateCreateFuncPlugin($str, $matches)
    {
        return gzinflate(base64_decode($matches[3]));
    }

    private function deobfuscateStrreplaceEval($str, $matches)
    {
        $vars = Helpers::collectFuncVars($matches[1]);
        return Helpers::replaceVarsFromArray($vars, $matches[2]);
    }

    private function deobfuscateHackM19($str, $matches)
    {
        return gzinflate(base64_decode($matches[6]));
    }

    private function deobfuscateEv404($str, $matches)
    {
        return bzdecompress(base64_decode($matches[4]));
    }

    private function deobfuscateSetVars($str, $matches)
    {
        return str_replace($matches[1], gzinflate(base64_decode($matches[5])), $str);
    }

    private function deobfuscateCreateFuncGzB64($str, $matches)
    {
        return gzuncompress(base64_decode($matches[3]));
    }

    private function deobfuscateCreateFuncGzInflateB64($str, $matches)
    {
        return gzinflate(base64_decode($matches[3]));
    }

    private function deobfuscateWsoShellDictVars($str, $matches)
    {
        $vars[$matches[1]] = stripcslashes($matches[2]);
        $res               = Helpers::replaceVarsFromArray($vars, $matches[3]);
        $vars              = Helpers::collectFuncVars($res, $vars, false);
        $res               = Helpers::replaceVarsFromArray($vars, $matches[5]);
        $finalCode         = $this->unwrapFuncs($res);

        $dictVar = Helpers::replaceVarsFromDictionary($matches[4], $vars[$matches[4]] ?? '', $matches[6]);
        $vars    = Helpers::collectVars($dictVar, "'", $vars);
        if (isset($vars[$matches[9]]) && $vars[$matches[9]] === 'rotencode') {
            $vars[$matches[8]] = Helpers::rotencode(base64_decode($matches[10]), -1);
            $dictVar = Helpers::replaceVarsFromDictionary($matches[8], $vars[$matches[8]] ?? '', $matches[11]);
            $dictVar = Helpers::replaceVarsFromDictionary($matches[4], $vars[$matches[4]] ?? '', $dictVar);
            $vars    = Helpers::collectVars($dictVar, "'", $vars);

            $res = $this->unwrapFuncs(Helpers::replaceVarsFromArray($vars, $matches[12]));

            $count = 10;
            while ($count > 0 && preg_match('~@?eval\(\$\w+\(\$\w+\(["\'][^\'"]+[\'"]\)\)\);~msi', $res, $match)) {
                $res = $this->unwrapFuncs(Helpers::replaceVarsFromArray($vars, $res));
                $count--;
            }

            return $res;
        }

        return $str;
    }

    private function deobfuscateFuncDictVars($str, $matches)
    {
        $vars[$matches[1]] = stripcslashes($matches[2]);

        $vars[$matches[3]] = explode($matches[4], $matches[5]);
        foreach ($vars[$matches[3]] as $i => $k) {
            $temp          = preg_split("//", $k, -1, PREG_SPLIT_NO_EMPTY);
            $vars[$matches[3]][$i] = implode("", array_reverse($temp));
        }

        $iterVar = explode($matches[7], $matches[8]);
        foreach ($iterVar as $i => $k) {
            $vars[$k] = $vars[$matches[3]][$i];
        }

        $vars[$matches[1]] = Helpers::decodefuncDictVars($vars[$matches[1]], -2);
        $dictVar = Helpers::replaceVarsFromDictionary($matches[1], $vars[$matches[1]] ?? '', $matches[15]);
        $vars    = Helpers::collectVars($dictVar, "'", $vars);

        $dictVar = Helpers::getVarsFromDictionaryDynamically($vars, $matches[20]);
        $vars    = Helpers::collectVars($dictVar, "'", $vars);

        $res = Helpers::decodefuncDictVars($matches[23], 1);
        if (isset($vars[$matches[22]]) && Helpers::convertToSafeFunc($vars[$matches[22]])) {
            $res = @$vars[$matches[22]]($res);
            $res = Helpers::replaceVarsFromArray($vars, $res);
        }

        if (preg_match('~\$\w+="([^"]+)";@eval\(\'\?>\'\.gzuncompress\(base64_decode\(strtr\(substr\(\$\w+,(\d+[+\-*/]\d+)\),substr\(\$\w+,(\d+),(\d+)\),\s?substr\(\$\w+,(\d+),(\d+)\)\)\)\)\);~msi',
                       $res, $match)) {
            $res = '?> ' . gzuncompress(base64_decode(
                strtr(
                    substr($match[1], (int)Helpers::calculateMathStr($match[2])),
                    substr($match[1], (int)$match[3], (int)$match[4]),
                    substr($match[1], (int)$match[5], (int)$match[6])))
                );
        }

        return $res;
    }

    private function deobfuscateSec7or($str, $matches)
    {
        $res = $this->unwrapFuncs($matches[3] . $matches[6] . $matches[4] . ';');
        for($i=0, $iMax = strlen($res); $i < $iMax; $i++) {
            $res[$i] = chr(ord($res[$i]) - (int)$matches[5]);
        }
        return $res;
    }

    private function deobfuscateLinesCond($str, $matches)
    {
        $vars_str = $this->unwrapFuncs($matches[1]);
        preg_match_all('~((?:\$\w+=)+)__LINE__==\s*(?:\d+[-+]?)+\s*\?\s*base64_decode\("([^"]+)"\)~msi', $vars_str, $m, PREG_SET_ORDER);
        $vars = [];
        foreach ($m as $var) {
            $func = base64_decode($var[2]);
            $tmp = explode('=', $var[1]);
            array_pop($tmp);
            $vars[] = array_combine(array_values($tmp), array_fill(0, count($tmp), $func));
        }
        $vars = array_merge(...$vars);
        $res = preg_replace_callback('~eval\(\$\w+\(\$\w+\("[^"]+"\)\)\);~msi', function ($m) use ($vars) {
            while (preg_match('~eval\(\$\w+\(\$\w+\("[^"]+"\)\)\);~msi', $m[0])) {
                $m[0] = $this->unwrapFuncs(Helpers::replaceVarsFromArray($vars, $m[0]));
            }
            return $m[0];
        }, $matches[3]);
        $tmp = [];
        $vars = Helpers::collectVars($res, '"', $tmp, true);
        $res = Helpers::replaceVarsFromArray($vars, $res, false, true);
        $vars = Helpers::collectVars($res, '\'', $tmp, true);
        $res = Helpers::replaceVarsFromArray($vars, $res, false, true);
        return $res;
    }

    private function deobfuscateClassWithArrays($str, $matches)
    {
        preg_match_all('~"[^"]+"=>"([^"]+)"~msi', $matches[2], $m);
        $data = implode('', array_reverse($m[1]));
        $data = gzuncompress(base64_decode($data));

        $numberSubstr = 14;
        if (preg_match('~,\((\d+/\d+)\)\);return~msi', $str, $calcMatch)) {
            $numberSubstr = (int)Helpers::calculateMathStr($calcMatch[1]);

        }
        for ($i = 0, $iMax = strlen($data); $i < $iMax; $i++) {
            if(isset($data[$i])) {
                $param3 = ord($data[$i]);
                $data[$i] = chr($param3 - $numberSubstr);
            }
        }
        $res = gzuncompress(base64_decode(strrev(gzinflate($data))));
        return $res;
    }

    private function deobfuscateGotoBase64Decode($str)
    {
        $res = $str;
        $hop = 5;

        while ($hop > 0 && preg_match(Helpers::REGEXP_BASE64_DECODE, $res)) {
            $res = preg_replace_callback(Helpers::REGEXP_BASE64_DECODE, function ($match) {
                $code = base64_decode(stripcslashes($match[1]));
                return '"' . Helpers::unwrapGoto($code) . '"';
            }, $res);

            $hop--;
        }

        return $res;
    }

    private function deobfuscateGotoB64Xor($str, $matches)
    {
        return Helpers::unwrapGoto($str);
    }

    private function deobfuscateAssertStrrev($str, $matches)
    {
        return str_replace($matches[1], strrev($matches[4]), $str);
    }

    private function deobfuscateB64strtr($str, $matches)
    {
        $code = $matches[4];
        $delta = (int)$matches[1];
        $code = str_split($code);
        foreach ($code as &$c) {
            $c = chr(ord($c) + $delta);
        }
        $code = implode('', $code);
        $code = strtr($code, $matches[2], $matches[3]);
        $code = base64_decode($code);
        preg_match('~(\$\w+)="([^"]+)";@eval\(\'\?>\'\.gzuncompress\((?:\$\w+\()+\$\w+,(\$\w+)\*2\),(\$\w+)\(\1,\3,\3\),\s*\4\(\1,0,\3\)+;~mis', $code, $m);
        $code = gzuncompress(base64_decode(strtr(substr($m[2],52*2),substr($m[2],52,52), substr($m[2],0,52))));
        $res = Helpers::unwrapGoto($code);
        return $res;
    }

    private function deobfuscateGzB64strReplaceDataImage($str, $matches)
    {
        $strToDecode = str_replace([$matches[2], $matches[3]], [$matches[4], $matches[5]], $matches[7]);

        $res = gzinflate(base64_decode($strToDecode));

        return $res;
    }

    private function deobfuscateSerializeFileContent($str, $matches)
    {
        return base64_decode(strrev(str_rot13($matches[2])));
    }

    private function deobfuscateGlobalVarsManyReplace($str, $matches)
    {
        $vars = Helpers::collectVars($matches[1]);

        foreach ($vars as &$var) {
            $var = base64_decode(strrev(str_rot13($var)));
        }

        $res = Helpers::replaceVarsFromArray($vars, $matches[2], true, true);

        return $res;
    }

    private function deobfuscateConcatVarsPregReplace($str, $matches)
    {
        $vars = [];

        $vars = Helpers::collectConcatedVars($str, '"', $vars);
        $res = Helpers::replaceVarsFromArray($vars, $matches[3], true, true);
        $res = $this->unwrapFuncs($res);

        return $res;
    }

    private function deobfuscateFilePutContentsB64Decoded($str, $matches)
    {
        $res = $str;
        $vars = [];

        $vars = Helpers::collectConcatedVars($res, '"', $vars, true);

        $res = Helpers::replaceVarsFromArray($vars, $res, true, true);
        $res = Helpers::replaceBase64Decode($res, '"');

        return $res;
    }

    private function deobfuscateFwriteB64DecodedStr($str, $matches)
    {
        $res = $str;
        $vars = [];

        $vars = Helpers::collectFuncVars($res, $vars, false, true);
        $res = Helpers::replaceVarsFromArray($vars, $res, true, true);

        return $res;
    }

    private function deobfuscateFilePutContentsB64Content($str, $matches)
    {
        $res = Helpers::replaceBase64Decode($str, "'");

        return $res;
    }

    private function deobfuscateChrDictCreateFunc($str, $matches)
    {
        $vars = [];

        preg_match_all('~chr\((\d+)\)~msi', $matches[3], $chrs, PREG_SET_ORDER);

        $dictVar = '';
        foreach ($chrs as $chr) {
            $dictVar .= chr((int)$chr[1]);
        }

        $res = Helpers::replaceVarsFromDictionary($matches[2], $dictVar, $matches[6]);
        $res = str_replace('\\\'', "'", $res);
        $res = Helpers::replaceBase64Decode($res, "'");
        $res = substr($res, 1);
        $res = substr($res, 0, -1);

        return $res;
    }

    private function deobfuscateStrReplaceFuncsEvalVar($str, $matches)
    {
        $func = str_replace($matches[3], '', $matches[2]);

        if ($func === 'base64_decode') {
            return base64_decode($matches[4]);
        }

        return $str;
    }

    private function deobfuscateB64SlashedStr($str, $matches)
    {
        return stripcslashes(base64_decode(stripcslashes($matches[1])));
    }

    private function deobfuscateB64ArrayStrEval($str, $matches)
    {
        return base64_decode($matches[4]);
    }

    private function deobfuscateDictVarsPregReplaceB64($str, $matches)
    {
        $res = Helpers::replaceVarsFromDictionary($matches[1], $matches[2], $str);

        if (strpos($res, 'preg_replace') &&
            strpos($res, 'eval') &&
            strpos($res, 'base64_decode')) {
            return base64_decode($matches[3]);
        }

        return $res;
    }

    private function deobfuscateEvalVarB64($str, $matches)
    {
        return gzinflate(base64_decode($matches[3]));
    }

    private function deobfuscateDecodeAChar($str, $matches)
    {
        $res = str_replace($matches[1], '', $str);
        while (strpos($res, 'eval(' . $matches[2] . '(\'') !== false) {
            $res = preg_replace_callback('~eval\(\w+\(\'([^\']+)\'\)\);~msi', function ($m) {
                return Helpers::decodeACharCustom($m[1]);
            }, $res);
        }
        $vars = Helpers::collectVars($res, '\'');
        foreach ($vars as $var => $value) {
            if (strpos($res, $matches[2] . '(' . $var . ')') !== false) {
                $res = str_replace($var . '=\'' . $value . '\';', '', $res);
                $res = str_replace($matches[2] . '(' . $var . ')', '\'' . addcslashes(Helpers::decodeACharCustom($value), '\'') . '\'', $res);
            }
        }
        return $res;
    }

    private function deobfuscateStrReplaceCreateFunc($str, $matches)
    {
        $res = $matches[7];
        $funcs = str_replace($matches[3], 'str_replace', $matches[4]);
        $vars = Helpers::collectFuncVars($funcs, $vars, false);
        $vars[$matches[1]] = '\'' . $matches[2] . '\'';
        foreach ($vars as $var => $value) {
            $res = str_replace($var, $value, $res);
        }
        return 'eval(' . $res . ');';
    }

    private function deobfuscateEvalbin2hex($str, $matches)
    {
        $res = hex2bin($matches[5]) . $matches[6];
        $res = $this->unwrapFuncs($res);
        if (preg_match('~define\(\'([^\']+)\', \'[^\']+\'\);\$GLOBALS\[\1\]\s*=\s*explode\(\'([^\']+)\',\s*gzinflate\(substr\(\'((?:[^\']*\\\\\')+[^\']+)\',([0-9a-fx]+),\s*([\-0-9a-f]+)\)~msi', $res, $m)) {
            $m[3] = stripcslashes($m[3]);
            $strings = explode($m[2], gzinflate(substr($m[3], hexdec($m[4]), (int)$m[5])));
            $res = str_replace($m[0], '', $res);
            $res = preg_replace_callback('~\$GLOBALS[\{\[].[\}\]][\[\{]([0-9a-fx]+)[\]\}]~msi', function($m) use ($strings) {
                return '\'' . $strings[hexdec($m[1])] . '\'';
            }, $res);
        }

        if (substr_count($res, 'goto ') > 50) {
            $res = Helpers::unwrapGoto($res);
        }
        return $res;
    }

    private function deobfuscateManyFuncsWithCode($str, $matches)
    {
        $funcs = [$matches[1] => 'decode'];

        preg_match_all('~function\s(\w{1,50})\((?:\$\w{1,50},?\s?)+\)\s?{\s?return\s\$\w{1,50};\s?}~msi', $res,
                       $funcMatches, PREG_SET_ORDER);

        foreach ($funcMatches as $funcMatch) {
            $funcs[$funcMatch[1]] = 'single_var';
        }

        $res = preg_replace_callback('~(\w{1,50})\s?\(\s?[\'"]([^\'"]+)[\'"]\s?\)~msi', function ($m) use ($funcs) {
            $func = $funcs[$m[1]] ?? false;
            if (!$func) {
                return $m[0];
            }
            if ($func === 'decode') {
                $decoded = "";
                for ($i = 0; $i < strlen($m[2]) - 1; $i += 2) {
                    $decoded .= chr(hexdec($m[2][$i] . $m[2][$i + 1]) ^ 0x66);
                }

                return '"' . $decoded . '"';
            } elseif ($func === 'single_var') {
                return '"' . $m[2] . '"';
            }
        }, $str);

        return $res;
    }

    private function deobfuscateManyGlobals($str, $matches)
    {
        $vars = [];
        foreach ([$matches[1], $matches[2], $matches[3]] as $m) {
            $hangs = 50;
            $part = $m;
            while (strpos($part, 'base64_decode') !== false && $hangs--) {
                $part = Helpers::replaceVarsFromArray($vars, $part);
                $part = Helpers::replaceBase64Decode($part);
            }
            $ops = explode(';', $part);
            foreach ($ops as $v) {
                if ($v === '') {
                    continue;
                }
                $tmp = explode('=', $v, 2);
                $vars[$tmp[0]] = $tmp[1];
            }
        }
        $res = str_replace([$matches[1], $matches[2], $matches[3]], '', $str);
        $hangs = 50;
        while (strpos($res, '$GLOBALS') !== false && $hangs--) {
            $res = str_replace(array_keys($vars), array_values($vars), $res);
        }
        $res = str_replace('base64_decode(\'\')', '\'\'', $res);
        return $res;
    }

    private function deobfuscateB64xoredkey($str, $matches)
    {
        $b64 = Helpers::collectConcatedVars($matches[2]);
        $b64 = $b64[key($b64)];
        $res = Helpers::xorWithKey(base64_decode($b64), $matches[10]);
        return $matches[1] . $res;
    }

    private function deobfuscateGzB64Func($str, $matches)
    {
        $res = Helpers::normalize($matches[5]);
        $res = str_replace($matches[4], '"' . $matches[6] . '"', $res);
        return $res;
    }

    private function deobfuscateDictArrayFuncVars($str, $matches)
    {
        $dictName = $matches[5];

        $res = preg_replace_callback('~chr\((\d+)\)~msi', static function ($match) {
            return '\'' . chr($match[1]) . '\'';
        }, $matches[6]);


        $vars[$matches[2]] = 'base64_decode';
        $vars[$matches[3]] = base64_decode(Helpers::concatStr($matches[4]));

        $res = Helpers::replaceVarsFromArray($vars, $res, true);
        $res = Helpers::concatStringsInContent($res);
        $res = Helpers::replaceVarsFromArray($vars, $res, true, true);

        $res = preg_replace_callback('~str_rot13\([\'"]([^\'"]+)[\'"]\)~msi', static function ($match) {
            return '\'' . str_rot13($match[1]) . '\'';
        }, $res);

        $res = preg_replace_callback('~(?:[\'"][\w=();*/]*[\'"]\.?){2,}~msi', static function ($m) {
            preg_match_all('~(\.?)\s?[\'"]([\w=\+/%&();*]+)[\'"]\s?~msi', $m[0], $concatStrings);
            $strVar = "";
            foreach ($concatStrings[2] as $index => $concatString) {
                if ($concatStrings[1][$index] === '.') {
                    $strVar .= $concatString;
                } else {
                    $strVar = $concatString;
                }
            }

            return '\'' . $strVar . '\'';
        }, $res);

        $arrayVarDict = [];

        preg_match_all('~[\s\'"]*(.*?\]?)[\s\'"]*(,|$)~msi', $res, $arrMatches, PREG_SET_ORDER);

        foreach ($arrMatches as $arrMatch) {
            if ($arrMatch[1] === '') {
                continue;
            }
            $arrayVarDict[] = $arrMatch[1];
        }

        $res = str_replace([$matches[1], $matches[6]], '', $str);
        $res = preg_replace_callback('~(\$\w{1,50})\[(\d+)\]~msi', static function ($match) use ($dictName, $arrayVarDict) {
            if ($dictName === $match[1]) {
                $res = $arrayVarDict[$match[2]] ?? $match[0];
                if (!Helpers::convertToSafeFunc($res) && $res !== 'json_decode' && $res !== 'create_function' && strpos($res, '$') === false) {
                    $res = '"' . $res . '"';
                }
                return $res;
            }
            return $match[0];
        }, $res);

        return $res;
    }

    private function deobfuscateCreateFuncPackStrRot13($str, $matches)
    {
        return pack('H*', str_rot13($matches[2]));
    }

    private function deobfuscateDictVarsCreateFunc($str, $matches)
    {
        $res = $str;
        $dictName = $matches[2];
        $dictVal = stripcslashes($matches[3]);
        $vars = [];

        $res = preg_replace_callback('~(\$\w{1,50})\s?=\s?\w{1,50}\((?:(?:\$\w{1,50}\[\d+\]\s?|[\'"]{2}\s?)[.,]?\s?)+\);~msi',
            function($m) use (&$vars, $dictName, $dictVal) {
            $varName = $m[1];
            $dictResultStr = '';

            preg_match_all('~(\$\w{1,50})\[(\d+)\]~msi', $m[0], $dictVars, PREG_SET_ORDER);
            foreach ($dictVars as $dictVar) {
                if ($dictVar[1] !== $dictName) {
                    continue;
                }

                if ((int)$dictVar[2][0] === 0) {
                    $dictResultStr .= $dictVal[octdec($dictVar[2])] ?? '';
                } else {
                    $dictResultStr .= $dictVal[$dictVar[2]] ?? '';
                }
            }

            $vars[$varName] = $dictResultStr;

            return '';
            }, $str);

        $codeStr = '';
        preg_match_all('~(\$\w{1,50})~msi', $res, $varsMatch, PREG_SET_ORDER);
        foreach ($varsMatch as $var) {
            $codeStr .= $vars[$var[1]] ?? '';
        }

        if (strpos($codeStr, 'eval(base64_decode') !== false) {
            return base64_decode($matches[5]);
        }

        if (strpos($codeStr, 'eval(gzinflate(base64_decode') !== false) {
            return gzinflate(base64_decode($matches[5]));
        }

        return $str;
    }

    private function deobfuscateDecodedFileGetContentsWithFunc($str, $matches)
    {
        $res = str_replace($matches[6], '', $str);

        $resCode = implode(' ', @Helpers::unserialize(base64_decode($matches[5])));

        if (preg_match('~\$\w{1,50}\s?=\s?\'([^\']+)\';\s*\$\w{1,50}\s?=\s?\'([^\']+)\';~msi', $resCode, $configs)) {
            $uid = $configs[1];
            $cfg = $configs[2];

            $resCode = preg_replace_callback('~\$this->\w{1,50}\s?=\s?(@unserialize\(\$this->\w{1,50}\(\w{1,50}::\w{1,50}\(\$this->config\),\s?[\'"]([^\'"]+)[\'"]\)\))~msi',
                static function ($m) use ($uid, $cfg) {
                    $configCodeArray = Helpers::decodeFileGetContentsWithFunc(base64_decode($cfg), $m[2]);
                    $configCodeArray = Helpers::decodeFileGetContentsWithFunc($configCodeArray, $uid);
                    $configCodeArray = @Helpers::unserialize($configCodeArray);
                    $configCodeArray = var_export($configCodeArray, true);

                    return str_replace($m[1], $configCodeArray, $m[0]);
                }, $resCode);
        }

        $res = str_replace($matches[8], $resCode, $res);

        return $res;
    }

    private function deobfuscateCreateFuncVarsCode($str, $matches)
    {
        $vars = Helpers::collectConcatedVars(stripcslashes($matches[1]));

        $tempStr = preg_replace_callback('~(\$\w{1,50})=(.*?);~msi', function ($m) use (&$vars) {
            $var = $this->unwrapFuncs(Helpers::replaceVarsFromArray($vars, $m[2], true, true));

            $vars[$m[1]] = $var;
        }, $matches[2]);

        $func = Helpers::replaceVarsFromArray($vars, $matches[7], true);
        $code = $this->unwrapFuncs("$func'$matches[6]))");

        if (preg_match('~(\$\w{1,50})=array\(((?:\d{1,9},?)+)\);\s*(\$\w{1,50})="";for\((\$\w{1,50})=0;\4<sizeof\(\1\);\4\+=2\){if\(\4%4\){\3\.=substr\(\$\w{1,50},\1\[\4\],\1\[\4\+1\]\);}else{\3\.=\$\w{1,50}\(substr\(\$\w{1,50},\1\[\4\].\1\[\4\+1\]\)\);}};.*?return\s\$\w{1,50};~msi',
                       $code, $codeMatches)) {
            $res      = "";
            $arrayNum = [];

            preg_match_all('~(\d{1,9})~msi', $codeMatches[2], $numbers, PREG_SET_ORDER);
            foreach ($numbers as $number) {
                $arrayNum[] = $number[1];
            }

            for ($i = 0; $i < sizeof($arrayNum); $i += 2) {
                if ($i % 4) {
                    $res .= substr($matches[4], $arrayNum[$i], $arrayNum[$i + 1]);
                } else {
                    $res .= strrev(substr($matches[4], $arrayNum[$i], $arrayNum[$i + 1]));
                }
            };

            $res = $this->unwrapFuncs("$func'$res))");
            if ($res) {
                return $res;
            }
        }

        return $str;
    }

    private function deobfuscatePregConcat($str, $matches)
    {
        return Helpers::normalize($matches[2]);
    }

    private function deobfuscateUndefinedDFunc($str, $matches)
    {
        return 'eval(gzinflate(str_rot13(base64_decode(' . $matches[2] . '))));';
    }

    private function deobfuscateXoredStrings($str, $matches)
    {
        $res = preg_replace_callback('~"([^"]+)"\s*(?:\s*/\*[^\*]+\*/\s*)?\^(?:\s*/\*[^\*]+\*/\s*)?\s*"([^"]+)"~msi', function($m) {
            return '\'' . (stripcslashes($m[1]) ^ stripcslashes($m[2])) . '\'';
        }, $str);

        $res = preg_replace_callback('~\$\{\'(\w+)\'\}~msi', function($m) {
            return '$' . $m[1];
        }, $res);
        Helpers::collectVars($res, '\'', $vars, true);
        $res = Helpers::replaceVarsFromArray($vars, $res, false, false);

        if (preg_match('~(\$\w+)\s*=\s*(\(?\s*gzinflate\s*\(\s*base64_decode\s*)\(\s*\'([^\']+)\'\s*\)\s*\)\s*\)?\s*;\s*\$\w+\s*=\s*@?create_function\(\'([^\']*)\',\s*(?:\1|\'@?eval\(\4\)[^\']+\')\)\s*;\s*@?\$\w+(?:\(\)|\(\1\));~msi', $res, $m)) {
            $res = $this->deobfuscateCreateFuncGzInflateB64($res, $m);
        }
        $res = preg_replace_callback('~/\*[^\*]+\*/~msi', function($m) {
            return '';
        }, $res);
        $res = str_replace('\\\'', '@@slaapos@@', $res);
        preg_match('~\$\{"[^"]+"\^"[^"]+"\}\s*=\s*\'([^\']+)\'\s*;~msi', $res, $m);
        $res = str_replace('@@slaapos@@', '\\\'', $m[1]);
        $res = stripcslashes($res);

        $res = preg_replace_callback('~\(?"([^"]+)"\)?\s*\^\s*\(?"([^"]+)"\)?~msi', function($m) {
            return '\'' . (stripcslashes($m[1]) ^ stripcslashes($m[2])) . '\'';
        }, $res);

        $res = preg_replace_callback('~\$\{\'(\w+)\'\}~msi', function($m) {
            return '$' . $m[1];
        }, $res);

        $replace = function($m) use (&$vars) {
            if (!isset($vars[$m[1]])) {
                return $m[0];
            }
            if (isset($m[2]) && $m[2] !== '') {
                return $vars[$m[1]] . '(';
            }
            return @($vars[$m[1]][0] !== '\'') ? '\'' . $vars[$m[1]] . '\'' : $vars[$m[1]];
        };

        Helpers::collectVars($res, '\'', $vars, true);
        $res = preg_replace_callback('~(\$\w+)\s*(\()?~msi', $replace, $res);
        Helpers::collectFuncVars($res, $vars, true, true);
        $res = preg_replace_callback('~(\$\w+)\s*(\()?~msi', $replace, $res);

        $res = preg_replace('~;+~msi', ';', $res);
        return $res;
    }

    private function deobfuscateCommentWithAlgo($str, $matches)
    {
        return str_replace($matches[1], addcslashes(base64_decode(gzinflate(str_rot13(convert_uudecode(gzinflate(base64_decode($matches[1])))))), '\''), $str);
    }

    private function deobfuscateFileEncryptor($str, $matches)
    {
        return Helpers::replaceBase64Decode($str);
    }

    private function deobfuscateDefinedB64($str, $matches)
    {
        return str_replace([$matches[1], $matches[6], $matches[8]], ['', '', gzinflate(base64_decode($matches[9]))], $str);
    }

    private function deobfuscateB64Xored($str, $matches)
    {
        return base64_decode(Helpers::xorWithKey(base64_decode($matches[4]), $matches[6]));
    }

    private function deobfuscateB64AssignedVarContent($str, $matches)
    {
        return str_replace($matches[4], "'" . (base64_decode($matches[2])) . "'", $matches[3]);
    }

    private function deobfuscateDictVarsWithMath($str, $matches)
    {
        $dictVal = $matches[2];

        $dictStrs = Helpers::calculateMathStr($matches[3]);
        $vars = Helpers::getVarsFromDictionary($dictVal, $dictStrs);
        $vars = Helpers::collectVars($str, '"', $vars);
        $vars = Helpers::collectConcatedVars($str, '"', $vars);

        return $vars[$matches[4]] ?? $str;
    }

    private function deobfuscateClassDecryptedWithKey($str, $matches)
    {
        $key = 'WebKit#58738Educ';

        $data = hex2bin($matches[2]);
        $res = Helpers::decodeClassDecryptedWithKey($data, 32, $key);

        if (strpos($res, 'error_reporting(') !== false) {
            return $res;
        }

        return $str;
    }

    private function deobfuscatePHPkoru($str, $matches)
    {
        $vars[$matches[2]] = str_rot13(base64_decode($matches[3]));
        $vars[$matches[4]] = str_rot13(base64_decode($matches[5]));
        $code = $matches[6];
        while (strpos($code, 'eval') === 0) {
            $code = str_replace(array_keys($vars), array_values($vars), $code);
            $code = $this->unwrapFuncs($code);
        }
        $decoded = '';
        if (preg_match('~openssl_decrypt\(base64_decode\(trim\(\$\w+\[1\]\)\),\s*"([^"]+)",\s*base64_decode\(str_rot13\("([^"]+)"\)\),\s*(\d+),\s*base64_decode\(str_rot13\("([^"]+)"\)\)\)\);~msi', $code, $openssl_data)) {
            $data = base64_decode(trim($matches[8]));
            $algo = $openssl_data[1];
            $passphrase = base64_decode(str_rot13($openssl_data[2]));
            $iv = base64_decode(str_rot13($openssl_data[4]));
            $flags = $openssl_data[3];
            $decoded = openssl_decrypt($data, $algo, $passphrase, $flags, $iv);
            $decoded = str_rot13(base64_decode(str_rot13($decoded)));
        }
        return ' ?> ' .PHP_EOL . $decoded;
    }

    private function deobfuscateJoomlaInject($str, $matches)
    {
        $vars = Helpers::collectVars($matches[0]);
        preg_match('~function\s*\w+\((\$\w+)\)\s*\{\s*(\$\w+)\s*=\s*array\(((?:\'[^\']+\',?)+)\1\);\s*for\((\$\w+)=0;\s*\4<\d+;\s*\4\+\+\)\s*\{\s*for\((\$\w+)=0;\s*\5<strlen\(\2\[\4\]\);\s*\5\+\+\)\s*\2\[\4\]\[\5\]\s*=\s*chr\(ord\(\2\[\4\]\[\5\]\)\s*([\-\+])\s*(\d+)~msi', $this->full_source, $decode_data);
        preg_match_all('~\$this->\w+\(((?|"[^"]+"|\$\w+))\)~msi', $matches[0], $to_decode);
        foreach ($to_decode[1] as &$item) {
            if ($item[0] === '"' && $item[-1] === '"') {
                $item = substr($item, 1, -1);
            }
            $item = str_replace(array_keys($vars), array_values($vars), $item);
            $item = "'" . Helpers::joomlaInjectDecoder($decode_data[3] . $item, $decode_data[6], $decode_data[7]) . "'";
        }
        $res = str_replace($to_decode[0], $to_decode[1], $str);
        return $res;
    }

    private function deobfuscateFwriteB64Content($str, $matches)
    {
        $res = $str;

        $res = str_replace($matches[1], '', $res);
        $replace = base64_decode($matches[3]);

        $res = str_replace($matches[4], "'" . $replace . "'", $res);

        return $res;
    }

    private function deobfuscateB64concatedVars($str, $matches)
    {
        $res = $matches[6];

        $code = "'" . base64_decode($matches[2]) . base64_decode($matches[5]) . "'";

        $res = str_replace($matches[7], $code, $res);

        return $res;
    }

    private function deobfuscateSlashedCreateFunc($str, $matches)
    {
        $func = stripcslashes($matches[2]);

        if (strpos($func, 'create_function') !== false) {
            $code = stripcslashes($matches[5]);
            $code = str_replace($matches[4], $matches[6], $code);

            return $code;
        }

        return $str;
    }

    private function deobfuscateVarDictCreateFunc($str, $matches)
    {
        $res = Helpers::replaceVarsFromDictionary($matches[1], $matches[2], $matches[3]);

        $vars = [];
        $vars = Helpers::collectVars($res, '"', $vars, true);

        $res = Helpers::replaceVarsFromArray($vars, $res);

        return $res;
    }

    private function deobfuscatecallFuncGzB64($str, $matches)
    {
        return gzinflate(base64_decode($matches[1]));
    }

    private function deobfuscateAssertDictVarEval($str, $matches)
    {
        $dict = $matches[2];
        $arr  = [];
        for ($i = 0; $i < 6; $i++) {
            $arr[] = (int)$matches[4 + $i];
        }

        $assertStr = "";
        for ($i = 0; $i < 6; $i++) {
            $temp      = $arr[$i];
            $assertStr .= $dict[$temp];
        }

        $funcs = Helpers::concatStringsInContent(stripcslashes($matches[13]));
        if ($assertStr === 'assert' && strpos($funcs, 'eval(base64_decode(gzinflate(base64_decode(') !== false) {
            return base64_decode(gzinflate(base64_decode($matches[11])));
        }

        $vars               = [];
        $vars[$matches[10]] = $matches[11];
        $vars[$matches[12]] = $assertStr;

        return Helpers::replaceVarsFromArray($vars, $funcs);
    }

    private function deobfuscateB64FuncEvalGz($str, $matches)
    {
        return base64_decode(gzinflate(base64_decode($matches[4])));
    }

    private function deobfuscateB64Gz($str, $matches)
    {
        $result = gzinflate(base64_decode($matches[2]));
        $break = isset($matches[5]) ? '?>' : '';

        return $break . $result;
    }

    private function deobfuscateSubstrEmpty($str, $matches)
    {
        $str = preg_replace_callback('~substr\("([^"]++)",(\d++),(-?\d++)\)~msi', function ($m) {
            return '"' . substr(stripcslashes($m[1]), (int) $m[2], (int) $m[3]) . '"';
        }, $str);
        $str = str_replace(['"."', '"".'], '', $str);
        return $str;
    }

    private function deobfuscateDeltaOrd($str, $matches)
    {
        $str = gzinflate(base64_decode(stripcslashes($matches[4])));
        for($i = 0, $iMax = strlen($str); $i < $iMax; $i++) {
            $str[$i] = chr(ord($str[$i]) + (int) $matches[3]);
        }
        return $str;
    }

    private function deobfuscateOutputBuffer($str, $matches)
    {
        $search = explode(',', str_replace(['\',\'', '\',"', '",\'', '","'], ',', substr($matches[5], 1, -1)));
        $replace = explode(',', str_replace(['\',\'', '\',"', '",\'', '","'], ',', substr($matches[6], 1, -1)));
        $replace = array_map('stripcslashes', $replace);
        $buffer = str_replace($search, $replace, $matches[1] . $matches[9]);
        for ($i = 1, $j = ord($buffer[0]), $iMax = strlen($buffer); $i < $iMax; $i++) {
            $buffer[$i] = chr(ord($buffer[$i]) - $j - $i);
        }
        $buffer[0] = ' ';
        return $buffer;
    }

    private function deobfuscateDoorwayInstaller($str, $matches)
    {
        $vars = [];
        Helpers::collectVars($str, '"', $vars, true);
        $str = preg_replace_callback('~(\$\w+)\((?:"([^"]+)"|(\$\w+))\)~msi', function($m) use ($matches, $vars) {
            if ($m[1] !== $matches[1]) {
                return $m[0];
            }
            if (isset($m[2]) && $m[2] !== '') {
                return '\'' . base64_decode($m[2]) . '\'';
            }
            if (isset($m[3]) && isset($vars[$m[3]])) {
                return '\'' . base64_decode($vars[$m[3]]) . '\'';
            }
        }, $str);
        return $str;
    }

    private function deobfuscateStrReplaceAssert($str, $matches)
    {
        return base64_decode(gzinflate(base64_decode($matches[2])));
    }

    private function deobfuscateAnaLTEAMShell($str, $matches)
    {
        preg_match_all('~\$\{\'GLOBALS\'\}\[\'([^\']+)\'\]=[\'"]([^\'"]+)[\'"];~msi', $str, $m);
        $vars = array_combine($m[1], $m[2]);
        $str = str_replace($m[0], '', $str);
        $str = preg_replace_callback('~\$\{\$\{\'GLOBALS\'\}\[\'([^\']+)\'\]\}~msi', function($m) use ($vars) {
            if (!isset($vars[$m[1]])) {
                return $m[0];
            }
            return '$' . $vars[$m[1]];
        }, $str);
        $str = Helpers::replaceBase64Decode($str);
        $str = preg_replace_callback('~((\$\w+)=\'([^\']+)\';)\$\w+=\$_SERVER\[\'DOCUMENT_ROOT\'\]\.\'/\'\.\'[^\']+\';if\(file_exists\(\$\w+\)\)@?unlink\(\$\w+\);(\$\w+)=(base64_decode\(\2\));~msi', function ($m) {
            $res = str_replace($m[1], '', $m[0]);
            $res = str_replace($m[5], '\'' . base64_decode($m[3]) . '\'', $res);
            return $res;
        }, $str);
        $str = stripcslashes(stripcslashes($str));
        return $str;
    }

    private function deobfuscateZeuraB64Gzinflate($str, $matches)
    {
        return gzinflate(base64_decode($matches[10]));
    }

    private function deobfuscateD5($str, $matches)
    {
        $content = explode(hex2bin($matches[4]), $str)[1];
        $tmp = [];
        for ($i = 0; $i < strlen($content); $i++) {
            $tmp[]=ord($content[$i]) xor $i;
        }
        $content = hex2bin(base64_decode(implode(array_map(hex2bin($matches[8]), $tmp))));
        return $content;
    }

    private function deobfuscateStrReplaceFunc($str, $matches)
    {
        $vars = Helpers::collectFuncVars($matches[3], $vars, false, true);
        $cmd = Helpers::replaceVarsFromArray($vars, $matches[5]);
        if (strpos($cmd, 'create_function') === 0) {
            $cmd = 'eval(' . str_replace('create_function(\'\',', '', $cmd);
        }
        $res = str_replace($matches[6], '\'' . $matches[7] . '\'', $cmd);
        return $res;
    }

    private function deobfuscateArrayMapB64($str, $matches)
    {
        $array = explode('\',\'', substr($matches[2], 1, -1));
        return ' ?>' . base64_decode(str_rot13(implode('', $array))) . '<?php ';
    }

    private function deobfuscatePregReplaceStrReplace($str, $matches)
    {
        return str_replace($matches[1], $matches[2], stripcslashes($matches[3]));
    }

    private function deobfuscateEchoB64($str, $matches)
    {
        return str_replace([$matches[2], $matches[5]], ['\'' . base64_decode($matches[3]) . '\'', '\'' . base64_decode($matches[6]) . '\''], $str);
    }

    private function deobfuscateCreateFuncXored($str, $matches)
    {
        $res = preg_replace_callback('~"([^"]+)"\^"([^"]+)"~msi', function($m) {
            return '\'' . (stripcslashes($m[1]) ^ stripcslashes($m[2])) . '\'';
        }, $str);
        $vars = Helpers::collectVars($res, '\'', $vars, true);
        $res = gzinflate(base64_decode($matches[2]));
        $res = preg_replace('~/\*[^\*]+\*/~msi', '', $res);
        $code = $res;
        if (preg_match('~\$\{"[^"]+"\^"[^"]+"\}\s*=\s*\'((?:\\\\.|[^\'])*+)\';~msi', $code, $matches)) {
            $code = stripcslashes($matches[1]);
            $code = preg_replace_callback('~\(?"([^"]+)"\)?\^\(?"([^"]+)"\)?~msi', function($m) {
                return '\'' . (stripcslashes($m[1]) ^ stripcslashes($m[2])) . '\'';
            }, $code);
            $code = MathCalc::calcRawString($code);
            $vars = [];
            $code = preg_replace_callback('~\$(?:\{\')?(\w+)(?:\'\})?\s*=\s*\'([^\']*)\';+~msi', function($m) use (&$vars) {
                $vars['$' . $m[1] . '('] = $m[2] . '(';
                $vars['$' . $m[1]] = '\'' . $m[2] . '\'';
                return '';
            }, $code);
            $vars['&& !$_0 '] = '&&';
            $vars['if($_0 '] = 'if(';
            krsort($vars);
            $code = str_replace(array_keys($vars), array_values($vars), $code);
        }

        if (preg_match('~(\$\w+)=base64_decode\(\'([^\']+)\'\);;~msi', $code, $m)) {
            $code = str_replace($m[0], '', $code);
            $code = str_replace('eval(' . $m[1] . ');', base64_decode($m[2]), $code);
        }
        $code = preg_replace_callback('~\(?"([^"]+)"\)?\^\(?"([^"]+)"\)?~msi', function($m) {
            return '\'' . (stripcslashes($m[1]) ^ stripcslashes($m[2])) . '\'';
        }, $code);
        $vars = [];
        $code = preg_replace_callback('~(?|\$\{\'(\w+)\'\}\s*=\s*\'(\w+)\'|\$(\w+)\s*=\s*\'(\w+)\');+\s*~msi', function($m) use (&$vars) {
            $vars['$' . $m[1] . '('] = $m[2] . '(';
            $vars['${\'' . $m[1] . '\'}' . '('] = $m[2] . '(';
            $vars['$' . $m[1]] = '\'' . $m[2] . '\'';
            $vars['${\'' . $m[1] . '\'}'] = '\'' . $m[2] . '\'';
            return '';
        }, $code);
        $code = Helpers::replaceVarsFromArray($vars, $code);
        return $code;
    }

    private function deobfuscateCodeLockDecoder($str, $matches)
    {
        $codelock_stub = base64_decode($matches[1]);
        if (isset($matches[2]) && $matches[2] !== '') {
            $codelock_stub = gzinflate($codelock_stub);
            $hangs = 20;
            while (strpos($codelock_stub, 'eval') === 0 && $hangs--) {
                $codelock_stub = $this->UnwrapFuncs($codelock_stub);
            }
        }

        preg_match('~\$codelock_active_key="([^"]*)";~msi', $codelock_stub, $m);
        $codelock_active_key = $m[1];
        preg_match('~\$codelock_usezlib="([^"]*)";~msi', $codelock_stub, $m);
        $codelock_usezlib = $m[1];
        $codelock_key_data = $matches[3];
        if ($codelock_usezlib === "^") {
            $codelock_key_data = base64_decode($codelock_key_data);
            $codelock_key_data = gzinflate($codelock_key_data);
        }
        if (substr($codelock_active_key, 0, 15) !== "codelock_active") {
            $codelock_key_data = Helpers::codelock_dec_int($codelock_key_data, $codelock_active_key);
        } else {
            preg_match('~\$codelock_unlock="([^"]*)";~msi', $codelock_stub, $m);
            $codelock_active_key = $m[1];
            $codelock_key_data = Helpers::codelock_run($codelock_key_data, $codelock_active_key);
        }

        return $codelock_key_data;
    }

    private function deobfuscateEvalGzStrRotB64($str, $matches)
    {
        return gzinflate(str_rot13(base64_decode($matches[2])));
    }

    private function deobfuscateEvalDictArrayConcat($str, $matches)
    {
        $dictVal = '';
        preg_match_all('~[\'"]([^\'"])[\'"]~msi', $matches[2], $m, PREG_SET_ORDER);
        foreach ($m as $char) {
            $dictVal .= $char[1];
        }

        $replacedStr = Helpers::replaceVarsFromDictionary($matches[1], $dictVal, $str);
        $vars = Helpers::collectVars($replacedStr);

        $funcs = Helpers::replaceVarsFromArray($vars, $matches[4]);
        $funcs = Helpers::concatStringsInContent($funcs);
        $funcs = strtolower($funcs);

        if (strpos($funcs, 'eval(str_rot13(gzinflate(str_rot13(gzinflate(base64_decode(') !== false) {
            return str_rot13(gzinflate(str_rot13(gzinflate(base64_decode($matches[6])))));
        }

        return $str;
    }

    private function deobfuscatePregReplaceXored($str, $matches)
    {
        $res = preg_replace_callback('~"([^"]+)"\^"([^"]+)"~msi', function($m) {
            return '\'' . (stripcslashes($m[1]) ^ stripcslashes($m[2])) . '\'';
        }, $str);
        $vars = [];
        $vars = Helpers::collectVars($res, '\"', $vars, true);
        $res = Helpers::replaceVarsFromArray($vars, $res, false, true);
        $res = str_replace('\'.\'', '', $res);
        Helpers::collectVars($res, '\'', $vars, true);
        $res = str_replace(['preg_replace("/' . $matches[2] . '/e",\'\'', '\'\',"' . $matches[2] . '");'], '', $res);
        $res = Helpers::replaceVarsFromArray($vars, $res, false, true);
        return $res;
    }

    private function deobfuscateR4C($str, $matches)
    {
        $vars = [];
        $res = $str;
        $hangs = 20;
        do {
            Helpers::collectConcatedVars($res, '"', $vars, true);
            $res = str_replace('"".$', '$', $res);
            Helpers::collectConcatedVars($res, '\'', $vars, true);
            $res = trim($res);
            $res = Helpers::replaceVarsFromArray($vars, $res, false, true);
            $res = $this->unwrapFuncs($res);
        } while (preg_match('~eval\((?:\w+\()*(?:\$\w+\.?)+\)~', $res) && $hangs--);
        return $res;
    }

    private function deobfuscateBase64EncryptedGz($str, $matches)
    {
        $text       = $matches[1];
        $hash       = $matches[3];
        $key        = 'asdf';
        $key_len    = strlen($key);

        $text       = base64_decode(str_replace("\n", '', $text));
        $text_len   = strlen($text);

        $w = [];
        for ($i = 0; $i < $key_len; ++$i)
        {
            $w[] = $text_len - $key_len - ord($key[$i]);
        }

        for ($i = 0; $i < $text_len; ++$i) {
            $j          = abs($w[$i % $key_len] - $i);
            $x          = $text[$j];
            $text[$j]   = $text[$i];
            $text[$i]   = $x;
        }

        if ($key_len < 10) {
            $key_len *= $key_len & 1 ? 3 : 2;
        }

        if (($text = @gzinflate($text)) && (md5(substr($text, 0, $key_len)) === $hash)) {
            return substr($text, $key_len);
        }

        return '';
    }

    private function deobfuscateBloos3rpent($str, $matches)
    {
        $matches[3] = str_replace('\\\'', '\'', $matches[3]);
        $matches[4] = str_replace('\\\'', '\'', $matches[4]);
        $decoder = strtr($matches[5], $matches[3], $matches[4]);
        preg_match('~\$\w+\s*=\s*\[((?:\'[\da-fx]+\',?)+)\];~msi', $decoder, $funcs);
        $funcs = explode('\',\'', substr($funcs[1], 1, -1));
        $funcs = array_map('hex2bin', $funcs);
        preg_match('~function\s*(\w+)\((\$\w+)\)\s*\{\s*global\s*(\$\w+);\s*return\s*\3\[\d+\]\(\'([^\']+)\',function\(\$\w+\)\s*\{\s*if[^}]+\}return\s*\$\w+;\s*\}\s*else\{\s*return\s*chr[^}]+\}\},\$\w+\);\s*\}\s*function\s*(\w+)\(\$\w+\)\s*\{\s*global\s*\3;\s*eval\(\3\[\d+\]\(\$\w+\)\);\s*\}~msi', $decoder, $tmp);
        $strtr_func = $matches[1];
        $decode_code_func = $tmp[1];
        $eval_func = $tmp[5];
        $arr_funcs = $tmp[3];
        $code = Helpers::replaceVarsFromDictionary($arr_funcs, $funcs, $matches[7], false);
        $hangs = 20;
        while (preg_match('~(\w+)\(\'([^\']+)\'\)~msi', $code) && $hangs--) {
            $code = preg_replace_callback('~(\w+)\(\'([^\']+)\'\)~msi', function ($m) use ($strtr_func, $decode_code_func, $eval_func, $matches) {
                if ($m[1] === $strtr_func) {
                    return '\'' . strtr($m[2], $matches[3], $matches[4]) . '\'';
                }
                if ($m[1] === $decode_code_func) {
                    return '\'' . stripcslashes($m[2]) . '\'';
                }
                if (Helpers::convertToSafeFunc($m[1])) {
                    return '\'' . $m[1]($m[2]) . '\'';
                }
                return $m[0];
            }, $code);
        }
        $code = stripcslashes(substr($code, 1, -2));
        return $code;
    }

    private function deobfuscateDoublePregReplace($str, $matches)
    {
        $matches[2] = substr($matches[2], 1, -1);
        $decoder = @gzinflate(base64_decode(preg_replace('~' . $matches[2] . '~', $matches[3], $matches[4])));
        $res = str_replace($matches[1], $decoder, $str);
        $res = str_replace([$matches[11], $matches[5], $matches[7]], '', $res);
        $res = str_replace('\')))));', '\'))));', $res);
        return $res;
    }

    private function deobfuscateZeura2($str, $matches)
    {
        return 'eval(base64_decode(gzinflate(base64_decode(\'' . $matches[6] . '\'))));';
    }

    private function deobfuscateCreateFuncEscaped($str, $matches)
    {
        return base64_decode($matches[6]);
    }

    private function deobfuscateMaskedDeltaOrd($str, $matches)
    {
        $matches[4] = base64_decode($matches[2]);
        $matches[3] = '-1';
        return $this->deobfuscateDeltaOrd($str, $matches);
    }

    private function deobfuscatedecodeStrMultiForDict($str, $matches)
    {
        $strToDecode = str_replace(['-m ', ' ', PHP_EOL], '', $matches[3]);
        $strToDecode = base64_decode($strToDecode);

        $decodeArray = [];
        for ($i = 0; $i < 256; ++$i) {
            $decodeArray [$i] = $i;
        }

        $index = 0;
        for ($i = 0; $i < 256; ++$i) {
            $index                = ($index + $decodeArray [$i] + ord($matches[6] [$i % 63])) % 256;
            $tempVar              = $decodeArray [$i];
            $decodeArray [$i]     = $decodeArray [$index];
            $decodeArray [$index] = $tempVar;
        }

        $i     = 0;
        $index = 0;
        for ($j = 0; $j < (int)$matches[10]; ++$j) {
            $i                    = ($i + 1) % 256;
            $index                = ($index + $decodeArray [$i]) % 256;
            $tempVar              = $decodeArray [$i];
            $decodeArray [$i]     = $decodeArray [$index];
            $decodeArray [$index] = $tempVar;
            $strToDecode [$j]     = $strToDecode [$j] ^ chr($decodeArray [($decodeArray [$i] + $decodeArray [$index]) % 256]);
        }

        return $strToDecode;
    }

    private function deobfuscateB64ConcatedStrVars($str, $matches)
    {
        $vars        = Helpers::collectVars($str, "'");
        $code        = base64_decode($matches[2]);
        $strToDecode = Helpers::replaceVarsFromArray($vars, $matches[3]);
        $strToDecode = Helpers::concatStringsInContent($strToDecode);
        if (preg_match('~(\$\w{1,50})\s?=\s?base64_decode\(\1\);\s?return\s?@?eval\(\1\);~msi', $code)) {
            return base64_decode($strToDecode);
        }

        return $str;
    }

    private function deobfuscateChrFuncVars($str, $matches)
    {
        $result = preg_replace_callback('~' . $matches[1] . '\(array\(((?:\d+,?)+)\)\)~msi', function ($m) {
            $data = '';
            preg_match_all('~\d+~msi', $m[0], $nums, PREG_SET_ORDER);
            foreach ($nums as $num) {
                $data .= chr($num[0]);
            }
            return "'" . $data . "'";
        }, $str);

        return $result;
    }

    private function deobfuscateConcatVarsFuncs($str, $matches)
    {
        $concatedStr = Helpers::concatStringsInContent($matches[1]);
        $vars = Helpers::collectVars($concatedStr);
        $data = Helpers::concatStringsInContent($matches[2]);
        $data = Helpers::replaceVarsFromArray($vars, $data);

        $code = $this->unwrapFuncs($data);

        if (preg_match('~eval\(rawurldecode\("([^"]+)"~msi', $code, $m)) {
            return rawurldecode($m[1]);
        }

        return $code;
    }

    private function deobfuscateBlackshadow($str, $matches)
    {
        return ($matches[5] . '\'' . $matches[4] . $matches[2] . '\'' . $matches[7]);
    }

    private function deobfuscateGlobalDictVar($str, $matches)
    {
        $str = str_replace($matches[2], '', $str);
        $dict = stripcslashes($matches[4]);
        $str = preg_replace_callback('~\$\w+\[\'\w+\'\]\[(\d+)\]~msi', function ($m) use ($dict) {
            return '\'' . $dict[(int)$m[1]] . '\'';
        }, $str);
        $str = str_replace('\'.\'', '', $str);
        $vars = [];
        $str = preg_replace_callback('~(\$\w+\[\'(\w+)\'\])=(\'[^\']+\'|\$_POST|\$_GET|\$_COOKIE);(?!global)~msi', function($m) use (&$vars) {
            if ($m[3][0] === '\'') {
                $m[3] = substr($m[3], 1, -1);
            }
            $vars[$m[1]] = $m[3];
            $vars['$' . $m[2]] = $m[3];
            return '';
        }, $str);
        $str = Helpers::replaceVarsFromArray($vars, $str);
        return $str;
    }

    private function deobfuscateGarbageVars($str, $matches)
    {
        $str = preg_replace('~"([\w@/:\?>,=\}\.]*)"~msi', '\'\1\'', $str);
        $str = preg_replace_callback('~(?:\'\s*\.\s*(\w+)|(\w+)\s*\.\s*\')~msi', function ($m) {
            if (isset($m[1]) && $m[1] !== '') {
                return '\' . \'' . $m[1] . '\'';
            }
            if (isset($m[2]) && $m[2] !== '') {
                return '\'' . $m[2] . '\' . \'';
            }
        }, $str);

        $str = preg_replace('~\'\s*\.\s*\'~msi', '', $str);
        $str = preg_replace_callback('~(?|\'([^\']+)\'|(\w+))\s*([\^\|\&])\s*(\~)?(?|\'([^\']+)\'|(\w+))~msi', function ($m) {
            if (isset($m[3]) && $m[3] !== '') {
                $m[4] = ~$m[4];
            }
            switch ($m[2]) {
                case '^':
                    return '\'' . ($m[1] ^ $m[4]) . '\'';
                case '|':
                    return '\'' . ($m[1] | $m[4]) . '\'';
                case '&':
                    return '\'' . ($m[1] & $m[4]) . '\'';
            }
        }, $str);

        $vars = Helpers::collectVars($str, '\'', $vars, true);

        $str = preg_replace_callback('~(?|\(\'([^\']+)\'\)|(\$\w+))([\^\&\|])(?|\(\'([^\']+)\'\)|(\$\w+))~msi', function ($m) use ($vars) {
            if ($m[1][0] === '$' && isset($vars[$m[1]])) {
                $m[1] = $vars[$m[1]];
            }
            if ($m[3][0] === '$' && isset($vars[$m[3]])) {
                $m[3] = $vars[$m[3]];
            }
            switch ($m[2]) {
                case '^':
                    return '\'' . ($m[1] ^ $m[3]) . '\'';
                case '|':
                    return '\'' . ($m[1] | $m[3]) . '\'';
                case '&':
                    return '\'' . ($m[1] & $m[3]) . '\'';
            }
        }, $str);

        Helpers::collectVars($str, '\'', $vars, true);
        foreach ($vars as $var => $val) {
            $str = str_replace($var . '(', $val . '(', $str);
            $str = str_replace($var, '\'' . $val . '\'', $str);
        }
        $str = preg_replace('~\'\s*\.\s*\'~msi', '', $str);
        return $str;
    }

    private function deobfuscateChrMinXor($str, $matches)
    {
        $code = (isset($matches[2]) && $matches[2] !== '') ? convert_uudecode(str_replace($matches[5],'', $matches[2])) : base64_decode(strrev($matches[3]));
        $table = [];
        if (isset($matches[5]) && $matches[5] !== '') {
            for($i = 0; $i < 256; ++$i) {
                $table[$i] = $i;
            }
            $j=0;
            for($i = 0; $i < 256; ++$i) {
                $j = ($j + $table[$i] + ord($matches[6][$i % (strlen($matches[6]) - 1)])) % 256;
                $tmp = $table[$i];
                $table[$i] = $table[$j];
                $table[$j] = $tmp;
            }
            $j=0;
            $k=0;
            for($i = 0, $iMax = strlen($code) - 1; $i < $iMax; ++$i) {
                $j = ($j + 1) % 256;
                $k = ($k + $table[$j]) % 256;
                $tmp = $table[$j];
                $table[$j] = $table[$k];
                $table[$k] = $tmp;
                $code[$i] = $code[$i] ^ chr($table[($table[$j] + $table[$k]) % 256]);
            }
        } else {
            for($i = 0, $iMax = strlen($code) - 1; $i < $iMax; ++$i) {
                $code[$i] = $code[$i] ^ $matches[6][$i % (strlen($matches[6]) - 1)];
            }
        }

        return $code;
    }

    private function deobfuscateFakeChop($str, $matches)
    {
        $offset = 2;
        $tmp = base64_decode($matches[2]);
        preg_match('~if\(\$\w+\)(\$\w+)=\$\w+\(\'([^\']+)\',\s*\(\(\$\w+\!=\d+\)\?\'[^\']+\':\'([^\']+)\'\),\1\);\$\w+\+=__LINE__\*1;~msi', $tmp, $m);
        $matches[3] = str_replace($m[2], $m[3], $matches[3]);
        $tmp = base64_decode(substr($matches[3], $offset));
        preg_match('~\w+=\'([^\']+)\';~msi', $tmp, $m);
        $code = base64_decode(substr($m[1], $offset));
        $dicts = [];
        $code = preg_replace_callback('~\$GLOBALS\[([^\]]+)\]=explode\("([^"]+)",\s*"([^"]+)"\);~msi', function ($m) use (&$dicts) {
           $dicts[$m[1]] = explode($m[2], $m[3]);
           return '';
        }, $code);
        $code = preg_replace_callback('~\$GLOBALS\[([^\]]+)\]=explode\(pack\(\$GLOBALS\[([^\]]+)\]\[(\d+)\],\$GLOBALS\[([^\]]+)\]\[(\d+)\]\),pack\(\$GLOBALS\[([^\]]+)\]\[(\d+)\],\$GLOBALS\[([^\]]+)\]\[(\d+)\]\)\);~msi', function ($m) use (&$dicts) {
            $dicts[$m[1]] = explode(pack($dicts[$m[2]][$m[3]], $dicts[$m[4]][$m[5]]), pack($dicts[$m[6]][$m[7]], $dicts[$m[8]][$m[9]]));
            return '';
        }, $code);
        $code = preg_replace_callback('~\$GLOBALS\[([^\]]+)\]\[([xa-f\d]+)\](\()?~msi', function ($m) use ($dicts) {
            $offset = $m[2][1] === 'x' ? hexdec($m[2]) : ($m[2][0] === '0' ? octdec($m[2]) : $m[2]);
            return (isset($m[3]) && $m[3] !== '') ? $dicts[$m[1]][$offset] . '(' : '\'' . $dicts[$m[1]][$offset] . '\'';
        }, $code);
        $code = preg_replace_callback('~pack\(\'H\*\',\'([\da-f]+)\'\)~msi', function ($m) {
            return '\'' . pack('H*', $m[1]) . '\'';
        }, $code);
        preg_match('~\$[^=]+=array\(array\((\'[^\)]+)\)\);~msi', $code, $m);
        $m[1] = substr($m[1], 1, -1);
        $m[1] = str_replace('\',\'', '', $m[1]);
        $code = base64_decode(str_rot13($m[1]));
        return $code;
    }

    private function deobfuscateAssertUrldecode($str, $matches)
    {
        return $this->deobfuscateEval(stripcslashes($matches[2]), []);
    }

    private function deobfuscateImplodeB64Gz($str, $matches)
    {
        $b64str = str_replace('\',\'', '', $matches[2]);
        $code = gzuncompress(base64_decode($b64str));
        $code = Helpers::normalize(MathCalc::calcRawString($code));
        $arr = [];
        $func = '';
        $code = preg_replace_callback('~if\(!function_exists\(\'(\w+)\'\)\)\{function\s*\1\((\$\w+)\)\s*\{(\$\w+)=array\(([^)]+)\);return\s*base64_decode\(\3\[\2\]\);\}~msi', function ($m) use (&$arr, &$func) {
            $arr = explode('\',\'', substr($m[4], 1, -1));
            $func = $m[1];
            return '';
        }, $code);
        foreach($arr as $i => $data) {
            $code = str_replace($func . '(' . $i . ')', '\'' . base64_decode($data) . '\'', $code);
        }
        return $code;
    }

    private function deobfuscateEvalStrReplace($str, $matches)
    {
        return base64_decode(str_replace($matches[8], '', $matches[2]));
    }

    private function deobfuscateX12($str, $matches)
    {
        $vars = Helpers::collectVars($matches[1]);
        $matches[2] = Helpers::replaceVarsFromArray($vars, $matches[2], false, true);
        $matches[2] = Helpers::normalize($matches[2]);
        $funcs = Helpers::collectVars($matches[2], '\'');
        $matches[3] = Helpers::replaceVarsFromArray($funcs, $matches[3]);
        return $this->deobfuscateEval($matches[3], []);
    }

    private function deobfuscateWpNightmare($str, $matches)
    {
        return gzinflate(base64_decode($matches[8]));
    }

    private function deobfuscateXorGzUncompress($str, $matches)
    {
        $vars = Helpers::collectVars($matches[1], '\'');
        $code = array_pop($vars);
        $code = base64_decode($code);
        $code = Helpers::xorWithKey($code, $matches[10]);
        return gzuncompress($code);
    }

    private function deobfuscateEvalSubstr($str, $matches)
    {
        return base64_decode(substr(strrev($matches[2]), (int)$matches[3],(int)$matches[4]));
    }

    private function deobfuscateEvalStrrev($str, $matches)
    {
        $code = base64_decode(strrev($matches[2]));
        return $code;
    }

    private function deobfuscateStrRot13ConvertUUDecode($str, $matches)
    {
        $decode = str_rot13($matches[2]);
        $decode = stripcslashes($decode);
        $decode = preg_replace(['~eval\(convert_uudecode\(\s*\'~msi', '~\'\)\);~msi'], '', $decode);
        $decode = stripcslashes($decode);
        $decode = convert_uudecode($decode);
        $decode = $this->deobfuscateEval($decode, []);
        if (preg_match('~eval\(strrev\(\s*\';\)\)\s*\\\\\'eval\(convert_uudecode\(\s*\\\\(["\'])((?:[^;]+;)+[^\']+)\\\\\'\\\\\\\\\)\);\\\\\1\s*\(verrts\(lave\'\s*\)\);~msi', $decode, $m)) {
            $decode = preg_replace_callback('~(?:(\\\\\\\\\\\\\\\\\\\\\')|(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\)|(\\\\\\\\))~m', function($g) {
                if (isset($g[1]) && $g[1] !== '') {
                    return '\'';
                }
                if (isset($g[2]) && $g[2] !== '') {
                    return '\\';
                }
                if (isset($g[3]) && $g[3] !== '') {
                    return '';
                }
            }, $m[2]);
            $decode = convert_uudecode($decode);
        }
        return $decode;
    }

    private function deobfuscateCreateFuncHex($str, $matches)
    {
        $decode = stripcslashes($matches[5]);
        $decode = str_replace($matches[4], '\'' . $matches[6] . '\'', $decode);
        return $decode;
    }

    private function deobfuscatePregB64Strrev($str, $matches)
    {
        return $this->deobfuscateEvalStrrev($str, $matches);
    }

    private function deobfuscatePregB64FuncImgStr($str, $matches)
    {
        $decodedStr = base64_decode($matches[13]);

        if (preg_match('~<img src="data:image/png;(.*)">~msi', $decodedStr, $foundB64) !== false) {
            $decodedStr = str_replace(
                [base64_decode($matches[4]), base64_decode($matches[5])],
                [base64_decode($matches[6]), base64_decode($matches[7])],
                $foundB64[1]
            );
            $decodedStr = gzinflate(base64_decode($decodedStr));

            return str_replace($matches[11], $decodedStr, $str);
        }

        return $str;
    }

    private function deobfuscateUtfCharVarsFuncEval($str, $matches)
    {
        $vars = [];
        $res = $str;
        $globalVarName = $matches[1];
        $funcName = $matches[2];

        $res = Helpers::utfCharVarsFuncEvalCodeDecoder($res, $vars, $globalVarName, $funcName);

        for ($i = 0; $i < 10; $i++) {
            $found = false;

            if (preg_match('~eval\(?\s*@?\s*(?:base64_decode\s*\(|pack\s*\(\'H\*\',|convert_uudecode\s*\(|htmlspecialchars_decode\s*\(|gzdecode\s*\(|stripslashes\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|unserialize\s*\(|eval\s*\(|hex2bin\()+.*?[^\'");]+(\s*[\'"\)]+)+\s*;~msi', $res, $matches)) {
                $unWrapped = $this->unwrapFuncs($matches[0]);
                $res = str_replace($matches[0], $unWrapped, $res);
                $found = true;
            } else if (preg_match('~eval\('. $funcName . '\(base64_decode\(\'([^\']+)\'\)+;~msi', $res, $funcMatch)) {
                $code = base64_decode($funcMatch[1]);
                $code = Helpers::utfCharVarsFuncEvalVarDecoder($code);
                $res = str_replace($funcMatch[0], $code, $res);
                $found = true;
            }
            if ($found) {
                $res = Helpers::utfCharVarsFuncEvalCodeDecoder($res, $vars, $globalVarName, $funcName);
            } else {
                break;
            }
        }
        $res = Helpers::replaceBase64Decode($res);

        return $res;
    }

    private function deobfuscateManyVarFuncCreateFuncWrap($str, $matches)
    {
        $createFuncCode = hex2bin(pack('H*', $matches[8]));
        if (strpos($createFuncCode, 'eval($') !== false) {
            return gzinflate(hex2bin(pack('H*', $matches[9])));
        }

        return $str;
    }

    /*************************************************************************************************************/
    /*                                          JS deobfuscators                                                 */
    /*************************************************************************************************************/

    private function deobfuscateJS_fromCharCode($str, $matches)
    {
        $result = '';
        $chars = explode(',', $matches[4]);
        foreach ($chars as $char) {
            $result .= chr((int)trim($char));
        }
        if (!(isset($matches[3]) && $matches[3] === 'eval(')) {
            $result = '\'' . $result . '\'';
        }
        if (isset($matches[1]) && $matches[1] !== '') {
            $result = $matches[1] . $result;
        }
        if (isset($matches[5]) && $matches[5] !== '') {
            $result = $result . $matches[5];
        }

        return $result;
    }

    private function deobfuscateJS_unescapeContentFuncWrapped($str, $matches)
    {
        $result = '';

        $functionCode = urldecode($matches[1]);
        $functionName = urldecode($matches[2]);
        $strDecoded = $matches[3];

        if (preg_match('~function\s?(\w{1,50})\(\w{1,50}\)\s{0,50}{\s{0,50}var\s?\w{1,50}\s?=\s?[\'"]{2};\s{0,50}var\s?\w{1,50}\s?=\s?\w{1,50}\.split\("(\d+)"\);\s{0,50}\w{1,50}\s?=\s?unescape\(\w{1,50}\[0\]\);\s{0,50}\w{1,50}\s?=\s?unescape\(\w{1,50}\[1\]\s?\+\s?"(\d{1,50})"\);\s{0,50}for\(\s?var\s?\w{1,50}\s?=\s?0;\s?\w{1,50}\s?<\s?\w{1,50}\.length;\s?\w{1,50}\+\+\)\s?{\s{0,50}\w{1,50}\s?\+=\s?String\.fromCharCode\(\(parseInt\(\w{1,50}\.charAt\(\w{1,50}%\w{1,50}\.length\)\)\^\w{1,50}\.charCodeAt\(\w{1,50}\)\)\+-2\);\s{0,50}}\s{0,50}return\s\w{1,50};\s{0,50}}~msi',
                $functionCode, $match) && strpos($functionName, $match[1])) {
            $tmp = explode((string)$match[2], $strDecoded);
            $s = urldecode($tmp[0]);
            $k = urldecode($tmp[1] . (string)$match[3]);
            $kLen = strlen($k);
            $sLen = strlen($s);

            for ($i = 0; $i < $sLen; $i++) {
                $result .= chr(((int)($k[$i % $kLen]) ^ ord($s[$i])) - 2);
            }
        } else {
            $result = $matches[3];
            $result = str_replace([$matches[1], $matches[2]], [$functionCode, $functionCode], $result);
        }

        return $result;
    }

    private function deobfuscateJS_ObfuscatorIO($str, $matches)
    {
        $detectPattern = '~((?![^_a-zA-Z$])[\w$]*)\(-?(\'|")(0x[a-f\d]+|\\x30\\x78[\\xa-f\d]+)\2(\s*,\s*(\'|").+?\5)?\)~msi';
        preg_match_all($detectPattern, $str, $detectMatch);
        $detectMatch = array_unique($detectMatch[1]);
        if (count($detectMatch) !== 1) {
            return $str;
        }

        preg_match('~\b(?:var|const|let)\s+' . $detectMatch[0] . '\s*=\s*function\s*\(.*?\)\s*~msi', $str, $index, PREG_OFFSET_CAPTURE);
        $index = $index[0][1];

        $bo = 0;
        $bc = 0;
        $strSize = strlen($str);
        $mainCode = '';
        while ($index < $strSize) {
            if ($str[$index] === '{') {
                $bo++;
            }
            if ($str[$index] === '}') {
                $bc++;
            }
            if ($bc === $bo && $bo !== 0) {
                $mainCode = substr($str, $index + 2);
                break;
            }
            $index++;
        }
        $array = explode('\',\'', substr($matches[2], 1, -1));

        $shuffle = hexdec($matches[3]);
        while ($shuffle--) {
            $array[] = array_shift($array);
        }
        $mainCode = preg_replace_callback('~((?![^_a-zA-Z$])[\w$]*)\(-?(\'|")(0x[a-f\d]+|\\x30\\x78[\\xa-f\d]+)\2(\s*,\s*(\'|")(.+?)\5)?\)~msi', function ($m) use ($array) {
            return '\'' . Helpers::deobfuscatorIO_string($array[hexdec($m[3])], $m[6]) . '\'';
        }, $mainCode);
        return Helpers::normalize($mainCode);
    }

    private function deobfuscateJS_documentWriteUnescapedStr($str, $matches)
    {
        if (strpos($matches[1], '\u00') !== false) {
            $matches[1] = str_replace('\u00', '%', $matches[1]);
        }
        return urldecode($matches[1]);
    }

    private function deobfuscateJS_deanPacker($str, $matches)
    {
        $payload = $matches[1];
        // Words
        $symtab = explode('|', $matches[4]);
        // Radix
        $radix = (int)$matches[2];
        // Words Count
        $count = (int)$matches[3];

        if ($count !== count($symtab)) {
            return $str; // Malformed p.a.c.k.e.r symtab !
        }

        $array = [];

        while ($count--) {
            $tmp = Helpers::jsPackerUnbaser($count, $radix);
            $array[$tmp] = (isset($symtab[$count]) && $symtab[$count] !== '') ? $symtab[$count] : $tmp;
        }

        $result = preg_replace_callback('~\b\w+\b~', function($m) use ($array) {
            return $array[$m[0]];
        }, $payload);
        $result = str_replace('\\', '', $result);
        if (preg_match('~function\(\)\{var\s*(\w+)=\{([\$\w]+):\'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\+/=\',\w+:function\(\w+\){var\s*\w+=\'\',\w,\w,\w,\w,\w,\w,\w,\w=0;\w=\1\.[\w\$]+\(\w\);while\(\w<\w\.length\)\{[^{]+\{\w=\w=64\}else[^{]+\{\w=64\};[^}]+};return\s*\w},(\w+):function\(\w\)\{var\s*\w+=\'\',\w,\w,\w,\w,\w,\w,\w,\w=0;\w=\w\.replace\(/\[\^A\-Za\-z0\-9\+/=\]/g,\'\'\);while\(\w<\w\.length\){\w=this\.\2\.indexOf\(\w\.charAt\(\w\+\+\)\);~msi', $result, $m)) {
            $class = $m[1];
            $b64_func = $m[3];
            $result = preg_replace_callback('~(?:var\s(\w+)=\'([^\']+)\';\1=(\w+\.\w+)\(\1\)|(\w+\.\w+)\(\'([^\']+)\'\))~msi', function($m) use ($class, $b64_func) {
                if ((isset($m[4]) && $m[4] !== '' && $m[4] !== $class . '.' . $b64_func)
                 || (isset($m[3]) && $m[3] !== '' && $m[3] !== $class . '.' . $b64_func)
                ) {
                    return $m[0];
                }
                if (isset($m[4]) && $m[4] !== '') {
                    return '\'' . base64_decode($m[5]) . '\'';
                }
                if (isset($m[3]) && $m[3] !== '') {
                    return 'var ' . $m[1] . '=\'' . base64_decode($m[2]) . '\'';
                }
            }, $result);
            $result = preg_replace_callback('~\w+=\[((?:\'[^\']+\',?)+)\]~msi', function($m) {
                $arr = explode('\',\'', substr($m[1], 1, -1));
                $arr = array_map('base64_decode', $arr);
                return str_replace($m[1], '\'' . implode('\',\'', $arr) . '\'', $m[0]);
            }, $result);

        }
        return $result;
    }

    private function deobfuscateJS_objectDecode($str, $matches)
    {
        $ciphered = explode('+', $matches[9]);
        $chars = explode('\',\'', substr($matches[13], 1, -1));
        $count = (int)$matches[8];
        $arr = [];
        for ($i = 0; $i < $count; $i++) {
            $arr[Helpers::jsObjectDecodeIndexToString($i)] = $ciphered[$i][0] !== ';' ? '\'' . Helpers::jsObjectStringDecoder($matches[11], $chars, $ciphered[$i]) . '\'' : (float)substr($ciphered[$i], 1);
        }
        $ret = preg_replace_callback('~\$\.\b(\w+)\b~', function($m) use ($arr) {
            if (!isset($arr[$m[1]])) {
                return $m[0];
            }
            return $arr[$m[1]];
        }, $matches[2]);

        return $ret;
    }

    /*************************************************************************************************************/
    /*                                          PYTHON deobfuscators                                             */
    /*************************************************************************************************************/

    private function deobfuscatePY_evalCompileStr($str, $matches)
    {
        return gzuncompress(base64_decode($matches[1]));
    }
}



/**
 * Class SharedMem work with shared-memory
 */
class SharedMem
{

    private $instance = null;

    /**
     * SharedMem constructor.
     * @param int $key
     * @param string $mode
     * @param int $permissions
     * @param int $size
     */
    public function __construct(int $key , string $mode , int $permissions , int $size)
    {
        $this->instance = shmop_open($key, $mode, $permissions, $size);
    }

    /**
     * @param int $offset
     * @param int $size
     * @param bool $trim
     * @param bool $json
     * @return false|mixed|string
     */
    public function read(int $offset, int $size, bool $trim = true, bool $json = true)
    {
        $res = shmop_read($this->instance, $offset, $size);
        if ($trim) {
            $res = rtrim($res, "\0");
        }
        if ($json) {
            $res = json_decode($res, true);
        }
        return $res;
    }

    /**
     * @param string $data
     * @return int
     */
    public function write(array $data): int
    {
        shmop_write($this->instance, str_repeat("\0", shmop_size($this->instance)), 0);
        if (function_exists('json_encode')) {
            $res = shmop_write($this->instance, json_encode($data), 0);
        } else {
            $res = shmop_write($this->instance, serialize($data), 0);
        }
        return $res;
    }

    /**
     * @return int
     */
    public function getSize(): int
    {
        return shmop_size($this->instance);
    }

    /**
     * @return bool
     */
    public function delete(): bool
    {
        return shmop_delete($this->instance);
    }

    /**
     * @param bool $delete
     */
    public function close(bool $delete = false)
    {
        if ($delete) {
            shmop_delete($this->instance);
        }

        if (version_compare(phpversion('shmop'), '8.0.0', '<')) {
            shmop_close($this->instance);
        }

        $this->instance = null;
    }

    /**
     * @return bool
     */
    public function isValid()
    {
        if (version_compare(phpversion('shmop'), '8.0.0', '>=')) {
            return is_object($this->instance);
        }

        return is_resource($this->instance);
    }

    /**
     * @return false|resource|Shmop
     */
    public function getInstance()
    {
        return $this->instance;
    }
}

/**
 * Class Factory.
 */
class Factory
{
    /**
     * @var Factory
     */
    private static $instance;
    /**
     * @var array
     */
    private static $config;

    /**
     * Factory constructor.
     *
     * @throws Exception
     */
    private function __construct()
    {

    }

    /**
     * Instantiate and return a factory.
     *
     * @return Factory
     * @throws Exception
     */
    public static function instance()
    {
        if (self::$instance === null) {
            self::$instance = new self();
        }

        return self::$instance;
    }

    /**
     * Configure a factory.
     *
     * This method can be called only once.
     *
     * @param array $config
     * @throws Exception
     */
    public static function configure($config = [])
    {
        if (self::isConfigured()) {
            throw new Exception('The Factory::configure() method can be called only once.');
        }

        self::$config = $config;
    }

    /**
     * Return whether a factory is configured or not.
     *
     * @return bool
     */
    public static function isConfigured()
    {
        return self::$config !== null;
    }

    /**
     * Creates and returns an instance of a particular class.
     *
     * @param string $class
     *
     * @param array $constructorArgs
     * @return mixed
     * @throws Exception
     */
    public function create($class, $constructorArgs = [])
    {
        if (!isset(self::$config[$class])) {
            throw new Exception("The factory is not contains configuration for '{$class}'.");
        }

        if (is_callable(self::$config[$class])) {
            return call_user_func(self::$config[$class], $constructorArgs);
        } else {
            return new self::$config[$class](...$constructorArgs);
        }
    }
}


class Template
{
    protected $html;
    protected $variables = [];

    /**
     * Template constructor.
     *
     * @param string $html
     */
    public function __construct($html)
    {
        $this->html = $html;
    }

    /**
     * @param $html
     *
     * @return Template
     */
    public static function create($html)
    {
        return new static($html);
    }

    /**
     * @param $key
     * @param $value
     */
    public function set($key, $value)
    {
        $this->variables[$key] = $value;
    }

    /**
     * @return string
     */
    public function render()
    {
        if (!empty($this->variables)) {
            foreach ($this->variables as $key => $value) {
                $this->html = str_replace("@@$key@@", $value, $this->html);
            }
        }

        return $this->html;
    }
}

class Translate
{
    const LANG_EN = 'EN';
    const LANG_RU = 'RU';

    /**
     * @var string
     */
    private static $lang = self::LANG_EN;

    /**
     * @param $lang
     */
    public static function setLang($lang)
    {
        self::$lang = $lang;
    }

    /**
     * @param string      $key
     * @param null|array  $params
     *
     * @param null|string $language
     *
     * @return string
     */
    public static function getStr($key, $params = null, $language = null)
    {
        if ($language && in_array($language, [self::LANG_RU, self::LANG_EN])) {
            $lang = $language;
        } else {
            $lang = self::$lang;
        }

        $result = ($lang === self::LANG_RU) ? TranslateList::RU[$key] : TranslateList::EN[$key];
        if ($params && is_array($params) && !empty($params)) {
            return vsprintf($result, $params);
        }

        return $result;
    }
}

