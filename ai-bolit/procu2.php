<?php
/////////////////////////////////////////////////////////////////////////////////////////////////////
# By Greg Zemskov, (c) 2018, Property of Revisium Company
# revisium.com, audit@revisium.com
/////////////////////////////////////////////////////////////////////////////////////////////////////

@date_default_timezone_set('Europe/Moscow');

define('RED_COLOR', "\x1b\x5b\x31\x3b\x33\x31\x6d");
define('GREEN_COLOR', "\x1b\x5b\x32\x3b\x33\x32\x6d");
define('OFF_COLOR', "\x1b\x5b\x6d");

define('REPORT_ERROR_FILE_CLEANEDUP', 0);
define('REPORT_ERROR_FILE_TOO_BIG', 1);
define('REPORT_ERROR_FILE_READING_ERROR', 2);
define('REPORT_ERROR_FILE_NONE_WRITE', 3);
define('REPORT_ERROR_FILE_NOT_CLEANEDUP', 4); // Use only with --forcibly_cleanup. If file was not changed after cleanup it have this type.
define('REPORT_ERROR_FILE_NOT_EXISTS', 5); // Use only with --forcibly_cleanup. If file not exists.
define('REPORT_ERROR_FILE_MATCHED_NOT_CLEANED', 6);

define('REPORT_TYPE_OP_INJECTION_REMOVE', 0);
define('REPORT_TYPE_OP_DEL_FILE_SIMPLE_MATCH', 1);
define('REPORT_TYPE_OP_DEL_FILE_SIGNATURE', 2);
define('REPORT_TYPE_OP_DEL_FILE_NORMALIZED_SIGNATURE', 3);
define('REPORT_TYPE_OP_DEL_FILE_CLOUDHASH', 6);
define('REPORT_TYPE_OP_DEL_FILE_ELF', 7);

//echo "Revisium \"PROCUREOR\" v20181109\n";
//echo "--------------------------------\n\n";

$last_time          = 0;
$json_result        = [];
$procu_run_time     = time();

$opts = new ProcuConfig();
$cli = new ProcuCliParse($argv, $opts);
ProcuOutput::setProgress($opts->get(ProcuConfig::PARAM_PROGRESS));

$mode = $opts->get(ProcuConfig::PARAM_TEST) ? 0 : 1; // 0 - check, 1 - do

if (!$opts->get(ProcuConfig::PARAM_DONT_USE_UMASK)) {
    umask(0027);
}

if ($opts->get(ProcuConfig::PARAM_DECODE) !== null) {
    echo Normalization::normalize(php_strip_whitespace($opts->get(ProcuConfig::PARAM_DECODE)));
    die();
}

$opts->set(ProcuConfig::PARAM_BACKUP, str_replace('%%TIME%%', time(), $opts->get(ProcuConfig::PARAM_BACKUP)));
$opts->set(ProcuConfig::PARAM_LOG, str_replace('%%TIME%%', date('d-m-Y_H_i_s'), $opts->get(ProcuConfig::PARAM_LOG)));

if ($opts->get(ProcuConfig::PARAM_USERNAME) !== null) {
    $username = $opts->get(ProcuConfig::PARAM_USERNAME);

    if (!empty($username) && ($info = posix_getpwnam($username)) !== false) {
        posix_setgid($info['gid']);
        posix_setuid($info['uid']);
        echo('Running from ' . $info['uid'] . ':' . $info['gid'] . "\n");
    } else {
        echo("Invalid username\n");
        exit(-1);
    }
}

$full_signs = !$opts->get(ProcuConfig::PARAM_STANDART_ONLY);

define('PROCU_C', base64_decode(strrev('=YVQfBjNzklRJ5UVN1US')));
define('PROCU_I', base64_decode(strrev('')));
define('PROCU_PROGRESS_FILE', $opts->get(ProcuConfig::PARAM_PROGRESS));
define('PROCU_LOG_FILE', $opts->get(ProcuConfig::PARAM_LOG));
define('PROCU_S', '0');

define('PROCU_T', (int)base64_decode(strrev('==AM')));

/////////////////////////////////////////////////////////////////////////////////////////////////////

define('PROCU_N', (int)base64_decode(strrev('==AM')));

if (@$argv[1] === 'cli') {
    echo PROCU_C . ' - ' . PROCU_T . ' - ' . PROCU_I . ' - ' . PROCU_N . "\n";
    die(0);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////

try {
    $load_db_signatures = new LoadSignaturesForClean(
        $opts->get(ProcuConfig::PARAM_SIGNATURE),
        $opts->get(ProcuConfig::PARAM_AVDB),
        $full_signs
    );
} catch (Exception $e) {
    echo RED_COLOR . 'Bad state.' . OFF_COLOR . "\n";
    echo $e->getMessage();
    ProcuOutput::la_fin("\n\n");
}

$clean_db               = $load_db_signatures->getDB();
$db_meta_info           = $load_db_signatures->getDBMetaInfo();
$db_location            = $load_db_signatures->getDBLocation();
$signature_converter    = new SignatureConverter($clean_db);
$backup = null;

//////////////////////////////////////////////////

if (count($clean_db) < 1) {
    die(1);
}

echo 'Mode = ' . ($mode === 0 ? 'CHECK' : 'CLEAN') . "\n\n";
echo 'Loaded ' . count($clean_db) . ' rules' . "\n\n";

if (!$opts->get(ProcuConfig::PARAM_TEST) && !$opts->get(ProcuConfig::PARAM_NOBACKUP)) {
    $backup = new ProcuBackup($opts->get(ProcuConfig::PARAM_BACKUP));
    if (!file_exists($opts->get(ProcuConfig::PARAM_BACKUP))) {
        ProcuOutput::la_fin('Cannot create ' . $opts->get(ProcuConfig::PARAM_BACKUP) . '. Check if current folder is writeable.' . "\n");
    }
}

$type = 0;
$file = '';

if ($opts->get(ProcuConfig::PARAM_JSON_LIST) !== null) {
    $type = ProcuInput::JSON;
    $file = $opts->get(ProcuConfig::PARAM_JSON_LIST);
} else if ($opts->get(ProcuConfig::PARAM_CSV_LIST) !== null) {
    $type = ProcuInput::CSV;
    $file = $opts->get(ProcuConfig::PARAM_CSV_LIST);
} else if ($opts->get(ProcuConfig::PARAM_LIST) !== null) {
    $type = ProcuInput::PLAIN;
    $file = $opts->get(ProcuConfig::PARAM_LIST);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////

$total          = 0;
$allfnum        = ProcuInput::getCount($file, $type, $opts->get(ProcuConfig::PARAM_BLACKLIST));
$total_cleaned  = 0;

$report = new ProcuReport(
    $opts->get(ProcuConfig::PARAM_RESULT),
    $opts->get(ProcuConfig::PARAM_EXTENDED_REPORT),
    $opts->get(ProcuConfig::PARAM_CSV_RESULT),
    $opts->get(ProcuConfig::PARAM_EXTENDED_REPORT) ? ['db_location' => $db_location] : null
);

foreach(
    ProcuInput::load(
        $file, $type, $opts->get(ProcuConfig::PARAM_INPUT_FN_B64)
        , $opts->get(ProcuConfig::PARAM_BLACKLIST), !$opts->get(ProcuConfig::PARAM_FORCIBLY_CLEANUP)
    ) as $item
) {
    $total++;

    $last_time = do_progress($last_time, $item[0], $total, $allfnum, $total_cleaned, 1); // CLEAN

    echo 'Checking ' . $item[0] . ' [' . $total . '/' . $allfnum . "]\n";
    $result = [];
    $res = clean_malware($item[0], $opts, $result, $item[1], $load_db_signatures, $signature_converter, $backup);
    $rescan_res = null;
    if ($opts->get(ProcuConfig::PARAM_RESCAN)) {
        if (@filesize($item[0]) <= $opts->get(ProcuConfig::PARAM_SIZE)) {
            $rescan_res = ScanUnit::Rescan(
                @file_get_contents($item[0]),
                $load_db_signatures,
                false,
                $opts->get(ProcuConfig::PARAM_DEOBFUSCATE)
            );
        } else {
            $rescan_res = 1;
        }
    }
    $report->addToReport($result, $rescan_res);

    if ($result) {
        $json_result = array_merge($json_result, $result);
    }
    if ($res) {
        $total_cleaned++;
    }
}

ProcuOutput::addToOutput('Processed: ' . $total . ' cleaned: ' . $total_cleaned . "\n\n");

if ($total_cleaned > 0) {

    ProcuOutput::addToOutput("Summary:\n");
    foreach (ProcuStat::getStat() as $key => $num) {
        ProcuOutput::addToOutput($key . "\t" . $num . "\t"
            . sprintf('%0.0f', 100 * $num / $total_cleaned) . "%\n");
    }
}

if (php_sapi_name() !== 'cli') {
    echo '<pre>';
    echo ProcuOutput::getPlainOutput();
} else {
    echo ProcuOutput::getCliOutput();
}

file_put_contents(PROCU_LOG_FILE, ProcuOutput::getPlainOutput());

$safe_name = preg_replace('|[^A-Za-z0-9_\-\.]+|', '_', __DIR__);

if ($backup && !$opts->get(ProcuConfig::PARAM_NOBACKUP)) {
    $backup->createZip();
}

ProcuOutput::la_fin('FIN', 0, $report);


/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

function clean_malware($src_file, $opts, &$json_result, $blacked_by_cloud_assitant = false, $load_db_signatures = null, $signature_converter = null, $backup = null)
{
    $file = new ProcuFile($src_file, $opts->get(ProcuConfig::PARAM_SOFT));
    $file->getWritablePermissions();
    $file->open();

    if ($opts->get(ProcuConfig::PARAM_FORCIBLY_CLEANUP) && (!file_exists($src_file) || is_link($src_file))) {
        $json_result[] = [
            'f' => $src_file,
            'e' => REPORT_ERROR_FILE_NOT_EXISTS,
            's' => 'not_exists'
        ];
        $file->close();
        $file->restorePermissions();
        unset($file);
        return false;
    }

    if ($blacked_by_cloud_assitant || $file->isElf()) {
        $recId = $blacked_by_cloud_assitant ? 'cld' : 'SMW-HEUR-ELF';
        ProcuStat::addId($recId);

        ProcuOutput::printFilename($src_file);
        ProcuOutput::addToOutput(GREEN_COLOR . $recId . OFF_COLOR . "\n");

        if ($opts->get(ProcuConfig::PARAM_TEST)) {
            ProcuOutput::addToOutput("\n");
            $file->close();
            $file->restorePermissions();
            unset($file);
            return true;
        }
        if (backup_and_remove($file, $backup, $opts)) {
            $json_result[] = [
                'f' => $src_file,
                'e' => REPORT_ERROR_FILE_CLEANEDUP,
                'd' => $blacked_by_cloud_assitant ? REPORT_TYPE_OP_DEL_FILE_CLOUDHASH : REPORT_TYPE_OP_DEL_FILE_ELF,
                's' => $recId
            ];
            $file->close();
            $file->restorePermissions();
            unset($file);
            return true;
        } else {
            $json_result[] = [
                'f' => $src_file,
                'e' => REPORT_ERROR_FILE_NONE_WRITE,
                's' => $recId
            ];
        }
        $file->close();
        $file->restorePermissions();
        unset($file);
        return false;
    }

    if ($file->getSize() > $opts->get(ProcuConfig::PARAM_SIZE)) {
        ProcuOutput::addToOutput($src_file . "\t" . RED_COLOR . "ERR READING\t" . OFF_COLOR . "\n");
        $json_result[] = [
            'f' => $src_file,
            'e' => REPORT_ERROR_FILE_TOO_BIG,
            's' => ''
        ];
        $file->restorePermissions();
        $file->close();
        unset($file);
        return false;
    }

    $file_content = $file->read();

    if ($file_content === false) {
        ProcuOutput::addToOutput($src_file . "\t" . RED_COLOR . "ERR READING\t" . OFF_COLOR . "\n");
        $json_result[] = [
            'f' => $src_file,
            'e' => REPORT_ERROR_FILE_READING_ERROR,
            's' => ''
        ];
        $file->restorePermissions();
        $file->close();
        unset($file);
        return false;
    }

    $precheck = function($mask_type) use ($src_file) {
        return preg_match('~' . $mask_type . '~i', $src_file) != false;
    };

    $clean_result = CleanUnit::CleanContent($file_content, $load_db_signatures, $opts->get(ProcuConfig::PARAM_DEOBFUSCATE), false, $signature_converter, $precheck, $src_file, $load_db_signatures->getDeMapper(), $matched_not_cleaned);
    if ($clean_result) {
        $res = true;
        $is_changed = false;
        if (!$opts->get(ProcuConfig::PARAM_TEST)) {
            if (!CleanUnit::isEmpty($clean_result)) {
                $res = backup_and_rewrite($file, $backup, $opts, $file_content, $is_changed);
            } else {
                $res = backup_and_remove($file, $backup, $opts);
                $is_changed = true;
            }
        }
        if ($res) {
            $clean_result = CleanUnit::getSAItem($clean_result);
            foreach ($clean_result as $index => $result) {
                ProcuStat::addId($result['id']);
                ProcuOutput::printFilename($src_file);
                ProcuOutput::addToOutput(GREEN_COLOR . $result['id'] . OFF_COLOR);

                if (!$result['empty']) {
                    $entry = [
                        'f' => $src_file,
                        'e' => ($is_changed ? REPORT_ERROR_FILE_CLEANEDUP : REPORT_ERROR_FILE_NONE_WRITE),
                        'd' => REPORT_TYPE_OP_INJECTION_REMOVE,
                        't' => $result['sig_type'],
                        's' => $result['id'],
                    ];
                    $json_result[] = $entry;
                } else {
                    $d = null;
                    switch ($result['sig_type']) {
                        case 4:
                        case 5:
                        case 0:
                            $d = REPORT_TYPE_OP_DEL_FILE_SIMPLE_MATCH;
                            break;

                        case 1:
                            $d = REPORT_TYPE_OP_DEL_FILE_SIGNATURE;
                            break;

                        case 3:
                            $d = REPORT_TYPE_OP_DEL_FILE_NORMALIZED_SIGNATURE;
                            break;
                    }
                    if ($result['sig_type'] == 0 || $result['sig_type'] == 4 || $result['sig_type'] == 5) {
                        ProcuOutput::addToOutput(' ' . GREEN_COLOR . "E RM\t" . OFF_COLOR);
                    }
                    $entry = [
                        'f' => $src_file,
                        'e' => REPORT_ERROR_FILE_CLEANEDUP,
                        'd' => $d,
                        's' => $result['id']
                    ];
                    $json_result[] = $entry;
                }
                ProcuOutput::addToOutput("\n");
            }
        } else {
            ProcuOutput::addToOutput($matched_not_cleaned
                ? ' ----- ' . RED_COLOR . 'ERROR, CONTENT MATCHED, BUT NOT CLEANED' . OFF_COLOR
                : ' ----- ' . RED_COLOR . 'ERROR, WRITE-PROTECTED' . OFF_COLOR
            );
            ProcuOutput::addToOutput(PHP_EOL);
            $entry = [
                'f' => $src_file,
                'e' => $matched_not_cleaned ? REPORT_ERROR_FILE_MATCHED_NOT_CLEANED : REPORT_ERROR_FILE_NONE_WRITE,
                's' => $clean_result[0]['id']
            ];
            $json_result[] = $entry;
        }
    } else if (!$clean_result && $opts->get(ProcuConfig::PARAM_FORCIBLY_CLEANUP)) {
        $entry = [
            'f' => $src_file,
            'e' => REPORT_ERROR_FILE_NOT_CLEANEDUP,
            's' => 'not_cleanedup'
        ];
        $json_result[] = $entry;
    }
    $file->restorePermissions();
    $file->close();
    unset($file);
    return $matched_not_cleaned ? false : ($clean_result ? true : false);
}

function backup_and_remove($file, $backup, $opts)
{
    if ($opts->get(ProcuConfig::PARAM_TEST)) {
        return true;
    }

    if ($backup && !$opts->get(ProcuConfig::PARAM_NOBACKUP)) {
        $backup->addFile($file->getPath());
    }

    if ($opts->get(ProcuConfig::PARAM_SOFT) && !$file->isElf()) {
        if (!$file->truncate()) {
            ProcuOutput::addToOutput(' ' . RED_COLOR . "ERROR, NOT TRUNCATED\t" . OFF_COLOR);
            return false;
        }
    } else {
        if (!$file->remove()) {
            ProcuOutput::addToOutput(' ' . RED_COLOR . "ERROR, NOT DELETED, NOT TRUNCATED\t" . OFF_COLOR);
            return false;
        }
    }
    return true;
}

function backup_and_rewrite($file, $backup, $opts, $content, &$is_changed)
{
    if ($opts->get(ProcuConfig::PARAM_TEST)) {
        return true;
    }

    if ($backup && !$opts->get(ProcuConfig::PARAM_NOBACKUP)) {
        $backup->addFile($file->getPath());
    }

    $is_changed = $file->rewrite($content);

    if (!$is_changed) {
        ProcuOutput::addToOutput(' ----- ' . RED_COLOR . 'ERROR, WRITE-PROTECTED' . OFF_COLOR . PHP_EOL);
        return false;
    }
    return true;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
function do_progress($last_time, $file, $num, $all, $cleaned, $stage)
{
    if (time() - $last_time > 1) {
        $res = [
            'timestamp' => time(),
            'file'      => $file,
            'current'   => $num,
            'total'     => $all,
            'cleaned'   => $cleaned,
            'stage'     => $stage,
        ];
        @file_put_contents(PROCU_PROGRESS_FILE, json_encode($res), LOCK_EX);
        $last_time = time();
    }
    return $last_time;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// The following instructions should be written the same pattern,
/// because they are replaced by file content while building a release.
/// See the release_aibolit_ru.sh file for details.

/*
 * Abstract class for parse cli command
 */
abstract class CliParse
{
    /**
     * @var Config Config for fill
     */
    protected $config = null;
    
    /**
     * @var array List of options. Example of one element: ['short' => 'v', 'long' => 'version,ver', 'needValue' => false]
     */
    protected $opts     = [];
    
    /**
     * @var array Current of options from $argv
     */
    private $options    = [];
    
    /**
     * @var array Arguments left after getopt() processing
     */
    private $freeAgrs   = [];
    
    /**
     * Construct
     *
     * @param array $argv
     * @param Config $config
     * @throws Exception
     */
    public function __construct($argv, Config $config)
    {
        $this->config   = $config;
        $cliLongOpts    = [];
        $cliShortOpts   = [];
        foreach ($this->opts as $params) {
            $postfix = $params['needValue'] ? ':' : '';
            if ($params['long']) {
                $cliLongOpts = array_merge($cliLongOpts, $this->getMultiOpts($params['long'], $params['needValue']));
            }
            if ($params['short']) {
                $cliShortOpts = array_merge($cliShortOpts, $this->getMultiOpts($params['short'], $params['needValue']));
            }
        }
        $this->parseOptions($argv, $cliShortOpts, $cliLongOpts);
        $this->parse();
    }
    
    /**
     * Parse comand line params
     */
    abstract protected function parse();

    /**
     * Checking if the parameter was used in the cli line
     *
     * @param string $paramKey
     * @return bool
     * @throws Exception
     */
    protected function issetParam($paramKey)
    {
        if (!isset($this->opts[$paramKey])) {
            throw new Exception('An invalid option requested.');
        }
        if ($this->getExistingOpt($this->opts[$paramKey]['long'])) {
            return true;
        }
        elseif ($this->getExistingOpt($this->opts[$paramKey]['short'])) {
            return true;
        }
        return false;
    }

    /**
     * Checking if the parameter was used in the cli line
     *
     * @param string $paramKey
     * @return bool
     * @throws Exception
     */
    protected function getParamValue($paramKey, $default = null)
    {
        if (!isset($this->opts[$paramKey])) {
            throw new Exception('An invalid option requested.');
        }
        $existingLongOpt = $this->getExistingOpt($this->opts[$paramKey]['long']);
        if ($existingLongOpt) {
            return $this->options[$existingLongOpt];
        }
        $existingShortOpt = $this->getExistingOpt($this->opts[$paramKey]['short']);
        if ($existingShortOpt) {
            return $this->options[$existingShortOpt];
        }
        return $default;
    }

    /**
     * Return free arguments after using getopt()
     *
     * @return array
     * @throws Exception
     */
    protected function getFreeAgrs()
    {
        return $this->freeAgrs;
    }
    
    /**
     * Parse by getopt() and fill vars: $this->options $this->freeAgrs
     * 
     * @return void
     */
    private function parseOptions($argv, $cliShortOpts, $cliLongOpts)
    {
        if (count($argv) <= 1) {
            return;
        }
        $this->options  = getopt(implode('', $cliShortOpts), $cliLongOpts);
        //$this->freeAgrs = array_slice($argv, $optind); // getopt(,,$optind) only for PHP7.1 and upper
        
        for($i = 1; $i < count($argv); $i++) {
            if (strpos($argv[$i], '-') !== 0) {
                $this->freeAgrs = array_slice($argv, $i);
                break;
            }
        }
    }    

    /**
     * Clean cli parameter
     *
     * @param string $optName Paramenter may be with ":" postfix
     * @return array
     */
    private function getCleanOptName($optName)
    {
        return str_replace(':', '', $optName);
    }
    
    /**
     * Return options with or without ":" postfix
     *
     * @param array $optString String with one or more options separated by ","
     * @param bool $addPostfix True if need add postfix
     * @return array Array list of options
     */
    private function getMultiOpts($optString, $addPostfix = false)
    {
        $opts = explode(',', $optString);
        if ($addPostfix) {
            $opts = array_map(function($value) { 
                return $value . ':';
            }, $opts);
        }
        return $opts;
    }
    
    /**
     * Return existing options from string. 
     *
     * @param string $optsString String with one or more options separated by ","
     * @return string|bool Name of finded options in getopt()
     */
    private function getExistingOpt($optsString)
    {
        $opts = $this->getMultiOpts($optsString);
        foreach ($opts as $opt) {
            if (isset($this->options[$opt])) { 
                return $opt;
            }
        }
        return false;
    }
}

class Config
{
    /**
     * @var array Configuration data 
     */
    private $config     = [];

    /**
     * Returns valued of a particular option.
     *
     * @param string $key
     * @return mixed
     * @throws Exception
     */
    public function get($key)
    {
        if (!array_key_exists($key, $this->config)) {
            throw new Exception('An invalid option requested. Key: ' . $key);
        }
        return $this->config[$key];
    }

    /**
     * Set value to config by key
     *
     * @param string $key
     * @param mixed $value
     * @return mixed
     * @throws Exception
     */
    public function set($key, $value)
    {
        $this->config[$key] = $value;
    }

    /**
     * Set default config
     *
     * @param array $defaults
     */
    protected function setDefaultConfig($defaults)
    {
        $this->config = $defaults;
    }
}

class ContentObject
{
    private $content = false;
    private $normalized_file_content = false;
    private $unescaped_normalized = false;
    private $unescaped = false;
    private $decoded_converted = false;
    private $decoded_file_content = false;
    private $normalized_decoded = false;
    private $decoded_fragments = false;
    private $decoded_fragments_string = false;
    private $norm_decoded_fragments = false;
    private $norm_decoded_fragments_string = false;
    private $norm_decoded_file_content = false;
    private $converted_file_content = false;
    private $converted_decoded = false;
    private $strip_decoded = false;
    private $type = '';

    private $deobfuscate = false;
    private $unescape = false;


    public function __construct($content, $deobfuscate = false, $unescape = false)
    {
        $this->content = $content;
        $this->deobfuscate = $deobfuscate;
        $this->unescape = $unescape;
    }

    public function getType()
    {
        return $this->type;
    }

    public function getContent()
    {
        if ($this->content !== false) {
            return $this->content;
        }
    }

    public function getUnescaped()
    {
        if (!$this->unescape) {
            $this->unescaped = '';
            $this->unescaped_normalized = '';
        }
        if ($this->unescaped !== false) {
            return $this->unescaped;
        }
        $this->unescaped = Normalization::unescape($this->getContent());
        return $this->unescaped;
    }

    public function getNormalized()
    {
        if ($this->normalized_file_content !== false) {
            return $this->normalized_file_content;
        }
        $this->normalized_file_content = Normalization::strip_whitespace($this->getContent());
        $this->normalized_file_content = Normalization::normalize($this->normalized_file_content);
        return $this->normalized_file_content;
    }

    public function getUnescapedNormalized()
    {
        if (!$this->unescape) {
            $this->unescaped = '';
            $this->unescaped_normalized = '';
        }
        if ($this->unescaped_normalized !== false) {
            return $this->unescaped_normalized;
        }
        $this->unescaped_normalized = Normalization::strip_whitespace(Normalization::unescape($this->getContent()));
        $this->unescaped_normalized = Normalization::normalize($this->unescaped_normalized);
        return $this->unescaped_normalized;
    }

    public function getDecodedFileContent()
    {
        if (!$this->deobfuscate) {
            $this->decoded_file_content = '';
            $this->decoded_fragments = [];
            $this->decoded_fragments_string = '';
            $this->norm_decoded_file_content = '';
        }
        if ($this->decoded_file_content !== false) {
            return $this->decoded_file_content;
        }
        $deobf_obj = new Deobfuscator($this->getContent());
        $deobf_type = $deobf_obj->getObfuscateType($this->getContent());
        if ($deobf_type != '') {
            $this->decoded_file_content = $deobf_obj->deobfuscate();
            $this->decoded_fragments = $deobf_obj->getFragments();
            $this->decoded_fragments_string = is_array($this->decoded_fragments) ? Normalization::normalize(implode($this->decoded_fragments)) : '';
            $this->norm_decoded_file_content = Normalization::normalize($this->decoded_file_content);
        } else {
            $this->decoded_file_content = '';
            $this->decoded_fragments = [];
            $this->decoded_fragments_string = '';
            $this->norm_decoded_file_content = '';
        }
        return $this->decoded_file_content;
    }

    public function getDecodedNormalizedContent()
    {
        if (!$this->deobfuscate) {
            $this->normalized_decoded = '';
            $this->norm_decoded_fragments = [];
            $this->norm_decoded_fragments_string = '';
        }
        if ($this->normalized_decoded !== false) {
            return $this->normalized_decoded;
        }
        $deobf_obj = new Deobfuscator($this->getNormalized());
        $deobf_type = $deobf_obj->getObfuscateType($this->getNormalized());
        if ($deobf_type != '') {
            $this->normalized_decoded = $deobf_obj->deobfuscate();
            $this->norm_decoded_fragments = $deobf_obj->getFragments();
            $this->norm_decoded_fragments_string = is_array($this->norm_decoded_fragments) ? Normalization::normalize(implode($this->norm_decoded_fragments)) : '';
        } else {
            $this->normalized_decoded = '';
            $this->norm_decoded_fragments = [];
            $this->norm_decoded_fragments_string = '';
        }
        return $this->normalized_decoded;
    }

    public function getDecodedFragments()
    {
        if ($this->decoded_fragments !== false) {
            return $this->decoded_fragments;
        }
        $this->getDecodedFileContent();
        return $this->decoded_fragments;
    }

    public function getDecodedFragmentsString()
    {
        if ($this->decoded_fragments_string !== false) {
            return $this->decoded_fragments_string;
        }
        $this->getDecodedFileContent();
        return $this->decoded_fragments_string;
    }

    public function getNormDecodedFragments()
    {
        if ($this->norm_decoded_fragments !== false) {
            return $this->norm_decoded_fragments;
        }
        $this->getDecodedNormalizedContent();
        return $this->norm_decoded_fragments;
    }

    public function getNormDecodedFragmentsString()
    {
        if ($this->norm_decoded_fragments_string !== false) {
            return $this->norm_decoded_fragments_string;
        }
        $this->getDecodedNormalizedContent();
        return $this->norm_decoded_fragments_string;
    }

    public function getNormDecodedFileContent()
    {
        if ($this->norm_decoded_file_content !== false) {
            return $this->norm_decoded_file_content;
        }
        $this->getDecodedNormalizedContent();
        return $this->norm_decoded_file_content;
    }

    public function getConvertedContent()
    {
        if ($this->converted_file_content !== false) {
            return $this->converted_file_content;
        }
        $this->converted_file_content = '';
        $l_UnicodeContent = Encoding::detectUTFEncoding($this->getContent());
        if ($l_UnicodeContent !== false) {
            if (Encoding::iconvSupported()) {
                $this->converted_file_content = Encoding::convertToCp1251($l_UnicodeContent, $this->getContent());
            }
        }
        $this->converted_file_content = Normalization::normalize($this->converted_file_content);
        return $this->converted_file_content;
    }

    public function getConvertedDecodedContent()
    {
        if (!$this->deobfuscate) {
            $this->converted_decoded = '';
        }
        if ($this->converted_decoded !== false) {
            return $this->converted_decoded;
        }
        $strip = Normalization::strip_whitespace($this->getConvertedContent());
        $deobf_obj = new Deobfuscator($strip, $this->getConvertedContent());
        $deobf_type = $deobf_obj->getObfuscateType($strip);
        if ($deobf_type != '') {
            $this->converted_decoded = $deobf_obj->deobfuscate();
        } else {
            $this->converted_decoded = '';
        }
        $this->converted_decoded = Normalization::normalize($this->converted_decoded);
        return $this->converted_decoded;
    }

    public function getStripDecodedContent()
    {
        if (!$this->deobfuscate) {
            $this->strip_decoded = '';
        }
        if ($this->strip_decoded !== false) {
            return $this->strip_decoded;
        }
        $strip = Normalization::strip_whitespace($this->getContent());
        $deobf_obj = new Deobfuscator($strip, $this->getContent());
        $deobf_type = $deobf_obj->getObfuscateType($strip);
        $this->type = $deobf_type;
        if ($deobf_type != '') {
            $this->strip_decoded = $deobf_obj->deobfuscate();
        } else {
            $this->strip_decoded = '';
        }
        $this->strip_decoded = Normalization::normalize($this->strip_decoded);
        return $this->strip_decoded;
    }
}

class CleanUnit
{

    const URL_GRAB = '~<(script|iframe|object|embed|img|a)\s*[^<]{0,300}?((?:https?:)?\\\\?/\\\\?/(?:www\.)?[-a-zA-Z0-9@:%._\+\~#=]{2,256}\.[a-z]{2,10}\b(?:[-a-zA-Z0-9@:%_\+.\~#?&/=\\\\]*)).{0,300}?</\1>~msi';

    public static function CleanContent(&$file_content, $clean_db, $deobfuscate = false, $unescape = false, $signature_converter = null, $precheck = null, $src_file = null, $demapper = false, &$matched_not_cleaned = null)
    {
        $result = false;
        $content_orig = new ContentObject($file_content, $deobfuscate, $unescape);
        $content = new ContentObject($file_content, $deobfuscate, $unescape);
        $terminate  = false;
        $prev_id = '';

        if (isset($src_file) && $demapper && $deobfuscate) {
            if (self::checkFalsePositives($src_file, $content->getStripDecodedContent(), $content->getType(), $demapper)) {
                return $result;
            }
        }

        foreach ($clean_db->getDB() as $rec_index => $rec) {
            if ($terminate) {
                break;
            }

            if (is_callable($precheck) && !$precheck($rec['mask_type'])) {
                continue;
            }

            switch ($rec['sig_type']) {
                case 4: // normalize first line
                case 5: // match deobfuscated content and replace related obfuscated part
                case 0: // simple match
                    if (isset($signature_converter)) {
                        $inj_sign = $signature_converter->getCutSignature($rec_index);
                    }
                    if (!(isset($inj_sign) && $inj_sign)) {
                        $inj_sign = $rec['sig_match'];
                    }
                    $nohang = 2000; // maximum 2000 iterations (counting all)
                    $nohang2 = 20; //maximum 20 iterations (counting only if content length not changed)
                    $condition_num = 0; // for debug
                    while (
                        (
                            (
                                preg_match('~' . $rec['sig_match'] . '~smi', $content->getContent(), $fnd, PREG_OFFSET_CAPTURE)
                                && $condition_num = 1
                            )
                            || (
                                ($normalized_file_content = $content->getNormalized())
                                && $normalized_file_content != ''
                                && preg_match('~' . $rec['sig_match'] . '~smi', $normalized_file_content, $norm_fnd, PREG_OFFSET_CAPTURE)
                                && $condition_num = 3
                            )
                            || (
                                ($decoded_fragments_string = $content->getDecodedFragmentsString())
                                && $decoded_fragments_string != ''
                                && preg_match('~' . $inj_sign . '~smi', $decoded_fragments_string, $dec_fnd, PREG_OFFSET_CAPTURE)
                                && $condition_num = 2
                            )
                            || (
                                ($norm_decoded_fragments_string = $content->getNormDecodedFragmentsString())
                                && $norm_decoded_fragments_string != ''
                                && preg_match('~' . $inj_sign . '~smi', $norm_decoded_fragments_string, $norm_dec_fnd, PREG_OFFSET_CAPTURE)
                                && $condition_num = 4
                            )
                            || (
                                ($unescaped_norm = $content->getUnescapedNormalized())
                                && $unescaped_norm != ''
                                && preg_match('~' . $rec['sig_match'] . '~smi', $unescaped_norm, $unescaped_norm_fnd, PREG_OFFSET_CAPTURE)
                                && $condition_num = 5
                            )
                            || (
                                ($unescaped = $content->getUnescaped())
                                && $unescaped != ''
                                && preg_match('~' . $rec['sig_match'] . '~smi', $unescaped, $unescaped_fnd, PREG_OFFSET_CAPTURE)
                                && $condition_num = 6
                            )
                        )
                        && ($nohang-- > 0)
                        && ($nohang2 > 0)
                    ) {
                        if (trim($rec['sig_replace']) === '<?php') {
                            $rec['sig_replace'] = '<?php ';
                        }

                        $normal_fnd = isset($norm_fnd[0][0]) ? $norm_fnd[0][0] : false;
                        $unescaped_normal_fnd = isset($unescaped_norm_fnd[0][0]) ? $unescaped_norm_fnd[0][0] : false;
                        $un_fnd = isset($unescaped_fnd[0][0]) ? $unescaped_fnd[0][0] : false;

                        if (!empty($normal_fnd)) {
                            $pos = Normalization::string_pos($file_content, $normal_fnd);
                            if ($pos !== false) {
                                $replace = self::getReplaceFromRegExp($rec['sig_replace'], $norm_fnd);
                                $file_content = self::replaceString($file_content, $replace, $pos[0], $pos[1] - $pos[0] + 1);
                            }
                        }

                        if (!empty($unescaped_normal_fnd)) {
                            $pos = Normalization::string_pos($file_content, $unescaped_normal_fnd, true);
                            if ($pos !== false) {
                                $replace = self::getReplaceFromRegExp($rec['sig_replace'], $unescaped_norm_fnd);
                                $ser = false;
                                $file_content = self::replaceString($file_content, $replace, $pos[0], $pos[1] - $pos[0] + 1, $ser, true);
                            }
                        }

                        if (!empty($un_fnd)) {
                            $pos = Normalization::string_pos($file_content, $un_fnd, true);
                            if ($pos !== false) {
                                $matched_not_cleaned = false;
                                $replace = self::getReplaceFromRegExp($rec['sig_replace'], $unescaped_fnd);
                                $ser = false;
                                $file_content = self::replaceString($file_content, $replace, $pos[0], $pos[1] - $pos[0] + 1, $ser, true);
                            }
                        }

                        if (isset($fnd) && $fnd) {
                            $replace = self::getReplaceFromRegExp($rec['sig_replace'], $fnd);
                            $file_content = self::replaceString($file_content, $replace, $fnd[0][1], strlen($fnd[0][0]));
                        }
                        $decoded_fragments = $content->getDecodedFragments();
                        if (isset($dec_fnd) && $dec_fnd && !empty($decoded_fragments)) {
                            foreach ($decoded_fragments as $obfuscated => $deobfuscated) {
                                if (preg_match('~' . $inj_sign  . '~smi', Normalization::normalize($deobfuscated))) {
                                    $pos = Normalization::string_pos($file_content, $obfuscated);
                                    if ($pos !== false) {
                                        $replace = self::getReplaceFromRegExp($rec['sig_replace'], $dec_fnd);
                                        $file_content = self::replaceString($file_content, $replace, $pos[0], $pos[1] - $pos[0] + 1);
                                    }
                                }
                            }
                        }

                        $norm_decoded_fragments = $content->getNormDecodedFragments();
                        if (isset($norm_dec_fnd) && $norm_dec_fnd && !empty($norm_decoded_fragments)) {
                            foreach ($norm_decoded_fragments as $obfuscated => $deobfuscated) {
                                if (preg_match('~' . $inj_sign  . '~smi', Normalization::normalize($deobfuscated))) {
                                    $pos = Normalization::string_pos($file_content, $obfuscated);
                                    if ($pos !== false) {
                                        $replace = self::getReplaceFromRegExp($rec['sig_replace'], $norm_dec_fnd);
                                        $file_content = self::replaceString($file_content, $replace, $pos[0], $pos[1] - $pos[0] + 1);
                                    }
                                }
                            }
                        }

                        $file_content = preg_replace('~<\?php\s+\?>~smi', '', $file_content);
                        $file_content = preg_replace('~<\?\s+\?>~smi', '', $file_content);
                        $file_content = preg_replace('~\A\s*<\?php\s*\Z~smi', '', $file_content);
                        $file_content = preg_replace('~\A\s*<\?\s*\Z~smi', '', $file_content);
                        $file_content = preg_replace('~\A\s*\?>\s*\Z~smi', '', $file_content);
                        $file_content = preg_replace('~\A\s+<\?~smi', '<?', $file_content);
                        $file_content = preg_replace('~\A\xEF\xBB\xBF\s*\Z~smi', '', $file_content);

                        $empty = (trim($file_content) == '');

                        if ($prev_id !== $rec['id']) {
                            $result[] = ['sig_type' => $rec['sig_type'], 'id' => $rec['id'], 'empty' => $empty];
                        }

                        $matched_not_cleaned = $content_orig->getContent() === $file_content;
                        if(strlen($content->getContent()) === strlen($file_content)) {
                            $nohang2--;
                        }

                        if ($empty) {
                            $terminate = true;
                        }

                        if ($file_content !== $content->getContent()) {
                            unset($content);
                            $content = new ContentObject($file_content, $deobfuscate, $unescape);
                        }
                        $prev_id = $rec['id'];
                    } // end of while


                    break;
                case 1: // match signature and delete file
                    $condition_num = 0; // for debug
                    if (
                        (
                            $rec['sig_match'] == '-'
                            && $condition_num = 1
                        )
                        || (
                            preg_match('~' . $rec['sig_match'] . '~smi', $content->getContent(), $m, PREG_OFFSET_CAPTURE)
                            && $condition_num = 2
                        )
                        || (
                            ($decoded_file_content = $content->getNormDecodedFileContent())
                            && $decoded_file_content != ''
                            && preg_match('~' . $rec['sig_match'] . '~smi', $decoded_file_content, $m, PREG_OFFSET_CAPTURE)
                            && $condition_num = 3
                        )
                        || (
                            ($converted_file_content = $content->getConvertedContent())
                            && $converted_file_content != ''
                            && preg_match('~' . $rec['sig_match'] . '~smi', $converted_file_content, $m, PREG_OFFSET_CAPTURE)
                            && $condition_num = 4
                        )
                        || (
                            ($decoded_converted = $content->getConvertedDecodedContent())
                            && $decoded_converted != ''
                            && preg_match('~' . $rec['sig_match'] . '~smi', $decoded_converted, $m, PREG_OFFSET_CAPTURE)
                            && $condition_num = 5
                        )
                        || (
                            ($unescaped = $content->getUnescaped())
                            && $unescaped != ''
                            && preg_match('~' . $rec['sig_match'] . '~smi', $unescaped, $m, PREG_OFFSET_CAPTURE)
                            && $condition_num = 6
                        )
                        || (
                            preg_match('~' . $rec['sig_match'] . '~smi', $content_orig->getContent(), $m, PREG_OFFSET_CAPTURE)
                            && $condition_num = 2
                        )
                        || (
                            ($content_orig->getContent() !== $content->getContent())
                            && ($decoded_file_content = $content_orig->getNormDecodedFileContent())
                            && $decoded_file_content != ''
                            && preg_match('~' . $rec['sig_match'] . '~smi', $decoded_file_content, $m, PREG_OFFSET_CAPTURE)
                            && $condition_num = 3
                        )
                        || (
                            ($content_orig->getContent() !== $content->getContent())
                            && ($converted_file_content = $content_orig->getConvertedContent())
                            && $converted_file_content != ''
                            && preg_match('~' . $rec['sig_match'] . '~smi', $converted_file_content, $m, PREG_OFFSET_CAPTURE)
                            && $condition_num = 4
                        )
                        || (
                            ($content_orig->getContent() !== $content->getContent())
                            && ($decoded_converted = $content_orig->getConvertedDecodedContent())
                            && $decoded_converted != ''
                            && preg_match('~' . $rec['sig_match'] . '~smi', $decoded_converted, $m, PREG_OFFSET_CAPTURE)
                            && $condition_num = 5
                        )
                        || (
                            ($content_orig->getContent() !== $content->getContent())
                            && ($unescaped = $content_orig->getUnescaped())
                            && $unescaped != ''
                            && preg_match('~' . $rec['sig_match'] . '~smi', $unescaped, $m, PREG_OFFSET_CAPTURE)
                            && $condition_num = 6
                        )
                    ) {
                        $file_content = self::replaceString($file_content, '', $m[0][1], false, $serialized);
                        if ($serialized) {
                            $result[] = ['sig_type' => $rec['sig_type'], 'id' => $rec['id'], 'empty' => false];
                        } else {
                            $result[] = ['sig_type' => $rec['sig_type'], 'id' => $rec['id'], 'empty' => true];
                            $file_content = '';
                            $terminate = true;
                        }
                        $matched_not_cleaned = false;
                    }

                    break;
                case 3: // match signature against normalized file and delete it
                    $condition_num = 0; // for debug
                    if (
                        (
                            preg_match('~' . $rec['sig_match'] . '~smi', $content->getNormalized(), $m, PREG_OFFSET_CAPTURE)
                            && $condition_num = 1
                        )
                        || (
                            ($normalized_decoded = $content->getStripDecodedContent())
                            && $normalized_decoded != ''
                            && preg_match('~' . $rec['sig_match'] . '~smi', $normalized_decoded, $m, PREG_OFFSET_CAPTURE)
                            && $condition_num = 2
                        )
                        || (
                            ($decoded_converted = $content->getConvertedDecodedContent())
                            && $decoded_converted != ''
                            && preg_match('~' . $rec['sig_match'] . '~smi', $decoded_converted, $m, PREG_OFFSET_CAPTURE)
                            && $condition_num = 3
                        )
                        || (
                            preg_match('~' . $rec['sig_match'] . '~smi', $content_orig->getNormalized(), $m, PREG_OFFSET_CAPTURE)
                            && $condition_num = 1
                        )
                        || (
                            ($unescaped_norm = $content->getUnescapedNormalized())
                            && $unescaped_norm != ''
                            && preg_match('~' . $rec['sig_match'] . '~smi', $unescaped_norm, $m, PREG_OFFSET_CAPTURE)
                            && $condition_num = 5
                        )
                        || (
                            ($content_orig->getContent() !== $content->getContent())
                            && ($normalized_decoded = $content_orig->getStripDecodedContent())
                            && $normalized_decoded != ''
                            && preg_match('~' . $rec['sig_match'] . '~smi', $normalized_decoded, $m, PREG_OFFSET_CAPTURE)
                            && $condition_num = 2
                        )
                        || (
                            ($content_orig->getContent() !== $content->getContent())
                            && ($decoded_converted = $content_orig->getConvertedDecodedContent())
                            && $decoded_converted != ''
                            && preg_match('~' . $rec['sig_match'] . '~smi', $decoded_converted, $m, PREG_OFFSET_CAPTURE)
                            && $condition_num = 3
                        )
                        || (
                            ($content_orig->getContent() !== $content->getContent())
                            && ($unescaped_norm = $content_orig->getUnescapedNormalized())
                            && $unescaped_norm != ''
                            && preg_match('~' . $rec['sig_match'] . '~smi', $unescaped_norm, $m, PREG_OFFSET_CAPTURE)
                            && $condition_num = 5
                        )
                    ) {
                        $file_content = self::replaceString($file_content, '', $m[0][1], false, $serialized);
                        if ($serialized) {
                            $result[] = ['sig_type' => $rec['sig_type'], 'id' => $rec['id'], 'empty' => false];
                        } else {
                            $result[] = ['sig_type' => $rec['sig_type'], 'id' => $rec['id'], 'empty' => true];
                            $file_content = '';
                            $terminate = true;
                        }
                        $matched_not_cleaned = false;
                    }
                    break;
            }
        }
        self::removeBlackUrls($file_content, $clean_db, $result, $deobfuscate, $unescape);
        return $result;
    }

    public static function isEmpty($result)
    {
        foreach ($result as $item) {
            if($item['empty'] === true) {
                return true;
            }
        }
        return false;
    }

    public static function getSAItem($result)
    {
        foreach ($result as $item) {
            if($item['empty'] === true && ($item['sig_type'] == 1 || $item['sig_type'] == 3)) {
                return [$item];
            }
        }
        return $result;
    }

    private static function getReplaceFromRegExp($replace, $matches)
    {
        if (!empty($replace)) {
            if (preg_match('~\$(\d+)~smi', $replace)) {
                $replace = preg_replace_callback('~\$(\d+)~smi', function ($m) use ($matches) {
                    return isset($matches[(int)$m[1]]) ? $matches[(int)$m[1]][0] : '';
                }, $replace);
            }
        }
        return $replace;
    }

    private static function checkFalsePositives($l_Filename, $l_Unwrapped, $l_DeobfType, $deMapper)
    {
        if ($l_DeobfType == '') {
            return false;
        }
        switch ($l_DeobfType) {
            case 'Bitrix':
                foreach ($deMapper as $fkey => $fvalue) {
                    if ((strpos($l_Filename, $fkey) !== false) && (strpos($l_Unwrapped, $fvalue) !== false)) {
                        return true;
                    }
                }
                break;
        }
        return false;
    }

    private static function replaceString($file_content, $replace, $pos, $delta_len, &$serialized = false, $escapes = false)
    {
        $size2fix = self::getSerializedLength($file_content, $pos, $size2fix_pos);
        if ($size2fix) {
            $serialized = true;
            $delta_len = $delta_len ?: $size2fix;
            $quotes = $escapes ? substr_count($file_content, '\\', $pos, $delta_len) : 0;
            $file_content = substr_replace($file_content, $replace, $pos, $delta_len);
            $new_length = $size2fix - ($delta_len - strlen($replace)) + $quotes;
            $file_content = substr_replace($file_content, (string)$new_length, $size2fix_pos[0], $size2fix_pos[1]);
        } else {
            $file_content = substr_replace($file_content, $replace, $pos, $delta_len);
        }
        return $file_content;
    }

    private static function getSerializedLength($content, $offset, &$pos)
    {
        $ser_size = false;
        if (preg_match_all('~s:(\d+):\\\\?"~m', substr($content, 0, (int)$offset + 1), $m, PREG_OFFSET_CAPTURE | PREG_SET_ORDER)) {
            foreach ($m as $ser_chunk) {
                $start_chunk = $ser_chunk[0][1] + strlen($ser_chunk[0][0]);
                $end_chunk = $start_chunk + (int)$ser_chunk[1][0];
                if ($start_chunk <= $offset && $end_chunk > $offset) {
                    $ser_size = (int)$ser_chunk[1][0];
                    $pos[0] = $ser_chunk[1][1];
                    $pos[1] = strlen($ser_chunk[1][0]);
                    break;
                }
            }
        }
        return $ser_size;
    }

    private static function removeBlackUrls(&$file_content, $clean_db, &$result, $deobfuscate, $unescape)
    {
        if ($clean_db->getScanDB() === null || !class_exists('ScanCheckers')) {
            return;
        }
        $offset = 0;

        while (self::findBlackUrl($file_content, $fnd, $offset, $clean_db, $id)) {
            $offset += $fnd[0][1] + 1;
            $file_content = self::replaceString($file_content, '', $fnd[0][1], strlen($fnd[0][0]));
            $result[] = ['sig_type' => 2, 'id' => $clean_db->getScanDB()->blackUrls->getSig($id), 'empty' => false];
        }

        unset($content);
        $content = new ContentObject($file_content, $deobfuscate, $unescape);
        $offset = 0;
        while (self::findBlackUrl($content->getNormalized(), $fnd, $offset, $clean_db, $id)) {
            $offset += $fnd[0][1] + strlen($fnd[0][0]);
            $pos = Normalization::string_pos($file_content, $fnd[0][0]);
            if ($pos !== false) {
                $replace = self::getReplaceFromRegExp('', $content->getNormalized());
                $file_content = self::replaceString($file_content, $replace, $pos[0], $pos[1] - $pos[0] + 1);
                $result[] = ['sig_type' => 2, 'id' => $clean_db->getScanDB()->blackUrls->getSig($id), 'empty' => false];
            }
        }

        $offset = 0;
        unset($content);
        $content = new ContentObject($file_content, $deobfuscate, $unescape);
        while (self::findBlackUrl($content->getDecodedFragmentsString(), $fnd, $offset, $clean_db, $id)) {
            $offset += $fnd[0][1] + 1;
            $decoded_fragments = $content->getDecodedFragments();
            if (!empty($decoded_fragments)) {
                foreach ($decoded_fragments as $obfuscated => $deobfuscated) {
                    if (self::findBlackUrl($deobfuscated, $fnd_tmp, 0, $clean_db, $id)) {
                        $pos_obf = strpos($file_content, $obfuscated);
                        $len = strlen($obfuscated);
                        $file_content = self::replaceString($file_content, '', $pos_obf, $len);
                        $result[] = [
                            'sig_type' => 2,
                            'id' => $clean_db->getScanDB()->blackUrls->getSig($id),
                            'empty' => false
                        ];
                    }
                }
            }
            unset($content);
            $content = new ContentObject($file_content, $deobfuscate, $unescape);
        }

        $offset = 0;
        unset($content);
        $content = new ContentObject($file_content, $deobfuscate, $unescape);
        while (self::findBlackUrl($content->getNormDecodedFragmentsString(), $fnd, $offset, $clean_db, $id)) {
            $offset += $fnd[0][1] + 1;
            $norm_decoded_fragments = $content->getNormDecodedFragments();
            if (!empty($norm_decoded_fragments)) {
                foreach ($norm_decoded_fragments as $obfuscated => $deobfuscated) {
                    if (self::findBlackUrl(Normalization::normalize($deobfuscated), $fnd_tmp, 0, $clean_db, $id)) {
                        $pos = Normalization::string_pos($file_content, $obfuscated);
                        if ($pos !== false) {
                            $file_content = self::replaceString($file_content, '', $pos[0], $pos[1] - $pos[0] + 1);
                            $result[] = [
                                'sig_type' => 2,
                                'id' => $clean_db->getScanDB()->blackUrls->getSig($id),
                                'empty' => false
                            ];
                        }
                    }
                }
            }
        }
        unset($content);
        $content = new ContentObject($file_content, $deobfuscate, $unescape);
        $offset = 0;
        while (self::findBlackUrl($content->getUnescaped(), $fnd, $offset, $clean_db, $id)) {
            $offset += $fnd[0][1] + strlen($fnd[0][0]);
            $pos = Normalization::string_pos($file_content, $fnd[0][0]);
            if ($pos !== false) {
                $replace = self::getReplaceFromRegExp('', $content->getUnescaped());
                $file_content = self::replaceString($file_content, $replace, $pos[0], $pos[1] - $pos[0] + 1);
                $result[] = ['sig_type' => 2, 'id' => $clean_db->getScanDB()->blackUrls->getSig($id), 'empty' => false];
            }
        }

        unset($content);
        $content = new ContentObject($file_content, $deobfuscate, $unescape);
        $offset = 0;
        while (self::findBlackUrl($content->getUnescapedNormalized(), $fnd, $offset, $clean_db, $id)) {
            $offset += $fnd[0][1] + strlen($fnd[0][0]);
            $pos = Normalization::string_pos($file_content, $fnd[0][0]);
            if ($pos !== false) {
                $replace = self::getReplaceFromRegExp('', $content->getUnescapedNormalized());
                $file_content = self::replaceString($file_content, $replace, $pos[0], $pos[1] - $pos[0] + 1);
                $result[] = ['sig_type' => 2, 'id' => $clean_db->getScanDB()->blackUrls->getSig($id), 'empty' => false];
            }
        }
        unset($content);
        $content = new ContentObject($file_content, $deobfuscate, $unescape);
    }

    private static function findBlackUrl($item, &$fnd, $offset, $clean_db, &$id)
    {
        while (preg_match(self::URL_GRAB, $item, $fnd, PREG_OFFSET_CAPTURE, $offset)) {
            if (!ScanCheckers::isOwnUrl($fnd[2][0], $clean_db->getScanDB()->getOwnUrl())
                && (isset($clean_db->getScanDB()->whiteUrls) && !ScanCheckers::isUrlInList($fnd[2][0],
                        $clean_db->getScanDB()->whiteUrls->getDb()))
                && ($id = ScanCheckers::isUrlInList($fnd[2][0], $clean_db->getScanDB()->blackUrls->getDb()))
            ) {
                return true;
            }
            $offset = $fnd[0][1] + strlen($fnd[0][0]);
        }
        return false;
    }
}


class FilepathEscaper
{
    public static function encodeFilepath($filepath)
    {
        return str_replace(['\\', "\n", "\r"], ['\\\\', '\\n', '\\r'], $filepath);
    }
    
    public static function decodeFilepath($filepath)
    {
        return preg_replace_callback('~(\\\\+)(.)~', function ($matches) {
            $count = strlen($matches[1]);
            if ($count % 2 === 0) {
                return str_repeat('\\', $count/2) . $matches[2];
            }
            return str_repeat('\\', floor($count/2)) . stripcslashes('\\' . $matches[2]);
        }, $filepath);
    }
    
    public static function encodeFilepathByBase64($filepath)
    {
        return base64_encode($filepath);
    }
    
    public static function decodeFilepathByBase64($filepath_base64)
    {
        return base64_decode($filepath_base64);
    }
}


class LoadSignaturesForClean
{
    private $sig_db             = [];
    private $sig_db_meta_info   = [];
    private $advanced_signs      = ['-js.', '.phish.'];
    private $advanced_ids        = [];
    private $sig_db_location    = 'internal';
    private $scan_db            = null;
    public  $_FlexDBShe         = [];

    private $deMapper           = '';

    public function __construct($signature, $avdb, $full = true)
    {

        $this->sig_db_meta_info = [
            'build-date'    => 'n/a',
            'version'       => 'n/a',
            'release-type'  => 'n/a',
        ];

        if ($signature) {
            $db_raw                 = explode("\n", trim(base64_decode(trim($signature))));
            $this->sig_db_location  = 'external';
        } elseif (file_exists($avdb)) {
            $db_raw                 = explode("\n", trim(@gzinflate(base64_decode(str_rot13(strrev(trim(file_get_contents($avdb))))))));
            $this->sig_db_location  = 'external';
            echo "Loaded External DB\n";
        } else {
            InternalCleanSignatures::init();
            $db_raw = explode("\n", base64_decode(strrev(str_rot13(gzinflate(base64_decode(InternalCleanSignatures::$db))))));
        }

        $fatal = false;

        foreach ($db_raw as $line) {
            $line = trim($line);
            if ($line == '') {
                continue;
            }

            $parsed = preg_split("/\t+/", $line);

            if ($parsed[0] == 'System-Data') {
                $meta_info                              = json_decode($parsed[3], true);
                $this->sig_db_meta_info['build-date']   = $meta_info['build-date'];
                $this->sig_db_meta_info['version']      = $meta_info['version'];
                $this->sig_db_meta_info['release-type'] = $meta_info['release-type'];
            } else {
                $db_item['id']          = $parsed[0];
                $db_item['mask_type']   = $parsed[1];

                $db_item['mask_type']   = str_replace('*.', '.*\.', $db_item['mask_type']);
                $db_item['mask_type']   = str_replace('PROCU_ANY', '.*', $db_item['mask_type']);
                $db_item['mask_type']   = str_replace('PROCU_PHP', '\.(suspected|vir|txt|phtml|pht|php\d*|php\..*)$', $db_item['mask_type']);
                $db_item['mask_type']   = str_replace('PROCU_HTML', '\.(htm|html|tpl|inc)$', $db_item['mask_type']);
                $db_item['mask_type']   = str_replace('PROCU_JS', '\.(js)$', $db_item['mask_type']);
                $db_item['mask_type']   = str_replace('PROCU_SS', '.*', $db_item['mask_type']);

                $db_item['sig_type']    = (int)$parsed[2];
                $db_item['sig_match']   = str_replace('~', '\~', trim($parsed[3]));
                $db_item['sig_match']   = str_replace('@<v>@', '\$[a-zA-Z0-9_]+', $db_item['sig_match']);
                $db_item['sig_match']   = str_replace('@<id>@', '[a-zA-Z0-9_]+', $db_item['sig_match']);
                $db_item['sig_match']   = str_replace('@<d>@', '\d+', $db_item['sig_match']);
                $db_item['sig_match']   = str_replace('@<qq>@', '[\'"]', $db_item['sig_match']);
                $db_item['sig_match']   = str_replace('@<q>@', '[\'"]{0,1}', $db_item['sig_match']);
                $db_item['sig_replace'] = trim(@$parsed[4]);

                if ($db_item['sig_match'] === '') {
                    throw new Exception($line);
                }

                $this->_FlexDBShe[] = $db_item['sig_match'];  //rescan signs
                if (!$full && $this->needSkip($db_item['id'])) {
                    $this->advanced_ids[] = AibolitHelpers::myCheckSum($db_item['sig_match']);
                    continue;
                }
                $this->sig_db[] = $db_item;
                if (preg_match('~' . $db_item['mask_type'] . '~smi', 'Lorem ipsum') === false) {
                    echo $db_item['mask_type'] . "\n";
                    $fatal = true;
                }

                if (preg_match('~' . $db_item['sig_match'] . '~smi', 'Lorem ipsum') === false) {
                    echo $db_item['sig_match'] . "\n";
                    $fatal = true;
                }
            }
        }

        if ($fatal) {
            throw new Exception("Errors in regexp\n\n");
        }
        LoadSignaturesForScan::optSig($this->_FlexDBShe, false, 'AibolitHelpers::myCheckSum');
        $this->deMapper = @unserialize(@base64_decode($this->deMapper));
    }

    public function getDBLocation()
    {
        return $this->sig_db_location;
    }

    public function getDB()
    {
        return $this->sig_db;
    }

    public function getDBMetaInfo()
    {
        return $this->sig_db_meta_info;
    }

    public function getDeMapper()
    {
        return is_array($this->deMapper) ? $this->deMapper : false;
    }

    public function getScanDB()
    {
        return $this->scan_db;
    }

    public function setScanDB($db)
    {
        $this->scan_db = $db;
    }

    public function needSkipId($id) {
        return in_array($id, $this->advanced_ids);
    }

    private function needSkip($name) {
        foreach ($this->advanced_signs as $pat) {
            if (strpos($name, $pat) !== false) {
                return true;
            }
        }
        return false;
    }
}


class InternalCleanSignatures
{
    public static $db;

    public static function init()
    {
        $i000101010010110010 = ''; //This variable will be filled by the building script.
        self::$db = $i000101010010110010;
    }
}

class SignatureConverter {
    
    private $signatures         = [];
    private $cuted_signatures   = [];
    private $count_convert      = 0;
    
    public function __construct($clean_db) 
    {
        $this->signatures = $clean_db;
    }
    
    public function getCutSignature($sig_index) 
    {
        if (!isset($this->signatures[$sig_index])) {
            return false;
        }
        $signature = $this->signatures[$sig_index]['sig_match'];
        if (!isset($this->cuted_signatures[$sig_index])) {
            $cuted_signature = $this->cut($signature);
            if ($signature != $cuted_signature) {
                $this->cuted_signatures[$sig_index] = $cuted_signature;
            }
            else {
                $this->cuted_signatures[$sig_index] = false;
            }
            return $cuted_signature;
        }
        elseif ($this->cuted_signatures[$sig_index] === false) {
            return $signature;
        }
        return $this->cuted_signatures[$sig_index];
    }
    
    public function getCountConverted()
    {
        return $this->count_convert;
    }

    // /////////////////////////////////////////////////////////////////////////
    
    private function cut($signature)
    {
        $this->count_convert++;
        $regexp = '^'
        . '(?:\\\A)?'
        . '(?:\\\s\*)?'
        . '<\\\\\?'
        . '(?:\\\s\*)?'
        . '(?:\\\s\+)?'            
        . '(?:'
            .'php'
            . '|\(\?:php\)\?'
            . '|='
            . '|\(\?:php\|=\)\??'
            . '|\(\?:=\|php\)\??'
        . ')?'
        . '(?:\\\s\+)?'
    
        . '(.*?)'

        . '(?:\(\??:?\|?)?'
        . '\\\\\?>'
        . '(?:\\\s\*)?'
        . '(?:\|?\\\Z\)?)?'
        . '$';
    
        return preg_replace('~' . $regexp . '~smi', '\1', $signature);
    }
}

class ProcuInput
{
    const JSON                 = 1;
    const PLAIN                = 2;
    const CSV                  = 3;

    const NEED_SECTIONS         = ['php_malware', 'cloudhash', 'js_malware', 'phishing', 'adware', 'p', 'j', 'c', 'h', 'a'];

    public static function load($filename, $type, $input_fn_b64_encoded = false, $blacked_by_cloud_list_file = null, $check_exists = true)
    {
        if (!file_exists($filename)) {
            echo 'Input file is not found' . PHP_EOL;
            die(2);
        }
        if (isset($blacked_by_cloud_list_file) && !file_exists($blacked_by_cloud_list_file)) {
            echo 'Input blacklist file not found' . PHP_EOL;
            die(2);
        }

        if (isset($blacked_by_cloud_list_file)) {
            foreach (self::loadPlain($blacked_by_cloud_list_file) as $item) {
                $item = $input_fn_b64_encoded ? FilepathEscaper::decodeFilepathByBase64($item) : $item;
                if ($check_exists && !file_exists($item)) {
                    continue;
                }
                yield [$item, true];
            }
        }

        if ($type === self::JSON) {
            foreach (self::loadJSON($filename) as $group => $files) {
                if (!in_array($group, self::NEED_SECTIONS, true)) {
                    continue;
                }
                if ($group === 'cloudhash') {
                    foreach ($files as $item) {
                        $item['fn'] = $input_fn_b64_encoded ? FilepathEscaper::decodeFilepathByBase64($item['fn']) : $item['fn'];
                        if ($check_exists && !file_exists($item['fn'])) {
                            continue;
                        }
                        yield [$item['fn'], true];
                    }
                } else {
                    foreach ($files as $item) {
                        $item['fn'] = $input_fn_b64_encoded ? FilepathEscaper::decodeFilepathByBase64($item['fn']) : $item['fn'];
                        if ($check_exists && !file_exists($item['fn'])) {
                            continue;
                        }
                        yield [$item['fn'], false];
                    }
                }
            }
        } else if ($type === self::PLAIN) {
            foreach (self::loadPlain($filename) as $item) {
                $item = $input_fn_b64_encoded ? FilepathEscaper::decodeFilepathByBase64($item) : $item;
                if ($check_exists && !file_exists($item)) {
                    continue;
                }
                yield [$item, false];
            }
        } else if ($type === self::CSV) {
            foreach (self::loadCSV($filename) as $item) {
                if (!in_array($item[0], self::NEED_SECTIONS, true)) {
                    continue;
                }
                if ($item[0] === 'c') {
                    $item[1] = $input_fn_b64_encoded ? FilepathEscaper::decodeFilepathByBase64($item[1]) : $item[1];
                    if ($check_exists && !file_exists($item[1])) {
                        continue;
                    }
                    yield [$item[1], true];
                } else {
                    $item[1] = $input_fn_b64_encoded ? FilepathEscaper::decodeFilepathByBase64($item[1]) : $item[1];
                    if ($check_exists && !file_exists($item[1])) {
                        continue;
                    }
                    yield [$item[1], false];
                }
            }
        }
    }

    private static function loadJSON($filename)
    {
        $list = json_decode(file_get_contents($filename), true);
        return $list;
    }

    private static function loadPlain($filename)
    {
        $list = new SplFileObject($filename, 'r');
        $list->setFlags(SplFileObject::DROP_NEW_LINE | SplFileObject::SKIP_EMPTY | SplFileObject::READ_AHEAD);
        return $list;
    }

    private static function loadCSV($filename)
    {
        $list = new SplFileObject($filename, 'r');
        $list->setFlags(SplFileObject::DROP_NEW_LINE | SplFileObject::SKIP_EMPTY | SplFileObject::READ_CSV | SplFileObject::READ_AHEAD);
        return $list;
    }

    public static function getCount($filename, $type, $blacked_by_cloud_list_file = null)
    {
        if (!file_exists($filename)) {
            echo 'Input file is not found' . PHP_EOL;
            die(2);
        }
        if (isset($blacked_by_cloud_list_file) && !file_exists($blacked_by_cloud_list_file)) {
            echo 'Input blacklist file not found' . PHP_EOL;
            die(2);
        }
        $c = 0;
        if ($type == self::JSON) {
            $list = json_decode(file_get_contents($filename), true);
            $c = isset($list['summary']['counters']['cloudhash']) ? $list['summary']['counters']['cloudhash'] : 0;
            $c += $list['summary']['counters']['critical_php'] + $list['summary']['counters']['critical_js'];
        } else if ($type == self::PLAIN) {
            $list = new SplFileObject($filename, 'r');
            $list->setFlags(SplFileObject::DROP_NEW_LINE | SplFileObject::SKIP_EMPTY | SplFileObject::READ_AHEAD);
            $c = iterator_count($list);
            unset($list);
            if (isset($blacked_by_cloud_list_file)) {
                $list = new SplFileObject($filename, 'r');
                $list->setFlags(SplFileObject::DROP_NEW_LINE | SplFileObject::SKIP_EMPTY | SplFileObject::READ_AHEAD);
                $c += iterator_count($list);
                unset($list);
            }
        } else if ($type == self::CSV) {
            $list = new SplFileObject($filename, 'r');
            $list->setFlags(SplFileObject::DROP_NEW_LINE | SplFileObject::SKIP_EMPTY | SplFileObject::READ_CSV | SplFileObject::READ_AHEAD);
            foreach($list as $item) {
                if ($item[0] === 'v') {
                    continue;
                }
                $c++;
            }
            unset($list);
        }
        return $c;
    }
}


class ProcuReport
{
    private $json_name = null;
    private $csv_name = null;
    private $extended = false;
    private $csv = null;

    private $report = null;
    private $additional = null;


    public function __construct($json_name, $extended = false, $csv_name = null, $additional = null)
    {
        $this->json_name = $json_name;
        $this->csv_name = $csv_name;
        $this->extended = $extended;
        $this->additional = $additional;

        if (($this->json_name && !$this->csv_name) || $this->extended) {
            $this->report = [];
        }

        if($this->json_name) {
            @unlink($this->json_name);
            @unlink($this->json_name . '.tmp');
        }

        if($this->csv_name) {
            @unlink($this->csv_name);
            @unlink($this->csv_name . '.tmp');
            $this->csv = fopen($this->csv_name . '.tmp', 'a+');
        }
    }

    public function addToReport($file_report, $rescan = null)
    {
        $file_report = $this->normalizeResult($file_report);
        if (!$file_report) {
            return;
        }
        if (isset($rescan)) { //rescan correction
            foreach ($file_report as &$row) {
                if ($row['e'] === REPORT_ERROR_FILE_NONE_WRITE && in_array($row['s'], ['cld', 'SMW-HEUR-ELF'], true)) {
                    $row['r'] = 1;
                } else if (in_array($row['e'], [REPORT_ERROR_FILE_TOO_BIG, REPORT_ERROR_FILE_READING_ERROR], true)) {
                    $row['r'] = 1;
                } else {
                    $row['r'] = $rescan;
                }
            }
            unset($row);
        }
        if ($this->csv_name) {
            foreach ($file_report as $row) {
                $line = [$row['f'], $row['e'], $row['d'] ?? '', $row['s'], $row['t'] ?? ''];
                if (isset($row['r'])) {
                    $line[] = $row['r'];
                }
                fputcsv($this->csv, $line);
            }
        }
        if ($this->json_name && !$this->csv_name) {
            $this->report = array_merge($this->report, $file_report);
        }
    }

    private function normalizeResult($result)
    {
        $delete_list = [];
        $errs = [];
        $errs_sigs = [];
        $normalized = [];

        for ($i = 0, $iMax = count($result); $i < $iMax; $i++) {
            if (($result[$i]['e'] === REPORT_ERROR_FILE_CLEANEDUP)
                && ($result[$i]['d'] !== REPORT_TYPE_OP_INJECTION_REMOVE)
            ) {
                $delete_list[] = $result[$i]['f'];
            }

            if ($result[$i]['e'] > REPORT_ERROR_FILE_CLEANEDUP) {
                $errs[] = $result[$i]['f'];
                $errs_sigs[$result[$i]['f']] = $result[$i]['s'];
            }
        }

        for ($i = 0, $iMax = count($result); $i < $iMax; $i++) {
            if ($result[$i]['e'] === REPORT_ERROR_FILE_CLEANEDUP
                && $result[$i]['d'] === REPORT_TYPE_OP_INJECTION_REMOVE
                && in_array($result[$i]['f'], $delete_list)
            ) {
                continue;
            }

            if (($result[$i]['e'] === REPORT_ERROR_FILE_CLEANEDUP)
                && in_array($result[$i]['f'], $errs)
            ) {
                continue;
            }

            if ($result[$i]['e'] > REPORT_ERROR_FILE_CLEANEDUP
                && in_array($result[$i]['f'], $errs, true)
                && $errs_sigs[$result[$i]['f']] !== $result[$i]['s']
            ) {
                continue;
            }

            $normalized[] = $result[$i];
        }
        return $normalized;
    }

    public function write()
    {
        if ($this->extended && isset($this->additional)) {
            $this->report = [
                'result'    => $this->report,
                'summary'   => $this->additional,
            ];
        }
        if (is_array($this->report) && $this->json_name) {
            @file_put_contents($this->json_name . '.tmp', json_encode($this->report));
            rename($this->json_name . '.tmp', $this->json_name);
        }
        if ($this->csv_name && $this->csv) {
            fflush($this->csv);
            fclose($this->csv);
            rename($this->csv_name . '.tmp', $this->csv_name);
        }
    }
}


class ProcuBackup
{
    private $backup_list = [];
    private $backup_dir = '';

    public function __construct($backup_dir)
    {
        $this->backup_dir = $backup_dir;
        @mkdir($backup_dir, 0770, true);
    }

    public function addFile($src_file)
    {
        // backup only once
        if (in_array($src_file, $this->backup_list)) {
            return;
        }

        $this->backup_list[] = $src_file;
        $new_file = preg_replace('|^/|', '', preg_replace('|^\.|', '', $src_file));
        @mkdir($this->backup_dir . '/' . dirname($new_file), 0750, true);
        copy($src_file, $this->backup_dir . '/' . $new_file);
    }

    public function createZip()
    {
        $safe_name = preg_replace('|[^A-Za-z0-9_\-\.]+|', '_', __DIR__);
        $this->zip($this->backup_dir, $this->backup_dir . '/backup_' . $safe_name . '.zip');
    }

    private function zip($source, $destination)
    {
        if (!extension_loaded('zip') || !file_exists($source)) {
            return false;
        }

        $zip = new ZipArchive();
        if (!$zip->open($destination, ZipArchive::CREATE)) {
            return false;
        }

        $source = str_replace('\\', '/', realpath($source));

        if (is_dir($source) === true) {
            $files = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($source), RecursiveIteratorIterator::SELF_FIRST);

            foreach ($files as $file) {
                $file = str_replace('\\', '/', $file);

                // Ignore "." and ".." folders
                if (in_array(substr($file, strrpos($file, '/') + 1), ['.', '..'])) {
                    continue;
                }

                $file = realpath($file);

                if (is_dir($file) === true) {
                    $zip->addEmptyDir(str_replace($source . '/', '', $file . '/'));
                } elseif (is_file($file) === true) {
                    $zip->addFromString(str_replace($source . '/', '', $file), file_get_contents($file));
                }
            }
        } elseif (is_file($source) === true) {
            $zip->addFromString(basename($source), file_get_contents($source));
        }

        return $zip->close();
    }
}


/*
 * Class for Procu which can parse cli command
 */
class ProcuCliParse extends CliParse
{
    /**
     * @var array Project options for cli
     */
    protected $opts = [
        ProcuConfig::PARAM_DEOBFUSCATE          => ['short' => 'd',  'long' => 'deobfuscate',               'needValue' => false],
        ProcuConfig::PARAM_SOFT                 => ['short' => 's',  'long' => 'soft',                      'needValue' => false],
        ProcuConfig::PARAM_NOBACKUP             => ['short' => 'n',  'long' => 'nobackup',                  'needValue' => false],
        ProcuConfig::PARAM_TEST                 => ['short' => 't',  'long' => 'test',                      'needValue' => false],
        ProcuConfig::PARAM_LIST                 => ['short' => 'l',  'long' => 'list',                      'needValue' => true],
        ProcuConfig::PARAM_BACKUP               => ['short' => 'b',  'long' => 'backup',                    'needValue' => true],
        ProcuConfig::PARAM_RESULT               => ['short' => 'r',  'long' => 'result',                    'needValue' => true],
        ProcuConfig::PARAM_CSV_RESULT           => ['short' => '',   'long' => 'csv_result',                'needValue' => true],
        ProcuConfig::PARAM_PROGRESS             => ['short' => 'p',  'long' => 'progress',                  'needValue' => true],
        ProcuConfig::PARAM_LOG                  => ['short' => 'g',  'long' => 'log',                       'needValue' => true],
        ProcuConfig::PARAM_AVDB                 => ['short' => 'c',  'long' => 'avdb',                      'needValue' => true],
        ProcuConfig::PARAM_DECODE               => ['short' => '',   'long' => 'decode',                    'needValue' => true],
        ProcuConfig::PARAM_JSON_LIST            => ['short' => 'j',  'long' => 'json_list',                 'needValue' => true],
        ProcuConfig::PARAM_CSV_LIST             => ['short' => '',   'long' => 'csv_list',                  'needValue' => true],
        ProcuConfig::PARAM_USERNAME             => ['short' => '',   'long' => 'username',                  'needValue' => true],
        ProcuConfig::PARAM_EXTENDED_REPORT      => ['short' => 'e',  'long' => 'extended_report',           'needValue' => false],
        ProcuConfig::PARAM_BLACKLIST            => ['short' => '',   'long' => 'black-list',                'needValue' => true],
        ProcuConfig::PARAM_SIGNATURE            => ['short' => '',   'long' => 'signature',                 'needValue' => true],
        ProcuConfig::PARAM_INPUT_FN_B64         => ['short' => '',   'long' => 'input-fn-b64-encoded',      'needValue' => false],
        ProcuConfig::PARAM_FORCIBLY_CLEANUP     => ['short' => '',   'long' => 'forcibly_cleanup',          'needValue' => false],
        ProcuConfig::PARAM_SIZE                 => ['short' => '',   'long' => 'size',                      'needValue' => true],
        ProcuConfig::PARAM_RESCAN               => ['short' => '',   'long' => 'rescan',                    'needValue' => false],
        ProcuConfig::PARAM_DONT_USE_UMASK       => ['short' => '',   'long' => 'do-not-use-umask',          'needValue' => false],
        ProcuConfig::PARAM_STANDART_ONLY        => ['short' => '',   'long' => 'standard-only',             'needValue' => false],
    ];

    /**
     * Parse comand line params
     *
     * @return void
     */
    protected function parse()
    {
        foreach ($this->opts as $configName => $params) {
            $default    = $params['needValue'] ? $this->config->get($configName) : null;
            $result     = $this->getParamValue($configName, $default);
            if (!$params['needValue'] && $result === false) { // $result === false because opt without value
                $result = true;
            }
            $this->config->set($configName, $result);
        }

        if (($opt_file_size = $this->config->get(ProcuConfig::PARAM_SIZE)) !== false
            && ($opt_file_size = (int)filter_var($opt_file_size, FILTER_SANITIZE_NUMBER_INT)) > 0
        ) {
            $this->config->set(ProcuConfig::PARAM_SIZE, $opt_file_size * 1024 * 1024);
        }
    }
}


class ProcuConfig extends Config
{
    const AI_DOUBLECHECK_FILE       = 'AI-BOLIT-DOUBLECHECK.php';
    const PROCU_BACKUP_F_DIR        = 'backup_%%TIME%%';

    const PARAM_DEOBFUSCATE         = 'deobfuscate';
    const PARAM_SOFT                = 'soft';
    const PARAM_NOBACKUP            = 'nobackup';
    const PARAM_TEST                = 'test';
    const PARAM_LIST                = 'list';
    const PARAM_BACKUP              = 'backup';
    const PARAM_RESULT              = 'result';
    const PARAM_CSV_RESULT          = 'csv_result';
    const PARAM_PROGRESS            = 'progress';
    const PARAM_LOG                 = 'log';
    const PARAM_AVDB                = 'avdb';
    const PARAM_DECODE              = 'decode';
    const PARAM_JSON_LIST           = 'json_list';
    const PARAM_CSV_LIST            = 'csv_list';
    const PARAM_USERNAME            = 'username';
    const PARAM_EXTENDED_REPORT     = 'extended_report';
    const PARAM_BLACKLIST           = 'black-list';
    const PARAM_SIGNATURE           = 'signature';
    const PARAM_INPUT_FN_B64        = 'input-fn-b64-encoded';
    const PARAM_FORCIBLY_CLEANUP    = 'forcibly_cleanup';
    const PARAM_SIZE                = 'size';
    const PARAM_RESCAN              = 'rescan';
    const PARAM_DONT_USE_UMASK      = 'do-not-use-umask';
    const PARAM_STANDART_ONLY       = 'standard-only';

    /**
     * @var array Default config
     */
    protected $defaultConfig = [
        self::PARAM_DEOBFUSCATE         => false,
        self::PARAM_SOFT                => false,
        self::PARAM_NOBACKUP            => false,
        self::PARAM_TEST                => false,
        self::PARAM_LIST                => self::AI_DOUBLECHECK_FILE,
        self::PARAM_BACKUP              => self::PROCU_BACKUP_F_DIR,
        self::PARAM_RESULT              => 'procu_result_file.json',
        self::PARAM_CSV_RESULT          => null,
        self::PARAM_PROGRESS            => 'procu_progress_file.json',
        self::PARAM_LOG                 => 'AI-PROCU_%%TIME%%.log',
        self::PARAM_AVDB                => '',
        self::PARAM_DECODE              => null,
        self::PARAM_JSON_LIST           => null,
        self::PARAM_CSV_LIST            => null,
        self::PARAM_USERNAME            => null,
        self::PARAM_EXTENDED_REPORT     => false,
        self::PARAM_BLACKLIST           => null,
        self::PARAM_SIGNATURE           => '',
        self::PARAM_INPUT_FN_B64        => false,
        self::PARAM_FORCIBLY_CLEANUP    => false,
        self::PARAM_SIZE                => 15,  // max filesize in MB
        self::PARAM_RESCAN              => false,
        self::PARAM_DONT_USE_UMASK      => false,
        self::PARAM_STANDART_ONLY       => false,
    ];

    /**
     * Construct
     */
    public function __construct()
    {
        $this->setDefaultConfig($this->defaultConfig);
    }
}


class ProcuFile
{
    private $fhandle;
    private $size;
    private $path;
    private $mode_file;
    private $mode_dir;
    private $is_elf;
    private $truncate;
    private $dir_perms_changed = false;
    private $file_perms_changed = false;
    private $can_be_written = false;
    private $can_be_deleted = false;

    public function __construct($filepath, $truncate)
    {
        $stat = stat($filepath);
        $stat_dir = stat(dirname($filepath));
        $this->size = $stat['size'];
        $this->path = $filepath;
        $this->mode_file = (int)sprintf('%d', 0777 & $stat['mode']);
        $this->mode_dir = (int)sprintf('%d', 0777 & $stat_dir['mode']);
        $this->is_elf = $this->checkElf();
        $this->truncate = $truncate;
        $this->can_be_written = is_writable($this->path);
        $this->can_be_deleted = is_writable(dirname($this->path));
    }

    public function getWritablePermissions()
    {
        if (($this->is_elf || !$this->truncate) && !is_writable(dirname($this->path))) {
            if (chmod(dirname($this->path), (int)sprintf("%d", 0b111000000 | $this->mode_dir))) {
                $this->dir_perms_changed = true;
                $this->can_be_deleted = is_writable(dirname($this->path));
            }
        }
        if (!is_writable($this->path)) {
            if (chmod($this->path, (int)sprintf("%d", 0b110000000 | $this->mode_file))) {
                $this->file_perms_changed = true;
                $this->can_be_written = is_writable($this->path);
            }
        }
    }

    public function open()
    {
        if (($this->fhandle = @fopen($this->path, 'r+b')) === false) {
            $this->can_be_written = false;
            $this->fhandle = @fopen($this->path, 'rb');
        }
    }

    public function read()
    {
        return @fread($this->fhandle, $this->size);
    }

    public function close()
    {
        @fclose($this->fhandle);
        $this->fhandle = null;
    }

    public function getSize()
    {
        return $this->size;
    }

    public function restorePermissions()
    {
        if ($this->dir_perms_changed) {
            if (chmod(dirname($this->path), $this->mode_dir)) {
                $this->dir_perms_changed = false;
                $this->can_be_deleted = is_writable(dirname($this->path));
            }
        }
        if ($this->file_perms_changed) {
            if (chmod($this->path, $this->mode_file)) {
                $this->file_perms_changed = false;
                $this->can_be_written = is_writable($this->path);
            }
        }
    }

    public function truncate()
    {
        @ftruncate($this->fhandle, 0);
        @rewind($this->fhandle);
        return @file_get_contents($this->path) === '';
    }

    public function remove()
    {
        @unlink($this->path);
        return !file_exists($this->path);
    }

    public function rewrite($new_content)
    {
        if (!is_writable($this->path)) {
            return false;
        }
        $old_content = @file_get_contents($this->path);
        if ($this->truncate()) {
            @fwrite($this->fhandle, $new_content);
        }
        $new_content = @file_get_contents($this->path);
        $is_changed = ($old_content !== $new_content) && ($old_content !== '') && ($old_content !== false);
        return $is_changed;
    }

    public function checkElf()
    {
        $firstFourBytes = @file_get_contents($this->path, false, null, 0, 4);
        return (strpos($firstFourBytes, chr(127) . 'ELF') === 0);
    }

    public function getPath()
    {
        return $this->path;
    }

    public function isElf()
    {
        return $this->is_elf;
    }
}


class ProcuOutput
{
    const PROCU_MAX_FILE_NAME = 100;
    private static $output = '';
    private static $progress_file = '';


    public static function setProgress($progress_file)
    {
        self::$progress_file = $progress_file;
    }

    public static function printFilename($file_name)
    {
        $print_file = $file_name;
        if (strlen($print_file) > self::PROCU_MAX_FILE_NAME) {
            $print_file = '...' . substr($print_file, -self::PROCU_MAX_FILE_NAME, self::PROCU_MAX_FILE_NAME);
        }

        self::$output .= $print_file . "\t";
    }

    public static function addToOutput($str)
    {
        self::$output .= $str;
    }

    public static function getPlainOutput()
    {
        return str_replace(
            [RED_COLOR, GREEN_COLOR, OFF_COLOR, "\t"]
            , ['', '', '', ' ']
            , self::$output
        );
    }

    public static function getCliOutput()
    {
        return self::$output;
    }

    public static function la_fin($str, $err_code = 1, $report = null)
    {
        @unlink(self::$progress_file);

        if ($err_code) {
            die($str);
        }

        if ($report) {
            $report->write();
        }
        die(0);
    }
}


class ProcuStat
{
    private static $stat = [];

    public static function addId($id)
    {
        self::$stat[$id] = isset(self::$stat[$id]) ? self::$stat[$id] + 1 : 1;
    }

    public static function getStat()
    {
        arsort(self::$stat);
        return self::$stat;
    }
}


class StringToStreamWrapper {

    const WRAPPER_NAME = 'var';

    private static $_content;
    private $_position;

    /**
     * Prepare a new memory stream with the specified content
     * @return string
     */
    public static function prepare($content)
    {
        if (!in_array(self::WRAPPER_NAME, stream_get_wrappers())) {
            stream_wrapper_register(self::WRAPPER_NAME, get_class());
        }
        self::$_content = $content;
    }

    public function stream_open($path, $mode, $options, &$opened_path)
    {
        $this->_position = 0;
        return true;
    }

    public function stream_read($count)
    {
        $ret = substr(self::$_content, $this->_position, $count);
        $this->_position += strlen($ret);
        return $ret;
    }

    public function stream_stat()
    {
        return [];
    }

    public function stream_eof()
    {
        return $this->_position >= strlen(self::$_content);
    }

    public function stream_set_option($option , $arg1, $arg2 )
    {
        return true;
    }
}

class Normalization
{
    const MAX_ITERATION = 10;

    private static $confusables = "";

    private static function need_skip($string, $i)
    {
        $chars = " @\r\n\t.\"'";
        if (isset($string[$i]) && strpos($chars, $string[$i]) !== false) {
            $i++;
            return $i;
        }
        return false;
    }

    private static function match_shortopen_tag($string, $i, $needle, $j)
    {
        $pos_needle = false;
        $pos_string = false;
        if ((isset($needle[$j - 2]) && isset($string[$i - 2]))
            && (($needle[$j - 2] == '<') && ($string[$i - 2] == '<'))
            && (isset($needle[$j - 1]) && isset($string[$i - 1]))
            && ($needle[$j - 1] == '?' && $string[$i - 1] == '?')
        ) {
            $pos_needle = $j;
            $pos_string = $i;
        }
        if ($pos_needle && (isset($needle[$pos_needle]) && $needle[$pos_needle] === 'p')
            && (isset($needle[$pos_needle + 1]) && $needle[$pos_needle + 1] === 'h')
            && (isset($needle[$pos_needle + 2]) && $needle[$pos_needle + 2] === 'p')
        ) {
            $pos_needle = $pos_needle + 3;
        }

        if ($pos_string && (isset($string[$pos_string]) && $string[$pos_string] === 'p')
            && (isset($string[$pos_string + 1]) && $string[$pos_string + 1] === 'h')
            && (isset($string[$pos_string + 2]) && $string[$pos_string + 2] === 'p')
        ) {

            $pos_string = $pos_string + 3;
        }
        return [$pos_needle, $pos_string];
    }

    public static function unescape($string, $save_length = false) {
        if (strpos($string, '\\\'') === false && strpos($string, '\\"') === false && strpos($string, '\\/') === false) {
            return $string;
        }
        $strippedStr = stripcslashes($string);
        if (!$save_length) {
            return $strippedStr;
        } else {
            $strippedStr = self::extend_string_with_spaces($string, $strippedStr);
            return $strippedStr;
        }
    }

    public static function strip_whitespace($string, $save_length = false)
    {
        StringToStreamWrapper::prepare($string);
        $strippedStr = @php_strip_whitespace(StringToStreamWrapper::WRAPPER_NAME . '://');

        if (!$save_length) {
            return $strippedStr;
        } else {
            $strippedStr = self::extend_string_with_spaces($string, $strippedStr);
            return $strippedStr;
        }
    }

    public static function normalize($string, $save_length = false)
    {
        $search  = [ ' ;', ' =', ' ,', ' .', ' (', ' )', ' {', ' }', '; ', '= ', ', ', '. '
            , '( ', '( ', '{ ', '} ', ' !', ' >', ' <', ' _', '_ ', '< ',  '> ', ' $', ' %', '% '
            , '# ', ' #', '^ ', ' ^', ' &', '& ', ' ?', '? '];
        $replace = [  ';',  '=',  ',',  '.',  '(',  ')',  '{',  '}', ';',  '=',  ',',  '.'
            ,  '(',   ')', '{',  '}',   '!',  '>',  '<',  '_', '_',  '<',   '>',   '$',  '%', '%'
            ,  '#',   '#', '^',   '^',  '&', '&',   '?', '?'];

        $bad_chars = ['配', '内'];
        $string = str_replace($bad_chars, ' ', $string);
        $string = str_replace("\xEF\xBB\xBF", '   ', $string); //BOM

        $last_char = $string[-1] ?? '';

        if (!$save_length) {
            $string = str_replace('@', '', $string);
            $string = preg_replace('~\s+~msi', ' ', $string);
            $string = str_replace($search, $replace, $string);
            if (in_array($last_char, ["\r", "\n"]) && isset($string[-1]) && $string[-1] !== $last_char) {
                $string .= $last_char;
            }
        }

        $string = preg_replace_callback('~\bchr\(\s*([0-9a-fA-FxX\^]+)\s*\)~', function($m) use ($save_length) {
            if (strpos($m[1], '^') !== false) {
                $m[1] = Helpers::calc($m[1]);
            }
            if ($save_length) {
                return str_pad("'" . @chr(intval($m[1], 0)) . "'", strlen($m[0]), ' ');
            } else {
                return "'" . @chr(intval($m[1], 0)) . "'";
            }
        }, $string);

        $string = preg_replace_callback('/\\\\(?:x(?<hex>[a-fA-F0-9]{1,2})|(?<oct>[0-9]{2,3}))/i', function($m) use ($save_length) {
            $is_oct     = isset($m['oct']);
            $full_str   = $m[0];
            $value      = $is_oct ? $m['oct'] : $m['hex'];
            if ($save_length) {
                if ($is_oct) {
                    return str_pad(@chr(octdec($value)), strlen($full_str), ' ');
                }
                return str_pad(chr(@hexdec($value)), strlen($full_str), ' ');
            } else {
                if ($is_oct) {
                    return @chr(octdec($value));
                }
                return @chr(hexdec($value));
            }
        }, $string);

        $pattern = '~%([0-9a-fA-F]{2})~';
        if ($save_length && preg_match('~%25(%[0-9a-fA-F]{2}){2}(%25)?~ms', $string)) {
            $pattern = (isset($m[2]) && $m[2] !== '') ? '~% {0,2}([0-9a-fA-F ]{2,6})~' : '~% {0,2}([0-9a-fA-F]{2})~';
        }

        for ($i = 0; $i < 2; $i++) {
            $string = preg_replace_callback($pattern, function($m) use ($save_length) {
                if ($save_length) {
                    return str_pad(chr(@hexdec($m[1])), strlen($m[0]), ' ');
                } else {
                    return @chr(hexdec($m[1]));
                }
            }, $string);
        }

        $iter = 0;
        $regexpHtmlAmp = '/\&[#\w ]{2,20} {0,2}; {0,2}/i';
        while ($iter < self::MAX_ITERATION && preg_match($regexpHtmlAmp, $string)) {
            $string = preg_replace_callback($regexpHtmlAmp, function ($m) use ($save_length) {
                if ($save_length) {
                    if (strpos($m[0], '  ') !== false) {
                        $m[0] = str_pad(str_replace(' ', '', $m[0]), strlen($m[0]));
                    }
                    $string = $m[0] == '&nbsp;' ? ' ' : $m[0];
                    return str_pad(@html_entity_decode($string, ENT_QUOTES | ENT_HTML5), strlen($m[0]), ' ', STR_PAD_LEFT);
                } else {
                    $string = $m[0] == '&nbsp;' ? ' ' : $m[0];
                    return @html_entity_decode($string, ENT_QUOTES | ENT_HTML5);
                }
            }, $string);
            $iter++;
        }

        $string = self::concatenate_strings($string, $save_length);

        $string = preg_replace_callback('~<title[^>]{0,99}>\s*\K(.{0,300}?)(?=<\/title>)~mis', function($m) use ($save_length) {
            if(preg_match('~(?:\w[^\x00-\x7F]{1,9}|[^\x00-\x7F]{1,9}\w)~', $m[1])) {
                return self::HomoglyphNormalize($m[1]);
            }
            return $m[1];
        }, $string);

        $string = preg_replace_callback('~<\?\s*p\s+h\s+p~msi', function ($m) {
            return str_pad('<?php', strlen($m[0]), ' ');
        }, $string);

        $string = str_replace(' ', '  ', $string);  //0xc2, 0xa0

        if (!$save_length) {
            $string = str_replace('<?php', '<?php ', $string);
            $string = preg_replace('~\s+~msi', ' ', $string);
            $string = trim($string);
        } else {
            $string = str_replace('<?php', '<?   ', $string);
        }

        return $string;
    }

    public static function get_end_of_extended_length($string_normalized, $string_orig, $start_pos)
    {
        if (strlen($string_normalized) == $start_pos + 1) {
            return $start_pos;
        }
        for ($i = $start_pos + 1, $iMax = strlen($string_normalized); $i < $iMax; $i++) {
            if ($string_orig[$i] === '\\' || $string_normalized[$i] !== ' ' || $string_orig[$i] === ' ') {
                break;
            }
        }
        return $i - 1;
    }

    public static function string_pos($string, $needle, $unescape = false)
    {
        $j      = 0;
        $skip   = false;
        $start  = false;
        $end    = 0;
        $last_tag = [false, false];

        $string_strip_whitespace = self::strip_whitespace($string, true);
        $needle = self::strip_whitespace($needle, false);
        $needle = preg_replace('~(?<!\:)//[^?\n]{1,15}(\n?\?>)~msi', '$1', $needle);

        $string = preg_replace_callback('~(<%3f|%253c%3f|%3c%3f)(php)?~msi', function ($m) {
            $ret = (isset($m[2]) && $m[2] !== '') ? '<?php' : '<?';
            return str_pad($ret, strlen($m[0]), ' ');
        }, $string_strip_whitespace);

        $string = preg_replace_callback('~(?:%3f>|%3f%253e|%3f%3e)~msi', function ($m) {
            return str_pad('?>', strlen($m[0]),  ' ', STR_PAD_LEFT);
        }, $string);

        $string = self::normalize($string, true);
        $needle = self::normalize($needle, false);
        $string = preg_replace_callback('~(?<!\*)/\*[^\*]+\*/~', function ($m) {
            return str_repeat(' ', strlen($m[0]));
        }, $string); //php_strip_whitespace don't strip all comments, from xoredStrings type, hack for this
        $needle = preg_replace('~(?<!\*)/\*(([^\*]|\*(?!\/))*)\*/~msi', '', $needle); //php_strip_whitespace don't strip all comments, from xoredStrings type, hack for this
        $string = preg_replace_callback('~(?<!\*)  /  \*  (([^\*]|  \*  (?!\/))*)  \*  /~msi', function ($m) {
            return str_repeat(' ', strlen($m[0]));
        }, $string);
        $string = preg_replace_callback('~(?<!\*)/       \*       (([^\*]|       \*       (?!\/))*)\*       /~msi', function ($m) {
            return str_repeat(' ', strlen($m[0]));
        }, $string);

        $string = preg_replace_callback('~% *([\da-f]) *([\da-f])~msi', function ($m) {
            return str_pad(chr(@hexdec($m[1] . $m[2])), strlen($m[0]), ' ');
        }, $string);
        $string = preg_replace_callback('~\\\\  x  ([\da-f])  ([\da-f])  ~msi', function ($m) {
            return str_pad(chr(@hexdec($m[1] . $m[2])), strlen($m[0]), ' ');
        }, $string);

        if ($unescape) {
            $string = self::unescape($string, true);
            $string = self::normalize($string, true);
        }

        $needle = self::concatenate_strings($needle, true);

        for ($i = 0, $iMax = strlen($string); $i < $iMax; $i++) {
            if(trim($string[$i]) === '' && trim($needle[$j]) === '') {
                $string[$i] = $needle[$j] = ' ';
            }
            if ($string[$i] == $needle[$j]) {
                if ($j == 0) {
                    $start = $i;
                } elseif ($j == strlen($needle) - 1) {
                    $end = self::get_end_of_extended_length($string, $string_strip_whitespace, $i);
                    return [$start, $end];
                }
                $j++;
            } else {
                $match_php_tag = self::match_shortopen_tag($string, $i, $needle, $j);
                if ($match_php_tag[0] !== false && ($last_tag[0] !== $match_php_tag[0])) {
                    $j = $match_php_tag[0];
                }
                if ($match_php_tag[1] !== false && ($last_tag[1] !== $match_php_tag[1])) {
                    $i = $match_php_tag[1] - 1;
                }
                $last_tag = $match_php_tag;
                if ($match_php_tag[0] !== false || ($match_php_tag[1] !== false && (!empty($last_tag)))) {
                    continue;
                }
                $skip = self::need_skip($string, $i);
                if ($skip !== false && $start !== false) {
                    $i = $skip - 1;
                } else {
                    $j = 0;
                }
            }
        }
        return false;
    }

    private static function concatenate_strings($string, $save_length)
    {
        $string = preg_replace_callback('/[\'"]\s*?[\+\.]+\s*?[\'"]/smi', function($m) use ($save_length) {
            if ($save_length) {
                return str_repeat(' ', strlen($m[0]));
            } else {
                return '';
            }
        }, $string);
        return $string;
    }

    private static function HomoglyphNormalize($str)
    {
        if (!is_array(self::$confusables)) {
            self::$confusables = @unserialize(@base64_decode(self::$confusables));
        }
        return str_replace(array_keys(self::$confusables), array_values(self::$confusables), $str);
    }

    private static function extend_string_with_spaces($string, $strippedStr)
    {
        $strippedStr = str_replace('<?php  ', '<?php ', $strippedStr);

        $in_comment_ml = false;
        $in_comment_nl = false;
        $iMax = strlen($string);
        $jMax = strlen($strippedStr);

        if ($iMax === $jMax) {
            return $string;
        }

        $newStr = '';
        $j = 0;

        for ($i = 0; $i < $iMax; $i++) {
            if (isset($strippedStr[$j]) && trim($string[$i]) === trim($strippedStr[$j]) && !$in_comment_ml && !$in_comment_nl) {
                $newStr .= $string[$i];
                $j++;
            } else if ((trim($string[$i]) === '/' && trim($string[$i + 1]) === '*') && !$in_comment_ml && !$in_comment_nl) {
                $in_comment_ml = true;
                $newStr .= '  ';
                $i++;
            } else if ((trim($string[$i]) === '*' && trim($string[$i + 1]) === '/') && $in_comment_ml) {
                $in_comment_ml = false;
                $newStr .= '  ';
                $i++;
            } else if ((trim($string[$i]) === '/' && trim($string[$i + 1]) === '/') && !$in_comment_nl && !$in_comment_ml) {
                $in_comment_nl = true;
                $newStr .= '  ';
                $i++;
            } else if ((trim($string[$i]) === '#') && !$in_comment_nl && !$in_comment_ml) {
                $in_comment_nl = true;
                $newStr .= ' ';
            } else if (($string[$i] === "\n" || $string[$i] === "\r") && $in_comment_nl) {
                $in_comment_nl = false;
                $newStr .= ' ';
            } else if ($string[$i] === '?' && $string[$i + 1] === '>' && $in_comment_nl) {
                $in_comment_nl = false;
                $newStr .= $string[$i];
                $j++;
            } else if ((isset($strippedStr[$j]) && trim($string[$i]) !== trim($strippedStr[$j])) && ($in_comment_ml || $in_comment_nl)) {
                $newStr .= ' ';
            } else {
                $newStr .= ' ';
            }
        }
        return $newStr;
    }

    /**
     * @param array $confusables
     */
    public static function setConfusables(array $confusables)
    {
        self::$confusables = $confusables;
    }
}


class Encoding
{
    // Unicode BOM is U+FEFF, but after encoded, it will look like this.

    const UTF32_BIG_ENDIAN_BOM = "\x00\x00\xFE\xFF";
    const UTF32_LITTLE_ENDIAN_BOM = "\xFF\xFE\x00\x00";
    const UTF16_BIG_ENDIAN_BOM = "\xFE\xFF";
    const UTF16_LITTLE_ENDIAN_BOM = "\xFF\xFE";
    const UTF8_BOM = "\xEF\xBB\xBF";

    public static function detectUTFEncoding($text)
    {
        $first2 = substr($text, 0, 2);
        $first3 = substr($text, 0, 3);
        $first4 = substr($text, 0, 4);

        if ($first3 == self::UTF8_BOM) {
            return 'UTF-8';
        } elseif ($first4 == self::UTF32_BIG_ENDIAN_BOM) {
            return 'UTF-32BE';
        } elseif ($first4 == self::UTF32_LITTLE_ENDIAN_BOM) {
            return 'UTF-32LE';
        } elseif ($first2 == self::UTF16_BIG_ENDIAN_BOM) {
            return 'UTF-16BE';
        } elseif ($first2 == self::UTF16_LITTLE_ENDIAN_BOM) {
            return 'UTF-16LE';
        }
        return false;
    }

    public static function iconvSupported()
    {
        return (function_exists('iconv') && is_callable('iconv'));
    }

    public static function convertToCp1251($from, $str)
    {
        $ret = @iconv($from, 'CP1251//TRANSLIT', $str);
        if ($ret === false) {
            $ret = @iconv($from, 'CP1251//IGNORE', $str);
        }
        return $ret;
    }

    public static function convertToUTF8($from, $str)
    {
        return @iconv($from, 'UTF-8//IGNORE', $str);
    }
}
class Helpers
{
    const REGEXP_BASE64_DECODE = '~base64_decode\s*\(\s*[\'"]([^\'"]*)[\'"]\s*\)~mis';
    const GOTO_MAX_HOPS        = 5000;

    /*************************************************************************************************************/
    /*                                Frequently used functions for deobfuscators                                */
    /*************************************************************************************************************/

    /**
     * This method normalizes string, converts characters to a readable form and some other things.
     * Also, the method can save the number of characters in the string by adding spaces if the number of characters has decreased.
     *
     * @param $string
     * @param false $save_length
     * @return string
     */
    public static function normalize($string, $save_length = false)
    {
        $search  = [ ' ;', ' =', ' ,', ' .', ' (', ' )', ' {', ' }', '; ', '= ', ', ', '. '
        , '( ', '( ', '{ ', '} ', ' !', ' >', ' <', ' _', '_ ', '< ',  '> ', ' $', ' %', '% '
        , '# ', ' #', '^ ', ' ^', ' &', '& ', ' ?', '? '];
        $replace = [  ';',  '=',  ',',  '.',  '(',  ')',  '{',  '}', ';',  '=',  ',',  '.'
        ,  '(',   ')', '{',  '}',   '!',  '>',  '<',  '_', '_',  '<',   '>',   '$',  '%', '%'
        ,  '#',   '#', '^',   '^',  '&', '&',   '?', '?'];

        if (!$save_length) {
            $string = str_replace('@', '', $string);
            $string = preg_replace('~\s+~smi', ' ', $string);
            $string = str_replace($search, $replace, $string);
        }

        $string = preg_replace_callback('~\bchr\(\s*([0-9a-fA-FxX\^]+)\s*\)~', static function($m) use ($save_length) {
            if (strpos($m[1], '^') !== false) {
                $m[1] = Helpers::calc($m[1]);
            }
            if ($save_length) {
                return str_pad("'" . @chr(intval($m[1], 0)) . "'", strlen($m[0]), ' ');
            } else {
                return "'" . @chr(intval($m[1], 0)) . "'";
            }
        }, $string);

        $string = preg_replace_callback('/\&\#([0-9]{1,3});/i', static function($m) use ($save_length) {
            if ($save_length) {
                return str_pad(@chr((int)$m[1]), strlen($m[0]), ' ');
            } else {
                return @chr((int)$m[1]);
            }
        }, $string);

        $string = preg_replace_callback('/\\\\(?:x(?<hex>[a-fA-F0-9]{1,2})|(?<oct>[0-9]{1,3}))/i', function($m) use ($save_length) {
            $is_oct     = isset($m['oct']);
            $full_str   = $m[0];
            $value      = $is_oct ? $m['oct'] : $m['hex'];
            if ($save_length) {
                if ($is_oct) {
                    return str_pad(@chr(octdec($value)), strlen($full_str), ' ');
                }
                return str_pad(chr(@hexdec($value)), strlen($full_str), ' ');
            } else {
                if ($is_oct) {
                    return @chr(octdec($value));
                }
                return @chr(hexdec($value));
            }
        }, $string);

        $string = preg_replace_callback('/[\'"]\s*?\.+\s*?[\'"]/smi', static function($m) use ($save_length) {
            if ($save_length) {
                return str_repeat(' ', strlen($m[0]));
            } else {
                return '';
            }
        }, $string);

        $string = preg_replace_callback('/[\'"]\s*?\++\s*?[\'"]/smi', static function($m) use ($save_length) {
            if ($save_length) {
                return str_repeat(' ', strlen($m[0]));
            } else {
                return '';
            }
        }, $string);

        if (!$save_length) {
            $string = str_replace('<?php', '<?php ', $string);
            $string = preg_replace('~\s+~', ' ', $string);
        }

        return $string;
    }

    /**
     * Code formatting. Not used in procu2 and ai-bolit
     *
     * @param $source
     * @return string
     */
    public static function format($source)
    {
        $t_count = 0;
        $in_object = false;
        $in_at = false;
        $in_php = false;
        $in_for = false;
        $in_comp = false;
        $in_quote = false;
        $in_var = false;

        if (!defined('T_ML_COMMENT')) {
            define('T_ML_COMMENT', T_COMMENT);
        }

        $result = '';
        @$tokens = token_get_all($source);
        foreach ($tokens as $token) {
            if (is_string($token)) {
                $token = trim($token);
                if ($token == '{') {
                    if ($in_for) {
                        $in_for = false;
                    }
                    if (!$in_quote && !$in_var) {
                        $t_count++;
                        $result = rtrim($result) . ' ' . $token . "\n" . str_repeat('    ', $t_count);
                    } else {
                        $result = rtrim($result) . $token;
                    }
                } elseif ($token == '$') {
                    $in_var = true;
                    $result .= $token;
                } elseif ($token == '}') {
                    if (!$in_quote && !$in_var) {
                        $new_line = true;
                        $t_count--;
                        if ($t_count < 0) {
                            $t_count = 0;
                        }
                        $result = rtrim($result) . "\n" . str_repeat('    ', $t_count) .
                            $token . "\n" . @str_repeat('    ', $t_count);
                    } else {
                        $result = rtrim($result) . $token;
                    }
                    if ($in_var) {
                        $in_var = false;
                    }
                } elseif ($token == ';') {
                    if ($in_comp) {
                        $in_comp = false;
                    }
                    if ($in_for) {
                        $result .= $token . ' ';
                    } else {
                        $result .= $token . "\n" . str_repeat('    ', $t_count);
                    }
                } elseif ($token == ':') {
                    if ($in_comp) {
                        $result .= ' ' . $token . ' ';
                    } else {
                        $result .= $token . "\n" . str_repeat('    ', $t_count);
                    }
                } elseif ($token == '(') {
                    $result .= ' ' . $token;
                } elseif ($token == ')') {
                    $result .= $token;
                } elseif ($token == '@') {
                    $in_at = true;
                    $result .= $token;
                } elseif ($token == '.') {
                    $result .= ' ' . $token . ' ';
                } elseif ($token == '=') {
                    $result .= ' ' . $token . ' ';
                } elseif ($token == '?') {
                    $in_comp = true;
                    $result .= ' ' . $token . ' ';
                } elseif ($token == '"') {
                    if ($in_quote) {
                        $in_quote = false;
                    } else {
                        $in_quote = true;
                    }
                    $result .= $token;
                } else {
                    $result .= $token;
                }
            } else {
                list($id, $text) = $token;
                switch ($id) {
                    case T_OPEN_TAG:
                    case T_OPEN_TAG_WITH_ECHO:
                        $in_php = true;
                        $result .= trim($text) . "\n";
                        break;
                    case T_CLOSE_TAG:
                        $in_php = false;
                        $result .= trim($text);
                        break;
                    case T_FOR:
                        $in_for = true;
                        $result .= trim($text);
                        break;
                    case T_OBJECT_OPERATOR:
                        $result .= trim($text);
                        $in_object = true;
                        break;

                    case T_ENCAPSED_AND_WHITESPACE:
                    case T_WHITESPACE:
                        $result .= trim($text);
                        break;
                    case T_RETURN:
                        $result = rtrim($result) . "\n" . str_repeat('    ', $t_count) . trim($text) . ' ';
                        break;
                    case T_ELSE:
                    case T_ELSEIF:
                        $result = rtrim($result) . ' ' . trim($text) . ' ';
                        break;
                    case T_CASE:
                    case T_DEFAULT:
                        $result = rtrim($result) . "\n" . str_repeat('    ', $t_count - 1) . trim($text) . ' ';
                        break;
                    case T_FUNCTION:
                    case T_CLASS:
                        $result .= "\n" . str_repeat('    ', $t_count) . trim($text) . ' ';
                        break;
                    case T_AND_EQUAL:
                    case T_AS:
                    case T_BOOLEAN_AND:
                    case T_BOOLEAN_OR:
                    case T_CONCAT_EQUAL:
                    case T_DIV_EQUAL:
                    case T_DOUBLE_ARROW:
                    case T_IS_EQUAL:
                    case T_IS_GREATER_OR_EQUAL:
                    case T_IS_IDENTICAL:
                    case T_IS_NOT_EQUAL:
                    case T_IS_NOT_IDENTICAL:
                    case T_LOGICAL_AND:
                    case T_LOGICAL_OR:
                    case T_LOGICAL_XOR:
                    case T_MINUS_EQUAL:
                    case T_MOD_EQUAL:
                    case T_MUL_EQUAL:
                    case T_OR_EQUAL:
                    case T_PLUS_EQUAL:
                    case T_SL:
                    case T_SL_EQUAL:
                    case T_SR:
                    case T_SR_EQUAL:
                    case T_START_HEREDOC:
                    case T_XOR_EQUAL:
                        $result = rtrim($result) . ' ' . trim($text) . ' ';
                        break;
                    case T_COMMENT:
                        $result = rtrim($result) . "\n" . str_repeat('    ', $t_count) . trim($text) . ' ';
                        break;
                    case T_ML_COMMENT:
                        $result = rtrim($result) . "\n";
                        $lines = explode("\n", $text);
                        foreach ($lines as $line) {
                            $result .= str_repeat('    ', $t_count) . trim($line);
                        }
                        $result .= "\n";
                        break;
                    case T_INLINE_HTML:
                        $result .= $text;
                        break;
                    default:
                        $result .= trim($text);
                        break;
                }
            }
        }
        return $result;
    }

    /**
     * Replace create_function(...) with function(){}
     *
     * @param $str
     * @return string
     */
    public static function replaceCreateFunction($str)
    {
        $hangs = 20;
        $str = stripcslashes($str);
        while (strpos($str, 'create_function') !== false && $hangs--) {
            $start_pos = strpos($str, 'create_function');
            $end_pos = 0;
            $brackets = 0;
            $started = false;
            $opened = 0;
            $closed = 0;
            for ($i = $start_pos, $iMax = strlen($str); $i < $iMax; $i++) {
                if ($str[$i] === '(') {
                    $started = true;
                    $brackets++;
                    $opened++;
                } else if ($str[$i] === ')') {
                    $closed++;
                    $brackets--;
                }
                if ($brackets == 0 && $started) {
                    $end_pos = $i + 1;
                    break;
                }
            }

            $cr_func = substr($str, $start_pos, $end_pos - $start_pos);
            $func = implode('function(', explode('create_function(\'', $cr_func, 2));
            $func = implode(') {', explode('\',\'', $func, 2));
            $func = substr($func, 0, -2) . '}';
            $str = str_replace($cr_func, $func, $str);
        }
        return $str;
    }

    /**
     * Calculate functions and simple mathematical expressions in code.
     * This function is applicable for simple expressions, if they are complex, then it may produce an incorrect result, in this case use MathCalc.
     *
     * @param $expr
     * @return string
     */
    public static function calc($expr)
    {
        if (is_array($expr)) {
            $expr = $expr[0];
        }
        $expr = str_replace([' ', "\r", "\n", "\t"], '', $expr);
        preg_match('~(chr|min|max|round)?\(([^\)]+)\)~msi', $expr, $expr_arr);
        if (@$expr_arr[1] == 'min' || @$expr_arr[1] == 'max') {
            return $expr_arr[1](explode(',', $expr_arr[2]));
        } elseif (@$expr_arr[1] == 'chr') {
            if ($expr_arr[2][0] === '(') {
                $expr_arr[2] = substr($expr_arr[2], 1);
            }
            $expr_arr[2] = self::calc($expr_arr[2]);
            return $expr_arr[1]((int)$expr_arr[2]);
        } elseif (@$expr_arr[1] == 'round') {
            $expr_arr[2] = self::calc($expr_arr[2]);
            return $expr_arr[1]($expr_arr[2]);
        } else {
            preg_match_all('~([\d\.a-fx]+)([\*\/\-\+\^\|\&])?~', $expr, $expr_arr);
            foreach ($expr_arr[1] as &$expr_arg) {
                if (strpos($expr_arg, "0x") !== false) {
                    $expr = str_replace($expr_arg, hexdec($expr_arg), $expr);
                    $expr_arg = hexdec($expr_arg);
                } else if ($expr_arg[0] === '0' && (strlen($expr_arg) > 1) && (strpos($expr_arg, '.') === false)) {
                    $expr = str_replace($expr_arg, octdec($expr_arg), $expr);
                    $expr_arg = octdec($expr_arg);
                }
            }
            if (in_array('*', $expr_arr[2]) !== false) {
                $pos = array_search('*', $expr_arr[2]);
                $res = $expr_arr[1][$pos] * $expr_arr[1][$pos + 1];
                $pos_subst = strpos($expr, $expr_arr[1][$pos] . '*' . $expr_arr[1][$pos + 1]);
                $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '*' . $expr_arr[1][$pos + 1]));
                $expr = self::calc($expr);
            } elseif (in_array('/', $expr_arr[2]) !== false) {
                $pos = array_search('/', $expr_arr[2]);
                $res = $expr_arr[1][$pos] / $expr_arr[1][$pos + 1];
                $pos_subst = strpos($expr, $expr_arr[1][$pos] . '/' . $expr_arr[1][$pos + 1]);
                $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '/' . $expr_arr[1][$pos + 1]));
                $expr = self::calc($expr);
            } elseif (in_array('-', $expr_arr[2]) !== false) {
                $pos = array_search('-', $expr_arr[2]);
                $res = $expr_arr[1][$pos] - $expr_arr[1][$pos + 1];
                $pos_subst = strpos($expr, $expr_arr[1][$pos] . '-' . $expr_arr[1][$pos + 1]);
                $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '-' . $expr_arr[1][$pos + 1]));
                $expr = self::calc($expr);
            } elseif (in_array('+', $expr_arr[2]) !== false) {
                $pos = array_search('+', $expr_arr[2]);
                $res = $expr_arr[1][$pos] + $expr_arr[1][$pos + 1];
                $pos_subst = strpos($expr, $expr_arr[1][$pos] . '+' . $expr_arr[1][$pos + 1]);
                $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '+' . $expr_arr[1][$pos + 1]));
                $expr = self::calc($expr);
            } elseif (in_array('^', $expr_arr[2]) !== false) {
                $pos = array_search('^', $expr_arr[2]);
                $res = (int)$expr_arr[1][$pos] ^ (int)$expr_arr[1][$pos + 1];
                $pos_subst = strpos($expr, $expr_arr[1][$pos] . '^' . $expr_arr[1][$pos + 1]);
                $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '^' . $expr_arr[1][$pos + 1]));
                $expr = self::calc($expr);
            } elseif (in_array('|', $expr_arr[2]) !== false) {
                $pos = array_search('|', $expr_arr[2]);
                $res = $expr_arr[1][$pos] | $expr_arr[1][$pos + 1];
                $pos_subst = strpos($expr, $expr_arr[1][$pos] . '|' . $expr_arr[1][$pos + 1]);
                $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '|' . $expr_arr[1][$pos + 1]));
                $expr = self::calc($expr);
            } elseif (in_array('&', $expr_arr[2]) !== false) {
                $pos = array_search('&', $expr_arr[2]);
                $res = $expr_arr[1][$pos] & $expr_arr[1][$pos + 1];
                $pos_subst = strpos($expr, $expr_arr[1][$pos] . '&' . $expr_arr[1][$pos + 1]);
                $expr = substr_replace($expr, $res, $pos_subst, strlen($expr_arr[1][$pos] . '&' . $expr_arr[1][$pos + 1]));
                $expr = self::calc($expr);
            } else {
                return $expr;
            }

            return $expr;
        }
    }

    /**
     * Get code inside eval()
     *
     * @param $string
     * @return string
     */
    public static function getEvalCode($string)
    {
        preg_match("/eval\(([^\)]+)\)/msi", $string, $matches);
        return (empty($matches)) ? '' : end($matches);
    }

    /**
     * Method for unwrapping goto constructs.
     *
     * @param string $content
     * @return string
     */
    public static function unwrapGoto(&$content): string
    {
        $processed = [];
        if (!preg_match('~\$[^\[\(\)\]=\+\-]{1,20}~msi', $content)) {
            return $content;
        }
        $label_num = 0;
        $label_name = 'tmp_spec_label';

        $replaceVars = [];

        $orig = $content;

        $content = preg_replace_callback('~\bgoto ([^\w;]+);~msi', function ($m) use (&$replaceVars, &$label_num, $label_name) {
            $label_num++;
            $newName = $label_name . $label_num;
            $replaceVars[] = [$m[1], $newName];
            return 'goto ' . $newName . '; ';
        }, $content);

        if (!empty($replaceVars)) {
            foreach ($replaceVars as $replaceVar) {
                $content = str_replace($replaceVar[0], $replaceVar[1], $content);
            }
        }

        $content = preg_replace_callback('~\b(if\s*(\([^)(]*+(?:(?2)[^)(]*)*+\))\s*)(goto\s*(?:\w+);)~msi', function($m) {
            return $m[1] . ' { ' . $m[3] . ' } ';
        }, $content);

        preg_match_all('~\bgoto\s?(\w+);~msi', $content, $gotoMatches, PREG_SET_ORDER);
        $gotoCount = count($gotoMatches);
        if ($gotoCount === 0 || $gotoCount > self::GOTO_MAX_HOPS) {
            return $content;
        }

        $label_num = 0;
        $label_name = 'tmp_label';

        $res      = '';
        $hops     = self::GOTO_MAX_HOPS;
        if (preg_match('~(.*?)(?:goto\s\w+;|\w+:)~msi', $content, $m)) {
            $res .= trim($m[1]) . PHP_EOL;
        }

        if (preg_match('~\w{1,99}:\s*(<\?php)~msi', $content, $m, PREG_OFFSET_CAPTURE)) {
            $orig = substr($content, 0, $m[1][1]);
            $content = str_replace('<?php ' . $orig, '', $content);
        }

        $content = preg_replace_callback('~(?<!: )\}\s*goto\s*\w+;~mis', function($m) use (&$label_num, $label_name) {
            $label_num++;
            return $label_name . $label_num . ': ' . $m[0];
        }, $content);

        //try to match all if's conditions it can be if or loop
        preg_match_all('~\b(\w+):\s*if\s*(\([^)(]*+(?:(?2)[^)(]*)*+\))\s*\{\s*goto\s*(\w+); (' . $label_name . '\d+):\s*\}\s*goto\s*(\w+);~msi', $content, $conds, PREG_SET_ORDER);
        foreach ($conds as $cond) {
            preg_match('~\b\w+:\s*(\w+):\s*goto\s*' . $cond[1] . '~msi',        $content, $while);
            preg_match('~\b' . $cond[5] . ':\s*(\w+):\s*goto\s*(\w+);~msi',     $content, $do);
            preg_match('~\b(\w+):\s*' . $cond[3] . ':\s*goto\s*(\w+);~msi',     $content, $m);
            preg_match('~\b(\w+):\s*goto\s*(\w+); goto\s*' . $m[1] . ';~msi',   $content, $ifelse);
            preg_match('~\b(\w+):\s*\w+:\s*goto\s*' . $cond[1] . ';~msi',       $content, $m);
            preg_match('~\b(\w+):[^:;]+[:;]\s*goto\s*(' . $m[1] . ');~msi',     $content, $m);
            preg_match('~\b(\w+):\s*' . $ifelse[2] . ':\s*goto\s*(\w+);~msi',   $content, $m);
            if (!empty($m) && ($m[2] === $cond[1])) { // if goto in last match point to this if statement - we have a loop, otherwise - if-else
                $ifelse = [];
            }
            if (preg_match('~\b\w+:\s*goto\s*' . $while[1] . ';\s*goto\s*\w+;~msi', $content) === 0) {
                $while = [];
            }

            if (empty($do) && empty($ifelse)) { //reverse conditions except do while & if else
                if ($cond[2][1] === '!') {
                    $cond[2] = substr_replace($cond[2], '', 1, 1);
                }
                else {
                    $cond[2] = '(!' . $cond[2] . ')';
                }
            }

            if (!empty($ifelse)) {
                $content = str_replace($cond[0],
                    $cond[1] . ': if ' . $cond[2] . ' { goto ' . $cond[3] . '; ' . $cond[4] . ': ' . '} else { goto ' . $cond[5] . ';',
                    $content
                );
                preg_match('~(\w+):\s*(' . $ifelse[2] . '):\s*goto\s*(\w+);~msi', $content, $m2);
                $content = str_replace($m2[0],
                    $m2[1] . ': goto ' . $cond[4] . '; ' . $m2[2] . ': } goto ' . $m2[3] . ';',
                    $content
                );
            }
            elseif (!empty($do)) {
                preg_match('~(\w+):\s*(' . $cond[3] . '):\s*goto\s*~msi', $content, $match);
                $tmp = $cond[0];
                $content = str_replace($match[0],
                    $match[1] . ': do { goto ' . $match[2] . '; ' . $match[2] . ': goto ',
                    $content
                );
                $cond[0] = $cond[1] . ': } while ' . $cond[2] . '; goto ' . $cond[5] . ';';
                $content = str_replace($tmp, $cond[0], $content);
            }
            else {
                if (!empty($while)) { //loop change if to while, reverse condition, exchange labels; in last goto $tmp_labelN
                    preg_match('~\w+:\s*goto\s*(' . $while[1] . ')~msi', $content, $match);
                    $content = str_replace($match[0], str_replace($match[1], $cond[4], $match[0]), $content);
                    $content = str_replace($cond[0],
                        $cond[1] . ': ' . 'while (' . $cond[2] . ') {' . 'goto ' . $cond[5] . '; ' . $cond[4] . ': } goto ' . $cond[3] . ';',
                        $content
                    );
                }
                else { //just if - need to reverse condition and exchange labels; in last need goto to $tmp_labelN
                    $tmp = $cond[0];
                    $cond[0] = $cond[1] . ': ' . 'if ' . $cond[2] . ' { goto ' . $cond[5] . '; ' . $cond[4] . ': } goto ' . $cond[3] . ';';
                    $content = str_replace($tmp, $cond[0], $content);
                    preg_match('~(\w+):\s*(' . $cond[3] . '):\s*goto\s*(\w+)~msi', $content, $match);
                    $content = str_replace($match[0],
                        $match[1] . ': goto ' . $cond[4] . '; ' . $match[2] . ': goto ' . $match[3],
                        $content
                    );
                }
            }
        }

        $nextGotoPos = 0;
        while ($nextGotoPos !== false
            && $hops-- > 0
            && preg_match('~goto\s(\w+);~msi', substr($content, $nextGotoPos), $gotoNameMatch, PREG_OFFSET_CAPTURE)
        ) {
            $gotoNameStr    = $gotoNameMatch[1][0] . ':';
            $gotoNameStrLen = strlen($gotoNameStr);
            $gotoPos        = strpos($content, $gotoNameStr);
            $nextGotoPos    = strpos($content, 'goto ', $gotoPos);
            $cutUntilPos    = ($nextGotoPos - $gotoPos) - $gotoNameStrLen;
            if ($gotoPos === false) {
                return $orig;
            }
            if (in_array($gotoNameStr, $processed)) {
                $nextGotoPos    = strpos($content, 'goto ', strpos($content, $gotoNameMatch[0][0]) + 1);
                continue;
            }
            $processed[] = $gotoNameStr;

            if ($nextGotoPos) {
                $substr = substr($content, $gotoPos + $gotoNameStrLen, $cutUntilPos);
            } else {
                $substr = substr($content, $gotoPos + $gotoNameStrLen);
            }

            $piece = trim($substr);
            $piece === '' ?: $res .= $piece . ' ';
        }
        $res = preg_replace('~\w{1,20}:~msi', '', $res);
        $res = stripcslashes($res);
        return $res;
    }

    /**
     * Get text inside quotes (' or ")
     *
     * @param $string
     * @return string
     */
    public static function getTextInsideQuotes($string)
    {
        if (preg_match_all('/("(.*)")/msi', $string, $matches)) {
            $array = end($matches);
            return @end($array);
        }

        if (preg_match_all('/\((\'(.*)\')/msi', $string, $matches)) {
            $array = end($matches);
            return @end($array);
        }

        return '';
    }

    /**
     * Get the value in quotes, the parity of the quotes is not checked.
     *
     * @param $string
     * @return array
     */
    public static function getNeedles($string)
    {
        preg_match_all("/'(.*?)'/msi", $string, $matches);

        return (empty($matches)) ? [] : $matches[1];
    }

    /**
     * Apply some formatting rules to the code
     *
     * @param $string
     * @return string
     */
    public static function formatPHP($string)
    {
        $string = str_replace('<?php', '', $string);
        $string = str_replace('?>', '', $string);
        $string = str_replace(PHP_EOL, "", $string);
        $string = str_replace(";", ";\n", $string);
        $string = str_replace("}", "}\n", $string);
        return $string;
    }

    /**
     * Parse array values of string and return array
     *
     * @param $string
     * @return array
     */
    public static function prepareArray($string)
    {
        $string = rtrim($string, ',');
        $array_string = Helpers::normalize($string);
        $list_str = explode(',', $array_string);
        $result = [];
        foreach ($list_str as $element) {
            $key = null;
            $value = $element;
            if (strpos($element, '=>') !== false) {
                list($key, $value) = explode('=>', $element);
            }
            $key = is_null($key) ? $key : trim($key, '\'"');
            $value = is_null($value) ? $value : trim($value, '\'"');

            if (is_null($key)) {
                $result[] = $value;
            }
            else {
                $result[$key] = $value;
            }
        }
        return $result;
    }

    /**
     * Detect text encoding
     *
     * @param $text
     * @return false|string
     */
    public static function detect_utf_encoding($text)
    {
        $first2 = substr($text, 0, 2);
        $first3 = substr($text, 0, 3);
        $first4 = substr($text, 0, 4);

        if ($first4 == chr(0x00) . chr(0x00) . chr(0xFE) . chr(0xFF)) {
            return 'UTF-32BE';
        } elseif ($first4 == chr(0xFF) . chr(0xFE) . chr(0x00) . chr(0x00)) {
            return 'UTF-32LE';
        } elseif ($first2 == chr(0xFE) . chr(0xFF)) {
            return 'UTF-16BE';
        } elseif ($first2 == chr(0xFF) . chr(0xFE)) {
            return 'UTF-16LE';
        }

        return false;
    }

    /**
     * Function safety check
     *
     * @param $func Function name
     * @return bool
     */
    public static function isSafeFunc($func)
    {
        $safeFuncs = [
            'base64_decode', 'gzinflate', 'gzdecode', 'gzuncompress', 'strrev', 'strlen',
            'str_rot13', 'urldecode', 'rawurldecode', 'stripslashes', 'chr',
            'htmlspecialchars_decode', 'convert_uudecode','pack', 'ord',
            'str_repeat', 'sprintf', 'str_replace', 'strtr', 'hex2bin',
            'trim', 'ltrim', 'rtrim', 'helpers::unserialize',
        ];

        return in_array(strtolower($func), $safeFuncs);
    }

    /**
     * Convert the function to a safe one and return a boolean result was it possible to do it
     *
     * @param $func
     * @return bool
     */
    public static function convertToSafeFunc(&$func)
    {
        $replacedFuncs = [
            'unserialize' => 'Helpers::unserialize',
        ];

        $lowerFunc = strtolower($func);

        if (isset($replacedFuncs[$lowerFunc])) {
            $func = $replacedFuncs[$lowerFunc];
        }

        return self::isSafeFunc($func);
    }

    /**
     * Calculates a simple mathematical construct
     *
     * @param $task
     * @return string
     */
    public static function calculateMathStr($task)
    {
        $res = $task;

        while (preg_match('~\(?(\d+)\s?([+\-*\/])\s?(\d+)\)?~', $res, $subMatch)) {
            if (count($subMatch) === 4) {
                list($subSearch, $number_1, $operator, $number_2) = $subMatch;
                $res = str_replace($subSearch, self::calc("$number_1$operator$number_2"), $res);
            } else {
                return $res;
            }
        }

        return $res;
    }

    /**
     * From the content located in the input variable $content, get the values of the variables that can be calculated using the dictionary ($dictionary).
     * For example:
     * $dictionary: 'adnmpytr%uiqchsw_6jfoxkebzgl4v'
     * $content: $L1=$L1{8}.$L1{12}
     * return: ['$L1' => '%c']
     *
     * @param string $dictionary
     * @param string $content
     *
     * @return array
     */
    public static function getVarsFromDictionary($dictionary, $content) : array
    {
        $vars = [];
        preg_match_all('~(\$(?:[^\w]+|\w+)\s*=(\s?\.?\s?\$(?:[^\w]+|\w+)[{\[]\d+[\]}])+)~msi', $content, $concatMatches);
        for ($i = 0; $iMax = count($concatMatches[0]), $i <= $iMax; $i++) {
            preg_match_all('~(\$(?:[^\w]+|\w+)(=))?(\s?(\.?)\s?\$(?:[^\w]+|\w+)[{\[](\d+)[\]}])~msi',
                $concatMatches[0][$i], $varMatches);
            for ($j = 0; $jMax = count($varMatches[0]), $j < $jMax; $j++) {
                $varName = substr($varMatches[1][0], 0, -1);
                $value = $dictionary[(int)$varMatches[5][$j]] ?? '';

                if ($varMatches[2][$j] === '=') {
                    $vars[$varName] = $value;
                } else {
                    $vars[$varName] .= $value;
                }
            }
        }
        return $vars;
    }

    /**
     * From the content located in the input variable $content, calculate the variable values of which are concatenated from the variables of the dictionaries located in $vars.
     * Dictionary variables must already be in $vars when the function is run.
     *
     * @param array  $vars
     * @param string $content
     *
     * @return array
     */
    public static function getVarsFromDictionaryDynamically(array &$vars = [], string $content = ''): array
    {
        preg_match_all('~(\$(?:GLOBALS\[\')?\w+)(?:\'\])?(\.)?\s?\.?=\s?((?:\$(?:GLOBALS\[\')?\w+(?:\'\])?[{\[]?\d*[}\]]?\s?\.?\s?)+);~msi', $content, $varsMatches, PREG_SET_ORDER);

        foreach ($varsMatches as $varsMatch) {
            preg_match_all('~(\$(?:GLOBALS\[\')?\w+)(?:\'])?[{\[]?(\d+)?[}\]]?~msi', $varsMatch[3], $subVarsMatches, PREG_SET_ORDER);
            $concat = '';
            $varsMatch[1] = str_replace('GLOBALS[\'', '', $varsMatch[1]);
            foreach ($subVarsMatches as $subVarsMatch) {
                $subVarsMatch[1] = str_replace('GLOBALS[\'', '', $subVarsMatch[1]);
                if (isset($subVarsMatch[2])) {
                    $concat .= $vars[$subVarsMatch[1]][(int)$subVarsMatch[2]] ?? '';
                } else if ($varsMatch[1] !== $subVarsMatch[1]) {
                    $concat .= $vars[$subVarsMatch[1]];
                }
            }
            if (isset($vars[$varsMatch[1]])) {
                $vars[$varsMatch[1]] .= $concat;
            } else {
                $vars[$varsMatch[1]] = $concat;
            }
        }
        return $vars;
    }

    /**
     * Concatenate content of variables.
     * Examples: CheckDeobfuscationHelpersTest::testConcatVariableValues
     *
     * @param string $str
     * @return string
     */
    public static function concatVariableValues($str) : string
    {
        preg_match_all('/\$\w+\s?(\.?)=\s?"([\w=\+\/]+)"/', $str, $concatVars);
        $strVar = '';
        foreach ($concatVars[2] as $index => $concatVar) {
            if ($concatVars[1][$index] === '.') {
                $strVar .= $concatVar;
            } else {
                $strVar = $concatVar;
            }
        }
        return $strVar;
    }

    /**
     * Concatenate simple strings inside which there may be chunks of PHP code
     * Examples: CheckDeobfuscationHelpersTest::testConcatStr
     *
     * @param string $str
     * @return string
     */
    public static function concatStr($str) : string
    {
        preg_match_all('~(\.?)\s?[\'"]([\w=\+/%&();]+)[\'"]\s?~msi', $str, $concatStrings);
        $strVar = '';
        foreach ($concatStrings[2] as $index => $concatString) {
            if ($concatStrings[1][$index] === '.') {
                $strVar .= $concatString;
            } else {
                $strVar = $concatString;
            }
        }
        return $strVar;
    }

    /**
     * Concats simple strings without variable in content globally
     * Examples: CheckDeobfuscationHelpersTest::concatStringsInContent()
     *
     * @param string $str
     * @return string
     */
    public static function concatStringsInContent($str) : string
    {
        $strVar = preg_replace_callback('~(?:[\'"][\w=();]*[\'"]\s?\.?\s?){2,}~msi', static function ($m) {
            return '\'' . self::concatStr($m[0]) . '\'';
        }, $str);
        return $strVar;
    }

    /**
     * Replace the elements of the dictionary array with its values.
     * Examples: CheckDeobfuscationHelpersTest::testReplaceVarsFromDictionary()
     *
     * @param string $dictionaryVar
     * @param array $dictionaryValue
     * @param string $str
     * @param bool $quote
     *
     * @return string
     */
    public static function replaceVarsFromDictionary($dictionaryVar, $dictionaryValue, $str, $quote = true) : string
    {
        $result = $str;
        $result = preg_replace_callback('~(?:(\$(?:GLOBALS\[[\'"])?\w+(?:[\'"]\])?)[\[{][\'"]?([\da-fx]+)[\'"]?[\]}]\s?(\.)?\s?)~msi',
            function ($match) use ($dictionaryValue, $dictionaryVar, $quote) {
                if (substr($match[2], 0, 2) === '0x') {
                    $match[2] = hexdec($match[2]);
                }
                if ($match[1] !== $dictionaryVar || !isset($dictionaryValue[(int)$match[2]])) {
                    return $match[0];
                }
                $lastChar = $match[3] ?? '';
                $value = $dictionaryValue[(int)$match[2]];
                $value = str_replace(['\'', '.'], ['@@quote@@', '@@dot@@'], $value);
                $value = $quote ? '\'' . $value . '\'' : $value;
                return $value . $lastChar;
            },
            $result
        );
        $result = str_replace('\'.\'', '', $result);
        $result = str_replace(['@@quote@@', '@@dot@@'], ['\\\'', '.'], $result);
        return $result;
    }

    /**
     * @param string $arrayName
     * @param array  $array
     * @param string $str
     *
     * @return string
     */
    public static function replaceVarsByArrayName(string $arrayName, array $array, string $str): string
    {
        $result = preg_replace_callback('~\s?(\$\w+)\s?\[\s?(\d+)\s?\]\s?~msi',
            function ($match) use ($array, $arrayName) {
                if ($match[1] !== $arrayName) {
                    return $match[0];
                }
                return $array[$match[2]] ?? $match[0];
            },
            $str
        );

        return $result;
    }

    /**
     * Collects simple or concated vars from str
     * @param string $str
     * @param string $trimQuote
     * @param array $vars
     * @param bool $remove
     *
     * @return array
     */
    public static function collectVars(&$str, string $trimQuote = '"', &$vars = [], $remove = false) : array
    {
        if (!is_string($str)) {
            return $vars;
        }
        preg_match_all('~(\$(?:GLOBALS\[[\'"])?\w+)(?:[\'"]\])?\s?(\.)?=\s?([\'"].*?[\'"]);~msi', $str, $matches);

        foreach ($matches[1] as $index => $match) {
            $varName = $match;
            $varName = str_replace(['GLOBALS[\'', 'GLOBALS["'], '', $varName);
            $varValue = str_replace("$trimQuote.$trimQuote", '', $matches[3][$index]);
            $varValue = stripcslashes(trim($varValue, $trimQuote));
            if ($matches[2][$index] !== '.') {
                $vars[$varName] = $varValue;
            } else {
                $vars[$varName] .= $varValue;
            }
        }
        if ($remove) {
            $str = str_replace($matches[0], '', $str);
        }

        return $vars;
    }

    /**
     * Collects concated variable vars or str from str
     * @param string $str
     * @param string $trimQuote
     * @param array $vars
     * @param bool $remove
     *
     */
    public static function collectConcatedVars(&$str, string $trimQuote = '"', &$vars = [], $remove = false): array
    {
        if (!isset($vars)) {
            $vars = [];
        }
        if (!is_string($str)) {
            return $vars;
        }
        preg_match_all('~(\$\w+)\s?(\.)?=((?:\s?\.?\s?(?:[\'"][^"\']+[\'"]|\$\w{1,50}))+);~msi', $str, $matches, PREG_SET_ORDER);

        foreach ($matches as $match) {
            $varName = $match[1];
            $varValue = '';

            preg_match_all('~[\'"]([^"\']+)[\'"]|(\$\w{1,50})~msi', $match[3], $varsMatch, PREG_SET_ORDER);
            foreach ($varsMatch as $varMatch) {

                if ($varMatch[1] !== '') {
                    $varValue .= $varMatch[1];
                } else {
                    $varValue .= $vars[$varMatch[2]] ?? '';
                }

                $varValue = str_replace("$trimQuote.$trimQuote", '', $varValue);
                $varValue = stripcslashes(trim($varValue, $trimQuote));
            }

            if ($match[2] !== '.') {
                $vars[$varName] = $varValue;
            } else {
                $vars[$varName] .= $varValue;
            }

            if ($remove) {
                $str = str_replace($match[0], '', $str);
            }
        }

        return $vars;
    }

    /**
     * Collects simple or concated str
     * @param string $str
     * @param string $trimQuote
     *
     * @return string
     */
    public static function collectStr($str, string $trimQuote = '"') : string
    {
        preg_match('~["\'\w%=\.\+\/]+~msi', $str, $match);

        $str = str_replace("$trimQuote.$trimQuote", '', $match[0]);
        $str = trim($str, $trimQuote);

        return $str;
    }

    /**
     * Collects function wrapped vars with one arg from str
     * ex. var1 = base64_decode(str1); var2 = gzinflate(str2); and etc.
     *
     * @param string $str
     *
     * @return array
     */
    public static function collectFuncVars(string &$str, &$vars = [], $quotes = true, $delete = false): array
    {
        preg_match_all('~(\$\w+)\s*=\s*(\w+)\([\'"]([\w+/=\*]+)[\'"](?:,\s*[\'"]([\w+/=]*)[\'"])?(?:,\s*[\'"]([\w+/=]+)[\'"])?\);~msi', $str, $matches, PREG_SET_ORDER);

        foreach ($matches as $match) {
            $func = $match[2];
            $param1 = $match[3];
            $param2 = $match[4];
            $param3 = $match[5];

            if (self::convertToSafeFunc($func)) {
                if ($func === 'str_replace') {
                    $ret = @self::executeWrapper($func, [$param1, $param2, $param3]);
                } else if (in_array($func, ['trim', 'ltrim', 'rtrim', 'pack'])) {
                    $ret = @self::executeWrapper($func, [$param1, $param2]);
                } else {
                    $ret = @self::executeWrapper($func, [$param1]);
                }
            }
            $vars[$match[1]] = self::convertToSafeFunc($ret) ? $ret : ($quotes ? "'$ret'" : $ret);

            if ($delete) {
                $str = str_replace($match[0], '', $str);
            }
        }

        return $vars;
    }

    /**
     * @param array  $vars
     * @param string $str
     *
     * @return string
     */
    public static function replaceVarsFromArray(array $vars, string $str, bool $isFunc = false, $toStr = false) : string
    {
        $result = $str;

        uksort($vars, static function($a, $b) {
            return strlen($b) <=> strlen($a);
        });
        foreach ($vars as $name => $value) {
            $sub_name = substr($name, 1);
            $result = preg_replace_callback('~{?(@)?\${?[\'"]?GLOBALS[\'"]?}?\[[\'"](\w+)[\'"]\]}?~msi',
                function ($m) use ($value, $sub_name, $toStr) {
                    if ($m[2] !== $sub_name) {
                        return $m[0];
                    }
                    if ($toStr) {
                        return $m[1] . "'$value'";
                    }

                    return $m[1] . $value;
                }, $result);

            if (!is_string($value)) {
                continue;
            }
            $result = str_replace(['{' . $name . '}', $name . '('], [$value, trim($value, '\'"') . '('],
                $result);

            if (!$isFunc && !$toStr) {
                $result = str_replace($name, $value, $result);
            } else if ($toStr) {
                $result = str_replace($name, "'$value'", $result);
            }
        }

        return $result;
    }

    /**
     * Removes duplicated string variables after replacing
     *
     * @param string $str
     *
     * @return string
     */
    public static function removeDuplicatedStrVars($str) : string
    {
        return preg_replace('~[\'"]?([^\'"]+)[\'"]?\s?=\s?[\'"]?\1[\'"]?;~msi','', $str);
    }

    /**
     * @param $chars
     * @param $str
     * @return array
     */
    public static function assembleStrings($chars, $str)
    {
        $vars = [];
        array_walk($chars, static function(&$x) {
            $x = "'$x'";
        });
        $parts = explode(';', $str);
        foreach ($parts as &$part) {
            $vals = explode('=', $part);
            $part = str_replace($vals[1], strtr($vals[1], $chars), $part);
        }
        $str = implode(';', $parts);
        $vars = self::collectVars($str, '\'');
        return $vars;
    }

    /**
     * Expand base64decode() function
     *
     * @param string $str
     * @param string $quote
     * @return string
     */
    public static function replaceBase64Decode($str, $quote = '\'')
    {
        $hangs = 10;
        while(preg_match(self::REGEXP_BASE64_DECODE, $str) && $hangs--) {
            $str = preg_replace_callback(self::REGEXP_BASE64_DECODE, static function ($m) use ($quote) {
                if (substr($m[1], 0, 2) === '\x') {
                    $m[1] = stripcslashes($m[1]);
                }
                return $quote . base64_decode($m[1]) . $quote;
            }, $str);
        }
        return $str;
    }

    /**
     * Expand hex2bin() function
     *
     * @param string $str
     * @param string $quote
     * @return string
     */
    public static function replaceHex2Bin($str, $quote = '\'')
    {
        return preg_replace_callback('~hex2bin\s*\(\s*[\'"]([^\'"]*)[\'"]\s*\)~msi', static function ($m) use ($quote) {
            return $quote . hex2bin($m[1]) . $quote;
        }, $str);
    }

    /**
     * Calc min(), max() and round().
     * This function can be used with simple constructions, if they are complex, then it is better to use a separate MathCalc class.
     *
     * @param string $string
     * @param int $max_iterations
     * @return string
     */
    public static function replaceMinMaxRound($string, $max_iterations = 15)
    {
        $i = 0;
        $regexp_for_multi_min_max_round = '~(?:min|max|round)\(\s*\d+[\.\,\|\s\|+\|\-\|\*\|\/]([\d\s\.\,\+\-\*\/]+)?\)~msi';
        while (preg_match($regexp_for_multi_min_max_round, $string) && $i < $max_iterations) {
            $string = preg_replace_callback($regexp_for_multi_min_max_round, ['Helpers','calc'], $string);
            $i++;
        }

        $regexp_for_single_min_max_round = '~(?:min|max|round)\(\s*\d+\s*\)~msi';
        while (preg_match($regexp_for_single_min_max_round, $string) && $i < $max_iterations) {
            $string = preg_replace_callback($regexp_for_single_min_max_round, ['Helpers','calc'], $string);
            $i++;
        }

        $regexp_for_brackets = '~\(\s*\d+[\.\|\s\|+\|\-\|\*\|\/]([\d\s\.\+\-\*\/]+)?\)~msi';
        while (preg_match($regexp_for_brackets, $string) && $i < $max_iterations) {
            $string = preg_replace_callback($regexp_for_brackets, ['Helpers','calc'], $string);
            $i++;
        }

        return $string;
    }

    /**
     * Calc XOR with key
     *
     * @param string $encrypted
     * @param string $key
     * @return string
     */
    public static function xorWithKey($encrypted, $key)
    {
        $res = '';
        for ($i = 0, $iMax = strlen($encrypted); $i < $iMax; ) {
            for ($j = 0; $j < strlen($key) && $i < strlen($encrypted); $j++, $i++) {
                $res .= $encrypted[$i] ^ $key[$j];
            }
        }
        return $res;
    }

    /**
     * Similar to the native PHP function unserialize(), but it is safe as it only supports simple data types.
     *
     * @param string $string
     * @return array|bool|float|int|string|null
     */
    public static function unserialize(&$string)
    {
        $type = substr($string, 0, 2);
        $string = substr($string, 2);
        switch ($type) {
            case 'N;':
                return null;
            case 'b:':
                list($ret, $string) = explode(';', $string, 2);
                return (bool)(int)$ret;
            case 'i:':
                list($ret, $string) = explode(';', $string, 2);
                return (int)$ret;
            case 'd:':
                list($ret, $string) = explode(';', $string, 2);
                return (float)$ret;
            case 's:':
                list($length, $string) = explode(':', $string, 2);
                $length = (int) $length;
                if (($length > strlen($string) - 3) || ($string[0] !== '"') || (substr($string, $length + 1, 2) !== '";')) {
                    return '';
                }
                $ret = substr($string, 1, $length);
                $string = substr($string, $length + 3);
                return $ret;
            case 'a:':
                $ret = [];
                list($length, $string) = explode(':', $string, 2);
                if ($string[0] !== '{') {
                    return '';
                }
                $length = (int) $length;
                $string = substr($string, 1);
                for ($i= 0; $i < $length; $i++) {
                    $ret[self::unserialize($string)] = self::unserialize($string);
                }
                if ($string === '') {
                    return $ret;
                }
                $end = substr($string, 0, 2);
                if ($end !== '' && $end !== '};' && $end !== '}' && $end !== '}}') {
                    return '';
                }
                $string = substr($string, 2);
                return $ret;
            case 'O:':
                list($length, $string) = explode(':', $string, 2);
                $length = (int) $length;
                $string = substr($string, $length + 3);
                list($length, $string) = explode(':', $string, 2);
                $string = preg_replace('~{([^{}]*+(?:(?R)[^{}]*)*+)}~msi', '', $string);
                return '';
            default:
                return '';
        }
    }

    /**
     * Post processing after deobfuscation
     *
     * @param string $deobfuscated
     * @return string
     */
    public static function postProcess($deobfuscated) : string
    {
        $deobfuscated = preg_replace_callback('~"[\w\\\\\s=;_<>&/\.-]+"~msi', static function ($matches) {
            return preg_match('~\\\\x[2-7][0-9a-f]|\\\\1[0-2][0-9]|\\\\[3-9][0-9]|\\\\0[0-4][0-9]|\\\\1[0-7][0-9]~msi', $matches[0]) ? stripcslashes($matches[0]) : $matches[0];
        }, $deobfuscated);

        $deobfuscated = preg_replace_callback('~echo\s*"((.*?[^\\\\])??((\\\\\\\\)+)?+)"~msi', static function ($matches) {
            return preg_match('~\\\\x[2-7][0-9a-f]|\\\\1[0-2][0-9]|\\\\[3-9][0-9]|\\\\0[0-4][0-9]|\\\\1[0-7][0-9]~msi', $matches[0]) ? stripcslashes($matches[0]) : $matches[0];
        }, $deobfuscated);

        preg_match_all('~(global\s*(\$[\w_]+);)\2\s*=\s*"[^"]+";~msi', $deobfuscated, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $deobfuscated = str_replace($match[0], '', $deobfuscated);
            $deobfuscated = str_replace($match[1], '', $deobfuscated);
        }

        preg_match_all('~\$\{"GLOBALS"\}\[[\'"](\w+)[\'"]\]=["\'](\w+)[\'"];~msi', $deobfuscated, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $deobfuscated = preg_replace_callback('~\$\{\$\{"GLOBALS"\}\[[\'"](\w+)[\'"]\]\}~msi', static function ($matches) use ($match) {
                if ($matches[1] !== $match[1]) {
                    return $matches[0];
                }
                return '$' . $match[2];
            }, $deobfuscated);
            $deobfuscated = str_replace($match[0], '', $deobfuscated);
        }

        if (strpos($deobfuscated, '${$') !== false) {
            preg_match_all('~\$\{(\$\w+)\}~msi', $deobfuscated, $matches);
            preg_match_all('~(\$\w+)\s*=\s*["\'](\w+)[\'"];~msi', $deobfuscated, $matches2);
            $replace_to = [];
            foreach ($matches[1] as $k => $match) {
                $index = array_search($match, $matches2[1]);
                if ($index !== false) {
                    $replace_to[] = '$' . $matches2[2][$index];
                } else {
                    unset($matches[0][$k]);
                }
            }
            if (!empty($replace_to)) {
                $deobfuscated = str_replace($matches[0], $replace_to, $deobfuscated);
            }
        }

        if (strpos($deobfuscated, 'chr(')) {
            $deobfuscated = preg_replace_callback('~chr\((\d+)\)~msi', static function ($matches) {
                return "'" . chr($matches[1]) . "'";
            }, $deobfuscated);
        }
        return $deobfuscated;
    }

    /*************************************************************************************************************/
    /*                                Helper functions for individual obfuscators                                */
    /*************************************************************************************************************/

    /**
     * @param $a
     * @param $b
     *
     * @return string
     */
    public static function decodefuncDictVars($a, $b)
    {
        $c = preg_split("//", $a, -1, PREG_SPLIT_NO_EMPTY);
        foreach ($c as $d => $e) {
            $c[$d] = chr(ord($e) + $b);
        }
        $res = implode("", $c);

        return $res;
    }

    /**
     * @param $string
     * @param $amount
     *
     * @return string
     */
    public static function rotencode($string, $amount)
    {
        $key = substr($string, 0, 1);
        if (strlen($string) == 1) {
            return chr(ord($key) + $amount);
        } else {
            return chr(ord($key) + $amount) . self::rotencode(
                    substr($string, 1, strlen($string) - 1),
                    $amount);
        }
    }

    /**
     * @param string $data
     * @param string $key
     *
     * @return string
     */
    public static function decodeEvalFileContentBySize(string $data, string $key): string
    {
        $res = '';
        $key = md5($key) . md5($key . $key);
        $key_len = strlen($key);
        $data_len = strlen($data);
        for ($i = 0; $i < $data_len; $i++) {
            $res .= chr(ord($data[$i]) ^ ord($key[$i % $key_len]));
        }

        return $res;
    }

    /**
     * @param string $key
     * @param string $data
     *
     * @return string
     */
    public static function decodeFuncVars(string $key, string $data): string
    {
        $hakfku = $data;
        $keyLen = strlen($key);
        $dataLen = strlen($hakfku);
        $res = "";
        for ($i = 0; $i < $dataLen;) {
            for ($j = 0; ($j < $keyLen && $i < $dataLen); $j++, $i++) {
                $res .= $hakfku[$i] ^ $key[$j];
            }
        }

        return $res;
    }

    public static function dictionarySampleDecode($string)
    {
        $str1 = substr($string, 0, 5);
        $str2 = substr($string, 7, -7);
        $str3 = substr($string, -5);
        return gzinflate(base64_decode($str1 . $str2 . $str3));
    }

    public static function codelock_dec($codelock_v)
    {
        switch ($codelock_v) {
            case "A":
                $dv = 0;
                break;
            case "B":
                $dv = 1;
                break;
            case "C":
                $dv = 2;
                break;
            case "D":
                $dv = 3;
                break;
            case "E":
                $dv = 4;
                break;
            case "F":
                $dv = 5;
                break;
            case "G":
                $dv = 6;
                break;
            case "H":
                $dv = 7;
                break;
            case "I":
                $dv = 8;
                break;
            case "J":
                $dv = 9;
                break;
            case "K":
                $dv = 10;
                break;
            case "L":
                $dv = 11;
                break;
            case "M":
                $dv = 12;
                break;
            case "N":
                $dv = 13;
                break;
            case "O":
                $dv = 14;
                break;
            case "P":
                $dv = 15;
                break;
            case "Q":
                $dv = 16;
                break;
            case "R":
                $dv = 17;
                break;
            case "S":
                $dv = 18;
                break;
            case "T":
                $dv = 19;
                break;
            case "U":
                $dv = 20;
                break;
            case "V":
                $dv = 21;
                break;
            case "W":
                $dv = 22;
                break;
            case "X":
                $dv = 23;
                break;
            case "Y":
                $dv = 24;
                break;
            case "Z":
                $dv = 25;
                break;
            case "a":
                $dv = 26;
                break;
            case "b":
                $dv = 27;
                break;
            case "c":
                $dv = 28;
                break;
            case "d":
                $dv = 29;
                break;
            case "e":
                $dv = 30;
                break;
            case "f":
                $dv = 31;
                break;
            case "g":
                $dv = 32;
                break;
            case "h":
                $dv = 33;
                break;
            case "i":
                $dv = 34;
                break;
            case "j":
                $dv = 35;
                break;
            case "k":
                $dv = 36;
                break;
            case "l":
                $dv = 37;
                break;
            case "m":
                $dv = 38;
                break;
            case "n":
                $dv = 39;
                break;
            case "o":
                $dv = 40;
                break;
            case "p":
                $dv = 41;
                break;
            case "q":
                $dv = 42;
                break;
            case "r":
                $dv = 43;
                break;
            case "s":
                $dv = 44;
                break;
            case "t":
                $dv = 45;
                break;
            case "u":
                $dv = 46;
                break;
            case "v":
                $dv = 47;
                break;
            case "w":
                $dv = 48;
                break;
            case "x":
                $dv = 49;
                break;
            case "y":
                $dv = 50;
                break;
            case "z":
                $dv = 51;
                break;
            case "0":
                $dv = 52;
                break;
            case "1":
                $dv = 53;
                break;
            case "2":
                $dv = 54;
                break;
            case "3":
                $dv = 55;
                break;
            case "4":
                $dv = 56;
                break;
            case "5":
                $dv = 57;
                break;
            case "6":
                $dv = 58;
                break;
            case "7":
                $dv = 59;
                break;
            case "8":
                $dv = 60;
                break;
            case "9":
                $dv = 61;
                break;
            case "+":
                $dv = 62;
                break;
            case "/":
                $dv = 63;
                break;
            case "=":
                $dv = 64;
                break;
            default:
                $dv = 0;
                break;
        }
        return $dv;
    }

    public static function codelock_run($ciph, $key)
    {
        $m = 0;
        $abc = "";
        for ($i = 0, $iMax = strlen($ciph); $i < $iMax; $i++) {
            $c = substr($ciph, $i, 1);
            $dv = Helpers::codelock_dec($c);
            $dv = ($dv - $m) / 4;
            $fb = decbin($dv);
            while (strlen($fb) < 4) {
                $fb = "0" . $fb;
            }
            $abc = $abc . $fb;
            $m++;
            if ($m > 3) {
                $m = 0;
            }
        }
        $kl = 0;
        $pd = "";
        for ($j = 0, $jMax = strlen($abc); $j < $jMax; $j = $j + 8) {
            $c = substr($abc, $j, 8);
            $k = substr($key, $kl, 1);
            $dc = bindec($c);
            $dc = $dc - strlen($key);
            $c = chr($dc);
            $kl++;
            if ($kl >= strlen($key)) {
                $kl = 0;
            }
            $dc = ord($c) ^ ord($k);
            $p = chr($dc);
            $pd = $pd . $p;
        }
        return $pd;
    }

    public static function codelock_dec_int($codelock_decint_code, $codelock_calc_key)
    {
        if ($codelock_calc_key !== "") {
            $codelock_calc_key = base64_encode($codelock_calc_key);
            $codelock_k1 = substr($codelock_calc_key, 0, 1);
            $codelock_k2 = substr($codelock_calc_key, 1, 1);
            $codelock_k3 = substr($codelock_calc_key, 2, 1);
            $codelock_decint_code = str_replace("$", "$codelock_k1", $codelock_decint_code);
            $codelock_decint_code = str_replace("(", "$codelock_k2", $codelock_decint_code);
            $codelock_decint_code = str_replace(")", "$codelock_k3", $codelock_decint_code);
        }
        $codelock_decint_code = base64_decode($codelock_decint_code);
        return $codelock_decint_code;
    }

    public static function decodeClassDecryptedWithKey(string $data, int $num, string $key): string
    {
        $CTL = function ($start, &$data, &$data_long)
        {
            $n = strlen($data);
            $tmp = unpack('N*', $data);
            $j = $start;
            foreach ($tmp as $value) $data_long[$j++] = $value;
            return $j;
        };

        $LtoC = function ($l)
        {
            return pack('N', $l);
        };

        $add = function ($i1, $i2)
        {
            $result = 0.0;
            foreach (func_get_args() as $value) {
                if (0.0 > $value) {
                    $value -= 1.0 + 0xffffffff;
                }
                $result += $value;
            }
            if (0xffffffff < $result || -0xffffffff > $result) {
                $result = fmod($result, 0xffffffff + 1);
            }
            if (0x7fffffff < $result) {
                $result -= 0xffffffff + 1.0;
            } elseif (-0x80000000 > $result) {
                $result += 0xffffffff + 1.0;
            }
            return $result;
        };

        $rsLT = function ($integer, $n)
        {
            if (0xffffffff < $integer || -0xffffffff > $integer) {
                $integer = fmod($integer, 0xffffffff + 1);
            }
            if (0x7fffffff < $integer) {
                $integer -= 0xffffffff + 1.0;
            } elseif (-0x80000000 > $integer) {
                $integer += 0xffffffff + 1.0;
            }
            if (0 > $integer) {
                $integer &= 0x7fffffff;
                $integer >>= $n;
                $integer |= 1 << (31 - $n);
            } else {
                $integer >>= $n;
            }
            return $integer;
        };

        $delg = function ($y, $z, &$w, &$k, $num) use ($add, $rsLT)
        {
            $sum = 0xC6EF3720;
            $klhys = 0x9E3779B9;
            $n = $num;
            while ($n-- > 0) {
                $z = $add($z, -($add($y << 4 ^ $rsLT($y, 5), $y) ^ $add($sum, $k[$rsLT($sum, 11) & 3])));
                $sum = $add($sum, -$klhys);
                $y = $add($y, -($add($z << 4 ^ $rsLT($z, 5), $z) ^ $add($sum, $k[$sum & 3])));
            }
            $w[0] = $y;
            $w[1] = $z;
        };

        $resize = function (&$data, $size, $nonull = false)
        {
            $n = strlen($data);
            $nmod = $n % $size;
            if (0 == $nmod) $nmod = $size;
            if ($nmod > 0) {
                if ($nonull) {
                    for ($i = $n; $i < $n - $nmod + $size; ++$i) {
                        $data[$i] = $data[$i % $n];
                    }
                } else {
                    for ($i = $n; $i < $n - $nmod + $size; ++$i) {
                        $data[$i] = chr(0);
                    }
                }
            }
            return $n;
        };

        $ncdL = $CTL(0, $data, $enc_data_long);
        $resize($key, 16, true);
        $n_key_long = $CTL(0, $key, $key_long);
        $data = '';
        $w = array(0, 0);
        $j = 0;
        $len = 0;
        $k = array(0, 0, 0, 0);
        $pos = 0;
        for ($i = 0; $i < $ncdL; $i += 2) {
            if ($j + 4 <= $n_key_long) {
                $k[0] = $key_long[$j];
                $k[1] = $key_long[$j + 1];
                $k[2] = $key_long[$j + 2];
                $k[3] = $key_long[$j + 3];
            } else {
                $k[0] = $key_long[$j % $n_key_long];
                $k[1] = $key_long[($j + 1) % $n_key_long];
                $k[2] = $key_long[($j + 2) % $n_key_long];
                $k[3] = $key_long[($j + 3) % $n_key_long];
            }
            $j = ($j + 4) % $n_key_long;
            $delg($enc_data_long[$i], $enc_data_long[$i + 1], $w, $k, $num);
            if (0 == $i) {
                $len = $w[0];
                if (4 <= $len) {
                    $data .= $LtoC($w[1]);
                } else {
                    $data .= substr($LtoC($w[1]), 0, $len % 4);
                }
            } else {
                $pos = ($i - 1) * 4;
                if ($pos + 4 <= $len) {
                    $data .= $LtoC($w[0]);
                    if ($pos + 8 <= $len) {
                        $data .= $LtoC($w[1]);
                    } elseif ($pos + 4 < $len) {
                        $data .= substr($LtoC($w[1]), 0, $len % 4);
                    }
                } else {
                    $data .= substr($LtoC($w[0]), 0, $len % 4);
                }
            }
        }
        return $data;
    }

    public static function stripsquoteslashes($str)
    {
        $res = '';
        for ($i = 0, $iMax = strlen($str); $i < $iMax; $i++) {
            if (isset($str[$i+1]) && ($str[$i] == '\\' && ($str[$i+1] == '\\' || $str[$i+1] == '\''))) {
                continue;
            } else {
                $res .= $str[$i];
            }
        }
        return $res;
    }

    public static function decodeFileGetContentsWithFunc($data, $key)
    {
        $out_data = "";

        for ($i = 0; $i < strlen($data);) {
            for ($j = 0; $j < strlen($key) && $i < strlen($data); $j++, $i++) {
                $out_data .= chr(ord($data[$i]) ^ ord($key[$j]));
            }
        }

        return $out_data;
    }

    public static function decrypt_T_func($l)
    {
        $x2 = 256;
        $W2 = 8;
        $cY = [];
        $I3 = 0;
        $C4 = 0;
        for ($bs = 0, $bsMax = strlen($l); $bs < $bsMax; $bs++) {
            $I3 = ($I3 << 8) + ord($l[$bs]);
            $C4 += 8;
            if ($C4 >= $W2) {
                $C4 -= $W2;
                $cY[] = $I3 >> $C4;
                $I3 &= (1 << $C4) - 1;
                $x2++;
                if ($x2 >> $W2) {
                    $W2++;
                }
            }
        }
        $K5 = range("\x0", "\377");
        $UH = '';
        foreach ($cY as $bs => $xd) {
            if (!isset($K5[$xd])) {
                $iU = $Co . $Co[0];
            } else {
                $iU = $K5[$xd];
            }
            $UH .= $iU;
            if ($bs) {
                $K5[] = $Co . $iU[0];
            }
            $Co = $iU;
        }
        return $UH;
    }

    //from sample_16
    public static function someDecoder($str)
    {
        $str = base64_decode($str);
        $TC9A16C47DA8EEE87 = 0;
        $TA7FB8B0A1C0E2E9E = 0;
        $T17D35BB9DF7A47E4 = 0;
        $T65CE9F6823D588A7 = (ord($str[1]) << 8) + ord($str[2]);
        $i = 3;
        $T77605D5F26DD5248 = 0;
        $block = 16;
        $T7C7E72B89B83E235 = "";
        $T43D5686285035C13 = "";
        $len = strlen($str);

        $T6BBC58A3B5B11DC4 = 0;

        for (; $i < $len;) {
            if ($block == 0) {
                $T65CE9F6823D588A7 = (ord($str[$i++]) << 8);
                $T65CE9F6823D588A7 += ord($str[$i++]);
                $block = 16;
            }
            if ($T65CE9F6823D588A7 & 0x8000) {
                $TC9A16C47DA8EEE87 = (ord($str[$i++]) << 4);
                $TC9A16C47DA8EEE87 += (ord($str[$i]) >> 4);
                if ($TC9A16C47DA8EEE87) {
                    $TA7FB8B0A1C0E2E9E = (ord($str[$i++]) & 0x0F) + 3;
                    for ($T17D35BB9DF7A47E4 = 0; $T17D35BB9DF7A47E4 < $TA7FB8B0A1C0E2E9E; $T17D35BB9DF7A47E4++) {
                        $T7C7E72B89B83E235[$T77605D5F26DD5248 + $T17D35BB9DF7A47E4] =
                            $T7C7E72B89B83E235[$T77605D5F26DD5248 - $TC9A16C47DA8EEE87 + $T17D35BB9DF7A47E4];
                    }
                    $T77605D5F26DD5248 += $TA7FB8B0A1C0E2E9E;
                } else {
                    $TA7FB8B0A1C0E2E9E = (ord($str[$i++]) << 8);
                    $TA7FB8B0A1C0E2E9E += ord($str[$i++]) + 16;
                    for ($T17D35BB9DF7A47E4 = 0; $T17D35BB9DF7A47E4 < $TA7FB8B0A1C0E2E9E;
                         $T7C7E72B89B83E235[$T77605D5F26DD5248 + $T17D35BB9DF7A47E4++] = $str[$i]) {
                    }
                    $i++;
                    $T77605D5F26DD5248 += $TA7FB8B0A1C0E2E9E;
                }
            } else {
                $T7C7E72B89B83E235[$T77605D5F26DD5248++] = $str[$i++];
            }
            $T65CE9F6823D588A7 <<= 1;
            $block--;
            if ($i == $len) {
                $T43D5686285035C13 = $T7C7E72B89B83E235;
                if (is_array($T43D5686285035C13)) {
                    $T43D5686285035C13 = implode($T43D5686285035C13);
                }
                $T43D5686285035C13 = "?" . ">" . $T43D5686285035C13;
                return $T43D5686285035C13;
            }
        }
    }

    public static function someDecoder2($WWAcmoxRAZq, $sBtUiFZaz)   //sample_05
    {
        $JYekrRTYM = str_rot13(gzinflate(str_rot13(base64_decode('y8svKCwqLiktK6+orFdZV0FWWljPyMzKzsmNNzQyNjE1M7ewNAAA'))));
        if ($WWAcmoxRAZq == 'asedferg456789034689gd') {
            $cEerbvwKPI = $JYekrRTYM[18] . $JYekrRTYM[19] . $JYekrRTYM[17] . $JYekrRTYM[17] . $JYekrRTYM[4] . $JYekrRTYM[21];
            return self::convertToSafeFunc($cEerbvwKPI) ? @self::executeWrapper($cEerbvwKPI, [$sBtUiFZaz]) : '';
        } elseif ($WWAcmoxRAZq == 'zfcxdrtgyu678954ftyuip') {
            $JWTDeUKphI = $JYekrRTYM[1] . $JYekrRTYM[0] . $JYekrRTYM[18] . $JYekrRTYM[4] . $JYekrRTYM[32] .
                $JYekrRTYM[30] . $JYekrRTYM[26] . $JYekrRTYM[3] . $JYekrRTYM[4] . $JYekrRTYM[2] . $JYekrRTYM[14] .
                $JYekrRTYM[3] . $JYekrRTYM[4];
            return self::convertToSafeFunc($JWTDeUKphI) ? @self::executeWrapper($JWTDeUKphI, [$sBtUiFZaz]) : '';
        } elseif ($WWAcmoxRAZq == 'gyurt456cdfewqzswexcd7890df') {
            $rezmMBMev = $JYekrRTYM[6] . $JYekrRTYM[25] . $JYekrRTYM[8] . $JYekrRTYM[13] . $JYekrRTYM[5] . $JYekrRTYM[11] . $JYekrRTYM[0] . $JYekrRTYM[19] . $JYekrRTYM[4];
            return self::convertToSafeFunc($rezmMBMev) ? @self::executeWrapper($rezmMBMev, [$sBtUiFZaz]) : '';
        } elseif ($WWAcmoxRAZq == 'zcdfer45dferrttuihvs4321890mj') {
            $WbbQXOQbH = $JYekrRTYM[18] . $JYekrRTYM[19] . $JYekrRTYM[17] . $JYekrRTYM[26] . $JYekrRTYM[17] . $JYekrRTYM[14] . $JYekrRTYM[19] . $JYekrRTYM[27] . $JYekrRTYM[29];
            return self::convertToSafeFunc($WbbQXOQbH) ? @self::executeWrapper($WbbQXOQbH, [$sBtUiFZaz]) : '';
        } elseif ($WWAcmoxRAZq == 'zsedrtre4565fbghgrtyrssdxv456') {
            $jPnPLPZcMHgH = $JYekrRTYM[2] . $JYekrRTYM[14] . $JYekrRTYM[13] . $JYekrRTYM[21] . $JYekrRTYM[4] . $JYekrRTYM[17] . $JYekrRTYM[19] . $JYekrRTYM[26] . $JYekrRTYM[20] . $JYekrRTYM[20] . $JYekrRTYM[3] . $JYekrRTYM[4] . $JYekrRTYM[2] . $JYekrRTYM[14] . $JYekrRTYM[3] . $JYekrRTYM[4];
            return self::convertToSafeFunc($jPnPLPZcMHgH) ? @self::executeWrapper($jPnPLPZcMHgH, [$sBtUiFZaz]) : '';
        }
    }

    public static function someDecoder3($str)
    {
        $l = base64_decode($str);
        $lllllll = 0;
        $lllll = 3;
        $llllll = (ord($l[1]) << 8) + ord($l[2]);
        $lllllllll = 16;
        $llllllll = [];
        for ($lllllMax = strlen($l); $lllll < $lllllMax;) {
            if ($lllllllll == 0) {
                $llllll = (ord($l[$lllll++]) << 8);
                $llllll+= ord($l[$lllll++]);
                $lllllllll = 16;
            }
            if ($llllll & 0x8000) {
                $lll = (ord($l[$lllll++]) << 4);
                $lll+= (ord($l[$lllll]) >> 4);
                if ($lll) {
                    $ll = (ord($l[$lllll++]) & 0x0f) + 3;
                    for ($llll = 0;$llll < $ll;$llll++) $llllllll[$lllllll + $llll] = $llllllll[$lllllll - $lll + $llll];
                    $lllllll+= $ll;
                } else {
                    $ll = (ord($l[$lllll++]) << 8);
                    $ll+= ord($l[$lllll++]) + 16;
                    for ($llll = 0;$llll < $ll;$llllllll[$lllllll + $llll++] = ord($l[$lllll]));
                    $lllll++;
                    $lllllll+= $ll;
                }
            } else {
                $llllllll[$lllllll++] = ord($l[$lllll++]);
            }
            $llllll <<= 1;
            $lllllllll--;
        }
        $lllll = 0;
        $lllllllll="?".chr(62);
        $llllllllll = "";
        for (;$lllll < $lllllll;) {
            $llllllllll.= chr($llllllll[$lllll++] ^ 0x07);
        }
        $lllllllll.=$llllllllll.chr(60)."?";
        return $lllllllll;
    }

    public static function PHPJiaMi_decoder($str, $md5, $rand, $lower_range = '')
    {
        $md5_xor = md5($md5);
        $lower_range = !$lower_range ? ord($rand) : $lower_range;
        $layer1 = '';
        for ($i=0, $iMax = strlen($str); $i < $iMax; $i++) {
            $layer1 .= ord($str[$i]) < 245 ? ((ord($str[$i]) > $lower_range && ord($str[$i]) < 245) ? chr(ord($str[$i]) / 2) : $str[$i]) : '';
        }
        $layer1 = base64_decode($layer1);
        $result = '';
        $j = $len_md5_xor = strlen($md5_xor);
        for ($i=0, $iMax = strlen($layer1); $i < $iMax; $i++) {
            $j = $j ? $j : $len_md5_xor;
            $j--;
            $result .= $layer1[$i] ^ $md5_xor[$j];
        }
        return $result;
    }

    public static function someDecoder4($ae, $key)
    {
        $at = [];
        for ($i = 0, $iMax = strlen($key); $i < $iMax; $i++) {
            if ((int)$key[$i] > 0) {
                $at[$i] = $key[$i];
            }
        }
        $at = array_values($at);
        $str = "";
        for ($i = 0, $iMax = count($ae); $i < $iMax; $i++) {
            if ($i < count($ae) - 1) {
                $str .= str_replace(md5($at[$i]), "", $ae[$i]);
            } else {
                $str .= $ae[$i];
            }
        }
        return $str;
    }

    public static function OELoveDecoder($arg1, $arg2 = '')
    {
        if (empty($arg1)) {
            return '';
        }
        $arg1 = base64_decode($arg1);
        if ($arg2 == '') return ~$arg1;
        //if ($arg2 == '-1') @271552362217();
        $len = strlen($arg1);
        $arg2 = str_pad($arg2, $len, $arg2);
        return $arg2 ^ $arg1;
    }

    public static function aanKFMDigitsDecode($digits)
    {
        $res = '';
        $len = ceil(strlen($digits) / 3) * 3;
        $cipher = str_pad($digits, $len, '0', STR_PAD_LEFT);
        for ($i = 0; $i < (strlen($cipher) / 3);$i++) {
            $res .= chr(substr($cipher, $i * 3, 3));
        }
        return $res;
    }

    public static function obf20200414_1_decrypt($data, $key)
    {
        $key = md5($key);
        $x = 0;
        $data = base64_decode($data);
        $len = strlen($data);
        $l = strlen($key);
        $char = '';
        for ($i = 0; $i < $len; $i++) {
            if ($x === $l) {
                $x = 0;
            }
            $char .= substr($key, $x, 1);
            $x++;
        }
        $str = '';
        for ($i = 0; $i < $len; $i++) {
            if (ord(substr($data, $i, 1)) < ord(substr($char, $i, 1))) {
                $str .= chr((ord(substr($data, $i, 1)) + 256) - ord(substr($char, $i, 1)));
            } else {
                $str .= chr(ord(substr($data, $i, 1)) - ord(substr($char, $i, 1)));
            }
        }
        return $str;
    }

    public static function Xtea_decrypt($text, $key)
    {
        $_key = '';
        $cbc = 1;

        if(is_array($key)) {
            $_key = $key;
        } else if(isset($key) && !empty($key)) {
            $_key = self::_str2long(str_pad($key, 16, $key));
        } else {
            $_key = [0, 0, 0, 0];
        }

        $plain = [];
        $cipher = self::_str2long(base64_decode($text));

        if($cbc == 1) {
            $i = 2;
        } else {
            $i = 0;
        }

        for ($i, $iMax = count($cipher); $i < $iMax; $i += 2) {
            $return = self::block_decrypt($cipher[$i], $cipher[$i+1], $_key);
            if($cbc == 1) {
                $plain[] = [$return[0] ^ $cipher[$i - 2], $return[1] ^ $cipher[$i - 1]];
            } else {
                $plain[] = $return;
            }
        }

        $output = "";
        for($i = 0, $iMax = count($plain); $i < $iMax; $i++) {
            $output .= self::_long2str($plain[$i][0]);
            $output .= self::_long2str($plain[$i][1]);
        }

        return $output;
    }

    public static function getDecryptKeyForTinkleShell($size)
    {
        $bx = md5(base64_encode($size));
        $len = strlen($bx);
        $arr = [];
        for ($i = 0; $i < $len; $i++) {
            $arr[] = substr($bx, $i, 1);
        }
        $arr = array_unique($arr);
        $newstr = "";
        foreach ($arr as $k => $v) {
            $newstr .= $v;
        }
        if (strlen($newstr) < 9) {
            if (strpos($newstr, 'A') === false) {
                $newstr .= 'A';
            }
            if (strpos($newstr, 'B') === false) {
                $newstr .= 'B';
            }
            if (strpos($newstr, 'C') === false) {
                $newstr .= 'C';
            }
            if (strpos($newstr, 'D') === false) {
                $newstr .= 'D';
            }
            if (strpos($newstr, 'E') === false) {
                $newstr .= 'E';
            }
            if (strpos($newstr, 'F') === false) {
                $newstr .= 'F';
            }
            if (strpos($newstr, 'G') === false) {
                $newstr .= 'G';
            }
        }

        return strtoupper($newstr);
    }

    /**
     * For 4 args
     * @param array $arr
     *
     * @return string
     */
    public static function decodeEvalCreateFunc_1(array $arr) : string
    {
        $args = $arr;

        for ($i = 0; $i < 4; $i++) {
            for ($j = 0, $jMax = strlen($args[$i]); $j < $jMax; $j++) {
                $args[$i][$j] = chr(ord($args[$i][$j]) - ($i ? $args[$j xor $j] : 1));
            }
            if ($i === 2 && self::convertToSafeFunc($args[1]) && self::convertToSafeFunc($args[2])) {
                $args[3] = @self::executeWrapper($args[1], [@self::executeWrapper($args[2], [$args[3]])]);
            }
        }

        return $args[3];
    }

    /**
     * For 3 args
     * @param array $arr
     *
     * @return string
     */
    public static function decodeEvalCreateFunc_2(array $arr) : string
    {
        $args = $arr;

        for ($i = 0; $i < 3; $i++) {
            for ($j = 0, $jMax = strlen($args[$i]); $j < $jMax; $j++) {
                $args[$i][$j] = chr(ord($args[$i][$j]) - 1);
            }
            if ($i === 1 && self::convertToSafeFunc($args[0]) && self::convertToSafeFunc($args[1])) {
                $args[2] = @self::executeWrapper($args[0],[@self::executeWrapper($args[1], [$args[2]])]);
            }
        }

        return $args[2];
    }

    public static function decodeACharCustom($encoded)
    {
        $result = '';
        $i = 0;
        $len = strlen($encoded);
        while ($i < $len) {
            if ($encoded[$i] === ' ') {
                $result .= ' ';
            } else if ($encoded[$i] === '!') {
                $result .= chr((ord($encoded[$i + 1]) - ord('A')) * 16 + (ord($encoded[$i + 2]) - ord('a')));
                $i += 2;
            } else {
                $result .= chr (ord($encoded[$i]) + 1);
            }
            $i++;
        }
        return $result;
    }

    public static function joomlaInjectDecoder($params, $op, $delta)
    {
        $params = explode(',', $params);
        $params = array_reverse($params);
        for ($i = 1, $iMax = count($params); $i < $iMax; $i++) {
            if ($i !== 0 ) {
                $params[$i] = substr($params[$i], 1, -1);
            }
            for ($j = 0, $jMax = strlen($params[$i]); $j < $jMax; $j++) {
                $tmp = ord($params[$i][$j]);
                if ($op === '-') {
                    $tmp = $tmp - $delta;

                } else if ($op === '+') {
                    $tmp = $tmp + $delta;
                }
                $params[$i][$j] = chr($tmp);
            }
            if ($i === 0) {
                break;
            }
            if (self::convertToSafeFunc($params[$i])) {
                $params[0] = @self::executeWrapper($params[$i], [$params[0]]);
            }
            if ($i === $iMax - 1) {
                $i = -1;
            }
        }
        return $params[0];
    }

    public static function deobfuscatorIO_string($string, $key)
    {
        $m = [];
        $n = 0;
        $p = '';
        $string = base64_decode($string);
        for ($i = 0, $iMax = strlen($string); $i < $iMax; $i++) {
            if ($string[$i] === "\xC3") {
                $inc = 64;
                continue;
            } else if ($string[$i] === "\xC2") {
                continue;
            }
            $p .= chr(ord($string[$i]) + $inc);
            $inc = 0;
        }
        $string = $p;
        $p = '';
        for ($i = 0; $i < 256; $i++) {
            $m[$i] = $i;
        }
        for ($i = 0; $i < 256; $i++) {
            $n = ($n + $m[$i] + ord($key[$i % strlen($key)])) % 256;
            $o = $m[$i];
            $m[$i] = $m[$n];
            $m[$n] = $o;
        }
        $r = 0;
        $n = 0;
        for ($i = 0, $iMax = strlen($string); $i < $iMax; $i++) {
            $r = ($r + 1) % 256;
            $n = ($n + $m[$r]) % 256;
            $o = $m[$r];
            $m[$r] = $m[$n];
            $m[$n] = $o;
            $p .= chr(ord($string[$i]) ^ $m[($m[$r] + $m[$n]) % 256]);
        }
        return $p;
    }

    public static function decodeEvalFuncBinary($input)
    {
        if (empty($input)) {
            return;
        }
        $keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
        $chr1 = $chr2 = $chr3 = "";
        $enc1 = $enc2 = $enc3 = $enc4 = "";
        $i = 0;
        $output = "";
        $input = preg_replace("[^A-Za-z0-9\+\/\=]", "", $input);
        do {
            $enc1 = strpos($keyStr, substr($input, $i++, 1));
            $enc2 = strpos($keyStr, substr($input, $i++, 1));
            $enc3 = strpos($keyStr, substr($input, $i++, 1));
            $enc4 = strpos($keyStr, substr($input, $i++, 1));
            $chr1 = ($enc1 << 2) | ($enc2 >> 4);
            $chr2 = (($enc2 & 15) << 4) | ($enc3 >> 2);
            $chr3 = (($enc3 & 3) << 6) | $enc4;
            $output .= chr($chr1);
            if ($enc3 !== 64) {
                $output .= chr($chr2);
            }
            if ($enc4 !== 64) {
                $output .= chr($chr3);
            }
            $chr1 = $chr2 = $chr3 = "";
            $enc1 = $enc2 = $enc3 = $enc4 = "";
        } while ($i < strlen($input));

        return $output;
    }

    public static function jsPackerUnbaser($int, $radix)
    {
        if ($int < $radix) {
            $ret = '';
        } else {
            $ret = self::jsPackerUnbaser((int)($int / $radix), $radix);
        }

        if (($int = $int % $radix) > 35) {
            $ret .= chr($int + 29);
        } else {
            $ret .= base_convert((string)$int, 10, 36);
        }
        return $ret;
    }

    public static function jsObjectDecodeIndexToString($int)
    {
        $ret = base_convert((string)$int, 10, 36);
        $ret = preg_replace_callback('~[0-9]~', function ($m) {
            return chr((int)$m[0] + 65);
        }, $ret);
        return $ret;
    }

    public static function jsObjectStringDecoder($r, $t, $encoded)
    {
        $ret = '';
        $i = 1;
        for ($f = 0, $fMax = strlen($encoded); $f < $fMax; $f++) {
            $o = strpos($r, $encoded[$f]);
            if (in_array($encoded[$f], $t)) {
                $i = 0;
            }
            if ($o !== false) {
                $ret .= chr($i * strlen($r) + $o);
                $i = 1;
            }
        }
        return $ret;
    }

    public static function utfCharVarsFuncEvalVarDecoder($argOne, $argTwo = '')
    {
        $argOne = base64_decode($argOne);
        if (empty($argOne)) {
            return '';
        }
        if ($argTwo == '') {
            return ~$argOne;
        } else {
            //$temp   = $globalVar['¾”Ã‰Å”—˜']($argOne);//strlen
            //$argTwo = $globalVar['ÊƒÑÇ»µ½Èªº']($argTwo, $temp, $argTwo); //str_pad
            $temp   = strlen($argOne);//strlen
            $argTwo = str_pad($argTwo, $temp, $argTwo); //str_pad
            return $argOne ^ $argTwo;
        }
    }

    public static function utfCharVarsFuncEvalVarCollector($globalVarName, $funcName, &$str, &$vars = []): array
    {
        $varsMatchesRegex = '~\\' . $globalVarName . '\[\'([^\']+)\'\]\s?=\s?' . $funcName . '\(\'([^\']+)\',\'([^\']*)\'\);~msi';
        preg_match_all($varsMatchesRegex, $str, $varsMatches, PREG_SET_ORDER);

        foreach ($varsMatches as $varsMatch) {
            $vars[$varsMatch[1]] = self::utfCharVarsFuncEvalVarDecoder($varsMatch[2], $varsMatch[3]);
            $str = str_replace($varsMatch[0], '', $str);
        }

        return $vars;
    }

    public static function utfCharVarsFuncEvalCodeDecoder(&$str, &$vars, $globalVarName, $funcName): string
    {
        $vars = Helpers::utfCharVarsFuncEvalVarCollector($globalVarName, $funcName, $str, $vars);
        foreach ($vars as $name => $val) {
            $str = str_replace($globalVarName . '[\'' . $name . '\'](', $val . '(', $str);
        }

        return $str;
    }

    public static function varFuncStrDecoder(string $strData): string
    {
        $strLen = strlen(trim($strData));
        $result = '';
        for ($i = 0; $i < $strLen; $i += 2) {
            $result .= pack("C", hexdec(substr($strData, $i, 2)));
        }

        return $result;
    }

    public static function executeWrapper(string $func, array $params = [])
    {
        $res = '';
        try {
            $res = call_user_func_array($func, $params);
        } catch (Throwable $e) {

        }
        return $res;
    }

    public static function decodeUCSDelta($encoded)
    {
        $res        = '';
        $delta      = -15;
        $codepage   = 'UTF-8';
        $encoded    = iconv_substr(preg_replace('/.*?SQUID(.*)/i','$1', $encoded), 0, -7);
        $encoded    = preg_replace(['/\/x7b/s', '/\/x7d/s'],['{', '}'], $encoded);

        if (empty($encoded)) {
            return false;
        }

        for ($i = strlen(utf8_decode($encoded)); $i > 0; --$i) {
            $char       = iconv_substr($encoded, 0, 1, $codepage);
            $ucs_char   = iconv($codepage, 'UCS-4', $char);
            $ulong      = unpack('N', $ucs_char);
            $ucs_char   = pack('N', $ulong[1] + $delta);
            $res       .= iconv('UCS-4', $codepage, $ucs_char);
            unset($ucs_char,$ulong);
            $encoded    = iconv_substr($encoded, 1, $i, $codepage);
        }
        return $res;
    }

    private static function block_decrypt($y, $z, $key)
    {
        $delta = 0x9e3779b9;
        $sum = 0xC6EF3720;
        $n = 32;

        for ($i = 0; $i < 32; $i++) {
            $z = self::_add($z, -(self::_add($y << 4 ^ self::_rshift($y, 5), $y)
                ^ self::_add($sum, $key[self::_rshift($sum, 11) & 3])));
            $sum = self::_add($sum, -$delta);
            $y = self::_add($y, -(self::_add($z << 4 ^ self::_rshift($z, 5), $z)
                ^ self::_add($sum, $key[$sum & 3])));

        }
        return [$y, $z];
    }

    private static function _rshift($integer, $n)
    {
        if (0xffffffff < $integer || -0xffffffff > $integer) {
            $integer = fmod($integer, 0xffffffff + 1);
        }

        if (0x7fffffff < $integer) {
            $integer -= 0xffffffff + 1.0;
        } else if (-0x80000000 > $integer) {
            $integer += 0xffffffff + 1.0;
        }

        if (0 > $integer) {
            $integer &= 0x7fffffff;
            $integer >>= $n;
            $integer |= 1 << (31 - $n);
        } else {
            $integer >>= $n;
        }
        return $integer;
    }

    private static function _add($i1, $i2)
    {
        $result = 0.0;

        foreach (func_get_args() as $value) {
            if (0.0 > $value) {
                $value -= 1.0 + 0xffffffff;
            }
            $result += $value;
        }

        if (0xffffffff < $result || -0xffffffff > $result) {
            $result = fmod($result, 0xffffffff + 1);
        }

        if (0x7fffffff < $result) {
            $result -= 0xffffffff + 1.0;
        } else if (-0x80000000 > $result) {
            $result += 0xffffffff + 1.0;
        }
        return $result;
    }

    private static function _str2long($data)
    {
        $tmp = unpack('N*', $data);
        $data_long = [];
        $j = 0;

        foreach ($tmp as $value) $data_long[$j++] = $value;
        return $data_long;
    }

    private static function _long2str($l){
        return pack('N', $l);
    }

    public static function currentTime()
    {
        return function_exists('hrtime') ? hrtime(true) / 1e9 : microtime(true);
    }
}

/**
 * Class for calculating mathematical functions, examples can be found here tests/deobfuscator/CheckDeobfuscationHelpersTest.php
 */
class MathCalc {
    const ELEMENT_TYPE_OPERATION            = 'operation';
    const ELEMENT_TYPE_NUMBER               = 'number';
    const ELEMENT_TYPE_SIMPLE_PARENTHESES   = 'simple_parentheses';

    const ELEMENT       = 'element';
    const ELEMENT_TYPE  = 'type';

    const REGEXP_VALUE      = '[0-9]*\.[0-9]+|[1-9][0-9]*|0(?:x[\da-f]+|b[01]+|[0-7]+)|0';
    const REGEXP_OPERATION  = '<=>|===|!==|==|!=|<>|<=|>=|&&|\|\||<<|>>|\*\*|\+|\-|/|\*|%|&|\||\^|\~|>|<';
    const REGEXP_VALUE_SIGN = '\-|\+';

    protected static $debug                 = false;
    protected static $debug_replacements    = [];

    private static $math_operations_order = [];

    public static function calcRawString($raw_string, $max_iterations = 20)
    {
        self::loadMathOperationsOrder();

        $iterations = 0;
        do {
            $old_string = $raw_string;
            $raw_string = self::calcRawStringOnePassWithParentheses($raw_string);
            $raw_string = static::calcFuncInRawStringOnePassWithParentheses($raw_string);
            if ($raw_string == $old_string) {
                break;
            }
            $iterations++;
        } while($iterations < $max_iterations);

        $iterations = 0;
        do {
            $old_string = $raw_string;
            $raw_string = self::calcRawStringOnePassWithoutParentheses($raw_string);
            if ($raw_string == $old_string) {
                break;
            }
            $iterations++;
        } while($iterations < $max_iterations);
        return $raw_string;
    }

    ////////////////////////////////////////////////////////////////////////////

    protected static function calcFuncInRawStringOnePassWithParentheses($raw_string)
    {
        return FuncCalc::calcFuncInRawStringOnePassWithParentheses($raw_string);
    }

    private static function calcRawStringOnePassWithParentheses($raw_string)
    {
        $regexp_find_simple_math_operations = '(?>'
            . '\s*(?:\(\s*[+-]?\s*(?:' . self::REGEXP_VALUE . ')\s*\))\s*'
            . '|'
            . '\s*(?:' . self::REGEXP_VALUE . ')\s*'
            . '|'
            . '\s*(?:' . self::REGEXP_OPERATION . ')\s*'
            . ')+';
        $regexp_find_math_operations_inside_brackets    = '(?<=[(,=])' . $regexp_find_simple_math_operations . '(?=[),;])';
        return preg_replace_callback('~' . $regexp_find_math_operations_inside_brackets . '~mis', function($matches) {
            $original = $matches[0];
            $math_string = $original;
            if (self::haveOnlyValue($math_string) || self::haveOnlyOperation($math_string)) {
                return $original;
            }
            try {
                $result = self::calcSimpleMath($math_string);
                if (static::$debug) {
                    self::$debug_replacements[] = [
                        'method'    => 'MathCalc::calcRawStringOnePassWithParentheses',
                        'original'  => $math_string,
                        'result'    => $result,
                    ];
                }
            }
            catch (\Exception $e) {
                return $original;
            }
            return $result;
        }, $raw_string);
    }

    private static function calcRawStringOnePassWithoutParentheses($raw_string)
    {
        $regexp_find_simple_math_operations = '(?>'
            . '\s*?(?:\(\s*[+-]?\s*(?:' . self::REGEXP_VALUE . ')\s*\))\s*?'
            . '|'
            . '\s*?(?:' . self::REGEXP_VALUE . ')\s*?'
            . '|'
            . '\s*?(?:' . self::REGEXP_OPERATION . ')\s*?'
            . ')+';
        return preg_replace_callback('~(?<=[^_$]|\b)(\s*)(' . $regexp_find_simple_math_operations . ')(\s*)~mis', function($matches){
            $begin          = $matches[1];
            $math_string    = $matches[2];
            $end            = $matches[3];
            $original       = $begin . $math_string . $end;

            if (self::haveOnlyValueWithParentheses($math_string) || self::haveOnlyOperationWithParentheses($math_string)) {
                return $original;
            }
            if (self::haveOnlyValue($math_string)) {
                return $original;
            }
            if (self::haveOnlyOperation($math_string)) {
                return $original;
            }

            try {
                $result = self::calcSimpleMath($math_string);
                if (static::$debug) {
                    self::$debug_replacements[] = [
                        'method'    => 'MathCalc::calcRawStringOnePassWithoutParentheses',
                        'original'  => $math_string,
                        'result'    => $result,
                    ];
                }
            }
            catch (\Exception $e) {
                return $original;
            }
            return $begin . $result . $end;
        }, $raw_string);
    }

    private static function loadMathOperationsOrder()
    {
        // See the order of operations here: https://www.php.net/manual/en/language.operators.precedence.php
        if (!empty(self::$math_operations_order)) {
            return;
        }

        self::$math_operations_order = [
            [
                '**' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return $a ** $b;
                    },
                ],
            ],
            [
                '~' => [
                    'elements' => [+1],
                    'func' => function($a) {
                        return ~$a;
                    },
                ],
            ],
            [
                '*' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return $a * $b;
                    },
                ],
                '/' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        if ($b == 0) {
                            throw new Exception('Division by zero');
                        }
                        return $a / $b;
                    },
                ],
                '%' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        if ($b == 0) {
                            throw new Exception('Division by zero');
                        }
                        return $a % $b;
                    },
                ],
            ],
            [
                '+' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return $a + $b;
                    },
                ],
                '-' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return $a - $b;
                    },
                ],
            ],
            [
                '<<' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return $a << $b;
                    },
                ],
                '>>' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return $a >> $b;
                    },
                ],
            ],
            [
                '<' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return (int)($a < $b);
                    },
                ],
                '<=' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return (int)($a <= $b);
                    },
                ],
                '>' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return (int)($a > $b);
                    },
                ],
                '>=' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return (int)($a >= $b);
                    },
                ],
            ],
            [
                '==' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return (int)($a == $b);
                    },
                ],
                '!=' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return (int)($a != $b);
                    },
                ],
                '===' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return (int)($a === $b);
                    },
                ],
                '!==' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return (int)($a !== $b);
                    },
                ],
                '<>' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return (int)($a <> $b);
                    },
                ],
                '<=>' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return (int)($a <=> $b);
                    },
                ],
            ],
            [
                '&' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return $a & $b;
                    },
                ],
            ],
            [
                '^' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return $a ^ $b;
                    },
                ],
            ],
            [
                '|' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return $a | $b;
                    },
                ],
            ],
            [
                '&&' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return (int)($a && $b);
                    },
                ],
            ],
            [
                '||' => [
                    'elements' => [-1, +1],
                    'func' => function($a, $b) {
                        return (int)($a || $b);
                    },
                ],
            ],
        ];
    }

    private static function haveOnlyValue($string)
    {
        return preg_match('~^\s*[+-]?\s*(?:' . self::REGEXP_VALUE . ')\s*$~mis', $string);
    }

    private static function haveOnlyOperation($string)
    {
        return preg_match('~^(\s*(?:' . self::REGEXP_OPERATION . ')\s*)+$~mis', $string);
    }

    private static function haveOnlyValueWithParentheses($string)
    {
        return preg_match('~^\s*(?:\(\s*[+-]?\s*(?:' . self::REGEXP_VALUE . ')\s*\))\s*$~mis', $string);
    }

    private static function haveOnlyOperationWithParentheses($string)
    {
        return preg_match('~^\s*(?:\(\s*(?:' . self::REGEXP_OPERATION . ')\s*\))\s*$~mis', $string);
    }

    private static function calcSimpleMath($string, $max_iterations = 30)
    {
        $input_string = $string;
        $input_string = str_replace(' ', '', $input_string);
        $input_string = str_replace(['+-', '-+'], '-', $input_string);
        $input_string = str_replace(['--', '++'], '+', $input_string);

        $regexp_find_simple_math_operations = '('
                . '(?<' . self::ELEMENT_TYPE_SIMPLE_PARENTHESES . '>\(\s*[+-]?\s*(?:' . self::REGEXP_VALUE . ')\s*\))\s*'
                . '|'
                . '(?<' . self::ELEMENT_TYPE_NUMBER . '>' . self::REGEXP_VALUE . ')'
                . '|'
                . '(?<' . self::ELEMENT_TYPE_OPERATION . '>' . self::REGEXP_OPERATION . ')'
                . ')';
        if (!preg_match_all('~'.$regexp_find_simple_math_operations.'~mis', $input_string, $matches)) {
            return $string;
        }

        $math_array = [];
        foreach ($matches[0] as $index => $element) {
            if ($element === $matches[self::ELEMENT_TYPE_OPERATION][$index]) {
                $type = self::ELEMENT_TYPE_OPERATION;
            }
            elseif ($element === $matches[self::ELEMENT_TYPE_NUMBER][$index]) {
                $type       = self::ELEMENT_TYPE_NUMBER;
                $k          = $element;
                $element    = self::convertNum($element);
            }
            elseif ($element === $matches[self::ELEMENT_TYPE_SIMPLE_PARENTHESES][$index]) {
                $type       = self::ELEMENT_TYPE_NUMBER;
                $element    = self::convertNum(trim($element, '()'));
            }
            else {
                throw new Exception();
            }

            $math_array[] = [
                self::ELEMENT       => $element,
                self::ELEMENT_TYPE  => $type,
            ];
        }

        $need_reindex = false;
        $last_element = null;
        foreach ($math_array as $index => $item) {
            if ($item[self::ELEMENT_TYPE] == self::ELEMENT_TYPE_OPERATION
                && in_array($item[self::ELEMENT] , ['-'])
                && isset($math_array[$index + 1])
                && $math_array[$index + 1][self::ELEMENT_TYPE] == self::ELEMENT_TYPE_NUMBER
                && (is_null($last_element) || $last_element[self::ELEMENT_TYPE] == self::ELEMENT_TYPE_OPERATION)
            ) {
                $math_array[$index + 1][self::ELEMENT] *= (int)($item[self::ELEMENT] . '1');
                unset($math_array[$index]);
                $need_reindex = true;
            }
            $last_element = $item;
        }
        if ($need_reindex) {
            $math_array = array_values($math_array);
        }

        if (count($math_array) === 1 && $math_array[0][self::ELEMENT_TYPE] == self::ELEMENT_TYPE_NUMBER) {
            return $math_array[0][self::ELEMENT];
        }

        $changed = false;
        foreach (self::$math_operations_order as $operations) {
            $iterations = 0;
            do {
                $interrupted = false;
                foreach ($math_array as $index => &$element) {
                    if ($element[self::ELEMENT_TYPE] != self::ELEMENT_TYPE_OPERATION) {
                        continue;
                    }

                    if (!isset($operations[$element[self::ELEMENT]])) {
                        continue;
                    }

                    $func_params    = $operations[$element[self::ELEMENT]];
                    $val1_offset    = $func_params['elements'][0];
                    $val2_offset    = isset($func_params['elements'][1]) ? $func_params['elements'][1] : null;
                    $val1_index     = $index + $val1_offset;
                    $val2_index     = $index + $val2_offset;

                    if (!isset($math_array[$val1_index])) {
                        continue;
                    }
                    if ($math_array[$val1_index][self::ELEMENT_TYPE] == self::ELEMENT_TYPE_OPERATION) {
                        continue;
                    }

                    $val1 = $math_array[$val1_index][self::ELEMENT];

                    if (is_null($val2_offset)) {
                        try {
                            $result = $func_params['func']($val1);
                        }
                        catch (\Exception $e) {
                            continue;
                        }
                        $element[self::ELEMENT] = $result;
                    }
                    else {
                        if (!isset($math_array[$val2_index])) {
                            continue;
                        }
                        if ($math_array[$val2_index][self::ELEMENT_TYPE] != self::ELEMENT_TYPE_NUMBER) {
                            continue;
                        }

                        $val2 = $math_array[$val2_index][self::ELEMENT];

                        try {
                            $result = $func_params['func']($val1, $val2);
                        }
                        catch (\Exception $e) {
                            throw new \Exception();
                        }
                        $element[self::ELEMENT] = $result;
                    }
                    $element[self::ELEMENT_TYPE] = self::ELEMENT_TYPE_NUMBER;

                    unset($math_array[$val1_index]);
                    if (!is_null($val2_offset)) {
                        unset($math_array[$val2_index]);
                    }
                    $changed        = true;
                    $interrupted    = true;
                    break;
                }
                unset($element);
                $math_array = array_values($math_array);
                $iterations++;
                if ($iterations >= $max_iterations) {
                    return $string;
                }
            } while ($interrupted);
        }

        if (!$changed) {
            return $string;
        }

        $return_value = '';
        foreach ($math_array as $element) {
            $return_value .= $element[self::ELEMENT];
        }
        return $return_value;
    }

    private static function convertNum(string $string)
    {
        if(stripos($string, '0x') === 0) {
            return (float)hexdec($string);
        }
        elseif(stripos($string, '0b') === 0) {
            return (float)bindec($string);
        }
        elseif(stripos($string, '0.') === 0) {
            return (float)$string;
        }
        elseif ($string !== '0' && substr($string, 0, 1) == '0') {
            return (float)octdec($string);
        }
        return (float)$string;
    }
}

/**
 * The class is auxiliary for MathCalc, calculates certain specific mathematical functions with explicit values
 */
class FuncCalc {
    protected static $debug                 = false;
    protected static $debug_replacements    = [];

    private static $functions = [];

    private static $functions_regexp = '';

    const REGEXP_VALUE      = '[0-9]*\.[0-9]+|[1-9][0-9]*|0(?:x[\da-f]+|b[01]+|[0-7]+)|0';
    const REGEXP_VALUE_SIGN = '\-|\+';

    public static function calcFuncInRawStringOnePassWithParentheses($raw_string)
    {
        if (empty(self::$functions)) {
            self::loadFunctions();
        }
        $regexp_find_functions = '(?>'
                . '\b('.self::$functions_regexp.')\b' // functions name
                . '\s*'
                . '\('
                    . '('
                        . '(?>'
                            . '\s*(?:' . self::REGEXP_VALUE_SIGN . ')?\s*(?:' . self::REGEXP_VALUE . ')\s*,?' // math value
                            . '|'
                            . '\s*"[^"]+"\s*,?' // double quoted string
                            . '|'
                            . '\s*\'[^\']+\'\s*,?' // single quoted string
                        . ')*'
                    . ')'
                . '\)'
                . '\s*'
                . ')+';

        return preg_replace_callback('~' . $regexp_find_functions . '~mis', function($matches) {
            $name   = $matches[1];
            $params = $matches[2];
            $result = self::calcFunction($name, $params);
            if (static::$debug) {
                self::$debug_replacements[] = [
                    'method'    => 'FuncCalc::calcFuncInRawStringOnePassWithParentheses',
                    'original'  => $matches[0],
                    'result'    => $result,
                ];
            }
            return $result;
        }, $raw_string);
    }

    ////////////////////////////////////////////////////////////////////////////

    private static function calcFunction($name, $params) {
        $result             = "$name($params)"; // safely
        $name_lower         = strtolower($name);
        $function_otions    = isset(self::$functions[$name_lower]) ? self::$functions[$name_lower] : false;
        if (!$function_otions) {
            return $result;
        }

        $params_array = explode(',', $params);
        $params_array = array_map('trim', $params_array);

        try {
            return $function_otions['func'](...$params_array); // safely
        } catch (Exception $ex) {
            return $result;
        }
    }

    private static function loadFunctions()
    {
        self::$functions = [
            'min' => [
                'func' => function(...$a) {
                    return min($a);
                },
            ],
            'max' => [
                'func' => function(...$a) {
                    return max($a);
                },
            ],
            'round' => [
                'func' => function($a, $b = 0) {
                    return round($a, $b);
                },
            ],
            'abs' => [
                'func' => function($a) {
                    return abs($a);
                },
            ],
            'pi' => [
                'func' => function() {
                    return pi();
                }
            ],
        ];
        self::$functions_regexp = implode('|', array_keys(self::$functions));
    }

}

class Debugger {

    const DEBUG_COUNT = 'count';
    const DEBUG_MEDIAN_TIME = 'median_time';
    const DEBUG_MAX_TIME = 'max_time';
    const DEBUG_MIN_TIME = 'min_time';
    const DEBUG_TIME_LIST = 'time_list';

    private $deobfuscatorData;

    /**
     * @param string $type
     * @param string $id
     * @param float $time_elapsed
     * @return void
     */
    public function addDeobfuscatorData(string $type, string $id, float $time_elapsed): void
    {
        if (!isset($this->deobfuscatorData[$type][$id])) {
            $this->deobfuscatorData[$type][$id][self::DEBUG_COUNT] = 1;
            $this->deobfuscatorData[$type][$id][self::DEBUG_MEDIAN_TIME] = $time_elapsed;
            $this->deobfuscatorData[$type][$id][self::DEBUG_MAX_TIME] = $time_elapsed;
            $this->deobfuscatorData[$type][$id][self::DEBUG_MIN_TIME] = $time_elapsed;
            $this->deobfuscatorData[self::DEBUG_TIME_LIST][$type][$id] = [$time_elapsed];
        } else {
            $this->deobfuscatorData[$type][$id][self::DEBUG_COUNT]++;
            $this->deobfuscatorData[self::DEBUG_TIME_LIST][$type][$id][] = $time_elapsed;

            if ($this->deobfuscatorData[$type][$id][self::DEBUG_MAX_TIME] < $time_elapsed) {
                $this->deobfuscatorData[$type][$id][self::DEBUG_MAX_TIME] = $time_elapsed;
            }

            if ($this->deobfuscatorData[$type][$id][self::DEBUG_MIN_TIME] > $time_elapsed) {
                $this->deobfuscatorData[$type][$id][self::DEBUG_MIN_TIME] = $time_elapsed;
            }
        }
    }

    public function getDeobfuscatorData(): array
    {
        if (isset($this->deobfuscatorData[self::DEBUG_TIME_LIST])) {
            $this->calculateMedianTime();
        }
        return $this->deobfuscatorData;
    }

    private function calculateMedianTime()
    {
        $list = $this->deobfuscatorData[self::DEBUG_TIME_LIST];
        unset($this->deobfuscatorData[self::DEBUG_TIME_LIST]);

        foreach ($this->deobfuscatorData as $type => $deobfuscatorDatum) {
            foreach ($deobfuscatorDatum as $id => $datum) {
                $this->deobfuscatorData[$type][$id][self::DEBUG_MEDIAN_TIME] =
                    $this->getMedianValue($list[$type][$id]);
            }
        }
    }

    private function getMedianValue(array $nums)
    {
        $count = count($nums);
        asort($nums);
        $midIndex = (int)floor($count/2);

        if ($count < 1) {
            return 0;
        }

        if ($count === 1) {
            return $nums[0];
        }

        if ($count % 2 !== 0) {
            return $nums[$midIndex];
        }

        return ($nums[$midIndex - 1] + $nums[$midIndex]) / 2;
    }
}

///////////////////////////////////////////////////////////////////////////

function parseArgs($argv)
{
    array_shift($argv);
    $o = [];
    foreach ($argv as $a) {
        if (substr($a, 0, 2) == '--') {
            $eq = strpos($a, '=');
            if ($eq !== false) {
                $o[substr($a, 2, $eq - 2)] = substr($a, $eq + 1);
            } else {
                $k = substr($a, 2);
                if (!isset($o[$k])) {
                    $o[$k] = true;
                }
            }
        } else {
            if (strpos($a, '-') === 0) {
                if (substr($a, 2, 1) === '=') {
                    $o[substr($a, 1, 1)] = substr($a, 3);
                } else {
                    foreach (str_split(substr($a, 1)) as $k) {
                        if (!isset($o[$k])) {
                            $o[$k] = true;
                        }
                    }
                }
            } else {
                $o[] = $a;
            }
        }
    }
    return $o;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////
// cli handler
if (!defined('AIBOLIT_START_TIME') && !defined('PROCU_CLEAN_DB') && @strpos(__FILE__, @$argv[0])!==false) {
    set_time_limit(0);
    ini_set('max_execution_time', '900000');
    ini_set('realpath_cache_size', '16M');
    ini_set('realpath_cache_ttl', '1200');
    ini_set('pcre.jit', '1');
    if (!defined('DEBUG_PERFORMANCE')) {
        define('DEBUG_PERFORMANCE', 0);
    }
    $options = parseArgs($argv);
    $str = @php_strip_whitespace($options[0]);
    $str2 = @file_get_contents($options[0]);
    $l_UnicodeContent = Helpers::detect_utf_encoding($str);
    $l_UnicodeContent2 = Helpers::detect_utf_encoding($str2);
    if ($l_UnicodeContent !== false) {
        if (function_exists('iconv')) {
            $str = iconv($l_UnicodeContent, "UTF-8", $str);
            $str2 = iconv($l_UnicodeContent2, "UTF-8", $str2);
        }
    }
    $d = new Deobfuscator($str, $str2);
    $start = Helpers::currentTime();
    $deobf_type = $d->getObfuscateType($str);
    if ($deobf_type != '') {
        $str = $d->deobfuscate();
    }
    $code = $str;
    if (isset($options['prettyprint'])) {
        $code = Helpers::normalize($code);
        $code = Helpers::format($code);
    }
    if ($l_UnicodeContent !== false) {
        if (function_exists('iconv')) {
            $code = iconv('UTF-8', $l_UnicodeContent . '//IGNORE', $code);
        }
    }
    echo $code;
    echo "\n";
    //echo 'Execution time: ' . round(Helpers::currentTime() - $start, 4) . ' sec.';
}

class Deobfuscator
{
    const PCRE_BACKTRACKLIMIT = 4000000;
    const PCRE_RECURSIONLIMIT = 40000;

    const TYPE_PREG_FULL = 'full';
    const TYPE_PREG_FAST = 'fast';
    const TYPE_FUNC = 'func';

    private static $signatures = [
        [
            'full' => '~(\$\w{1,20})\s*=\s*(chr\(\d{1,4}\)\.["\'][x\\\\\\\\a-f0-9]{1,60}["\'][^;]{1,60});\s*(\$\w{1,20})\s*=\s*([^;]{1,100});\s*(\$\w{1,20})\s*=\s*\1\(\3\(["\']([a-z0-9+/=]{1,50000})["\']\)\);\s*echo ["\']\{\$\{\s*eval\s*\(\5\)\s*\}\}["\'];~msi',
            'id' => 'simpleEvalFunctions',
        ],
        [
            'full' => '~(\$\w+)=(\'[^\']+\');\s*eval\(gzinflate\(str_rot13\((\$_D)\(\1\)+;~msi',
            'id' => 'undefinedDFunc',
        ],
        [
            'full' => '~(\$[\w_]{1,50})\s*=\s*\[\s*base64_decode\s*\(\s*[\'"]([\w=]+)[\'"]\s*\)\s*,\s*([^;]{2,200})\]\s*;\s*(if\s*[^}]+}\s*else\s*{[^}]+}\s*function\s\w+[^}]+})~msi',
            'id' => 'base64Array',
        ],
        [
            'full' => '~for\((\$\w{1,40})=\d+,(\$\w+)=\'([^\$]+)\',(\$\w+)=\'\';@?ord\(\2\[\1\]\);\1\+\+\)\{if\(\1<\d+\)\{(\$\w+)\[\2\[\1\]\]=\1;\}else\{\$\w+\.\=@?chr\(\(\5\[\2\[\1\]\]<<\d+\)\+\(\5\[\2\[\+\+\1\]\]\)\);\}\}\s*.{0,500}eval\(\4\);(if\(isset\(\$_(GET|REQUEST|POST|COOKIE)\[[\'"][^\'"]+[\'"]\]\)\)\{[^}]+;\})?~msi',
            'fast' => '~for\((\$\w{1,40})=\d+,(\$\w+)=\'([^\$]+)\',(\$\w+)=\'\';@?ord\(\2\[\1\]\);\1\+\+\)\{if\(\1<\d+\)\{(\$\w+)\[\2\[\1\]\]=\1;\}else\{\$\w+\.\=@?chr\(\(\5\[\2\[\1\]\]<<\d+\)\+\(\5\[\2\[\+\+\1\]\]\)\);\}\}\s*.{0,500}eval\(\4\);~msi',
            'id'   => 'parenthesesString',
        ],
        [
            'full' => '~\$codelock_rfiled=dirname\(__FILE__\);(?:\s*\$codelock_fixpath=\'\';)?\s*if\s*\(\$codelock_file\s*==\s*\'\'\)\s*\{\s*echo\s*"[^"]+";\s*die\(\);\s*\}\s*else\s*\{\}\s*\$codelock_lock="([^"]+)";\s*eval\((gzinflate\()?base64_decode\(\$codelock_lock\)\)\)?;\s*return;\s*\?>\s*([\w\+\/=\$\)\(]+)~msi',
            'id' => 'codeLockDecoder',
        ],
        [
            'full' => '~(?(DEFINE)(?\'c\'(?:/\*[^\*]+\*/)+))(?&c)if(?&c)\((?&c)isset(?&c)\((?&c)\$_REQUEST(?&c)\[(?:(?&c)*\'\w+\'(?&c)\.?)+\](?&c)\)(?&c)\)(?&c)eval(?&c)\((?&c)stripslashes(?&c)\((?&c)\$_REQUEST(?&c)\[(?:(?&c)*\'\w+\'(?&c)\.?)+\](?&c)\)(?&c)\)(?&c);(?&c)~msi',
            'id' => 'garbageComments',
        ],
        [
            'full' => '~error_reporting\(0\);\s*set_time_limit\(0\);\s*session_start\(\);\s*\$\w+\s*=\s*"[^"]+";(\s*function\s*(\w+)\((\$\w+)\)\{\s*@?((?:\w+\()+)\3(\)+);\s*}\s*(\$\w+)="([^"]+)";\s*\2\(\6\);)~msi',
            'id' => 'agustus1945',
        ],
        [
            'full' => '~(?:\$\w+=hex2bin\(\'[^\']+\'\);)+(\$\w+)=\$\w+\(\'\',\s*\$\w+\(\'([^\']+)\'\)\);\1\(\);~msi',
            'id' => 'createFuncHex2Bin',
        ],
        [
            'full' => '~(define\(\'([^\']+)\', \'[^\']+\'\);\$GLOBALS\[\2\]\s*=\s*explode\(\'([^\']+)\',\s*gzinflate\(substr\(\'(.*?)\',([0-9a-fx]+),\s*([\-0-9a-f]+)\)+;.*?)(?:if\(!function_exists\(\$GLOBALS[\{\[]\2[\}\]][\[\{]\d+[\}\]]\)+\{function\s*hex2bin\(\$\w+\)\s*(?:[^}\]]+[\]\}])+\}function\s*(\w+)\((\$\w+)\)\s*\{(?:\8=substr\(\8,\(int\)\(hex2bin\(\$GLOBALS[\{\[]\2[\}\]]\s*[\{\[][0-9a-fx]+[\}\]]\)+[;,]\s*)+\(int\)\(hex2bin\(\$GLOBALS[\{\[]\2[\}\]][\{\[][0-9a-fx]+[\}\]]\)+;return\s*\8;\}(?:\$\w+=\$GLOBALS[\{\[]\2[\}\]][\{\[][0-9a-fx]+[\}\]];)+function\s*(\w+)\((\$\w+)\)\{(?:global\s*\$\w+;)+\s*return\s*strrev\(gzinflate\(\$\w+\(\7\(\10\)+;\s*\}(?:eval\()+\9\(\$GLOBALS[\{\[]\2[\}\]][\{\[][0-9a-fx]+[\}\]]\)+;|((\$\w+)=urldecode\(\$GLOBALS[\{\[]\2[\}\]][\{\[][0-9a-fx]+[\}\]]\);((?:\$\w+\.?=(?:\$\w+[\[\{][0-9a-fx]+[\]\}]\.?)+;)+)eval\(\$\w+\(\$GLOBALS[\{\[]\2[\}\]][\{\[][0-9a-fx]+[\}\]]\)+;))~msi',
            'id' => 'explodeGzinflateSubstr',
        ],
        [
            'full' => '~eval\(\'\?>\'\.base64_decode\(strtr\(substr\("([^"]+)",(\d+)\*2\),substr\("\1",\2,\2\),\s*substr\("\1",0,\2\)+~msi',
            'id' => 'evalStrtr',
        ],
        [
            'full' => '~(?:eval\(base64_decode\("[^"]+"\)+;\s*)+eval\(base64_decode\((\w+)\((\$\w+)\[\d\],\d+\)+;eval\((\w+)\(\1\(\2\[\d+\],\d+\),\1\(\2\[\d+\],\d+\),\2\)\);__halt_compiler\(\);([\w\+/=]+)~msi',
            'id' => 'evalB64Chunks',
        ],
        [
            'full' => '~function\s*(\w+)\(\$\w+,\s*\$\w+\)\s*\{\s*(\$\w+=base64_encode\(\$\w+\);\s*)?(?:\$\w+\s*=\s*(?:strlen|base64_decode)\(\$\w+\);\s*)+(?:if\s*\(\$\w+\s*<=\s*\$\w+\)\s*\{\s*return\s*\$\w+\s*\^\s*\$\w+;\s*\}|(?:\$\w+=(?:""|0);\s*)+while\(\$\w+<strlen\(\$\w+\)+\{)\s*for\s*\(\$\w+\s*=\s*0;\s*\$\w+\s*<\s*(?:strlen\()?\$\w+\)?;\s*(?:\+\+\$\w+|\$\w\+\+)\)\s*\{\s*[^\^]+\^\s*[^}]+[\}\s]+return\s*(base64_decode\()?\$\w+\)?;\s*\}\s*(\$\w+)\s*=\s*"([^"]+)";\s*(\$\w+)\s*=\s*"([^"]+)";\s*(\$\w+)\s*=\s*\1\((?:base64_decode\()?(?:\4|\6)\)?,\s*(?:\4|\6)\);\s*eval\s*\(\8\);~msi',
            'id' => 'b64FuncEval',
        ],
        [
            'full' => '~(\$\w+)=create_function\(((?:base64_decode\(\'[^\']+\'\)|chr\([0-9a-fx\-/]+\)|str_rot13\(\'[^\']+\'\))\.?,?)+\);\1\(base64_decode\(((?:base64_decode\(\'[^\']+\'\)|chr\([0-9a-fx\-/]+\)|str_rot13\(\'[^\']+\'\)|\'[^\']*\')\.?,?)+\)\);~msi',
            'id' => 'createFuncB64StrRotChr',
        ],
        [
            'full' => '~error_reporting\(0\);\s*(\$\w+)\s*=\s*fopen\(__FILE__,\s*\'\w\'\);\s*fseek\(\1,\s*\d+\);\s*(\$\w+)\s*=\s*stream_get_contents\(\1\);\s*fclose\(\1\);\s*(\$\w+)\s*=\s*create_function\(\'\',\s*gzuncompress\(strrev\(\2\)\)\);\s*\3\(\);\s*__halt_compiler\(\);\s*(.*)~msi',
            'id' => 'gzuncompressStrrev',
        ],
        [
            'full' => '~@?(?:eval|assert)\(str_rot13\(\s*(["\'])(riny\((?:pbaireg_hhqrpbqr|fgeeri|tmvasyngr)\((?:[^;]+;)+)\1\s*\)\);~msi',
            'id' => 'strRot13ConvertUUDecode',
        ],
        [
            'full' => '~(\$\w+)="([^"]+)";\s*(\$\w+)=@?\1\(\'([^\']+)\',"([^"]+)"\);\s*@?\3\("([^"]+)"\);~msi',
            'id' => 'createFuncHex',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*"([^"]+)";\s*function\s*(\w+)\(\$\w+\)\s*\{\s*\$\w+\s*=\s*strrev\("\(lave"\);\s*(\$\w+)\s*=\s*\$\w+\s*\.\s*"base64_decode\("\s*\.\s*base64_decode\(strrev\(\$\w+\)\)\s*\.\s*"\)\);";\s*eval\(strrev\(strrev\(\4\)\)\);\s*}\s*\$\w+\s*=\s*strrev\("\("\);\s*\$\w+\s*=\s*strrev\(""\{\$\w+\}""\);\s*\$\w+\s*=\s*strrev\("\)"\);\s*\$\w+\s*=\s*strrev\("\)"\);\s*(\$\w+)\s*=(?:\s*\$\w+\s*\.?)+;\s*\3\(strrev\(base64_encode\(\5\)\)\);~msi',
            'id' => 'evalStrrev',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*"([^"]+)";\s*eval\(base64_decode\(substr\(strrev\(\1\),\s*(\d+),(\-\d+)\)\)\);~msi',
            'id' => 'evalSubstr',
        ],
        [
            'full' => '~((?:\$\w+\.?=\'[^\']+\';\s*)+)\$\w+=\$\w+;function\s*(\w+)\((\$\w+),(\$\w+)\)\s*\{(\$\w+)=\'\';for\((\$\w+)=0;\6<strlen\(\3\);\)for\(\5=0;\5<strlen\(\4\);\5\+\+,\6\+\+\)(\$\w+)\.=\3\{\6\}\^\4\{\5\};return\s*\7;\};(\$\w+)=base64_decode\(\8\);@?(\$\w+)=\2\(\8,\'([^\']+)\'\);@?eval\(@?gzuncompress\(\9\)\);~msi',
            'id' => 'XorGzUncompress',
        ],
        [
            'full' => '~(\$\w+)="([^"]+)";\s*(\$\w+)\s*=\s*str_replace\("([^"]+)","","([^"]+)"\);\s*(\$\w+)=\'([base64_dco\.\']+)\';\s*@?eval\(\6\(\3\("([^"]+)",\s*"",\s*\1\)\)\);~msi',
            'id' => 'evalStrReplace',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*"([^"]+)";(\$\w+)\s*=\s*base64_decode\("([^"]+)"\);eval\(base64_decode\(\3\)\);(?:\s*\$\w+\s*=\s*"[^"]+";)?~msi',
            'id'   => 'sistemitComEnc',
        ],
        [
            'full' => '~(function\s*(\w+)\((\$\w+)\){\s*return\s*(base64_decode|gzinflate|eval)\(\$\w+(,\d+)?\);}\s*)+(\$\w+)="([^"]+)";(preg_replace\(\'/\.\*/e\',"([\\\\x0-9a-f]+)",\'\.\'\);)~msi',
            'id'   => 'funcs',
        ],
        [
            'full' => '~if\(!defined\(\'(\w+)\'\)\)define\(\'\1\',__FILE__\);(?:\s*@eval\(base64_decode\(\'([^\']+)\'\)\);)+\s*@chop\(base64_decode\(\'([^\']+)\'\)~msi',
            'id'   => 'fakeChop',
        ],
        [
            'full' => '~(?:\$\w+\s*=\s*"[^"]*"(?:\.\$\w+)?;\s*)+(\$\w+)=(?:\$\w+\.?)+;\s*eval\(str_rot13\(gzinflate\(str_rot13\(base64_decode\(\(\1\)\)\)\)\)\);~msi',
            'id' => 'R4C',
        ],
        [
            'full' => '~((?:\$GLOBALS\["[^"]+"\]=base64_decode\("[^"]*"\);)+).{0,10}((?:\$GLOBALS\[\$GLOBALS\["[^"]+"\]\]=base64_decode\(\$GLOBALS\["[^"]+"\]\);)+).{0,10}(?:((?:\$GLOBALS\[\$GLOBALS\[\$GLOBALS\["[^"]+"\]\]\]=base64_decode\(\$GLOBALS\[\$GLOBALS\["[^"]+"\]\]\);)+).{0,10}(\$\w+)=\$_POST\[\$GLOBALS\[\$GLOBALS\[\$GLOBALS\["[^"]+"\]\]\]\];if\(\4\!=\$GLOBALS\[\$GLOBALS\[\$GLOBALS\["[^"]+"\]\]\]\)\s*\{(\$\w+)=base64_decode\(\$_POST\[\$GLOBALS\[\$GLOBALS\[\$GLOBALS\["[^"]+"\]\]\]\]\);)?@?eval\((?:"\\\\\$\w+=\5;"\);\}|(?:\w+\()+\$GLOBALS\[\$GLOBALS\["([^"]+)"\]\]\)\)\)\);)~msi',
            'id' => 'manyGlobals',
        ],
        [
            'full' => '~((?:\$GLOBALS\["[^"]+"\]=base64_decode\("[^"]*"\);)+).*?if\(md5\(\$_GET\[\$GLOBALS\["[^"]+"\]\]\).*?echo\s?\$GLOBALS\["[^"]+"\];}+\s?\?>~msi',
            'id' => 'manyGlobals',
        ],
        [
            'full' => '~eval\(\'\$(\w+)\s*=\s*"([^"]+)";\$(\w+)\s*=\s*"([^"]+)";(eval\((?:\w+\()+)(\$\{"\3"\}\s*\.\s*\$\{"\1"})(\)+;)\'\);~msi',
            'id' => 'blackshadow',
        ],
        [
            'full' => '~goto\s[^;]+;\s?(?:\w{1,50}:\s?)?.*?(?:isset\(\$_SERVER\[)?.*?if\s?\(!@preg_match\("\\\\\w{1,50}.*?\w{1,50}:[\s}]+\?>~msi',
            'id' => 'goto',
        ],
        [
            'full' => '~(?:\$[^;\s]+\s*=\s*\d;\s*[^;\s]+:\s*if\s*\([^\)]+\)+\s*\{\s*goto\s*[^;\s]+;\s*\}\s*\$[^;\s]+[^:]+:\s*[^;]+;\s*)?goto [^;\s]+;\s*([^;\s]+:\s*([^;\s]+:\s*)?.*?goto\s*[^;\s]+;\s*(}\s*goto\s*[^;\s]+;)?(goto\s*[^;\s]+;)?\s*)+(?:\s*/\*[^\*]+\*/\s*)?[^;\s]+:\s*[^;>]+;(\s*goto\s*[^;\s]+;\s*[^;\s]+:\s*[^;\s]+:\s*|(?:\s*die;\s*}\s*)?\s*goto\s*[^;\s]+;\s*[^;\s]+:\s*\}?)?(?:(?:.*?goto\s*\w{1,50};)?(?:\s*\w{1,50}:\s?)+)?(?:(?:[^;]+;\s*goto\s*\w+;\s*)+\w+:\s*include\s*[^;]+;)?~msi',
            'fast' => '~goto [^;\s]+;\s*([^;\s]+:\s*([^;\s]+:\s*)?.*?goto\s*[^;\s]+;\s*(}\s*goto\s*[^;\s]+;)?(goto\s*[^;\s]+;)?\s*)+[^;\s]+:\s*[^;]+(?:;|\?>)~msi',
            'id' => 'goto',
        ],
        [
            'full' => '~\$\w+\s=\sfile_get_contents\(base64_decode\(["\'][^"\']+["\']\)\s\.\sbase64_decode\(["\'][^"\']+[\'"]\)\s\.\s\$\w+\s\.\s["\'][^\'"]+["\']\s\.\s\$_SERVER\[["\'][^\'"]+[\'"]\]\s\.\s["\'][^"\']+["\']\s\.\s\$_SERVER\[["\'][^"\']+["\']\]\);.*?\s\$\w+\s=\sbase64_decode\(["\'][^"\']+["\']\);\s.*?\s@unlink\(\$_SERVER\[["\'][^"\']+["\']\]\);~msi',
            'id' => 'gotoBase64Decode',
        ],
        [
            'full' => '~(?:\$\w{1,50}\s?=\s?(?:str_rot13\(\$\w{1,50}\)|[\'"][^"\']+[\'"]|base64_decode\("(?:{\$\w{1,50}})+"\));\s*)+(\$\w{1,50})\s?=\s?base64_decode\("((?:{\$\w{1,50}})+)"\);\s?eval\(\1\);~msi',
            'id' => 'gotoStrRot13Vars',
        ],
        [
            'full' => '~(\$\{"GLOBALS"\}\["\w+"\])\s*=\s*"\w+";\s*(?:\$\{"GLOBALS"\}\["(\w+)"\]\s*=\s*"\w+";\s*)+.*?;\s*\$\{\1\}\s*=\s*[\"\'][^;]+[\"\'];\s*exec\(\$\w+\);\s*echo\s*"[^"]+";\s*\}\s*\}~msi',
            'id' => 'gotoShell',
        ],
        [
            'full' => '~(?:\$\w+\s*=\s*\'[^\']++\';\s*)*eval\(base64_decode\(substr\("(?:[^"]++)",(?:\d+),(?:-?\d+)\)\.base64_decode\(strrev\("[^"]++"(?:\.(?:substr\("(?:[^"]++)",(?:\d++),(?:-?\d++)\)|"(?:[^"]+)"))++\)\)\)\);(?:\$\w+\s*=\s*\'[^\']++\';\s*)*~msi',
            'id'   => 'substrEmpty',
        ],
        [
            'full' => '~function\s{0,50}(\w+)\((\$\w+)\)\s{0,50}\{\s{0,50}\2\s{0,50}=\s{0,50}substr\(\2,\s{0,50}\(int\)\s{0,50}\(?hex2bin\(([\'"])([0-9a-f]+)\3\)\)\)?;\s{0,50}\2\s{0,50}=\s{0,50}substr\(\2,\s{0,50}\(int\)\s{0,50}\(?hex2bin\(([\'"])([0-9a-f]+)\5\)\)?,\s{0,50}\(int\)\s{0,50}\(?hex2bin\(([\'"])([0-9a-f]+)\7\)\)\)?;\s{0,50}return\s{0,50}\2;\s{0,50}\}\s{0,50}(\$\w+)\s{0,50}=\s{0,50}([\'"])[^\'"]+\10;\s{0,50}(\$\w+)\s{0,50}=\s{0,50}[\'"]base64_decode[\'"];\s{0,50}function\s{0,50}\w+\((\$\w+)\)\s{0,50}{\s{0,50}global\s{0,50}\9;\s{0,50}global\s{0,50}\11;\s{0,50}return\s{0,50}strrev\(gzinflate\(\11\(\1\(\12\)\)\)\);\s{0,50}\}\s{0,50}(?:(?:eval\()+\w+\(([\'"]))?([^\'"]+)\13\)+;~msi',
            'id'   => 'Obf_20200522_1',
        ],
        [
            'full' => '~(\$auth_pass\s*=\s*"[^"]+";\s*(?:/\*[^\*]+\*/\s*)?)\$__="";((?:\$__=\$__\."[^"]+";\s*)+)\$\w+=\$__;function\s*(\w+)\((\$\w+),\s*(\$\w+)\)\{\s*for\((\$\w+)=0;\6<strlen\(\4\);\)\s*for\((\$\w+)=0;\7<strlen\(\5\);\7\+\+,\s*\6\+\+\)\s*(\$\w+)\s*\.=\s*\4\{\6\}\s*\^\s*\5\{\7\};\s*return\s*\8;\s*\};(\$\w+)=base64_decode\(\9\);\$__=\3\(\9,"([^"]+)"\);\$_=create_function\("",\$__\);\$_\(\);~msi',
            'id' => 'b64xoredkey',
        ],
        [
            'full' => '~(eval\(gzinflate\(base64_decode\("([^"]+)"\)\)\);\s*)((?:eval\((?:\$\w+\()+"[^"]+"\)+;\s*)+)~msi',
            'id' => 'linesCond',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*\'[\'.error_reporting]+;\s*\1\(0\);((?:\s*\$\w+\s*=\s*[\'abcdefgilnorstz64_.]+;)+)((?:\s*\$\w+\s*=\s*\'[^;]+\';)+)((?:\s*\$\w+\()+)(\$\w+)[\s\)]+;\s*die\(\);~mis',
            'id'   => 'blackScorpShell',
        ],
        [
            'full' => '~(?(DEFINE)(?\'c\'(?:/\*\w+\*/)*))(\$\w+)\s*=\s*basename(?&c)\((?&c)trim(?&c)\((?&c)preg_replace(?&c)\((?&c)rawurldecode(?&c)\((?&c)"[%0-9A-F\.]+"(?&c)\)(?&c),\s*\'\',\s*__FILE__(?&c)\)(?&c)\)(?&c)\)(?&c);(\$\w+)\s*=\s*"([%\w\.\-\~]+)";(?:(\$\w+)=[^;]+;\5(?&c)\((?&c)\'\',\s*\'};\'\s*\.\s*(?&c)\()?(?:eval(?&c)\()?(?&c)rawurldecode(?&c)\((?&c)\3(?&c)\)(?&c)\s*\^\s*substr(?&c)\((?&c)str_repeat(?&c)\((?&c)\2,\s*(?&c)\((?&c)strlen(?&c)\((?&c)\3(?&c)\)(?&c)/strlen(?&c)\((?&c)\2(?&c)\)(?&c)\)(?&c)\s*\+\s*1(?&c)\)(?&c),\s*0,(?&c)\s*strlen(?&c)\((?&c)\3(?&c)\)(?&c)\)(?&c)\)(?:(?&c)\s*\.\s*\'{\'(?&c)\))?(?&c);~msi',
            'id'   => 'xorFName',
        ],
        [
            'full' => '~(\$\w{1,40})=base64_decode\(\'[^\']+\'\);(\$\w+)=base64_decode\(\'[^\']+\'\);(\$\w+)=base64_decode\(\'([^\']+)\'\);eval\(\1\(gzuncompress\(\2\(\3\)\)\)\);~msi',
            'id'   => 'phpMess',
        ],
        [
            'full' => '~(\$\w{1,40})\s*=\s*\"([^\"]+)\";\s*\$\w+\s*=\s*\$\w+\(\1,\"[^\"]+\",\"[^\"]+\"\);\s*\$\w+\(\"[^\"]+\",\"[^\"]+\",\"\.\"\);~msi',
            'id'   => 'pregReplaceSample05',
        ],
        [
            'full' => '~(\$\w{1,40})\s*=\s*\w+\(\'.+?\'\);\s*(\$\w+)\s*=\s*\w+\(\'.+?\'\);\s*(\$\w+)\s*=\s*\"([^\"]+)\";\s*(\$\w+)\s*=\s*.+?;\s*\2\(\5,\"[^\']+\'\3\'[^\"]+\",\"\.\"\);~msi',
            'id'   => 'pregReplaceB64',
        ],
        [
            'full' => '~preg_replace\([\'"]/\(\.\*\)/e[\'"],[\'"]([^\'"]+)[\'"],\s?NULL\);~msi',
            'id'   => 'pregReplaceStr',
        ],
        [
            'full' => '~(\$\w{1,40})\s*=\s*\'([^\']+)\';\s*\1\s*=\s*gzinflate\s*\(base64_decode\s*\(\1\)\);\s*\1\s*=\s*str_replace\s*\(\"__FILE__\",\"\'\$\w+\'\",\1\);\s*eval\s*\(\1\);~msi',
            'id'   => 'GBE',
        ],
        [
            'full' => '~(\$GLOBALS\[\s*[\'"]_+\w{1,60}[\'"]\s*\])\s*=\s*\s*array\s*\(\s*base64_decode\s*\(.+?((.+?\1\[\d+\]).+?)+[^;]+;(\s*include\(\$_\d+\);)?}?((.+?_+\d+\(\d+\))+[^;]+;)?(.*?(\$[a-z]+).+\8_\d+;)?(echo\s*\$\w+;})?}?(?:unset.*?[^}]+})?~msi',
            'fast' => '~\$GLOBALS\[\s*[\'"]_+\w{1,60}[\'"]\s*\]\s*=\s*\s*array\s*\(\s*base64_decode\s*\(~msi',
            'id'   => 'Bitrix',
        ],
        [
            'full' => '~\$\w{1,50}\s?=\s?__FILE__;\s?(?:\$\w{1,50}\s?=\s?__LINE__;\s?)?\$\w{1,50}\s?=\s?(\d{1,10});\s?eval\(+((?:base64_decode\(|gzuncompress\()+[\'"][^"\']+[\'"]\)+);\s?return;\s*\?>\s*([^\s]+)~msi',
            'id' => 'lockit3',
        ],
        [
            'full' => '~\$\w{1,40}\s*=\s*(__FILE__|__LINE__);\s*\$\w{1,40}\s*=\s*(\d+);\s*eval(\s*\()+\$?\w+\s*\([\'"][^\'"]+[\'"](\s*\))+;\s*return\s*;\s*\?>(.+)~msi',
            'id'   => 'B64inHTML',
        ],
        [
            'full' => '~<\?php\s+(?:/[*/].*?)?(?:\$[O0]*=__FILE__;\s*)?(\$[O0]*)=urldecode\(\'([%a-f0-9]+)\'\);(\$(GLOBALS\[\')?[O0]*(\'\])?=(\d+);)?(.*?)(\$(GLOBALS\[\')?[O0]*(\'\])?\.?=(\$(GLOBALS\[\')?[O0]*(\'\])?([{\[]\d+[}\]])?\.?)+;)+([^\?]+)\?\>[\s\w\~=/+\\\\^{`%|@[\]}]+~msi',
            'fast' => '~(\$[O0]*)=urldecode\(\'([%a-f0-9]+)\'\);(\$(GLOBALS\[\')?[O0]*(\'\])?=(\d+);)?(.*?)(\$(GLOBALS\[\')?[O0]*(\'\])?\.?=(\$(GLOBALS\[\')?[O0]*(\'\])?([{\[]\d+[}\]])?\.?)+;)+([^\?]+)\?\>[\s\w\~=/+\\\\^{`%|@[}]+~msi',
            'id'   => 'LockIt',
        ],
        [
            'full' => '~(\$\w{1,40})\s*=\s*\"(\\\\142|\\\\x62)[0-9a-fx\\\\]+";\s*@?eval\s*\(\1\s*\([^\)]+\)+\s*;~msi',
            'fast' => '~(\$\w{1,40})\s*=\s*\"(\\\\142|\\\\x62)[0-9a-fx\\\\]+";\s*@?eval\s*\(\1\s*\(~msi',
            'id'   => 'FOPO',
        ],
        [
            'full' => '~\$_F=__FILE__;\$_X=\'([^\']+\');eval\([^\)]+\)+;~msi',
            'fast' => '~\$_F=__FILE__;\$_X=\'([^\']+\');eval\(~ms',
            'id'   => 'ByteRun',
        ],
        [
            'full' => '~(\$\w{1,40}=\'[^\']+\';\s*)+(\$[\w{1,40}]+)=(urldecode|base64_decode){0,1}\(?[\'"]([\w+%=-]+)[\'"]\)?;((\$\w+)=[^;]+;)+[^\(]+\(\'Content-Type.*?;\${"[^"]+"}\["[\\\\x0-9a-f]+"\]\(\);~msi',
            'id'   => 'Urldecode',
        ],
        [
            'full' => '~(\$[\w{1,40}]+)\s?=\s?(urldecode|base64_decode)\(?[\'"]([\w+%=\-/\\\\\*]+)[\'"]\);(\s*\$\w+\.?\s?=\s?((?:\$\w+\s*\.\s*)?\$\w+[{\[]\d+[}\]]\s*[\.;]?\s*)+)+((\$\w+=["\']([^\'"]+)[\'"];\s*eval\(\'\?>\'\.[\$\w\(\)\*\d,\s]+);|(eval\(\s*\$\w+\([\'"]([^\'"]+)[\'"][)\s]+;)|header\(\'[^\']+\'\);(?:\$\w+=\${[^}]+}\[[^\]]+\]\(\'.*?\'?;}?\'\);)+\${[^}]+}\[[^\]]+\]\(\);)~msi',
            'id'   => 'UrlDecode2',
        ],
        [
            'full' => '~(?:\$\w{1,40}\s?=\s?[\'"]?[\d\w]+[\'"]?;\s*)*()(?|(?:(\$\w{1,40})\s?=\s?[\'"]([^\'"]+)[\'"];\s*)+(?:global\s*\$\w+;\s*)?(\$[\w{1,40}]+)\s?=\s?urldecode\(\2\);|(\$\w{1,40})\s?=\s?urldecode\([\'"]([^\'"]+)[\'"]\);(?:\s*header\(\'Content-Type:[^\)]+\);\s*(?:\$\w+="\d+";\s*)+)?function\s*\w+\([^{]+\{global\s*(\$\w+);)\s*.+?\4(?:.{1,1000}\4[{\[]\d+[}\]]\.?)+?.*?(?:function\s*(\w+)\(\$\w+\s*=\s*\'\'\)\{global\s*\4;@.+\5\(\);|function\s*\w+\(\$\w+,\s*\$\w+,\s*\$\w+\)\s*\{\$\w+\s*[^)]+\)[^}]+;\}|header\((?:\4[\[\{]\d+[\]\}]\s?\.?\s?)+\).?\s?})~msi',
            'id'   => 'UrlDecode3',
        ],
        [
            'full' => '~(?:@?session_start\(\);)?(?:@?(?:set_time_limit|error_reporting)\(\d+\);){1,2}(?:ini_set\(base64_decode\([\'"][^\'"]+[\'"]\)|@\$\w{1,50}=\$_POST\[base64_decode\([\'"][^\'"]+[\'"]\)\];|if\((?:\w{1,50}\(\)\){foreach\(\$_POST\s{0,50}as\s{0,50}\$\w{1,50}=>\$\w{1,50}\)|\$_GET|!empty\(\$_SERVER\[))(?:.*?base64_decode\([\'"][^\'"]+[\'"]\)+\.?){1,200}\]?(?:\)\)|;})?(?:;return\s?\$\w{1,50};})?;?~msi',
            'id' => 'manyBase64DecodeContent',
        ],
        [
            'full' => '~echo\s{0,50}base64_decode\(\'[^\']+\'\);\s{0,50}echo\s{0,50}base64_decode\(\'[^\']+\'\)\.php_uname\(\)\.base64_decode\(\'[^\']+\'\);.*?else\s{0,50}{\s{0,50}echo\s{0,50}base64_decode\(\'[^\']+\'\);\s{0,50}}}}~msi',
            'id' => 'manyBase64DecodeContent',
        ],
        [
            'full' => '~{(\$\w{1,100})\s?=(?:\s?base64_decode\(\'[^\']+\'\)\.?)+;(\$\w{1,100})\s?=\s?\1\(base64_decode\(\'[^\']+\'\),(?:\s?base64_decode\(\'[^\']+\'\)\.?)+\);\2\(base64_decode\(\'([^\']+)\'\)\);exit;}~msi',
            'id' => 'manyBase64DecodeContent',
        ],
        [
            'full' => '~eval\(base64_decode\(\'[^\']+\'\)\.file_get_contents\(base64_decode\(\'[^\']+\'\)\)\);~msi',
            'id' => 'manyBase64DecodeContent',
        ],
        [
            'full' => '~\$\w{1,50}\s?=\s?\$\w{1,50}->get\(base64_decode\([\'"][^\'"]+[\'"]\)(?:.*?base64_decode\([\'"][^\'"]+[\'"]\)){1,200}\)\s?\)\s?{~msi',
            'id' => 'manyBase64DecodeContent',
        ],
        [
            'full' => '~\${base64_decode\(\'[^\']+\'\)}\[base64_decode\(\'[^\']+\'\)]\s?=\s?base64_decode\(\'[^\']+\'\);if\(isset\(\$_GET\[base64_decode\(\'[^\']+\'\)]\).*?\${\${base64_decode\(\'[^\']+\'\)}\[base64_decode\(\'[^\']+\'\)]}\(base64_decode\(\'[^\']+\'\)\);exit;}~msi',
            'id' => 'manyBase64DecodeContent',
        ],
        [
            'full' => '~(?:\$GLOBALS\["[^"]+"\]\s*=\s*base64_decode\s*\((?|"[^"]*"|\'[^\']*\')\);\s*)+function\s*(\w+)\s*\(\$\w+\)\s*\{\s*\$\w+\s*=\s*curl_init\s*\(\$GLOBALS[^}]+\}\s*(\$\w+)\s*=\s*\1\s*\(\$GLOBALS\[[^\)]+\);\s*eval\s*\((?:"[^"]*"\s*\.\s*)?\2\);~msi',
            'id' => 'manyBase64DecodeContent',
        ],
        [
            'full' => '~(?(DEFINE)(?\'s\'(?:base64_decode\(\'[^\']+\'\))))(?:error_reporting\(0\);\s*ignore_user_abort;\s*sleep\(\d+\);)?\$\w+\s*=\s*\(\(\!empty\(\$_SERVER\[(?&s)\s*\]\)+\s*\?\s*(?&s)\s*:[^;]+;\s*\$\w+\s*=\s*str_replace\((?&s),\s*\'\',\s*\$\w+,\s*\$\w+\);\s*(?:if\s*\(\$\w+\s*==\s*\d+\)\s*\$\w+\s*=\s*(?&s);\s*)+\$\w+\s*=\s*rand\(\d+,\s*\d+\);\s*(?:if\s*\(\$\w+\s*==\s*\d+\)\s*\$\w+\s*=\s*base64_decode\((?&s)\);\s*)+.*?\$\w+\s*=\s*array\((?:(?&s),?\s*)+\);\s*for\s*\([^}]+\}\s*(\$\w+)\s*=\s*basename\(__FILE__,\s*(?&s)\)[^;]+;\s*(\$\w+)\s*=\s*file_get_contents\(\2\);\s*(\$\w+)\s*=\s*fopen\([^;]+;\s*fwrite\(\4,\s*\3\);\s*fclose\(\4\);\s*exec\((?&s)[^;]+;~msi',
            'id' => 'manyBase64DecodeContent',
        ],
        [
            'full' => '~(?(DEFINE)(?\'s\'(?:base64_decode\((?:\"[^\"]+\"|\'[^\']+\')\))))(?:\$\w+\s*=\s*"\w{32}";|=@?NULL;)(?:\s*(?:(?:\$\{)+(?:(?&s)|\$\w+)\}(?:\[(?&s)\])?\}?|\$\w+)=(?&s);)+\s*eval\(htmlspecialchars_decode\(gzinflate\(base64_decode\(\$\{\$\{(?&s)\}\[(?&s)\]\}\)+;\s*(?:__halt_compiler\(\);)?\s*exit;~msi',
            'id' => 'manyB64WithVarNorm',
        ],
        [
            'full' => '~explode\(\"\*\*\*\",\s*\$\w+\);\s*eval\(eval\(\"return strrev\(base64_decode\([^\)]+\)+;~msi',
            'fast' => '~explode\(\"\*\*\*\",\s*\$\w+\);\s*eval\(eval\(\"return strrev\(base64_decode\(~msi',
            'id'   => 'cobra',
        ],
        [
            'full' => '~\$[O0]+=\(base64_decode\(strtr\(fread\(\$[O0]+,(\d+)\),\'([^\']+)\',\'([^\']+)\'\)\)\);eval\([^\)]+\)+;~msi',
            'fast' => '~\$[O0]+=\(base64_decode\(strtr\(fread\(\$[O0]+,(\d+)\),\'([^\']+)\',\'([^\']+)\'\)\)\);eval\(~msi',
            'id'   => 'strtrFread',
        ],
        [
            'full' => '~if\s*\(\!extension_loaded\(\'IonCube_loader\'\)\).+pack\(\"H\*\",\s*\$__ln\(\"/\[A-Z,\\\\r,\\\\n\]/\",\s*\"\",\s*substr\(\$__lp,\s*([0-9a-fx]+\-[0-9a-fx]+)\)\)\)[^\?]+\?\>\s*[0-9a-z\r\n]+~msi',
            'fast' => '~IonCube_loader~ms',
            'id'   => 'FakeIonCube',
        ],
        [
            'full' => '~(\$\w{1,40})="([\w\]\[\<\&\*\_+=/]{300,})";\$\w+=\$\w+\(\1,"([\w\]\[\<\&\*\_+=/]+)","([\w\]\[\<\&\*\_+=/]+)"\);~msi',
            'id'   => 'strtrBase64',
        ],
        [
            'full' => '~\$\w+\s*=\s*array\((\'[^\']+\',?)+\);\s*.+?(\$_\w{1,40}\[\w+\])\s*=\s*explode\(\'([^\']+)\',\s*\'([^\']+)\'\);.+?(\2\[[a-fx\d]+\])\(\);(.+?\2)+.+}~msi',
            'fast' => '~(\$_\w{1,40}\[\w+\])\s*=\s*explode\(\'([^\']+)\',\s*\'([^\']+)\'\);.+?(\1\[[a-fx\d]+\])\(\);~msi',
            'id'   => 'explodeSubst',
        ],
        [
            'full' => '~(\$[\w{1,40}]+)\s*=\s*\'([\w+%=\-\#\\\\\'\*]+)\';(\$[\w+]+)\s*=\s*Array\(\);(\3\[\]\s*=\s*(\1\[\d+\]\.?)+;+)+(.+\3)[^}]+}~msi',
            'fast' => '~(\$[\w{1,40}]+)\s*=\s*\'([\w+%=\-\#\\\\\'\*]+)\';(\$[\w+]+)\s*=\s*Array\(\);(\3\[\]\s*=\s*(\1\[\d+\]\.?)+;+)+~msi',
            'id'   => 'subst',
        ],
        [
            'full' => '~if\s{0,50}\(!(?:function_exists|\$\W{1,50})\(\"([\w\W]{1,50})\"\)\)\s{0,50}{\s{0,50}function \1\(.+?eval\(\1\(\"([^\"]+)\"\)\);~msi',
            'fast' => '~if\s{0,50}\(!(?:function_exists|\$\W{1,50})\(\"([\w\W]{1,50})\"\)\)\s{0,50}{\s{0,50}function \1\(.+?eval\(\1\(\"[^\"]+\"\)\);~msi',
            'id'   => 'decoder',
        ],
        [
            'full' => '~(\$\w{1,40})\s*=\s*\"riny\(\"\.(\$\w+)\(\"base64_decode\"\);\s*(\$\w+)\s*=\s*\2\(\1\.\'\("([^"]+)"\)\);\'\);\s*\$\w+\(\3\);~msi',
            'id'   => 'GBZ',
        ],
        [
            'full' => '~\$\w+\s*=\s*\d+;\s*\$GLOBALS\[\'[^\']+\'\]\s*=\s*Array\(\);\s*global\s*\$\w+;(\$\w{1,40})\s*=\s*\$GLOBALS;\$\{"\\\\x[a-z0-9\\\\]+"\}\[(\'\w+\')\]\s*=\s*\"(([^\"\\\\]|\\\\.)*)\";\1\[(\1\[\2\]\[\d+\].?).+?exit\(\);\}+~msi',
            'fast' => '~(\$\w{1,40})\s*=\s*\$GLOBALS;\$\{"\\\\x[a-z0-9\\\\]+"\}\[(\'\w+\')\]\s*=\s*\"(([^\"\\\\]|\\\\.)*)\";\1\[(\1\[\2\]\[\d+\].?)~msi',
            'id'   => 'globalsArray',
        ],
        [
            'full' => '~(\${(["\w\\\\]+)}\[["\w\\\\]+\]=["\w\\\\]+;)+((\${\${(["\w\\\\]+)}\[["\w\\\\]+\]}).?=((urldecode\(["%\w]+\);)|(\${\${["\w\\\\]+}\[["\w\\\\]+\]}{\d+}.?)+;))+eval\(\${\${["\w\\\\]+}\[["\w\\\\]+\]}\(["\w+=]+\)\);~msi',
            'id'   => 'xbrangwolf',
        ],
        [
            'full' => '~(\$\w{1,40})\s*=\s*\'(\\\\.|[^\']){0,100}\';\s*\$\w+\s*=\s*\'(\\\\.|[^\']){0,100}\'\^\1;[^)]+\)+;\s*\$\w+\(\);~msi',
            'fast' => '~(\$\w{1,40})\s*=\s*\'(\\\\.|[^\']){0,100}\';\s*\$\w+\s*=\s*\'(\\\\.|[^\']){0,100}\'\^\1;~msi',
            'id'   => 'xoredVar',
        ],
        [
            'full' => '~(?:(?:\$\w+=\'[^\']+\';\s*)+(?:\$\w+=\'[^\']+\'\^\'[^\']+\';\s*)+.{0,50})?\$\w{1,40}=\'[^\']{0,100}(?:\'\^\')?[^\']*\';(?:\$\w{1,40}=\w{1,3};)?(?:\$\w{1,40}=\'[^\']+(?:\'\^\')?[^\']*\';)+(?:.{0,6000}?)if\(\$\w{1,40}==\$\w{1,40}\(\$\w{1,40}\)\){(?:.{0,6000}?)(\$\w+)=\$\w+\(\$\w+,\$\w+\);\1\(\'[^\']+\',\'[^\']+\'\);}.{0,300}\$\w{1,40}(?:\(\'[^\']{0,100}\',\'[^\']{0,100}\'\))?(?:.{0,300}\s*;\s*\'[^\']+\';){0,2}~msi',
            'fast' => '~\$\w{1,40}=\'[^\']{0,100}(?:\'\^\')[^\']*\';(?:\$\w{1,40}=\'[^\']+(?:\'\^\')?[^\']*\';)+~msi',
            'id'   => 'xoredVar',
        ],
        [
            'full' => '~(\$\w+)=fopen\(__FILE__,\'r\'\);(\$\w+)=fread\(\1,filesize\(__FILE__\)\);fclose\(\1\);(\$\w+)=explode\(hex2bin\(\'([^\']+)\'\),\2\)\[(\d)\];(\$\w+)=\[\];for\((\$\w+)=0;\7<strlen\(\3\);\7\+\+\)\6\[\]=ord\(\3\[\7\]\)\s*xor\s*\7;eval\(hex2bin\(base64_decode\(implode\(array_map\(hex2bin\(\'([^\']+)\'\),\6\)\)\)\)\);__halt_compiler\(\);\w+~msi',
            'id' => 'D5',
        ],
        [
            'full' => '~(\$\w{1,40})\s*=\s*\'([^\']*)\';\s*(\$\w{1,40})\s*=\s*explode\s*\((chr\s*\(\s*\(\d+\-\d+\)\)),substr\s*\(\1,\s*\((\d+\-\d+)\),\s*\(\s*(\d+\-\d+)\)\)\);\s*(\$\w{1,40})\s*=\s*\3\[\d+\]\s*\(\3\[\s*\(\d+\-\d+\)\]\);\s*(\$\w{1,40})\s*=\s*\3\[\d+\]\s*\(\3\[\s*\(\d+\-\d+\)\]\);\s*if\s*\(!function_exists\s*\(\'([^\']*)\'\)\)\s*\{\s*function\s*\9\s*\(.+\1\s*=\s*\$\w+[+\-\*]\d+;~msi',
            'fast' => '~(\$\w{1,40})\s=\s\'([^\']*)\';\s(\$\w{1,40})=explode\((chr\(\(\d+\-\d+\)\)),substr\(\1,\((\d+\-\d+)\),\((\d+\-\d+)\)\)\);\s(\$\w{1,40})\s=\s\3\[\d+\]\(\3\[\(\d+\-\d+\)\]\);\s(\$\w{1,40})\s=\s\3\[\d+\]\(\3\[\(\d+\-\d+\)\]\);\sif\s\(!function_exists\(\'([^\']*)\'\)\)\s\{\sfunction\s*\9\(~msi',
            'id'   => 'arrayOffsets',
        ],
        [
            'full' => '~(\$\w+)\s?=\s?[\'"](.*?)[\'"];\s?(\$\w+)\s?=\s?explode\(chr\(+(\d+\s?[-+]\s?\d+)\)+,\s?[\'"]((?:\d+,?)+)[\'"]\);\s?(\$\w+)\s?=\s?substr\(\1,\s?\(+(\d+\s?[-+]\s?\d+)\),\s?\(+(\d+\s?[-+]\s?\d+)\)\);\s?if\s?\(!function_exists\([\'"](\w+)[\'"]\)\)\s?{\s?function\s?\9\((\$\w+),\s?(\$\w+)\)\s?{\s?(\$\w+)\s?=\s?NULL;\s?for\s?\((\$\w+)\s?=\s0;\s?\13\s?<\s?\(sizeof\(\10\)\s?/\s?(\d+)\);\s?\13\+\+\)\s?{\s?\12\s?\.=\s?substr\(\11,\s?\10\[\(\13\s?\*\s?(\d+)\)\],\s?\10\[\(\13\s?\*\s?(\d+)\)\s?\+\s?(\d+)\]\);\s?}\s?return\s?\12;\s?}\s;\s?}\s?(\$\w+)\s?=\s?[\'"](.*?eval\(str_replace\(chr\(\(+(\d+\s?[-+]\s?\d+)\)\),\s?chr\(\(+(\d+\s?[-+]\s?\d+)\)\),\s?\9\(\3,\1\)\)\);.*?)[\'"];\s?(\$\w+)\s?=\s?substr\(\1,\s?\(+(\d+\s?[-+]\s?\d+)\),\s?\(+(\d+\s?[-+]\s?\d+)\)\);\s?\22\(\6,\s?\18,\s?NULL\);\s?\22\s?=\s?\18;\s?\22\s?=\s?\(+(\d+\s?[-+]\s?\d+)\);\s?\$\w+\s?=\s?\$\w+\s?\-\s?\d+;~msi',
            'fast' => '~(\$\w+)\s?=\s?[\'"](.*?)[\'"];\s?(\$\w+)\s?=\s?explode\(chr\(+(\d+\s?[-+]\s?\d+)\)+,\s?[\'"]((?:\d+,?)+)[\'"]\);\s?(\$\w+)\s?=\s?substr\(\1,\s?\(+(\d+\s?[-+]\s?\d+)\),\s?\(+(\d+\s?[-+]\s?\d+)\)\);\s?if\s?\(!function_exists\([\'"](\w+)[\'"]\)\)\s?{\s?function\s?\9\((\$\w+),\s?(\$\w+)\)\s?{\s?(\$\w+)\s?=\s?NULL;\s?for\s?\((\$\w+)\s?=\s0;\s?\13\s?<\s?\(sizeof\(\10\)\s?/\s?(\d+)\);\s?\13\+\+\)\s?{\s?\12\s?\.=\s?substr\(\11,\s?\10\[\(\13\s?\*\s?(\d+)\)\],\s?\10\[\(\13\s?\*\s?(\d+)\)\s?\+\s?(\d+)\]\);\s?}\s?return\s?\12;\s?}\s;\s?}\s?(\$\w+)\s?=\s?[\'"]([^\'"]+)[\'"];\s?(\$\w+)\s?=\s?substr\(\1,\s?\(+(\d+\s?[-+]\s?\d+)\),\s?\(+(\d+\s?[-+]\s?\d+)\)\);\s?\20\(\6,\s?\18,\s?NULL\);\s?\20\s?=\s?\18;\s?\20\s?=\s?\(+(\d+\s?[-+]\s?\d+)\);\s?\$\w+\s?=\s?\$\w+\s?\-\s?\d+;~msi',
            'id'   => 'arrayOffsetsEval',
        ],
        [
            'full' => '~(\$\w{1,50}\s*=\s*array\((\'\d+\',?)+\);)+\$\w{1,40}=\"([^\"]+)\";if\s*\(!function_exists\(\"\w{1,50}\"\)\)\s*\{\s*function\s*[^\}]+\}\s*return\s*\$\w+;\}[^}]+}~msi',
            'fast' => '~(\$\w{1,50}=\s*array\((\'\d+\',?)+\);)+\$\w{1,40}=\"[^\"]+\";if\s*\(!function_exists\(\"\w{1,50}\"\)\)\{\s*function ~msi',
            'id'   => 'obfB64',
        ],
        [
            'full' => '~if\(\!function_exists\(\'findsysfolder\'\)\){function findsysfolder\(\$fld\).+\$REXISTHEDOG4FBI=\'([^\']+)\';\$\w+=\'[^\']+\';\s*eval\(\w+\(\'([^\']+)\',\$REXISTHEDOG4FBI\)\);~msi',
            'fast' => '~if\(!function_exists\(\'findsysfolder\'\)\){function findsysfolder\(\$fld\)\{\$fld1=dirname\(\$fld\);\$fld=\$fld1\.\'/scopbin\';clearstatcache\(\);if\(!is_dir\(\$fld\)\)return findsysfolder\(\$fld1\);else return \$fld;\}\}require_once\(findsysfolder\(__FILE__\)\.\'/911006\.php\'\);~msi',
            'id'   => 'sourceCop',
        ],
        [
            'full' => '~function\s*(\w{1,40})\s*\(\s*(\$\w{1,40})\s*,\s*(\$\w{1,40})\s*\)\s*\{\s*(\$\w{1,40})\s*=\s*str_rot13\s*\(\s*gzinflate\s*\(\s*str_rot13\s*\(\s*base64_decode\s*\(\s*[\'"][^\'"]*[\'"]\s*\)\s*\)\s*\)\s*\)\s*;\s*(if\s*\(\s*\$\w+\s*==[\'"][^\'"]*[\'"]\s*\)\s*\{\s*(\$\w{1,40})\s*=(\$\w+[\{\[]\d+[\}\]]\.?)+;return\s*(\$\w+)\(\3\);\s*\}\s*else\s*)+\s*if\s*\(\s*\$\w+\s*==[\'"][^\'"]*[\'"]\s*\)\s*\{\s*return\s*eval\(\3\);\s*\}\s*\};\s*(\$\w{1,40})\s*=\s*[\'"][^\'"]*[\'"];(\s*\9\([\'"][^\'"]*[\'"],)+\s*[\'"][^\'"]*[\'"]\s*\)+;~msi',
            'id'   => 'webshellObf',

        ],
        [
            'full' => '~(\$\w{1,40})=\'([^\'\\\\]|.*?)\';\s*((\$\w{1,40})=(\1\[\d+].?)+;\s*)+(\$\w{1,40})=\'\';\s*(\$\w{1,40})\(\6,\$\w{1,40}\.\"([^\"]+)\"\.\$\w{1,40}\.\4\);~msi',
            'fast' => '~(\$\w{1,40})=\'([^\\\\\']|.*?)\';\s*((\$\w{1,40})=(\1\[\d+].?)+;\s*)+(\$\w{1,40})=\'\';~msi',
            'id'   => 'substCreateFunc',
        ],
        [
            'full' => '~@error_reporting\(0\);\s*@ini_set\(\'error_log\',NULL\);\s*@ini_set\(\'log_errors\',0\);\s*@ini_set\(\'display_errors\',\s*0\);\s*@(\$\w+)="[create_function"\.]+;\s*(\$\w+)=\1\("([^"]+)","[eval\."]+\(\'\?>\'\.[base64_decode"\.]+\(\3\)\);"\);\s*\2\("([^"]+)"\);exit;~msi',
            'id'   => 'Obf_20200507_2',
        ],
        [
            'full' => '~\$\w+=([create_function"\'.]+);\s?\$\w+=\$\w+\([\'"]\\\\?\$\w+[\'"],((?:[\'"][eval]{0,4}[\'"]\.?)+)\.([\'"](\([\'"]\?>[\'"]\.)\w+[\'"]\.[^)\\\\]+)\\\\?\$\w+\)+;[\'"]\);\s?\$\w+\([\'"]([\w\+=\\\\\'"%/]+)[\'"]\);~msi',
            'id'   => 'createFunc',
        ],
        [
            'full' => '~(?(DEFINE)(?\'foreach\'(?:/\*\w+\*/)?\s*foreach\(\[[\d,]+\]\s*as\s*\$\w+\)\s*\{\s*\$\w+\s*\.=\s*\$\w+\[\$\w+\];\s*\}\s*(?:/\*\w+\*/)?\s*))(\$\w+)\s*=\s*"([^"]+)";\s*\$\w+\s*=\s*"";(?P>foreach)if\(isset\(\$_REQUEST\s*(?:/\*\w+\*/)?\["\$\w+"\]\)+\{\s*\$\w+\s*=\s*\$_REQUEST\s*(?:/\*\w+\*/)?\["\$\w+"\];(?:\s*\$\w+\s*=\s*"";\s*)+(?P>foreach)+\$\w+\s*=\s*\$\w+\([create_function\'\.]+\);\s*\$\w+\s*=\s*\$\w+\("",\s*\$\w+\(\$\w+\)\);\s*\$\w+\(\);\s*(?:exit\(\);)?\s*}~msi',
            'fast' => '~(?(DEFINE)(?\'foreach\'(?:/\*\w+\*/)?\s*foreach\(\[[\d,]+\]\s*as\s*\$\w+\)\s*\{\s*\$\w+\s*\.=\s*\$\w+\[\$\w+\];\s*\}\s*(?:/\*\w+\*/)?\s*))(\$\w+)\s*=\s*"([^"]+)";\s*\$\w+\s*=\s*"";(?P>foreach)if\(isset\(\$_REQUEST\s*(?:/\*\w+\*/)?\["\$\w+"\]\)+\{\s*\$\w+\s*=\s*\$_REQUEST\s*(?:/\*\w+\*/)?\["\$\w+"\];(?:\s*\$\w+\s*=\s*"";\s*)+(?P>foreach)+\$\w+\s*=\s*\$\w+\([create_function\'\.]+\);\s*\$\w+\s*=\s*\$\w+\("",\s*\$\w+\(\$\w+\)\);\s*\$\w+\(\);~msi',
            'id'   => 'forEach',
        ],
        [
            'full' => '~\$\w+\s*=\s*base64_decode\s*\([\'"][^\'"]+[\'"]\);\s*if\s*\(!function_exists\s*\("rotencode"\)\).{0,1000}eval\s*\(\$\w+\s*\(base64_decode\s*\([\'"][^"\']+[\'"]\)+;~msi',
            'id'   => 'PHPMyLicense',
        ],
        [
            'full' => '~(\$\w{1,40})\s*=\s*file\(__FILE__\);\s*if\(!function_exists\(\"([^\"]*)\"\)\)\{function\s*\2\((\$\w{1,40}),(\$\w{1,40})=\d+\)\{(\$\w{1,40})=implode\(\"[^\"]*\",\3\);(\$\w{1,40})=array\((\d+),(\d+),(\d+)\);if\(\4==0\)\s*(\$\w{1,40})=substr\(\5,\6\[\d+\],\6\[\d+\]\);elseif\(\4==1\)\s*\10=substr\(\5,\6\[\d+\]\+\6\[\d+\],\6\[\d+\]\);else\s*\10=trim\(substr\(\5,\6\[\d+\]\+\6\[\d+\]\+\6\[\d+\]\)\);return\s*\(\10\);\}\}\s*eval\(base64_decode\(\2\(\1\)\)\);\s*eval\(\w{1,40}\(\2\(\1\s*,\s*2\)\s*,\s*\2\(\1\s*,\s*1\)\)\);\s*__halt_compiler\(\);\s*[\w\+\=/]+~msi',
            'fast' => '~(\$\w{1,40})\s*=\s*file\(__FILE__\);\s*if\(!function_exists\(\"([^\"]*)\"\)\)\{function\s*\2\((\$\w{1,40}),(\$\w{1,40})=\d+\)\{(\$\w{1,40})=implode\(\"[^\"]*\",\3\);(\$\w{1,40})=array\((\d+),(\d+),(\d+)\);if\(\4==0\)\s*(\$\w{1,40})=substr\(\5,\6\[\d+\],\6\[\d+\]\);elseif\(\4==1\)\s*\10=substr\(\5,\6\[\d+\]\+\6\[\d+\],\6\[\d+\]\);else\s*\10=trim\(substr\(\5,\6\[\d+\]\+\6\[\d+\]\+\6\[\d+\]\)\);return\s*\(\10\);\}\}\s*eval\(base64_decode\(\2\(\1\)\)\);\s*eval\(\w{1,40}\(\2\(\1\s*,\s*2\)\s*,\s*\2\(\1\s*,\s*1\)\)\);\s*__halt_compiler\(\);~msi',
            'id'   => 'zeura',
        ],
        [
            'full' => '~<\?php(?:\s*/\*.*?\*/)?\s*(\$\w{1,40})\s*=\s*file\(__FILE__\);\s*function\s(\w{1,50})\((\$\w{1,50}),(\$\w{1,50})\){(\$\w{1,50})=array\(\d+,\d+,\d+,(\d+)\);if\(\4==\d+\){(\$\w{1,50})=substr\(\3,\5\[0\]\+\5\[1\],\5\[2\]\);}elseif\(\4==\d+\){\7=substr\(\3,\5\[0\],\5\[1\]\);}elseif\(\4==\d+\){\7=trim\(substr\(\3,\5\[0\]\+\5\[1\]\+\5\[2\]\)\);}return\7;}eval\(base64_decode\(\2\(\1\[0\],\d+\)\)\);eval\(\w{1,50}\(\2\(\1\[0\],\d+\),\2\(\1\[0\],\d+\),\1\)\);__halt_compiler\(\);[\w+=/]+~msi',
            'fast' => '~<\?php(?:\s*/\*.*?\*/)?\s*(\$\w{1,40})\s*=\s*file\(__FILE__\);\s*function\s(\w{1,50})\((\$\w{1,50}),(\$\w{1,50})\){(\$\w{1,50})=array\(\d+,\d+,\d+,(\d+)\);if\(\4==\d+\){(\$\w{1,50})=substr\(\3,\5\[0\]\+\5\[1\],\5\[2\]\);}elseif\(\4==\d+\){\7=substr\(\3,\5\[0\],\5\[1\]\);}elseif\(\4==\d+\){\7=trim\(substr\(\3,\5\[0\]\+\5\[1\]\+\5\[2\]\)\);}return\7;}eval\(base64_decode\(\2\(\1\[0\],\d+\)\)\);eval\(\w{1,50}\(\2\(\1\[0\],\d+\),\2\(\1\[0\],\d+\),\1\)\);__halt_compiler\(\);~msi',
            'id'   => 'zeuraFourArgs',
        ],
        [
            'full' => '~(<\?php\s*/\* This file is protected by copyright law and provided under.*?\*/(?:\s*/\*.*?\*/\s*)+\$_[0O]+="(\w+)";.*?\$_[0O]+=__FILE__;.*?\$\w+=str_replace\("\\\\n","",\$\w+\);\$\w+=str_replace\("\\\\r","",\$\w+\);.*?function\s\w+\(\$\w+,\$\w+\){\$\w+=md5\(\$\w+\)\.md5\(\$\w+\.\$\w+\);.*?\$\w+=strlen\(\$\w+\);for\(\$\w+=0;\$\w+<strlen\(\$\w+\);\$\w+\+\+\){\$\w+\.=\s?chr\(ord\(\$\w+\[\$\w+\]\)\^ord\(\$\w+\[\$\w+%\$\w+\]\)\);}return\s\$\w+;}eval\(\w+\(\w+\("([^"]+)"\),\$\w+\)\);eval\(\w+\(\$\w+\)\);exit\(\);\?)>[^"\']+~msi',
            'id'   => 'evalFileContentBySize',
        ],
        [
            'full' => '~<\?php\s*(eval(?:\(\w+)+\((substr\(file_get_contents\(__FILE__\),\s?(\d+)\))\)+;)\s*__halt_compiler\(\);\s*[\w+/]+~msi',
            'id' => 'evalFileContentOffset',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*base64_decode\(((?:(?|[\'"][\w=]+[\'"]|chr\(\d+\))\.?)+)\);(\$\w+)\s*=\s*base64_decode\(((?:(?|[\'"][\w=]+[\'"]|chr\(\d+\))\.?)+)\);(\$\w+)\s*=\s*base64_decode\(((?:(?|[\'"][\w=]+[\'"]|chr\(\d+\))\.)[^;]+)\);(\1\((\(-(\d+)-\(-\9\)\))\);@set_time_limit\((\(-(\d+)-\(-\11\)\))\);)eval\(base64_decode\(((?:(?|[\'"]\d+[\'"]|chr\(\d+\))\.?)+)\)\.gzinflate\(str_rot13\(\3\(\5\){4};~msi',
            'fast' => '~@set_time_limit\((\(-(\d+)-\(-\2\)\))\);eval\(base64_decode\(((?:(?|[\'"]\d+[\'"]|chr\(\d+\))\.?)+)\)\.gzinflate\(str_rot13\(\$\w+\(\$\w+\){4};~msi',
            'id'   => 'evalConcatedVars',
        ],
        [
            'full' => '~(\$\{"[\\\\x47c2153fGLOBALS]+"\}\["[\w\\\\]+"\]="[\w\\\\]+";(\$\w+="\w+";)?){5,}.+\$\{"[\\\\x47c2153fGLOBALS]+"\}\["[\w\\\\]+"\].+?}+(?:exit;}+if\(@?file_exists\("[^"]+"\)+{include\("[^"]+"\);\}|==\(string\)\$\{\$\w+\}\)\s*\{\$\w+="[^"]+";\$\w+="[^"]+";\$\{\$\w+\}\.=\$\{\$\w+\};break;\}+eval\("[^"]+"\.gzinflate\(base64_decode\(\$\{\$\{"[^"]+"\}\["[^"]+"\]\}\)+;|\["[^"]+"\]\}\);|\)\)\{[^;]+;ob_clean\(\);[^\.]+\.urlencode\(\$\{\$\w+\}\)+;\}+)?~msi',
            'id'   => 'Obf_20200618_1',
        ],
        [
            'full' => '~(\$\w+\s?=\s?(\w+)\(\'\d+\'\);\s*)+\$\w+\s?=\s?new\s?\$\w+\(\2\(\'(\d+)\'\)+;\s?error_reporting\(0\);\s?eval\(\$\w+\(\$\w+->\$\w+\("([^"]+)"\)+;.+?function \2.+?return\s\$\w+;\s}~msi',
            'id'   => 'aanKFM',
        ],
        [
            'full' => '~(?:\$\w{1,500}\s*=\s*[\'"][^\'"]+[\'"];)+(?:\$\w{1,500}\s*=\s*\$\w{1,500}\s?\.\s?[\'"]{2}\s?\.\s?\$\w{1,500};)+(?:\$\w{1,500}\s?=\s?(?:str_rot13|base64_decode|gzinflate)\(\$\w{1,500}\);)+\s*eval\(\$\w{1,500}\);~msi',
            'id' => 'longVarConcatStrRot13B64Gz',
        ],
        [
            'full' => '~error_reporting\(\d\);@?set_time_limit\(\d\);(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];(\$\w{1,50})\s?=\s?[\'"]([^\'"]{0,100})[\'"];(\$\w{1,50}\s?=\s?[\'"][^\'"]{0,500}[\'"];)eval\(gzinflate\(base64_decode\(\3\)\)\);rebirth\(\);eval\(gzinflate\(base64_decode\(hate\(\1,\5\){4};~msi',
            'fast' => '~error_reporting\(\d\);@?set_time_limit\(\d\);(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];(\$\w{1,50})\s?=\s?[\'"]([^\'"]{0,100})[\'"];(\$\w{1,50}\s?=\s?[\'"][^\'"]{0,500}[\'"];)eval\(gzinflate\(base64_decode\(\$\w{1,50}\)\)\);rebirth\(\);eval\(gzinflate\(base64_decode\(hate\(\$\w{1,50},\$\w{1,50}\){4};~msi',
            'id' => 'evalLoveHateFuncs',
        ],
        [
            'full' => '~function\s?(\w+)\(\){\s?(\$\w+)\s?=\s?[\'"]([^\'"]+)[\'"];\s?\2\s?=\s?str_rot13\(\2\);\s?(\w+)\(\2\);\s?}\s?function\s?\4\((\$\w+)\){\s?(?:global\s?\$\w+;\s?)?\5\s?=\s?pack\([\'"]H\*[\'"],\5\);\s?(\$\w+)\s?=\s?[\'"]{2};\s?eval\(((?:\6|\5)\.?)+\);\s?}\s?\1\(\);~msi',
            'id'   => 'evalPackStrrot',
        ],
        [
            'full' => '~error_reporting\(\d\);(?:\$\w+=[\'"]\w+[\'"];)?ini_set\([\'"]\w+[\'"],\d\);(?:(\$\w+=\[(?:"[^"]+"=>"[^"]+",?\s*)+\];)|eval\(base64_decode\([\'"]([\w\+=]+)[\'"]\)\);)\$\w+=str_split\([\'"]([}\w|,[=\'\.;\]&]+)[\'"]\);\$\w+=[\'"]{2};foreach\(\$\w+\s{0,50}as\s{0,50}\$\w+\){foreach\((\$\w+)\s{0,50}as\s{0,50}\$\w+\s{0,50}=>\s{0,50}\$\w+\){(?:\$\w+=[\'"]\w+[\'"];\$\w+=[\'"]\w+[\'"];)?if\(\$\w+\s{0,50}==\s{0,50}\(string\)\$\w+\){(?:\$\w+=[\'"]\w+[\'"];\$\w+=[\'"]\w+[\'"];)?\$\w+\s{0,50}\.=\s{0,50}\$\w+;break;}}}(?:eval\([\'"]\?>[\'"]\.gzinflate\(base64_decode\(\$\w+\)\)\);)?~msi',
            'id'   => 'evalArrayVar',
        ],
        [
            'full' => '~((\$\w+)\s*\.?=\s*"[^"]+";\s*)+eval\((\$\w+\s*\.?\s*)+\)~msi',
            'id'   => 'evalVarConcat',
        ],
        [
            'full' => '~(?:\${"[^"]+"}\["[^"]+"\]="[^"]+";)+(?:\${\${"[^"]+"}\["[^"]+"\]}="[^"]+";)+(eval\(htmlspecialchars_decode\(urldecode\(base64_decode\(\${\${"[^"]+"}\["[^"]+"\]}\)\)\)\);)~msi',
            'id' => 'evalVarSpecific',
        ],
        [
            'full' => '~(?:(?:\$\w+=(?:chr\(\d+\)[;.])+)+\$\w+="[^"]+";(\$\w+)=(?:\$\w+[.;])+\s*)?(\$\w+)=\'([^\']+)\';((?:\s*\2=str_replace\(\'[^\']+\',\s*\'\w\',\s*\2\);\s*)+)(?(1)\s*\1\s*=\s*str_replace\(\'[^+]\',\s*\'[^\']+\',\s*\1\);\s*(\$\w+)\s*=\s*[^;]+;";\s*@?\1\(\s*str_replace\((?:\s*array\(\'[^\']+\',\s*\'[^\']+\'\),){2}\s*\5\)\s*\);|\s*\2=base64_decode\(\2\);\s*eval\(\2\);)~msi',
            'id'   => 'evalVarReplace',
        ],
        [
            'full' => '~(?:\$\w{1,50}\s*=\s*base64_decode\((?:[\'"][^\'"]+[\'"]\.?)+\);)+\s*(?:\$\w{1,50}\s*=\s*[\'"][^\'"]+[\'"];)+\s*(eval\(htmlspecialchars_decode\((?:\$\w{1,50}\(?)+\)+;)~msi',
            'id' => 'evalVarsB64Concated',
        ],
        [
            'full' => '~((\$[^\s=.;]+)\s*=\s*\(?[\'"]([^\'"]+)[\'"]\)?\s*;?\s*)+\s*.{0,10}?(?:error_reporting\(\d\);|@set_time_limit\(\d\);|@|ini_set\([\'"]\w{1,99}[\'"],\s?\d\);\s?){0,5}(?:eval\s*\(|assert\s*\(|echo)\s*([\'"?>.\s]+)?\(?(base64_decode\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|htmlspecialchars_decode\s*\(|convert_uudecode\s*\()+(\({0,1}[\s"\']?(\$[^\s=\'")]+)?(?:str_replace\((?:.+?,){3}\2?)?[\s"\']?\){0,1})(?:[\'"]?\)+;?)+~msi',
            'id'   => 'evalVar',
        ],
        [
            'full' => '~((?:(?:\$\w+=[\'"]\\\\[^\'"]+)[\'"];)+)@(eval\((?:"\?>"\.)?(?:\$\w+\()+[\'"]([^\'"]+)[\'"]\)+;)~msi',
            'id'   => 'evalVarSlashed',
        ],
        [
            'full' => '~function\s*(\w{1,40})\((\$\w{1,40})\)\{(\$\w{1,40})=\'base64_decode\';(\$\w{1,40})=\'gzinflate\';return\s*\4\(\3\(\2\)\);\}\$\w{1,40}=\'[^\']*\';\$\w{1,40}=\'[^\']*\';eval\(\1\(\'([^\']*)\'\)\);~msi',
            'id'   => 'evalFunc',
        ],
        [
            'full' => '~function\s*(\w{1,40})\s*\((\$\w{1,40})\)\s*\{\s*(\$\w{1,40})\s*=\s*"\\\\x62\\\\x61\\\\x73\\\\x65\\\\x36\\\\x34\\\\x5f\\\\x64\\\\x65\\\\x63\\\\x6f\\\\x64\\\\x65";\s*(\$\w{1,40})\s*=\s*"\\\\x67\\\\x7a\\\\x69\\\\x6e\\\\x66\\\\x6c\\\\x61\\\\x74\\\\x65";\s*return\s*\4\s*\(\3\s*\(\2\)\);\s*\}\s*\$\w{1,40}\s*=\s*\"[^\"]*\";\s*\$\w{1,40}\s*=\s*\"[^\"]*\";\s*eval\s*\(\1\s*\(\"([^\"]*)\"\)\);~msi',
            'id'   => 'evalFunc',
        ],
        [
            'full' => '~(\$\w+)\s?=\s?[\'"]@?(([\w."]+\()+[\'"]([\w\/+]+)[\'"])\)+;[\'"]\s?;\s?(\$\w+)\s?=\s?([\w@."]+)\s?;\s?@?(\$\w+)\s?=\s\5\([\'"]+,\s?"\1;"\s?\);\7\([\'"]{2}\);~msi',
            'id'   => 'evalConcatFunc',
        ],
        [
            'full' => '~function\sT_\((\$\w+)\)\s{\s(\$\w+)\s=\s256;\s(\$w2)\s=\s8;\s(\$\w+)\s=\sarray\(\);\s(\$\w+)\s=\s0;\s(\$\w+)\s=\s0;\sfor\s\((\$\w+)\s=\s0;\s\7\s<\sstrlen\(\1\);\s\7\+\+\)\s{\s\5\s=\s\(\5\s<<\s8\)\s\+\sord\(\1\[\7\]\);\s\6\s\+=\s8;\sif\s\(\6\s>=\s\3\)\s{\s\6\s-=\s\3;\s(\$\w+)\[\]\s=\s\5\s>>\s\6;\s\5\s&=\s\(1\s<<\s\6\)\s-\s1;\s\2\+\+;\sif\s\(\2\s>>\s\3\)\s{\s\3\+\+;\s}\s}\s}\s(\$\w+)\s=\srange\("\\\\x0",\s"\\\\377"\);\s(\$\w+)\s=\s\'\';\sforeach\s\(\4\sas\s\7\s=>\s(\$\w+)\)\s{\sif\s\(!isset\(\9\[\11\]\)\)\s{\s(\$\w+)\s=\s(\$\w+)\s\.\s\13\[0\];\s}\selse\s{\s\12\s=\s\9\[\11\];\s}\s\10\s\.=\s\12;\sif\s\(\7\)\s{\s\9\[\]\s=\s\13\s\.\s\12\[0\];\s}\s\13\s=\s\12;\s}\sreturn\s\10;\s}\s(\$_\w+)="[\w\\\\]+";eval\(T_\(\14\("(.*)"\)\)\);~mis',
            'fast' => '~function\sT_\((\$\w+)\)\s{\s(\$\w+)\s=\s256;\s(\$w2)\s=\s8;\s(\$\w+)\s=\sarray\(\);\s(\$\w+)\s=\s0;\s(\$\w+)\s=\s0;\sfor\s\((\$\w+)\s=\s0;\s\7\s<\sstrlen\(\1\);\s\7\+\+\)\s{\s\5\s=\s\(\5\s<<\s8\)\s\+\sord\(\1\[\7\]\);\s\6\s\+=\s8;\sif\s\(\6\s>=\s\3\)\s{\s\6\s-=\s\3;\s(\$\w+)\[\]\s=\s\5\s>>\s\6;\s\5\s&=\s\(1\s<<\s\6\)\s-\s1;\s\2\+\+;\sif\s\(\2\s>>\s\3\)\s{\s\3\+\+;\s}\s}\s}\s(\$\w+)\s=\srange\("\\\\x0",\s"\\\\377"\);\s(\$\w+)\s=\s\'\';\sforeach\s\(\4\sas\s\7\s=>\s(\$\w+)\)\s{\sif\s\(!isset\(\9\[\11\]\)\)\s{\s(\$\w+)\s=\s(\$\w+)\s\.\s\13\[0\];\s}\selse\s{\s\12\s=\s\9\[\11\];\s}\s\10\s\.=\s\12;\sif\s\(\7\)\s{\s\9\[\]\s=\s\13\s\.\s\12\[0\];\s}\s\13\s=\s\12;\s}\sreturn\s\10;\s}\s(\$_\w+)="[\w\\\\]+";eval\(T_\(\14\("(.*)"\)\)\);~mis',
            'id'   => 'evalFuncFunc',
        ],
        [
            'full' => '~(\$\w+)\s?=\s?[\'"]([^\'"]+)[\'"];\s?(\$\w+)\s?=\s?[\'"]([^\'"]+)[\'"];\s?(\$\w+)\s?=\s?[\'"]([^\'"]+)[\'"];\s?(\$\w+)\s?=\s?bin2hex\(\5\);\s?(\$\w+)\s?=\s?hex2bin\(\7\);\s*(?:eval\()+[\'"]\?>[\'"]\.\1\(\3\(\8\)+;~msi',
            'id'   => 'evalBinHexVar',
        ],
        [
            'full' => '~((?:(?:\${"(?:\w{0,10}?\\\\x\w{1,10}){1,100}"}\["\w{0,10}?(?:\\\\x\w{1,10}){1,100}"\]|\$\w+)\s*=\s*[\'"][^\'"]+["\'];)+.*?define.*?)(?:\${)?\$\w{1,50}}?\s*=\s*array\(array\(([\'"][^\)]+[\'"])\)\);(.*?create_function\(.*?array_walk\((?:\${\${"(?:\\\\x\w{1,10}){1,10}"}\["(?:\\\\x\w{1,10}){1,10}"\]}|(?:\${)?\$\w+}?),\s*(?:\${\${"\w?(?:\\\\x\w{1,10}){1,10}"}\["(?:\w?\\\\x\w{1,10}){1,20}"\]}|\$\w+)\);)~msi',
            'fast' => '~create_function\([\'"][^"\']+[\'"],\s*(?:[\'"][^"\']+[\'"]\.?)+.*?\);\s*\$[^=]+=\s*array_walk\((?:\${\${"(?:\\\\x\w{1,10}){1,10}"}\["(?:\\\\x\w{1,10}){1,10}"\]}|(?:\${)?\$\w+}?),\s*(?:\${\${"\w?(?:\\\\x\w{1,10}){1,10}"}\["(?:\w?\\\\x\w{1,10}){1,20}"\]}|\$\w+)\);~msi',
            'id' => 'evalArrayWalkFunc'
        ],
        [
            'full' => '~(\$\w+)\s?=\s?[\'"]([^\'"]+)[\'"];\s*eval\([\'"]\?>[\'"]\s?\.\s?base64_decode\(strtr\(substr\(\1\s?,(\d+)\*(\d+)\)\s?,\s?substr\(\1\s?,(\d+)\s?,\s?(\d+)\)\s?,\s*substr\(\s?\1\s?,\s?(\d+)\s?,\s?(\d+)(?:\s?\))+;~msi',
            'id' => 'evalSubstrVal'
        ],
        [
            'full' => '~(\$\w{1,50})=[\'"]([^\'"]+)[\'"];\s?\1\s?=\s?base64_decode\(\1\);\s?eval\(gzinflate\(str_rot13\(\1\)+;~msi',
            'id' => 'evalGzStrRotB64',
        ],
        [
            'full' => '~(\$\w{1,50})\s*=\s*([\'"][^\'"]+[\'"]);\s*eval\(urldecode\(hex2bin\([\'"]([^\'"]+)[\'"]\)\)\);\s*eval\(hex2bin\([\'"]([^\'"]+)[\'"]\)\s*\.\s*((?:\$\w{1,50}\()+\1)\)+;~msi',
            'id' => 'twoEvalVarsReplace',
        ],
        [
            'full' => '~global\s?(\$\w{1,50});\s?if\(!\1\)\s?{\s?function\sob_start_flush\((\$\w{1,50})\)\s?{\s?(\$\w{1,50})\s?=\s?array\(((?:\d{1,5}[,\s]*)+)\);\s?(\$\w{1,50})\s?=\s?array\(((?:\d{1,5}[,\s]*)+)\);\s?(\$\w{1,50})\s?=\s?[\'"]{2};\s?foreach\(\5\sas\s(\$\w{1,50})\)\s?{\s?\7\s?\.=\s?chr\(\3\[\8\]\+(\d{1,5})\);\s?}.*?\7\.substr\(.*?[\'"]ob_start_flush[\'"]\);\s?}\s?\?>~msi',
            'id' => 'obStartFlushVar',
        ],
        [
            'full' => '~((?:\$GLOBALS\[[\'"][^\'"]+[\'"]\]\s?=\s?base64_decode\([\'"][^\'"]*[\'"]\);){10,})(?:.*?\$GLOBALS\[[\'"][^\'"]+[\'"]\])+[);]*~msi',
            'id' => 'b64GlobalVarsReplace',
        ],
        [
            'full' => '~(preg_replace\(["\'](?:/\.\*?/[^"\']+|[\\\\x0-9a-f]+)["\']\s*,\s*)[^\),]+(?:[\)\\\\0-5]+;[\'"])?(,\s*["\'][^"\']*["\'])\)+;~msi',
            'id'   => 'eval',
        ],
        [
            'full' => '~(\$\w{1,40})\s*=\s*[\'"]([^\'"]*)[\'"]\s*;\s*(\$\w{1,40}\s*=\s*(strtolower|strtoupper)\s*\((\s*\1[\[\{]\s*\d+\s*[\]\}]\s*\.?\s*)+\);\s*)+\s*if\s*\(\s*isset\s*\(\s*\$\{\s*\$\w{1,40}\s*\}\s*\[\s*[\'"][^\'"]*[\'"]\s*\]\s*\)\s*\)\s*\{\s*eval\s*\(\s*\$\w{1,40}\s*\(\s*\$\s*\{\s*\$\w{1,40}\s*\}\s*\[\s*[\'"][^\'"]*[\'"]\s*\]\s*\)\s*\)\s*;\s*\}\s*~msi',
            'id'   => 'evalInject',

        ],
        [
            'full' => '~((\$\w+)\s*=\s*(([base64_decode\'\.\s]+)|([eval\'\.\s]+)|([create_function\'\.\s]+)|([stripslashes\'\.\s]+)|([gzinflate\'\.\s]+)|([strrev\'\.\s]+)|([str_rot13\'\.\s]+)|([gzuncompress\'\.\s]+)|([urldecode\'\.\s]+)([rawurldecode\'\.\s]+));\s*)+\$\w+\s*=\s*\$\w+\(\'\',(\s*\$\w+\s*\(\s*)+\'[^\']+\'\)+;\s*\$\w+\(\);~msi',
            'fast' => '~\$\w+\s*=\s*\$\w+\(\'\',(\s*\$\w+\s*\(\s*)+\'[^\']+\'\)+;\s*\$\w+\(\);~msi',
            'id'   => 'createFuncConcat',

        ],
        [
            'full' => '~(\$\w+)\s*=\s*base64_decode\("([^"]+)"\);(\1\s*=\s*ereg_replace\("([^"]+)","([^"]+)",\1\);)+\1=base64_decode\(\1\);eval\(\1\);~msi',
            'id'   => 'evalEregReplace',

        ],
        [
            'full' => '~((\$\w+)\s*=\s*(([base64_decode"\'\.\s]+)|([eval"\'\.\s]+)|([create_function"\'\.\s]+)|([stripslashes"\'\.\s]+)|([gzinflate"\'\.\s]+)|([strrev"\'\.\s]+)|([str_rot13"\'\.\s]+)|([gzuncompress"\'\.\s]+)|([urldecode"\'\.\s]+)([rawurldecode"\'\.\s]+));\s*)+\s*@?eval\(\$[^)]+\)+;~msi',
            'id'   => 'evalWrapVar',

        ],
        [
            'full' => '~(?:\$\{"[^"]+"\}\["[^"]+"\]="[^"]+";)+(?:\$\{\$\{"[^"]+"\}\["[^"]+"\]\}="[^"]+";)+@?eval\s*\(\s*([\'"?>.]+)?@?\s*(base64_decode\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|eval\s*\()+\(?\$\{\$\{"[^\)]+\)+;~msi',
            'id'   => 'escapes',
        ],
        [
            'full' => '~(\$\w+)\s*=(?:\s*(?:(?:["\'][a-z0-9][\'"])|(?:chr\s*\(\d+\))|(?:[\'"]\\\\x[0-9a-f]+[\'"]))\s*?\.?)+;\s*(\$\w+)\s*=(?:\s*(?:(?:["\'][a-z0-9][\'"])|(?:chr\s*\(\d+\))|(?:[\'"]\\\\x[0-9a-f]+[\'"]))\s*?\.?)+;\s*@?\1\s*\(@?\2\s*\([\'"]([^\'"]+)[\'"]\)+;~msi',
            'id'   => 'assert',
        ],
        [
            'full' => '~eval\s*\(str_rot13\s*\([\'"]+\s*(?:.+(?=\\\\\')\\\\\'[^\'"]+)+[\'"]+\)+;~msi',
            'id'   => 'evalCodeFunc',
        ],
        [
            'full' => '~\$\{"GLOBALS"\}\[[\'"](\w+)[\'"]\]=["\'](\w+)[\'"];\$\{"GLOBALS"\}\[[\'"](\w+)[\'"]\]=["\']\2[\'"];\${\$\{"GLOBALS"\}\[[\'"]\3[\'"]\]}=[\'"]([^\'"]+)[\'"];eval.{10,50}?\$\{\$\{"GLOBALS"\}\[[\'"]\1[\'"]\]\}\)+;~msi',
            'id'   => 'evalVarVar',
        ],
        [
            'full' => '~(\$\w+)=[\'"][^"\']+[\'"];(\$\w+)=strrev\(\'edoced_46esab\'\);eval\(\2\([\'"][^\'"]+[\'"]\)+;~msi',
            'id'   => 'edoced_46esab',
        ],
        [
            'full' => '~(\$\w+)=strrev\([\'"](?:|ed|oc|_|4|6|es|ab|(?:"\."))+[\'"]\);\s*(\$\w+)=strrev\([\'"](?:|et|al|fn|iz|g|(?:"\."))+[\'"]\);\s?@?eval\(\2\(\1\([\'"]([\w\/\+=]+)[\'"]\)\)\);~msi',
            'id'   => 'edoced_46esab_etalfnizg',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*"((?:[^"]|(?<=\\\\)")*)";(\$\w+)\s*=\s*(\1\[\d+\]\.?)+;(\$\w+)\s*=\s*[^;]+;(\$\w+)\s*=\s*"[^"]+";\$\w+\s*=\s*\5\."[^"]+"\.\6;\3\((\1\[\d+\]\.?)+,\s*\$\w+\s*,"\d+"\);~smi',
            'fast' => '~(\$\w+)\s*=\s*"((?:[^"]|(?<=\\\\)"){0,1000})";(\$\w+)\s*=\s*(\1\[\d+\]\.?)+;(\$\w+)\s*=\s*[^;]+;(\$\w+)\s*=\s*"[^"]+";\$\w+\s*=\s*\5\."[^"]+"\.\6;\3\((\1\[\d+\]\.?)+,\s*\$\w+\s*,"\d+"\);~smi',
            'id'   => 'eval2',
        ],
        [
            'full' => '~(?:\${"\\\\x[\\\\\w]+"}\["\\\\x[\\\\\w]+"\]\s?=\s?"[\w\\\\]+";){1,10}\${\${"\\\\x[\\\\\w]+"}\["[\\\\\w]+"\]}\s?=\s?"\w{1,100}";\${\${\${"\\\\x[\\\\\w]+"}\["[\\\\\w]+"\]}\s?}="(\\\\x[^"]+)";eval\(((?|str_rot13\(|gzinflate\(|base64_decode\(){1,10})\(\${\${"\\\\x[\\\\\w]+"}\["[\\\\\w]+"\]}\){1,5};~msi',
            'id'   => 'evalEscapedCharsContent',
        ],
        [
            'full' => '~eval\(strrev\(\s?\'([^\']+)\'\s?\)\);~msi',
            'id' => 'evalStrrevCode',
        ],
        [
            'full' => '~eval\(convert_uudecode\(\s?\'((?:.*?\\\\\')*[^\']+)\'\)\);~msi',
            'id' => 'evalConvertUudecodeWithSlashedQuote',
        ],
        [
            'full' => '~@?(eval|echo|(\$\w+)\s*=\s*create_function)(?:\/\*+\/)?\s*\((\'\',)?\s*([\'"][?>\s]+[\'".\s]+)?\s*\(?\s*@?\s*(?:base64_decode\s*\(|pack\s*\(\'H\*\',|convert_uudecode\s*\(|htmlspecialchars_decode\s*\(|gzdecode\s*\(|stripslashes\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|unserialize\s*\(|eval\s*\(|hex2bin\()+.*?[^\'");]+((\s*\.?[\'"]([^\'";]+[\'"]*\s*)+|,\s*true)?\s*[\'"\)]+)+\s*;?(\s*\2\(\);)?~msi',
            'id'   => 'eval',
        ],
        [
            'full' => '~eval\s*/\*[\w\s\.:,]+\*/\s*\([^\)]+\)+;~msi',
            'fast' => '~eval\s*/\*[\w\s\.:,]+\*/\s*\(~msi',
            'id'   => 'eval',
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];\s?(\$\w{1,50})\s?=\s?base64_decode\([\'"]([^\'"]+)[\'"]\);\s?eval\(\3\(\3\([\'"]\1[\'"]\)\)\);~msi',
            'id' => 'evalB64DoubleVar',
        ],
        [
            'full' => '~((\$\w+)="";\$\w+\s*\.=\s*"[^;]+;\s*)+(?:(?:\$\w+)?="";)?eval\((\s*\$\w+\s*\.)+\s*"[^"]+(?:"\);)+~msi',
            'id'   => 'evalConcatVars',
        ],
        [
            'full' => '~((?:\$\w+\s?=\s?(?:[base_decode\."\'\d /\*\+\-]+|str_rot13)(?:\([\'"][^\'"]+[\'"]\))?;)+)\s*(@?eval\((?:[\'"\)]\?>[\'"\)]\s*\.\s*)*(?:(?:\w+\()*\$\w+\(?)+(?:.*?)?\)+;)~msi',
            'id'   => 'evalFuncVars',
        ],
        [
            'full' => '~eval\("\\\\145\\\\166\\\\141\\\\154\\\\050\\\\142\\\\141\\\\163[^\)]+\)+;~msi',
            'fast' => '~eval\("\\\\145\\\\166\\\\141\\\\154\\\\050\\\\142\\\\141\\\\163~msi',
            'id'   => 'evalHex',
        ],
        [
            'full' => '~eval\s*\("\\\\x?\d+[^\)]+\)+;(?:[\'"]\)+;)?~msi',
            'fast' => '~eval\s*\("\\\\x?\d+~msi',
            'id'   => 'evalHex',
        ],
        [
            'full' => '~(\$\w+)\s=\s(["\']?[\w\/\+]+["\']?);\s(\$\w+)\s=\s((?:str_rot13\(|rawurldecode\(|convert_uudecode\(|gzinflate\(|str_rot13\(|base64_decode\(|rawurldecode\(|)+\1\)\)+);\secho\s(eval\(\3\);)~msi',
            'id'   => 'echoEval',
        ],
        [
            'full' => '~if\(!function_exists\([\'"](\w+)[\'"]\)\){function\s?\1\((\$\w+)\){(\$\w+)=array\((?:\'(\d+)\',)?\'([^\']+)\',\'([^\']+)\',\2\);for\((\$\w+)=0;\7<[34];\7\+\+\){for\((\$\w+)=0;\8<strlen\(\3\[\7\]\);\8\+\+\)\s?\3\[\7\]\[\8\]\s?=\s?chr\(ord\(\3\[\7\]\[\8\]\)-(?:\(\7\?\3\[\8\s?xor\s?\8\]:1\)|1)\);if\(\7==[21]\)\s?\3\[[32]\]=\3\[[01]\]\(\3\[[21]\]\(\3\[[32]\]\)\);}\s?return\s?\3\[[32]\];}(\$\w+)=["\']([\w\+\/=]+)["\'];(\$\w+)=[\'"]\1[\'"];(\$\w+)=\11\([\'"]([^\'"]+)[\'"]\);\$\w+=@?\12\(\'\',\11\(\9\)\);\$\w+\(\);}~msi',
            'id'   => 'evalCreateFunc',
        ],
        [
            'full' => '~(\$\w{1,1000})=[\'"]([\'"\w/\+=]+)[\'"];(\$\w{1,3000}=(?:base64_decode|gzinflate|convert_uudecode|str_rot13)\(\$\w{1,3000}\);){1,100}eval\((\$\w{1,3000})\);~msi',
            'id'   => 'evalAssignedVars',
        ],
        [
            'full' => '~(?:\$_{1,50}\s*=\s*[^;]{2,200}\s*;\s*)+(?:\$_{1,50}\s*=\s*\$_{1,50}\([^\)]+\);\s*|(?:if\(!function_exists\(\'[^\']+\'\)\){function\s\w{1,50}\(\$\w{1,50},\$\w{1,50}\){return\s?eval\("return function\(\$\w{1,50}\){{\$\w{1,50}}};"\);}}\s*)?)+(?:\$_{1,50}\s*=\s*\'[^\']+\';\s*)?(?:\s*(\$_{1,50}\s*=\s*)?\$_+\([^)]*\)+;\s*)+(?:echo\s*\$_{1,50};)?~msi',
            'id'   => 'seolyzer',
        ],
        [
            'full' => '~(\$\w+)="((?:[^"]|(?<=\\\\)")*)";(\s*\$GLOBALS\[\'\w+\'\]\s*=\s*(?:\${)?(\1\[\d+\]}?\.?)+;\s*)+(.{0,400}\s*\1\[\d+\]\.?)+;\s*}~msi',
            'fast' => '~(\$\w+)="((?:[^"]|(?<=\\\\)"){0,1000})";(\s*\$GLOBALS\[\'\w+\'\]\s*=\s*(?:\${)?(\1\[\d+\]}?\.?)+;\s*)+(.{0,400}\s*\1\[\d+\]\.?)+;\s*}~msi',
            'id'   => 'subst2',
        ],
        [
            'full' => '~(\$\w{1,50}\s*=\s*"[^"]{1,1000}";\s*)+(\$\w{1,50}\s*=\s*\$?\w{1,50}\("\w{1,50}"\s*,\s*""\s*,\s*"\w{1,50}"\);\s*)+\$\w{1,50}\s*=\s*\$\w{1,50}\("",\s*\$\w{1,50}\(\$\w{1,50}\("\w{1,50}",\s*"",(\s*\$\w{1,50}\.?)+\)+;\$\w{1,50}\(\);~msi',
            'id'   => 'strreplace',
        ],
        [
            'full' => '~\$\w{1,50}\s?=\s?(?:\'[^\']{1,500}\'|"[^}]{1,500}}");\s?\$\w{1,50}\s?=\s?str_replace\([\'"]\w{1,50}[\'"],\s?[\'"][\'"],\s?["\']\w{1,100}[\'"]\);\s?(?:\$\w{1,50}\s?=\s?(?:\'[^\']{1,500}\'|"[^\s]{1,500}?");\s){1,15}.*?\$\w{1,50}\s?=\s?str_replace\((?:\'[^\']{1,100}\'|"[^"]{1,100}?"),\s?\'\',\s?(?:\$\w{1,50}\s?\.?\s?){1,50}\);\s?\$\w{1,50}\s?=\s?\$\w{1,50}\(\'\',\s?\$\w{1,50}\);\s?\$\w{1,50}\(\);~msi',
            'id'   => 'strreplace',
        ],
        [
            'full' => '~function\s(\w{1,50})\((\$\w{1,50}),\$\w{1,50}\)\s?{if\(file_exists[^}]+}(\$\w{1,50})\s?=\s?str_replace\(array\(base64_decode\(\'([^\']+)\'\),base64_decode\(\'([^\']+)\'\)\),array\(base64_decode\(\'([^\']+)\'\),base64_decode\(\'([^\']+)\'\)\),\2\);(\$\w{1,50})\s?=\s?strrev[^;]+;(\$\w{1,50})\s?=\s?\8\(\3\);(\$\w{1,50})\s?=\s?strrev[^;]+;return@?\10\(\9\);}if.*?exit;}\s?((\$\w{1,50})\s?=\s?base64_decode\(\'([^\']+)\'\);preg_match\(base64_decode\(\'[^\']+\'\),\12,(\$\w{1,50})\);(\$\w{1,50})\s?=\s?\14\[1\];(\$\w{1,50})\s?=\s?\1\(\15,\$\w{1,50}\);if\(isset\(\16\)\){eval\(\16\);})~msi',
            'id' => 'pregB64FuncImgStr',
        ],
        [
            'full' => '~@?echo\s*([\'"?>.\s]+)?@?\s*(base64_decode\s*\(|stripslashes\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|eval\s*\()+[\s\/\'"].*?[^\'")]+((\s*\.?[\'"]([^\'";\$]+\s*)+)?\s*[\'"\);]+)+~msi',
            'id'   => 'echo',
        ],
        [
            'full' => '~(\$\w+)="([^"]+)";\s*(\$\w+)=strtoupper\s*\((\1\[\d+\]\s*\.?\s*)+\)\s*;\s*if\(\s*isset\s*\(\${\s*\3\s*}\[\d*\s*\'\w+\'\s*\]\s*\)\s*\)\s*{eval\(\${\3\s*}\[\'\w+\']\s*\)\s*;}~smi',
            'fast' => '~(\$\w+)="([^"]+)";\s*(\$\w+)=strtoupper\s*\((\1\[\d+\]\s*\.?\s*)+\)\s*;\s*if\(\s*isset\s*\(\${\s*\3\s*}\[\d*\s*\'\w+\'\s*\]\s*\)\s*\)\s*{eval\(\${\3\s*}\[\'\w+\']\s*\)\s*;}~smi',
            'id'   => 'strtoupper',
        ],
        [
            'full' => '~(\$\w+)="[^"]+";\s*(\$\w+)=str_ireplace\("[^"]+","",\1\);(\$\w+)\s*=\s*"[^"]+";\s*function\s*(\w+)\((\$\w+,?)+\){\s*(\$\w+)=\s*create_function\(\'\',\$\w+\);\s*array_map\(\6,array\(\'\'\)+;\s*}\s*set_error_handler\(\'\4\'\);(\$\w+)=\2\(\3\);user_error\(\7,E_USER_ERROR\);\s*if\s*.+?}~msi',
            'id'   => 'errorHandler',
        ],
        [
            'full' => '~(\$\w+)=strrev\(str_ireplace\("[^"]+","","[^"]+"\)\);(\$\w+)="([^"]+)";eval\(\1\(\2\)+;}~msi',
            'id'   => 'evalIReplace',
        ],
        [
            'full' => '~error_reporting\((?:0|E_ALL\^E_NOTICE)\);ini_set\("display_errors",\s*[01]\);if\(!defined\(\'(\w+)\'\)\){define\(\'\1\',__FILE__\);if\(!function_exists\("([^"]+)"\)\){function [^(]+\([^\)]+\).+?eval\(""\);.+?;}?eval\(\$[^\)]+\)\);[^\)]+\)+.*?;return\s*\$[^;]+;\s*\?>([^;]+);~msi',
            'id'   => 'PHPJiaMi',
        ],
        [
            'full' => '~\$\w+=0;(\$GLOBALS\[\'\w+\'\])\s*=\s*\'([^\']+)\';\s*(\$\w+)=pack\(\'H\*\',substr\(\1,\s*([-\d]+)\)\);if\s*\(!function_exists\(\'(\w+)\'\)\){function\s*\5\(\$\w+,\s*\$\w+\){\$\w+=\1;\s*\$d=pack\(\'H\*\',substr\(\1,\s*\4\)\);\s*return\s*\$\w+\(substr\(\$\w+,\s*\$\w+,\s*\$\w+\)\);}};eval\(\3\(\'[^\']+\'\)\);~msi',
            'id'   => 'substr',
        ],
        [
            'full' => '~(?:\$\{\'GLOBALS\'\}\[\'\w+\'\]=\'_F\';)?\$(?:_F|\{\$\{\'GLOBALS\'\}\[\'\w+\'\]\})=_{1,2}(?:FILE|hex)_{1,2};(?:\$\{\'GLOBALS\'\}\[\'\w+\'\]=\'_X\';)?\$(?:_X|\{\$\{\'GLOBALS\'\}\[\'\w+\'\]\})=["\']([^\'"]+)[\'"];\s*(?:\$[_\w]+\.=[\'"][\w\+\/=]+[\'"];){0,30}\$_\w+=base64_decode\(\$_X\);\$_X=strtr\(\$_X,\'([^\']+)\',\'([^\']+)\'\);\$_R=@?(?:(str_replace)|(ereg_replace)|(preg_replace))\(\'\~?__FILE__\~?\',"\'".\$_F."\'",\$_X\);eval\(\$_R\);\$_R=0;\$_X=0;~msi',
            'fast' => '~\$_\w+=base64_decode\(\$_X\);\$_X=strtr\(\$_X,\'([^\']+)\',\'([^\']+)\'\);\$_R=@?(?:(str_replace)|(ereg_replace)|(preg_replace))\(\'\~?__FILE__\~?\',"\'".\$_F."\'",\$_X\);eval\(\$_R\);\$_R=0;\$_X=0;~msi',
            'id'   => 'LockIt2',
        ],
        [
            'full' => '~(?:@error_reporting\(\d+\);\s*@set_time_limit\(\d+\);)?\s*(\$\w+)=([\s\'\w\/+=]+);\s*(\$\w+)=(__FILE__);\s*\1=gzinflate\(str_rot13\(base64_decode\(\$tr\)\)\);\1=strtr\(\1,\'([^\']+)\'\s*,\'([^\']+)\'\);(\$_R)=@?ereg_replace\(\'\~?\4\~?\',"\'".\3."\'",\1\);eval\(\7\);\7=0;\1=0;~msi',
            'fast' => '~(\$\w+)=([\s\'\w\/+=]+);\s*(\$\w+)=(__FILE__);\s*\1=\w+\(\w+\(\w+\(\$tr\)\)\);\1=\w+\(\1,\'([^\']+)\'\s*,\'([^\']+)\'\);(\$_R)=@?\w+\(\'\~?\4\~?\',"\'".\3."\'",\1\);\w+\(\7\);\7=0;\1=0;~msi',
            'id'   => 'anaski',
        ],
        [
            'full' => '~\$\w+="([^"]+)";(?:\$l+=0;\$l+=\'base64_decode\';\$l+=0;eval\(\$l+\("[^"]+"\)+;|\$l+=\'ord\';)[^\^]+\^[\dx]+\);}eval\(\$l+\("[^"]+"\)+;eval\(\$l+\);return;~msi',
            'id'   => 'custom1',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*"(\w{32})";\s*(\$\w+)\s*=\s*array\s*\(\);\s*(\3\[\d+\]\s*=\s*"[^"]+";\s*)+\s*(\$\w+)\s*=\s*"base64_decode";\s*\$\w+\s*=\s*(\w+)\s*\(\3,\1\);function\s*\6\(\s*.{200,500}return\s*\$\w+;\s*}\s*eval\s*\(\5\s*\(\$\w+\)\);~msi',
            'id'   => 'custom2',
        ],
        [
            'full' => '~\$\w+=\'=+\s*Obfuscation provided by Unknowndevice64 - Free Online PHP Obfuscator\s*(?:http://www\.ud64\.com/)?\s*=+\';\s*(\$ud64_c[o0]m="[\\\\0-9a-z\."]+;)+\$\w+=(\$ud64_c[o0]m\()+"([^"]+)"\)+;@eval\(\$ud64_c[o0]m\(\'[^\']+\'\)+;~msi',
            'id'   => 'ud64',
        ],
        [
            'full' => '~(\$[\w_]+=("[\\\\\\\\\w]+"\.?)+;)+\$\w+=(?:\$\w+\()+"([\w\/\+=]+)"\)+;@eval\(\$\w+\(\'.*?\'\)+;~msi',
            'id'   => 'ud64',
        ],
        [
            'full' => '~\$\w+=__FILE__;\$\w+=fopen\(\$\w+,\'rb\'\);fread\(\$\w+,(\d+)\);\$\w+=explode\("\\\\t",base64_decode\(fread\(\$\w+,(\d+)\)+;\$\w+=\$\w+\[[\d+]\];[\$l1=\d{}\.;\(\)\[\]]+eval\(\$\w+\(\'[^\']+\'\)+;\s*return\s*;\?>[\w=\+]+~msi',
            'id'   => 'qibosoft',
        ],
        [
            'full' => '~(\$\w+)=base64_decode\("([^"]+)"\);\s*eval\("return\s*eval\(\\\\"\1\\\\"\);"\)~msi',
            'id'   => 'evalReturn',
        ],
        [
            'full' => '~(?:\$[0O]+\[[\'"](\w+)[\'"]\]\.?="[\\\\\w]+";)+(?:\$[0O]+\[[\'"]\w+[\'"]\]\.?=\$[0O]+\[[\'"]\w+[\'"]\]\([\'"][\d\(]+[\'"](,__FILE__)?\);)+@eval\((?:\$[0O]+\[[\'"]\w+[\'"]\]\()+"([^"]+)"\)+;~mis',
            'fast' => '~(?:\$[0O]+\[[\'"](\w+)[\'"]\]\.?="[\\\\\w]+";)+(?:\$[0O]+\[[\'"]\w+[\'"]\]\.?=\$[0O]+\[[\'"]\w+[\'"]\]\([\'"][\d\(]+[\'"](,__FILE__)?\);)+@eval\((?:\$[0O]+\[[\'"]\w+[\'"]\]\()+"([^"]+)"\)+;~mis',
            'id'   => 'evalChars',
        ],
        [
            'full' => '~<\?php\s+((\$GLOBALS\[\s*[\'"]\w+[\'"]\s*\])\s*=\s*base64_decode\("([^"]*)"\);)+\s*\?><\?php\s.+\2.+exit;\s}\sfunction\s\w+\(\)\s{\sreturn\sarray\(\s\'favicon\'\s=>\s\'[^\']+\',\s+\'sprites\'\s=>\s\'[^\']+\',\s\);\s}~msi',
            'id'   => 'globalsBase64',
        ],
        [
            'full' => '~(\$\w+=strrev\("[^"]+"\);)+eval\((\$\w+\()+"[^"]+"\)+;~mis',
            'fast' => '~(\$\w+=strrev\("[^"]+"\);)+eval\((\$\w+\()+"[^"]+"\)+;~mis',
            'id'   => 'strrevVarEval',
        ],
        [
            'full' => '~\$\w+=basename/\*\w+\*/\(/\*\w+\*/trim/\*\w+\*/\(.+?(\$\w+)=.+\1.+?;~msi',
            'id'   => 'comments',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*(base64_decode\s*\(+|gzinflate\s*\(+|strrev\s*\(+|str_rot13\s*\(+|gzuncompress\s*\(+|convert_uudecode\s*\(+|urldecode\s*\(+|rawurldecode\s*\(+|htmlspecialchars_decode\s*\(+)+"([^"]+)"\)+;\s*@?eval\(([\'"?>.\s]+)?\1\);~',
            'fast' => '~(\$\w+)\s*=\s*(base64_decode\s*\(+|gzinflate\s*\(+|strrev\s*\(+|str_rot13\s*\(+|gzuncompress\s*\(+|convert_uudecode\s*\(+|urldecode\s*\(+|rawurldecode\s*\(+|htmlspecialchars_decode\s*\(+)+"([^"]+)"\)+;\s*@?eval\(([\'"?>.\s]+)?\1\);~',
            'id'   => 'varFuncsEval',
        ],
        [
            'full' => '~<\?php\s*defined\(\'[^\']+\'\)\s*\|\|\s*define\(\'[^\']+\',__FILE__\);(global\s*\$[^;]+;)+\s*(if\(!function_exists\(\'([^\']+)\'\)\){\s*function\s*[^\)]+\(\$[^,]+,\$[^=]+=\'\'\){\s*if\(empty\(\$[^\)]+\)\)\s*return\s*\'\';\s*\$[^=]+=base64_decode\(\$[^\)]+\);\s*if\(\$[^=]+==\'\'\)\s*return\s*\~\$[^;]+;\s*if\(\$[^=]+==\'-1\'\)\s*@[^\(]+\(\);\s*\$[^=]+=\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\(\$[^\)]+\);\s*\$[^=]+=\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\(\$[^,]+,\$[^,]+,\$[^\)]+\);\s*return\s*\$[^^]+\^\$[^;]+;\s*}}\s*)+(\$[^\[]+\["[^"]+"]=[^\(]+\(\'[^\']+\',\'[^\']*\'\);\s*)+(\$[^\[]+\[\'[^\']+\'\]=\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\([^\)]*\)+;\s*)+return\(eval\(\$[^\[]+\[\'[^\']+\'\]\)+;\s*\?>\s*#!/usr/bin/php\s*-q\s*(\s*[^\s]+)+~msi',
            'fast' => '~<\?php\s*defined\(\'[^\']{10,30}\'\)\s*\|\|\s*define\(\'[^\']{10,30}\',__FILE__\);(global\s*\$[^;]{10,30};)+\s*if\(!function_exists\(\'([^\']+)\'\)\){\s*function\s*[^\)]+\(\$[^,]{10,30},\$[^=]{10,30}=\'\'\){\s*if\(empty\(\$[^\)]+\)\)\s*return\s*\'\';\s*\$[^=]{10,30}=base64_decode~msi',
            'id'   => 'OELove',
        ],
        [
            'full' => '~(?:\$\w+\s*=(\s*(\d+)\+)*\d+;\s*)?(\$\w+="[^"]+";\s*)+\s*(?:\$\w+\s*=(?:\s*(?:\d+)\+)*\s*\d+;\s*)?(\$\w+)\s*=\s*\w+\(\'[^\']+\',\s*\$\w+,\s*\'[^\']+\'\);.+?\4\("[^"]+"\);\s*\$\w+\s*=\s*\4;\s*(\$\w+="[^"]+";\s*)+.+?\$\w+\(\$\w+,\$\w+\("",\s*\$\w+\(\$\w+\(\$\w+\(\$\w+\(\$\w+,\s*"(\d+)"\)+,\$\w+\);.+function \w+\((\$\w+),\s*\$\w+,\s(\$\w+)\)\s{\8\s=\s\8\s\.\s\8;.+return \7;\s*}~msi',
            'fast' => '~(\$\w+)\s*=\s*\w+\(\'[^\']+\',\s*\$\w+,\s*\'[^\']+\'\);.+?\1\("[^"]+"\);\s*\$\w+\s*=\s*\1;\s*(\$\w+="[^"]+";\s*)+~msi',
            'id'   => 'Obf_20200402_1',
        ],
        [
            'full' => '~(?:\$\w+\s*=\s*"[^"]+";\s*)?(?:((?:\$\w+\s*=\s*\'[^\']+\';\s*)+)(\$\w+=(?:\$\w+\.?)+);)?function\s(\w+)\((\$\w+),\s*(\$\w+),\s*(\$\w+)\)\s*{\s*return\s*([\'\. ]*(\4|\5|\6)[\'\. ]*)+;\s*}\s*(?:\$\w+\s*=\s*"[^"]+";)?(\s*\$\w+\s*=\s*\3\((((\'\')|(\$\w+)|(\$\w+[\[\{]\d+[\]\}](\.\'\')?)|(\$\w+[\[\{]\d+[\]\}]\.\$\w+[\[\{]\d+[\]\}]))\s*,?\s*)+\);\s*)+\s*\$\w+\s*=\s*\3[^"]+[^\']+\'([^\']+)\'"[^/]+\'//\'\)+;~msi',
            'fast' => '~function\s(\w+)\((\$\w+),\s*(\$\w+),\s*(\$\w+)\)\s*{\s*return\s*([\'\. ]*(\2|\3|\4)[\'\. ]*)+;\s*}\s*(?:\$\w+\s*=\s*"[^"]+";)?(\s*\$\w+\s*=\s*\1\((((\'\')|(\$\w+)|(\$\w+[\[\{]\d+[\]\}](\.\'\')?)|(\$\w+[\[\{]\d+[\]\}]\.\$\w+[\[\{]\d+[\]\}]))\s*,?\s*)+\);\s*)+\s*\$\w+\s*=\s*\1[^"]+[^\']+\'([^\']+)\'"[^/]+\'//\'\)+;~msi',
            'id'   => 'Obf_20200402_2',
        ],
        [
            'full' => '~(?:function\s*\w{1,50}\(\$\w{1,50},\s*\$\w{1,50}\)\s*\{(?:\s*\$\w{1,50}\s*=\s*(?:md5\(\$\w{1,50}\)|\d+|base64_decode\(\$\w{1,50}\)|strlen\(\$\w{1,50}\)|\'\');\s*)+\s*for\s*\(\$\w{1,50}\s*=\s\d+;\s*\$\w{1,50}\s*<\s*\$len;\s*\$\w{1,50}\+\+\)\s*\{\s*if\s*\(\$\w{1,50}\s*==\s*\$\w{1,50}\)\s*\{\s*\$\w{1,50}\s*=\s*\d+;\s*}\s*\$\w{1,50}\s*\.=\s*substr\(\$\w{1,50},\s*\$\w{1,50},\s*\d+\);\s*\$\w{1,50}\+\+;\s*\}(?:\s*\$\w{1,50}\s*=\s*\'\';)?\s*for\s*\(\$\w{1,50}\s*=\s*\d+;\s*\$\w{1,50}\s*<\s*\$\w{1,50};\s*\$\w{1,50}\+\+\)\s*{\s*if\s*\(ord\(substr\(\$\w{1,50},\s*\$\w{1,50},\s*\d+\)\)\s*<\s*ord\(substr\(\$\w{1,50},\s*\$\w{1,50},\s*\d+\)\)\)\s*\{\s*\$\w{1,50}\s*\.=\s*chr\(\(ord\(substr\(\$\w{1,50},\s*\$\w{1,50},\s*\d+\)\)\s*\+\s*\d+\)\s*-\s*ord\(substr\(\$\w{1,50},\s*\$\w{1,50},\s*\d+\)\)\);\s*}\s*else\s*{\s*\$\w{1,50}\s*\.=\s*chr\(ord\(substr\(\$\w{1,50},\s*\$\w{1,50},\s*\d+\)\)\s*-\s*ord\(substr\(\$\w{1,50},\s*\$\w{1,50},\s*\d+\)\)\);\s*}\s*}\s*return\s*\$\w{1,50};\s*\}\s*|\$\w{1,50}\s*=\s*"([^"]+)";\s*){2}\s*\$\w{1,50}\s*=\s*"([^"]+)";\s*\$\w{1,50}\s*=\s*\w{1,50}\(\$\w{1,50},\s*\$\w{1,50}\);\s*eval\(\$\w{1,50}\);~msi',
            'id'   => 'Obf_20200414_1',
        ],
        [
            'full' => '~(?:\$\w+\s*=\s*\'\w+\';)?\s*(\$\w+)\s*=\s*urldecode\(\'[%0-9a-f]+\'\);(\s*(\$\w+)\s*=(\s*\1\{\d+\}\.?)+;)+\s*(\$\w+)\s*=\s*"[^"]+"\.\3\("[^"]+"\);\s*eval\(\5\);~msi',
            'fast' => '~(\$\w+)\s*=\s*urldecode\(\'[%0-9a-f]+\'\);(\s*(\$\w+)\s*=(\s*\1\{\d+\}\.?)+;)+\s*(\$\w+)\s*=\s*"[^"]+"\.\3\("[^"]+"\);\s*eval\(\5\);~msi',
            'id'   => 'Obf_20200421_1',
        ],
        [
            'full' => '~(\$\w+)=\'([^\']+)\';(\$\w+)=str_rot13\(gzinflate\(str_rot13\(base64_decode\(\1\)\)\)\);eval\(\3\);~msi',
            'id'   => 'SmartToolsShop',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*\("\?>"\.gzuncompress\(base64_decode\("[^"]+"\)\)\);\s*@?eval\(\1\);~msi',
            'id'   => 'Obf_20200504_1',
        ],
        [
            'full' => '~(\$\w+)=base64_decode\(\'[^\']+\'\);\s*eval\(\1\);~mis',
            'fast' => '~(\$\w+)=base64_decode\(\'[^\']+\'\);\s*eval\(\1\);~mis',
            'id'   => 'Obf_20200507_1',
        ],
        [
            'full' => '~(?:error_reporting\(0\);\s*ini_set\("max_execution_time",0\);\s*(?:/\*.*?\*/)?\s*)?(\$\w+)=\s*\[(("."=>".",?\s*)+)];\s*(\$\w+)=str_split\("([^"]+)"\);\s*(?:\$\w+="";)?\s*foreach\(\4\s*as\s*(\$\w+)\)\s*{\s*foreach\(\s*\1\s*as\s*(\$\w+)=>(\$\w+)\)\s*{\s*if\(\6==\(string\)\8\)\s*\{\s*\$\w+\.=\7;\s*break;\s*}\s*}\s*}~msi',
            'fast' => '~(\$\w+)=\s*\[(("."=>".",?\s*)+)];\s*(\$\w+)=str_split\("([^"]+)"\);\s*(?:\$\w+="";)?\s*foreach\(\4\s*as\s*(\$\w+)\)\s*{\s*foreach\(\s*\1\s*as\s*(\$\w+)=>(\$\w+)\)\s*{\s*if\(\6==\(string\)\8\)\s*\{\s*\$\w+\.=\7;\s*break;\s*}\s*}\s*}~msi',
            'id'   => 'Obf_20200507_4',
        ],
        [
            'full' => '~assert\("[eval"\.]+\([base64_decode\."]+\(\'([^\']+)\'\)\)"\);~msi',
            'id'   => 'Obf_20200507_5',
        ],
        [
            'full' => '~parse_str\s*\(\s*((?:[\'"][^\'"]+["\']\s*\.?\s*)+)\s*,\s*(\$\w+)\s*\)\s*;\s*@?\s*(\2\s*\[\s*\d+\s*\]\s*\(\s*)+(?:\'[^\']+\'|\2\[\d+\])\s*\)?,\s*array\s*\(\s*\)\s*,\s*array\s*\(\s*["\'][^\'"]+[\'"]\s*\.\s*(\2\[\s*\d+\s*\]\s*\(\s*)+[\'"]([^\'"]+)[\'"]\s*[\)\s]+\.[\'"]//[\'"][\s\)]+;~msi',
            'id'   => 'Obf_20200513_1',
        ],
        [
            'full' => '~(\$\w+)=strrev\("[base64_decode"\.]+\);eval\(\1\(\'([^\']+)\'\)\);~msi',
            'id'   => 'Obf_20200526_1',
        ],
        [
            'full' => '~error_reporting\(0\);define\(\'\w+\',\s*__FILE__\);define\(\'\w+\',\s*fopen\(__FILE__,\s*\'r\'\)\);fseek\(\w+,\s*__COMPILER_HALT_OFFSET__\);((\$\w+="\\\\x[0-9a-f]+";)+(\$\w+="[^"]+";)+eval\("\?>"\.(\$\w+\()+"([^"]+)"\)+;)+(?:/\*\w+\*/)?__halt_compiler\(\);[\w#|>^%\[\.\]\\\\/=]+~msi',
            'id'   => 'Obf_20200527_1',
        ],
        [
            'full' => '~(\$\w+)=strrev\("[base64_decode]+"\)\.str_replace\(\'(\w+)\',\'\',\'\w+\'\);\s*eval\(\1\(\$\w+\)\);~msi',
            'id'   => 'Obf_20200602_1',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*"([^"]+)";\s*(\$\w+)\s*=\s*base64_decode\(\1\);\s*eval\(\3\);~msi',
            'id'   => 'Obf_20200720_1',
        ],
        [
            'full' => '~[\'".]+(\$\w+\s*=\s*[\'"]\w+[\'"];)+(\$\w+=\$\w+[\'.]+\$\w+;)+(\$\w+=(str_rot13|base64_decode|gzinflate)\(\$\w+\);)+eval\(\$\w+\);~msi',
            'id'   => 'flamux',
        ],
        [
            'full' => '~function\s*(\w+)\(\)\{\s*return\s*"([^"]+)";\s*\}\s*eval\("([^"]+)"\.\1\(\)\."([^"]+)"\);~msi',
            'id'   => 'bypass',
        ],
        [
            'full' => '~(?:\${"[^"]+"}\["[^"]+"\]="[^"]+";)+(echo)\s*"(?:[<\w\\\\>\/\s={:}#]+);(?:[\\\\\w\-:]+;)+(?:[\\\\\w}:{\s#]+;)+(?:[\\\\\w}:{#\-\s]+;)+[\\\\\w}<\/]+";\$\w+=["\\\\\w]+;(?:\${"[^"]+"}\["[^"]+"\]="[^"]+";)+\$\w+=["\\\\\w]+;\${"[^"]+"}\["[^"]+"\]="[^"]+";error_reporting\(\d\);\$\w+=["\\\\\w]+;\${"[^"]+"}\["[^"]+"\]="[^"]+";\$\w+=["\\\\\w]+;set_time_limit\(\d\);\$\w+=["\\\\\w]+;(?:\${"[^"]+"}\["[^"]+"\]="[^"]+";)+if\(empty\([\$_\w\["\\\\\]]+\)\){\${\${"[^"]+"}\["[^"]+"\]}=[\w()]+;}else{\${\${"[^"]+"}\["[^"]+"\]}=[\$_\w\["\\\\\]]+;}chdir\(\${\$\w+}\);\${\${"[^"]+"}\["[^"]+"\]}=htmlentities.*?\1"[^"]+"\.\${\${"[^"]+"}\["[^"]+"\]}[."<\w>\\\\=&]+\${\$\w+}[.">\w\\\\\/<]+;(?:\1["\\\\\w\s=.\${}\[\]&\':\/<>]+;)+}else{(?:\$\w+=["\\\\\w]+;){2}\${\${"[^"]+"}\["[^"]+"\]}=scandir\(\${\$\w+}\);(?:\${"[^"]+"}\["[^"]+"\]="[^"]+";){2}\${\${"[^"]+"}\["[^"]+"\]}=count\(\${\${"[^"]+"}\["[^"]+"\]}\)\-\d;\1"[^"]+"\.\${\${"[^"]+"}\["[^"]+"\]}[."<\w>\\\\=&]+\/\w+>";\${"[^"]+"}\["[^"]+"\]="[^"]+";\1["<\\\\\w>.\s=]+\${\${"[^"]+"}\["[^"]+"\]}[."\\\\\w\s=<\/]+;(?:\1["\\\\\w\s=.\${}\[\]&\':\/<>]+;){3}}}\1["\\\\\w:\s.\$\[\]>()_\'<\/%]+;~msi',
            'id'   => 'darkShell',
        ],
        [
            'full' => '~((\$\w+)=\'(\d+)\';)?(\$\w+)=\'([\w\(;\$\)=\s\[\/\]."*,{}]+)\';(\$\w+)=(?:\4\[[-+\(\d*\/\)]+\]\.?)+;(\$\w+)=(?:\4\[[-+\(\d*\/\)]+\]\.?)+;(\$\w+)=(?:\4\[[-+\(\d*\/\)]+\]\.?(?(2)\2\.|)?)+;(\$\w+)=\s*"([\'\w\/+=]+)";(?:\$\w+=\'\';)?(\$\w+)\.=\7;\11\.=\9;\11\.=\8;@(\$\w+)=\6\(\(\'+\),\s+\(\11\)\);@\12\(\);~msi',
            'id'   => 'wso',
        ],
        [
            'full' => '~(?:(?:@?error_reporting|@?set_time_limit)\(\d+\);\s*){1,2}function\s*\w+\((\$\w{1,50})\)\s*{\s*(\$\w{1,50})\s*=\s*strlen\s*\(trim\(\1\)\);\s*(\$\w{1,50})\s*=\s*\'\';\s*(?|for\s*\((\$\w{1,50})\s*=\s*0;\s*\4\s*<\s*\2;\s*\4\s*\+=\s*2\)|(\$\w+)\s*=\s*0;\s*while\s*\(+\4\s*<\s*\2\)+)\s*{\s*\3\s*\.=\s*pack\s*\("C",\s*hexdec\s*\(substr\s*\(\1,\s*\4,\s*2\)\)\);\s*(?:\4\s*\+=\s*2;)?\s*}\s*return\s*\3;\s*}\s*(?:header\("\w+-(?:\w+:)?\s\w+\/\w+;\s*charset=(\w+)"\);\s*)?(\$\w{1,50})\s*=\s*(?:(?:\w+\("(\w+)"\)|\$\w{1,50})\s*\.?\s*)+\s*\.\s*\'([\w\/\+=\\\\]+\'\)\)\);)\';\s*(\$\w{1,50})\s*=\s*create_function\(\'\',\s*\6\);\s*\9\(\);~msi',
            'id'   => 'anonymousFox',
        ],
        [
            'full' => '~(\$my_sucuri_encoding)\s{0,10}=\s{0,10}[\'"]([^\'"]+)[\'"];\s{0,10}(\$tempb64)\s{0,10}=\s{0,10}base64_decode\(\s{0,10}\1\);\s{0,10}eval\(\s{0,10}\3\s{0,10}\);~msi',
            'id'   => 'wsoEval',
        ],
        [
            'full' => '~(?:(?:(\$\w+)\s*\.?=\s*["\'][assert]+["\'];)+\s*(if\s*\(\!\@\$\w+\)\s*\{\$\w+=1;)?\s*@?\1)(\((?:\w+\()+\'[^;]+;\'\)+;(?(2)}))~msi',
            'id'   => 'assertStr',
        ],
        [
            'full' => '~(function\s\w+\(\$\w+,\$\w+,\$\w+\){return\sstr_replace\(\$\w+,\$\w+,\$\w+\);}\s?){3}(\$\w+)\s=\s\'(\w+)\';\s\2\s=\s(\w+)\(\'(\w+)\',\'\',\2\);\s(\$\w+)\s=\s\'(\w+)\';\s\6\s=\s\4\(\'(\w+)\',\'\',\6\);\s(\$\w+)\s=\s\'(\w+)\';\s\9\s=\s\4\(\'(\w+)\',\'\',\9\);\s(\$\w+)\s=\s\'(\$\w+)\';\s(\$\w+)\s=\s\6\(\12,\9\.\'\(\'\.\2\.\'\(\'\.\12\.\'\)\);\'\);\s\14\(\'(\w+)\'\);~msi',
            'id'   => 'funcVar',
        ],
        [
            'full' => '~(\$\w+)=[\'"]([\w</,\s()\$\+}\\\\\'"?\[\]{;%=^&-]+)[\'"];(\$\w+=(?:\s?\1\[\d+\](?:\s?\.?))+;)+((?:\$\w+\(\d+\);)?(\$\w+=(\$\w+)\(["\']{2},(\$\w+\(\$\w+\(["\'][=\w\+\/]+[\'"]\)\))\);\$\w+\(\);|.*?if\s?\(isset\(\${(?:\$\w+\[\d+\]\.?)+}.*?function\s\w+.*?include\s\${(?:\$\w+\[\d+\]\.?)+}\[(?:\$\w+\[\d+\]\.?)+\];\s?}))~msi',
            'id'   => 'dictionaryVars',
        ],
        [
            'full' => '~(?:(?<concatVar>\$\w+)\s?=\s?""\s?;((?:\s?(?P=concatVar)\s?\.=\s?"[\w]+"\s?;\s?)+))?(\$\w+)\s?=\s?(?:(?P=concatVar)|"(?<strVal>[\w]+)")\s?;\s?if\s?\(\s?!function_exists\s?\(\s?"(\w+)"\)\){\s?function\s\5\(\s?(\$\w+)\){\s?(?:\$\w+\s?=\s?""\s?;)?\s?(\$\w+)\s?=\s?strlen\s?\(\s?\6\s?\)\s?\/\s?2\s?;\s?for\s?\(\s?(\$\w+)\s?=0\s?;\s?\8\s?<\s?\7\s?;\s?\8\+\+\s?\)\s?{\s?\$\w+\s?\.=\s?chr\s?\(\s?base_convert\s?\(\s?substr\s?\(\s?\6\s?,\s?\8\s?\*\s?2\s?,\s?2\s?\)\s?,\s?16\s?,\s?10\s?\)\s?\)\s?;\s?}\s?return\s?\$\w+;\s?}\s?}\s?\$\w+\s?=\s?create_function\s?\(\s?null\s?,\s?\5\(\s?\3\)\)\s?;\s?\3\(\)\s?;~msi',
            'id'   => 'concatVarFunc',
        ],
        [
            'full' => '~function\s?(\w+)\(\){(((\$\w+)\.?="\w+";)+)return\seval\(\4\(\w+\(\)\)\);}function\s(\w+)\((\$\w+)\){((?:(\$\w+)\.?="\w+";)+)return\s\8\(\6\);}function\s?(\w+)\(\){((\$\w+)\.?="([\w\/+=]+)";)return\s(\w+)\(\11\);}function\s\13\((\$\w+)\){(\$\w+)=(\w+)\((\w+)\((\w+)\(\14\)\)\);return\s\15;}function\s\17\(\14\){(((\$\w+)\.?="\w+";)+)return\s\21\(\14\);}\1\(\);function\s\16\(\14\){(((\$\w+)\.?="\w+";)+)return\s\24\(\14\);}~msi',
            'id'   => 'concatVarFuncFunc',
        ],
        [
            'full' => '~(?:(?:\s?\$\w+\s?=\s?strrev\([\'"][^\'"]+[\'"]\);\s?)|(?:\s?\$\w+\s?=\s?strrev\([\'"][^\'"]+[\'"]\);\s?)|(?:\s?eval\((?:\$\w+)?\([\'"][^\'"]+[\'"]\)\);\s?)|(?:\s?eval\(\$\w+\(\$\w+\([\'"][^\'"]+[\'"]\)\)\);\s?)){3,4}~msi',
            'id'   => 'evalVarDoubled',
        ],
        [
            'full' => '~(\$\w+)\s?=\s?(\w+)\("([\w+\/=]+)"\);\s?echo\s?\1;~msi',
            'id'   => 'varFuncsEcho',
        ],
        [
            'full' => '~(\$\w+)="";\s*(?:do\s?{[^}]+}\s?while\s?\(\d+>\d+\);\s*\1=\1\."[^"]+";)?.*?\s?.*?(\$\w+)=(\'[^\']+\'\s?\.\s?(?:\'[^\']+\'\s?\.?\s?)+);\s?.*?(?:\s(\$\w+)=((?:\4\[?{?\d+\]?}?\.?)+);\s?|\$\w{1,50}->\w{1,50}\(\);)?\s*(?:function\s\w+\(\){(?:.*?);\s}\s?\1=\w+\(\1,"\w+"\);\s?|\$\w+=array\((?:\'\w+\',?)+\);\s?|\1=\w+\(\1,\sjoin\(\'\',\s\$\w+\)\s?\);\s?|\s?\$\w+\+=\d+;\s?|\1=\w+\(\1,\w+\(\)\);\s?|function\s\w+\(\){\s?|do{\s?if\s?\(\d+<\d+\)\s?{\s?)*.*?(?:\$\w+\s?=\s?\$\w+\([\'"]{2},\s?\$\w+\(\$\w+(?:\(\1\),\s?(?:\$\w+\[\'\w+\'\]\)\s?)?|\)\s?)\);\s?\$\w+\(\);)(?:\s?function\s\w+\((?:\$\w+,\s?\$\w+)?\)(?:.*?);\s}|\s?class\s\w+\s?{(?:.*?);(?:\s}){1,2})+~msi',
            'fast' => '~function\s+\w+\(\)\{\s*global\s*(\$\w+);\s*return\s*(\1[\[{]\d+[\]}]\.?){15};\s*}~msi',
            'id'   => 'varFuncsMany',
        ],
        [
            'full' => '~((\$(?:GLOBALS|{"[\\\\\w]+"})\[[\'"]\w+["\']\])\s?=\s?[\'"]+([\\\\\w]+)["\'];)\s?(?:(\$GLOBALS\[?(\s?(?:\2|\$GLOBALS\[\'\w+\'\])\[\d+\]\.?)+\])\s?=\s?\g<5>+;\s?)+(?:\g<4>\s?=\s[\$_\w]+;\s)+(?:@\g<4>\(\g<5>+\s?,\s?\w+\s?\);\s?)+@\g<4>\(\d+\);\s{0,50}(?:if\s?\(!\g<4>\s?\(\g<5>+\)\)\s{\s{0,50}\g<4>\(\g<5>+,\s\g<5>*\d*\);\s{0,50}}?\s{0,50})*(?:\$\w+\s?=\s?\w+;\s?)*\g<4>\s?=\s\g<5>+;\s?global\s?\$\w+;\s?function\s\w+\(\$\w+,\s\$\w+\)\s{\s?\$\w+\s?=\s?["\']{2};\s?for\s?\(\$\w+\s?=\d+;\s?\$\w+\s?<\s?\g<4>\(\$\w+\)\s?;\s?\)\s?{\s?for\s?\(\s?\$\w+=\d+;\s?\$\w+\s?<\s?\g<4>\(\$\w+\)\s?&&\s?\$\w+\s?<\g<4>\(\$\w+\);\s?\$\w+\+{2},\s?\$\w+\+{2}\)\s?{\s?\$\w+\s?\.=\s?\g<4>\(\g<4>\(\$\w+\[\$\w+\]\)\s?\^\s?\g<4>\(\$\w+\[\$\w+\]\)\);\s?}\s?}\s?return\s\$\w+;\s?}\s?function\s?\w+\(\$\w+,\s?\$\w+\)\s?{\s?global\s?\$\w+;\s?return\s\g<4>\(\g<4>\(\$\w+,\s?\$\w+\),\s?\$\w+\)\s?;\s?}\s?foreach\s?\(\g<4>\sas\s\$\w+=>\$\w+\)\s?{\s?\$\w+\s?=\s?\$\w+;\s?\$\w+\s?=\s?\$\w+;\s?}\s?if\s?\(!\$\w+\)\s?{\s?foreach\s?\(\g<4>\sas\s\$\w+\s?=>\s?\$\w+\)\s?{\s?\$\w+\s?=\s?\$\w+;\s?\$\w+\s?=\s?\$\w+;\s?}\s?}\s?\$\w+\s?=\s?@\g<4>\(\g<4>\(@?\g<4>\(\$\w+\),\s?\$\w+\)\);\s?if\s?\(isset\(\$\w+\[\g<5>+\]\)\s?&&\s?\$\w+==\$\w+\[\g<5>+\]\)\s?{\s?if\s?\(\$\w+\[\g<5>\]\s?==\s?\g<5>\)\s?{\s?\$\w+\s?=\s?array\(\s?\g<5>+\s?=>\s?@\g<4>\(\),\s?\g<5>+\s?=>\s?\g<5>+,\s?\);\s?echo\s?@\g<4>\(\$\w+\);\s?}\s?elseif\s?\(\$\w+\[\g<5>\]\s?==\s?\g<5>\)\s?{\s?eval\(\$\w+\[\g<5>\]\);\s?}\s?(?:exit\(\);)?\s?}\s?}?~msi',
            'id'   => 'globalArrayEval',
        ],
        [
            'full' => '~<\?php\s{0,30}(\$\w+)\s{0,30}=\s{0,30}"(.+?)";\s{0,30}((?:\$\w+\s{0,30}=\s{0,30}(?:\1\[\'\w\s{0,30}\'\s{0,30}\+\s{0,30}\d+\s{0,30}\+\s{0,30}\'\s{0,30}\w\'\]\s{0,30}\.?\s{0,30})+;\s{0,30})+)(\$\w+)\s{0,30}=\s{0,30}"(\d+)";\s{0,30}(?:\$\w+\s{0,30}=\s{0,30}\$\w+\(\s{0,30}\$\w+\s{0,30},\s{0,30}\$\w+\(\s{0,30}"\s{0,30}"\)\s{0,30},\s{0,30}"[\w\+]+"\)\s{0,30};\s{0,30})+(?:\$\w+\s{0,30}=\s{0,30}\$\w+\(\s{0,30}\$\w+\(\s{0,30}\$\w+\)\s{0,30},\s{0,30}\$\w+\(\s{0,30}?\$\w+\)\s{0,30}\)\s{0,30};\s{0,30})+\$\w+\((?:\s{0,30}\$\w+\(\s{0,30}"\s{0,20}\w\s{0,20}"\)\s{0,30}\.?\s{0,30})+"\(\\\\"\w+\\\\"\s{0,30},\s{0,30}"\s{0,30}\.\s{0,30}\$\w+\(\s{0,30}\$\w+\(\s{0,30}"\d+"\s{0,30},\s{0,30}\$\w+\(\s{0,30}"\s{0,20}"\)\s{0,30},\s{0,30}"[\d\w=]+"\)\s{0,30}\)\s{0,30}\.\s{0,30}"\s{0,30}\)\s{0,30};"\)\s{0,30};\s{0,30}\$\w+\s{0,30}=\s{0,30}\$\w+\(\w+\)\s{0,30};\s{0,30}\$\w+\(\s{0,30}(?:\$\w+\(\s{0,30}"\s{0,30}[?>]\s{0,30}"\)\s{0,30}\.\s{0,30})+(\$\w+)\(\s{0,30}(\$\w+)\(\s{0,30}(\$\w+),\s{0,30}(\$\w+)\(\s{0,30}"\s{0,30}"\)\s{0,30},\s{0,30}(\$\w+)\(\s{0,30}"([()\w@|*#\[\]&\/\+=]+)"\s{0,30},\s{0,30}(\$\w+),\s{0,30}(\$\w+)\)\s{0,30}\)\)\s{0,30}\)\s{0,30};\s{0,30}\$\w+\s?=\s?\d+\s?;\s{0,30}\?>~msi',
            'id'   => 'tinkleShell',
        ],
        [
            'full' => '~(?:\$\w+="\w+";)+(\$\w+)="([\w_)(;\/\.*]+)";\$\w+="\w+";function\s(\w+)\((?:\$\w+,?){3}\){return\s?""(?:\.\$\w+\.""){3};}(?:\$\w+=(?:(?:"\w+")|(?:\3\((?:\1\[\d+\],?\.?)+\))|(?:(?:\3\()+(?:\$\w+\,?(?:\)\,)?)+)(?:(?:(?:\3\()+)*(?:(?:\$\w+,?)+)*(?:\),)*(?:\)*))+);)+\$\w+=\3\((?:\1\[\d+\]\.?)+(?:,"")+\);(?:\$\w+=\3\(\3\(\$\w+,\$\w+,\$\w+\),\3\((?:\$\w+,?)+\),\3\(\$\w+,\3\(\$\w+,\$\w+,""\),\$\w+\)\)\."\'(?<str>[\w\/\+]+)\'")\.\3\((?:\1\[\d+\],?\.?)+\);\$\w+\(\$\w+,array\("","}"\.\$\w+\."\/+"\)\);~msi',
            'id'   => 'wsoFunc',
        ],
        [
            'full' => '~\$\w+\[\'\w+\'\]\s?=\s?"[\w;\/\.*)(]+";\s?\$\w+\[\'\w+\'\]\s?=\s?(?:\$\w+\[\'\w+\'\]\[\d+\]\.?)+;\s?\$\w+\s?=\s?(?:"[\w()]*"\.chr\([\d-]+\)\.?)+"\(";\s?\$\w+\s?=\s?"[)\\\\\w;]+";\s?\$\w+\s?=\s?\$\w+\."\'(?<str>[\w\/\+]+)\'"\.\$\w+;\s?\$\w+\[\'\w+\'\]\((?:\$\w+\[\'\w+\'\]\[\d+\]\.?)+,\s?\$\w+\s?,"\d+"\);~msi',
            'id'   => 'wsoFunc',
        ],
        [
            'full' => '~function\s(\w+)\((\$\w+)\)\s{0,50}{\s{0,50}\2\s?=\s?gzinflate\(base64_decode\(\2\)\);\s{0,50}for\s?\(\s?(\$\w+)\s?=\s?\d+\s?;\s?\3\s?<\s?strlen\(\2\);\s?\3\+\+\)\s{0,50}{\s{0,50}\2\[\3\]\s?=\s?chr\(ord\(\2\[\3\]\)\s?-\s?(\d+)\);\s{0,50}}\s{0,50}return\s?\2;\s{0,50}}\s{0,50}eval\(\1\([\'"]([^\'"]+)[\'"]\)\);~msi',
            'id'   => 'evalWanFunc',
        ],
        [
            'full' => '~(?:(?:if\s?\(file_exists\("\w+"\)\)\s?{\s?}\s?else\s?{\s?)?\$\w+\s?=\s?fopen\([\'"][^\'"]+\.php[\'"],\s?[\'"]w[\'"]\);)?\s?(\$\w+)\s?=\s?(?:base64_decode\()?[\'"]([^\'"]+)[\'"]\)?;\s?(?:\$\w{1,50}\s?=\s?fopen\([\'"][^\'"]+[\'"],\s?[\'"]\w[\'"]\);\s?)?(?:echo\s?)?fwrite\(\$\w{1,50}\s?,(?:base64_decode\()?\$\w{1,50}\)?\);\s?fclose\(\$\w{1,50}\);\s?}?~msi',
            'id'   => 'funcFile',
        ],
        [
            'full' => '~(\$(?:GLOBALS\[\')?\w+(?:\'\])?\s{0,100}=\s{0,100}array\(\s{0,100}(?:\s{0,100}\'[^\']+\'\s{0,100}=>\s{0,100}\'?[^\']+\'?,\s{0,100})+\s{0,100}\);\s{0,100}((?:\$\w+=(?:[\'"][^\'"]*[\'"]\.?)+;)+)?(?:if\(!\$?\w+\((?:\'\w*\'\.?|\$\w+)+\)\){function\s{0,100}\w+\(\$\w+\){.*?else{function\s{0,100}\w+\(\$\w+\){.*?return\s{0,100}\$\w+\(\$\w+\);\s?}}){2})\$\w+=(?:\'\w*\'\.?)+;\s?(\$\w+)\s{0,100}=\s{0,100}@?\$\w+\(\'\$\w+\',(?:\$\w+\.\'\(.\.\$\w+\.(?:\'[\w(\$);]*\'\.?)+\)|(?:\'[^\']+\'\.?)+\));.*?\3\([\'"]([^"\']+)[\'"]\);~msi',
            'id'   => 'gulf',
        ],
        [
            'full' => '~(\$\w+)=(\w+);\$\w+="(.+?)";(?:\$\w+=\$\w+;)?(\$\w+)=strlen\(\$\w+\);(\$\w+)=[\'"]{2};for\((\$\w+)=\d+;\6<\4;\6\+\+\)\s?\5\s?\.=\s?chr\(ord\(\$\w+\[\6\]\)\s?\^\s?\1\);eval\("\?>"\.\5\."<\?"\);~msi',
            'id'   => 'evalConcatAsciiChars',
        ],
        [
            'full' => '~(?:\$\w+="[\w=]+";\s?)+(\$\w+)\s?=\s?str_replace\((?:"\w*",?)+\);\s?(\$\w+)\s?=\s?\1\((?:"\w*",?\s?)+\);\s?(\$\w+)\s?=\s?\1\((?:"\w*",?)+\);\s?(\$\w+)\s?=\s?\3\("",\s?(\2\(\2\((\1\("([#;*,\.]+)",\s?"",\s?((?:\$\w+\.?)+)\))\)\))\);\s?\4\(\);~msi',
            'id'   => 'evalPost',
        ],
        [
            'full' => '~\$\w+\s?=\s?"e\/\*\.\/";\spreg_replace\(strrev\(\$\w+\),"([\\\\\w]+)\'([\w\/\+=]+)\'([\\\\\w]+)","\."\);~msi',
            'id'   => 'evalPregStr',
        ],
        [
            'full' => '~\$GLOBALS\[\'\w+\'\]=array\(\'preg_re\'\s?\.\'place\'\);\s?function\s\w+\(\$\w+\)\s?{\$\w+=array\("\/\.\*\/e","([\\\\\w]+)\'([\w\/\+]+)\'([\\\\\w]+)","{2}\);\s?return\s\$\w+\[\$\w+\];}\s?\$GLOBALS\[\'\w+\'\]\[\d+\]\(\w+\(\d+\),\w+\(\d+\),\w+\(\d+\)\);~msi',
            'id'   => 'evalPregStr',
        ],
        [
            'full' => '~class\s?\w+{\s?function\s?__destruct\(\){\s?\$this->\w+\(\'([\w&]+)\'\^"([\\\\\w]+)",array\(\(\'([#\w]+)\'\^"([\\\\\w]+)"\)\."\(base64_decode\(\'([\w\+\/=]+)\'\)\);"\)\);\s?}\s?function\s?\w+\(\$\w+,\$\w+\){\s?@array_map\(\$\w+,\$\w+\);\s?}\s?}\s?\$\w+\s?=\s?new\s?\w+\(\);~msi',
            'id'   => 'classDestructFunc',
        ],
        [
            'full' => '~\$\w+="([\\\\\w]+)";\s?\$\w+=\$\w+\(\'([\w\+\/=]+)\'\);\s?\$\w+\s?=\s?"([\\\\\w]+)";\s?\$\w+\s?=\s?\$\w+\([\'"]{2}.\s?eval\(\$\w+\)\);\s?\$\w+\([\'"]{2}\);~msi',
            'id'   => 'createFuncEval',
        ],
        [
            'full' => '~((\$\w+)=((?:base64_decode\(|urldecode\()?"[\w=\-%]+"(?:\)?));\s*(?:\$\w+=\'\d+\';\s*)*\s*((?:\$\w+=(?:\2{\d+}\.?)+;)+)+)(?:header[^\)]+\);)?(?:\$\w+=)?(\$\{"[GLOBALSx0-9a-f\\\\]+"})(.+?((.+?\5).+?)+)"[^"]+"\]\(\);~msi',
            'id'   => 'dictionaryCreateFuncs',
        ],
        [
            'full' => '~error_reporting\(\d\);header\([^\)]+\);\$\w+\s*=\s*\d+;(\$\w+)="([^"]+)";(\1=str_replace\("([^"]+)","",\1\);(\$\w+)=base64_decode\(\1\));((?:.{1,150}?\5\{\d+\})+\)\s*or\s*die\(\'[^\']+\'\);fwrite\(\$\w+,\s*\$\w+\);fclose\(\$\w+\);\})~msi',
            'id'   => 'dictionaryStrReplace',
        ],
        [
            'full' => '~(\$\w+)\s?=\s?"([\w\s=]+)";\s?(\$\w+)\s?=\s?array\(((?:\d+,?\s?)+)\);\s?(\$\w+)\s?=\s?array\(((?:"[\w\d\s\/\.]+",?\s?)+)\);\s?(\$\w+)\s?=\s?\'\';\s?(?:\$\w+\s=(?:\s?\5\[\d+\]\s?\.?)+;\s?)+(\$\w+)\s?=\s?\$\w+\("\\\\r\\\\n",\s?\1\);\s?for\((\$\w+)=0;\9\s?<\s?sizeof\(\8\);\9\+\+\){\s?\7\s\.=\s?\$\w+\(\8\[\9\]\);\s?}\s?\1\s?=\s?\7;\s?(\$\w+)\s?=\s?\3;\s?(\$\w+)\s?=\s?"";\s?for\((\$\w+)=0;\s?\12<sizeof\(\10\);\s?\12\+=2\){\s?if\(\12\s?%\s?4\){\s?\11\.=\s?substr\(\1,\10\[\12\],\10\[\12\+1\]\);\s?}else{\s?\11\.=strrev\(substr\(\1,\10\[\12\],\10\[\12\+1\]\)\);\s?}\s?};\s?\1\s?=\s?\$\w+\(\11\);\s(\$\w+)\s?=\s?array\(\);\s?(\$\w+)\s?=\s?(?:\5\[\d+\]\s?\.?\s?;?)+;\s?(\$\w+)\s?=\s?(?:\5\[\d+\]\s?\.?\s?)+;\s?(\$\w+)\s?=\s?\'\';\s?for\((\$\w+)=0;\s?\17<strlen\(\1\);\s?\17\+=32\){\s?\13\[\]\s?=\s?substr\(\1,\s?\17,\s?32\);\s?}\s?(?:\$\w+\s?=\s?(?:\5\[\d+\]\s?\.?\s?)+;\s)+\$\w+\s?=\s?\'\';\s?\$\w+\s?=\s?\(\$\w+\(\$\w+\(\$\w+\)\)\)\s?%\s?sizeof\(\$\w+\);\s?\$\w+\s?=\s?\$\w+\[\$\w+\];\s?(\$\w+)\s?=\s?(?:\5\[\d+\]\s?\.?\s?)+;(\s?\18\s?=\s?\$_POST\[\18\];\s?(\14\s?=\s?\15\(\$_COOKIE\[\14\]\);)\s?\$\w+\s?=\s?\5\[\d+\]\s?\.\s?\5\[\d+\];\s?(eval\(\$\w+\(\18\)\);)\s?if\(!\16\){\s?((?:\$\w+\s?=\s?(?:\5\[\d+\]\s?\.?\s?)+;\s)+)(\$\w+\(\$\w+\);\s?echo\(\$\w+\);)\s?})~msi',
            'fast' => '~(\s?(\$\w+)\s?=\s?\$_POST\[\2\];\s?((\$\w+)\s?=\s?\$\w+\(\$_COOKIE\[\4\]\);)\s?(\$\w+)\s?=\s?(\$\w+)\[\d+\]\s?\.\s?\6\[\d+\];\s?(eval\(\$\w+\(\2\)\);)\s?if\(!\5\){\s?((?:\$\w+\s?=\s?(?:\6\[\d+\]\s?\.?\s?)+;\s)+)(\$\w+\(\$\w+\);\s?echo\(\$\w+\);)\s?})~msi',
            'id'   => 'evalPostDictionary',
        ],
        [
            'full' => '~(\$\w)\s?=\s?str_rot13\("([^"]+)"\);preg_replace\("//e","\1",""\);~msi',
            'id'   => 'strrotPregReplaceEval',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*(?:\$\w+\.)?(?|[^\']+\'([^\']+)\'|[^"]+"([^"]+)");\s*(?:if\s*\(\!file_exists\(\1\)+\{\s*)?\s*(\$\w+)\s*=\s*(?|\'([^\']+)\'|"([^"]+)");\s*(?|@chmod\(\1,\s*\d+\);\s*|if\s*\(\!file_exists\(\1\)+\{\s*)@file_put_contents\(\1,\s*(?:base64_decode\()+\3\)+;\s*(?:@?chmod\(\1,\s*\d+\);)?\s*}\s*(?:(\$\w+)\s*=\s*\$\w+\."[^"]+";\s*(\$\w+)\s*=\s*@?file_get_contents\(\$\w+\);\s*\$\w+\s*=\s*base64_decode\("[^"]+"\);\s*\$\w+\s*=\s*preg_match\("[^"]+",\6\)\?true:false;\s*if\s*\(!\$\w+\){\s*\$\w+\s*=\s*"[^"]+";\s*preg_match_all\("/"\.base64_decode\(\$\w+\)\."/i",\$\w+,\$\w+\);\s*(\$\w+)\s*=\s*"[^"]+"\s*\.\s*substr\(chunk_split\(bin2hex\(\$\w+\),\s*2,\s*"\\\\x"\),\s*0,\s*-2\);\s*(\$\w+)\s*=\s*str_replace\(\$\w+\[\d\]\[\d\],\$\w+\[\d\]\[\d\]\.PHP_EOL.PHP_EOL.")?\s*@?include\s*(?|\\\\"\7\\\\";",\$\w+\);\s*@?file_put_contents\(\5,\8\);\s*\}|\1;)~msi',
            'id'   => 'dropInclude',
        ],
        [
            'full' => '~(?(DEFINE)(?\'c\'(?:/\*[^/]*/?\*/)*))(?&c)@?(eval|echo|(\$\w+)\s*=\s*create_function)(?:\/\*+\/)?\s*(?&c)\((?&c)(\'\',)?\s*([\'"?>.\s]+)?\s*\(?\s*@?\s*((?&c)base64_decode(?&c)\s*\((?&c)|(?&c)pack(?&c)\s*\(\'H\*\',|(?&c)convert_uudecode(?&c)\s*\(|(?&c)htmlspecialchars_decode(?&c)\s*\(|(?&c)stripslashes(?&c)\s*\(|(?&c)gzinflate(?&c)\s*\(|(?&c)strrev(?&c)\s*\(|(?&c)str_rot13(?&c)\s*\(|(?&c)gzuncompress(?&c)\s*\(|(?&c)urldecode(?&c)\s*\(|(?&c)rawurldecode(?&c)\s*\(|(?&c)eval(?&c)\s*\()+.*?[^\'")]+(?&c)(((?&c)\s*(?&c)\.?(?&c)[\'"]((?&c)[^\'";]+(?&c)[\'"](?&c)*\s*)+(?&c))?(?&c)\s*[\'"\);]+(?&c))+(?&c)(\s*\2\(\);(?&c))?~msi',
            'id'   => 'evalComments',
        ],
        [
            'full' => '~\@?error_reporting\(0\);\@?set_time_limit\(0\);(?:\s*rename\([^;]+;)?\s*(\$\w+)="([^"]+)";\s*\1=\@?urldecode\(\1\);\1=\@?strrev\(\1\);\@?eval\(\1\);~msi',
            'id'   => 'strrevUrldecodeEval',
        ],
        [
            'full' => '~(\$\w+\s*=\s*"\w+";\s*\@?error_reporting\(E_ERROR\);\s*\@?ini_set\(\'display_errors\',\'Off\'\);\s*\@?ini_set\(\'max_execution_time\',\d+\);\s*header\("[^"]+"\);\s*)?(\$\w+)\s*=\s*"([^"]+)";\s*(\$\w+)\s*=\s*pack\("H\*",str_rot13\(\2\)+;\s*(?:eval\(\4\);|(\$\w+)=\$\w+\(\'\',\4\);\s*\5\(\);)~msi',
            'id'   => 'evalPackStrrot',
        ],
        [
            'full' => '~\$\w+\s*=\s*\d+;\s*function\s*(\w+)\(\$\w+,\s*\$\w+\)\{\$\w+\s*=\s*\'\';\s*for[^{]+\{([^}]+\}){2}\s*\$\w{1,40}\s*=\s*((\'[^\']+\'\s*\.?\s*)+);\s*\$\w+\s*=\s*Array\(((\'\w\'=>\'\w\',?\s*)+)\);\s*eval(?:/\*[^/]\*/)*\(\1\(\$\w+,\s*\$\w+\)+;~msi',
            'id'   => 'urlDecodeTable',
        ],
        [
            'full' => '~((?:\$\w+=[\'"][^\'"]+[\'"];\s?)+)((?:\$\w+=(?:\$\w+\.?)+;)+)\s{0,50}(eval\((?:\$\w+\()+\'[^\']+\'\)+;)~msi',
            'id'   => 'evalVarChar',
        ],
        [
            'full' => '~(\$\w+\s*=\s*(base64_decode\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|htmlspecialchars_decode\s*\(|pack\(\'H\*\',\s*)+(?|"([^"]+)"|\'([^\']+)\')\);)\s*eval\("?(\$\w+)"?\);~msi',
            'id'   => 'evalVarFunc',
        ],
        [
            'full' => '~((?:\$\w+\s*=\s*("[\w=+/\\\\ ".]+");\s*)+)(\$\w+\s*=\s*((?:\$\w+\()+\$\w+\)+);\s*)?((?:eval\((?(3)\$\w+|(?:\$\w+\(+)+\$\w+)\)+;\s*)+)~msi',
            'id'   => 'evalVarsFuncs',
        ],
        [
            'full' => '~(?:/\*[^=\$\{\}/]{10,499}[^\*\$\(;\}\{=]{1,99}\*/\s*)?(\$[^\w=(,${)}]{0,50})=\'(\w{0,50})\';((?:\$[^\w=(,${)}]{0,50}=(?:\1{\d+}\.?){0,50};){1,20})(\$[^=]{0,50}=\$[^\w=(,${)}]{1,50}\(\$[^\w=(,${)}]{1,50}\(\'\\\\{2}\',\'/\',__FILE__\)\);(?:\$[^\w=(,${)}]{0,50}=\$[^\w=(,${)}]{0,50}\(\$[^\w=(,${)}]{0,50}\);){2}\$[^\w=(,${)}]{0,50}=\$[^\w=(,${)}]{0,50}\(\'\',\$[^\w=(,${)}]{0,50}\)\.\$[^\(]{0,50}\(\$[^\w=(,${)}]{0,50},\d+,\$[^\w=(,${)}]{0,50}\(\$[^\w=(,${)}]{0,50},\'@ev\'\)\);\$[^\w=(,${)}]{0,50}=\$[^\(]{0,50}\(\$[^\w=(,${)}]{0,50}\);\$[^\w=(,${)}]{0,50}=\$[^\w=(,${)}=]{0,50}=\$[^\w=(,${)}]{0,50}=NULL;@eval\(\$[^\w=(,${)}]{0,50}\(\$[^\w=(,${)}(]{0,50}\(\$[^\w=(,${)}]{0,50},\'\',\$[^\w=(,${)}]{0,50}\(\'([^\']{0,500})\',\'([^\']{0,500})\',\'([^\']{0,500})\'\){4};)unset\((?:\$[^,]{0,50},?){0,20};return;\?>.+~msi',
            'id'   => 'evalFileContent',
        ],
        [
            'full' => '~echo\s{0,50}"(\\\\\${\\\\x\d{2}(?:[^"]+(?:\\\\")*)*[^"]+)";~msi',
            'id'   => 'echoEscapedStr',
        ],
        [
            'full' => '~file_put_contents\(\$\w+\[[\'"]\w+[\'"]\]\.[\'"][/\w]+\.php[\'"],(base64_decode\([\'"]([\w=]+)[\'"]\))\)~msi',
            'id'   => 'filePutDecodedContents',
        ],
        [
            'full' => '~eval\(implode\(array_map\([\'"](\w+)[\'"],str_split\([\'"]([^\'"]+)[\'"]\)\)\)\);~msi',
            'id'   => 'evalImplodedArrStr',
        ],
        [
            'full' => '~(\$\w+)\s?=\s?\'(.*?NULL\);)\';\s*(\$\w+)\s?=\s?[\'"]([\w\\\\]+)[\'"];\s?\3\([\'"]/\(\.\*\)/e[\'"],\s?[\'"]([\w\\\\]+)[\'"],\s?NULL\);~msi',
            'id'   => 'pregReplaceCodeContent',
        ],
        [
            'full' => '~((?:\$\w+\s*\.?=\s*"[^"]*";\s*)+)(\$\w+)\s*=\s*str_replace\(\s*"([^"]+)",\s*"",\s*\$\w+\s*\);\s*(\$\w+)\s*=\s*str_replace\(\s*"([^"]+)",\s*"",\s*"([^"]+)"\s*\);\s*(\$\w+)\s*=\s*\4\(\s*\2\s*\);\s*\7\s*=\s*"[^"]+\7";\s*eval\(\s*\7\s*\);~msi',
            'id'   => 'concatVarsReplaceEval',
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?file_get_contents\(__FILE__\);\s?\1\s?=\s?base64_decode\(substr\(\1,\s?([+-]\d+)\)\);\s*\1\s?=\s?gzuncompress\(\1\);\s*eval\(\1\);\s*die\(\);\?>\s*([^"\']+)~msi',
            'fast' => '~\$\w{1,50}\s?=\s?file_get_contents\(__FILE__\);\s?\$\w{1,50}\s?=\s?base64_decode\(substr\(\$\w{1,50},\s?([+-]\d+)\)\);\s*\$\w{1,50}\s?=\s?gzuncompress\(\$\w{1,50}\);\s*eval\(\$\w{1,50}\);\s*die\(\);\?>\s*([^"\']+)~msi',
            'id' => 'decodeFileContent',
        ],
        [
            'full' => '~((\$\w+\s*=\s*\(?(base64_decode\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|htmlspecialchars_decode\s*\()*((?:"([^"]+)";\s*)|(?:\$\w+)\)*;\s*))+)(eval\("?(\$\w+)"?\);)~msi',
            'id'   => 'evalVarFunc2',
        ],
        [
            'full' => '~((\$\w+)\s*=\s*"([^"]+)";)\s*((\$\w+)\s*=\s*array\(((\s*\d+,?)+)\);)\s*((\$\w+)\s*=\s*array\(((\s*"[^"]+",?)+)\);)\s*(\$\w+)\s*=\s*\'\';(\s*\$\w+\s*=\s*(?:\9\[\d+\]\s*\.?\s*)+;)+(.+?(\s*\$\w+\s*=\s*\w+\((?:\9\[\d+\]\s*\.?\s*)+)\);\s*eval\(\$\w+\);\s*\})~msi',
            'fast' => '~((\s*(\$\w+)\s*=\s*\w+\((\$\w+)\[\d+\]\s*\.\s*(?:\4\[\d+\]\s*\.?\s*)+)\);\s*eval\(\3\);\s*\})~msi',
            'id'   => 'evalArrays',
        ],
        [
            'full' => '~\$\w+\s?=\s?preg_replace\([\'"]/([^\'"/]+)/\w{0,2}[\'"],[\'"]([^\'"]+)[\'"],[\'"]{2}\);~msi',
            'id'   => 'pregReplaceVar',
        ],
        [
            'full' => '~function\s(\w+)\((\$\w+),\s?(\$\w+)\){\s?(\$\w+)=[\'"]{2};\s?for\(\$\w+=0;\$\w+<strlen\(\2\);\)\s?for\(\$\w+=0;\$\w+<strlen\(\3\);\$\w+\+\+,\s?\$\w+\+\+\)\s?\4\s?\.=\s?\2{\$\w+}\s?\^\s?\3{\$\w+};\s?return\s?\4;\s?};eval\(\1\(base64_decode\([\'"]([^\'"]+)[\'"]\),[\'"]([^\'"]+)[\'"]\)\);~msi',
            'id'   => 'evalFuncTwoArgs',
        ],
        [
            'full' => '~function\s(\w+)\(\$\w+\)\s?{\s?\$\w+\s?=\s?[\'"]{2};\s?unset\(\$\w+\);\s?\$\w+\s?=\s?[\'"]([^\'"]+)[\'"];\s?\$\w+\s?=\s?preg_replace\("/([^"]+)/",\s?[\'"]{2},\s?\$\w+\);\s?\$\w+\s?=\s?(?:(?:[\'"]\w+[\'"]|\$\w+)\.?)+;\s?\$\w+\s?=\s?\$\w+\([\'"]\$\w+[\'"],\s?\$\w+\);\s?@?\$\w+\(\$\w+\);\s?}\s?function\s?(\w+)\(\$\w+\)\s?{\s?\$\w+\s?=\s?[\'"](.*?)[\'"];\s?\$\w+\s?=\s?preg_replace\("/([^\'"]+)/",\s?[\'"]{2},\s?\$\w+\);\s?return\s?\$\w+\(\$\w+\);\s?}\s?\1\(\4\(\s?join\([\'"]([^\'"]+)[\'"],\s?array\(((?:[\'"][^\'"]+[\'"][,\s]*)+)\)+;~msi',
            'id'   => 'evalPregReplaceFuncs',
        ],
        [
            'full' => '~error_reporting\(0\);((?:\$\w+=\'[^;]+;)+)error_reporting\(0\);((?:\$\w+=\$\w+\(\$\w+\(\'([^\']+)\'\)\);)+\$\w+=(?:\$\w+\()+\'([^\']+)\'\)+\.(?:\$\w+\()+\'([^\']+)\'\)+;\$\w+=(?:\$\w+\()+\'([^\']+)\'\)+;\$\w+=(?:\$\w+\()+"\\\\n",\s*\'\',\s*\'([^\']+)\'\)+;(?:[^}]+\})+}\s*echo\s*(?:\$\w+\()+\'([^\']+)\'\)+);exit;~msi',
            'id'   => 'urlMd5Passwd',
        ],
        [
            'full' => '~((?:\$\w+\s?=\s?\'(?:[^\']+)\';\s?)+)((?:\$\w+\s?=\s?(?:\$\w+(?:\[[\'"]?\d+[\'"]?\])?\s?\.?\s?)+;)+\$\w+\s?=\s?\$\w+\s?\(\$\w+,(?:\$\w+(?:\[[\'"]?\d+[\'"]?\])?\s?\.?\s?)+\);\s*\$\w+\(\$\w+,(?:\$\w+(?:\[[\'"]?\d+[\'"]?\])?\s?[.,]?\s?)+\);)~msi',
            'fast' => '~((?:\$\w+\s?=\s?(?:\$\w+(?:\[[\'"]?\d+[\'"]?\])?\s?\.?\s?)+;)+\$\w+\s?=\s?\$\w+\s?\(\$\w+,(?:\$\w+(?:\[[\'"]?\d+[\'"]?\])?\s?\.?\s?)+\);\s*\$\w+\(\$\w+,(?:\$\w+(?:\[[\'"]?\d+[\'"]?\])?\s?[.,]?\s?)+\);)~msi',
            'id'   => 'ManyDictionaryVars',
        ],
        [
            'full' => '~function\s(\w+)\(\$\w+\)\s?{\s?\$\w+\s?=\s?(?:[\'"][\\\\\w]+[\'"]\(\d+\s?[-+]\s?\d+\)\s?\.?\s?)+;\s?(?:\$\w+\s?=\s?\$\w+\([\'"](?:edoced_46esab|etalfnizg|ecalper_rts)[\'"]\);\s?)+\$\w+\s?=\s?\$\w+\(array\(((?:\s?"[^"]+",?)+)\),\s?[\'"]{2},\s?\$\w+\);\s?return\s?(?:\$\w+\(){2}\$\w+\)\);\s?}\s?(\$\w+\s?=\s?[\'"]\w+[\'"];)?\s?ob_start\(\);\s?\?>(.*?)<\?php\s?\$\w+\s?=\s?ob_get_clean\(\);\s?eval\(\1\(\$\w+\)\);\s?\?>~msi',
            'id'   => 'evalBuffer',
        ],
        [
            'full' => '~((?:\$\w+\s?=\s?[\'"]\w*[\'"];\s?){0,50}(\$\w+)\s?=\s?[\'"]([^\'"]+)[\'"];(?:\$\w+\s?\.?=\s?(?:\$\w+{\d+}\.?)+;)+)\s?(eval\((\$\w+)\([\'"]([^\'"]+)[\'"]\)\);)~msi',
            'id' => 'evalDictionaryVars',
        ],
        [
            'full' => '~\$\w+\s?=\s?[\'"]([^\'"]+)[\'"];(?:\$\w+\s?=\s?base64_decode\([\'"][^\'"]+[\'"]\);)+\$\w+\s?=\s?\$\w+\(\$\w+\(\$\w+\)\);\$\w+\s?=\s?\$\w+\(\$\w+\);(\$\w+)\s?=\s?[\'"]{2};for\(\$\w+\s?=\s?0\s?;\s?\$\w+\s?<\s?\$\w+\s?;\s?\$\w+\+\+\){\2\s?\.=\s?\$\w+\(\(\$\w+\(\$\w+\[\$\w+\]\)\^(\d+)\)\);}eval\(\2\);return;~msi',
            'id' => 'evalFuncXored',
        ],
        [
            'full' => '~[\'"]-;-[\'"];(.*?\(\'\\\\\\\\\',\'/\',__FILE__\)\);.*?,[\'"];[\'"]\),[\'"]"[\'"]\);.*?)[\'"]-;-[\'"];((\$\w+)=[\'"]([^\'"]+)[\'"];.*?\$\w+\s?\.\s?\3,\s?[\'"]([^\'"]+)[\'"],\s?[\'"]([^\'"]+)[\'"]\)\)\).*?)[\'"]-;-[\'"];(.*?)[\'"]-;-[\'"];~msi',
            'id' => 'evalFuncExplodedContent',
        ],
        [
            'full' => '~(\$\w{0,100}\s?=\s?(?:chr\(\w{1,10}\)\s?\.?\s?){1,100};\s?(?:\$\w{0,100}\s?=\s?(?:\s?(?:[\'"][\\\\\w]{1,10}[\'"]|[\d\.]{1,5}\s[*\+\-\.]\s\d{1,5})\s?\.?)+?;\s?){1,10}(?:\$\w{0,100}\s?=\s?(?:chr\(\w{1,10}\)\s?\.?){1,100};)?\s?\$\w{1,50}\s?=\s?\$\w{1,50}\(\$\w{1,50}\((?:[\'"][^\'"]{1,500}[\'"]\s?\.?\s?)+\),\s?(?:[\'"][^\'"]{1,500}[\'"]\s?\.?\s?)+,\s?substr\(hash\([\'"]SHA256[\'"],(?:\s?[\'"]\d{1,15}[\'"]\s?\.?){2},\s?true\),\s?(\d{1,10}),\s?(\d{1,10})\),\s?OPENSSL_RAW_DATA,\s?\$\w{1,50}\);.*?)(\$\w{1,50})\s?=\s?\$\w{1,50}\([\'"]([^\'"]+)[\'"],\s*[\'"]{2},\s*[\'"]([^\'"]+)[\'"]\);\s?return\s?@eval\(((?:\$\w{1,50}\s?\()+\$\w{1,50}(?:\)\s?)+);\s?exit;~msi',
            'id' => 'evalEncryptedVars',
        ],
        [
            'full' => '~function\s(\w+)\((\$\w+),\s*(\$\w+)[^)]+\)\s*\{\s*\$\w+\s*=\s*\2;\s*\$\w+\s*=\s*\'\';\s*for\s*\(\$\w+\s*=\s*0;\s*\$\w+\s*<\s*strlen\(\$\w+\);\)\s*{\s*for\s*\(\$\w+\s*=\s*0;\s*\$\w+\s*<\s*strlen\(\3\)\s*&&\s*\$\w+\s*<\s*strlen\(\$\w+\);\s*\$\w+\+\+,\s*\$\w+\+\+\)\s*{\s*\$\w+\s*\.=\s*\$\w+\[\$\w+\]\s*\^\s*\3\[\$\w+\];\s*}\s*}\s*return \$\w+;\s*}\s*\$\w+\s*=\s*["\'][^"\']+[\'"];\s*\$\w+\s*=\s*[\'"]([^\'"]+)["\'];\s*(?:\$\w+\s*=\s*["\']+;\s*)+(?:foreach[^{]+{[^}]+}\s*)+(\$\w+)\s*=\s*\$\w+\([create_funion\'. "]+\);\s*(\$\w+)\s*=\s*\5\(["\'][^"\']*[\'"],\s*\$\w+\(\1\(\$\w+\(\$\w+\),\s*["\']([^\'"]+)["\']\)+;\s*\6\(\);~msi',
            'id' => 'xoredKey',
        ],
        [
            'full' => '~(\$\w+)=str_rot13\(\'[^\']+\'\);(\$\w+)=str_rot13\(strrev\(\'[^\']+\'\)\);(\s*eval\(\1\(\2\(\'([^\']+)\'\)+;)+~msi',
            'id' => 'evalGzB64',
        ],
        [
            'full' => '~(function\s*(_\d+)\((\$\w+)\)\s*{(\$\w+)=Array\(\'[^)]+\'\);return\s*base64_decode\(\4\[\3\]\);\})(.+?\2\(\d+\))+[^;]+;exit;~msi',
            'id' => 'evalArrayB64',
        ],
        [
            'full' => '~http_response_code\(\d{1,3}\);function\s?(\w{1,100})\(\$\w{1,50}\){if\s?\(empty\(\$\w{1,50}\)\)\s?return;\$\w{1,50}\s?=\s?"[^"]{1,500}";(?:(?:\$\w{1,50}\s?=\s?[\'"]{0,2}){1,4};){1,2}\$\w{1,50}\s?=\s?0;\$\w{1,50}\s?=\s?"";\$\w{1,50}\s?=\s?preg_replace\("[^"]{1,50}",\s?"",\s?\$\w{1,50}\);do{.*?while\s?\(\$\w{1,50}\s?<\s?strlen\(\$\w{1,50}\)\);return\s?\$\w{1,50};}eval\(\1\(hex2bin\("(\w{1,30000})"\)\)\);~msi',
            'id' => 'evalFuncBinary',
        ],
        [
            'full' => '~(\$\w{1,50}\s?=\s?\'\w{1,500}\';){1,5}\$\w{1,50}\s?=\s?(?:\$\w{1,50}\.?){1,10};\$\w{1,50}=\$\w{1,50}\([\'"]H\*[\'"],[\'"](\w{1,200})[\'"]\);\s?\$\w{1,50}\("[^"]{1,100}","(\\\\x[^\']{1,500})(\'[^\']{1,50000}\')\\\\x[^"]{1,50}",[\'"]{2}\);~msi',
            'id' => 'evalPackFuncs',
        ],
        [
            'full' => '~parse_str\s*\(((?:\s?[\'"][^\,]+[\'"]\s?\.?\s?){1,500}),\s?(\$\w{1,50})\s?\)\s?;\s?@?((?:eval\s?\()?\s?\2\s?\[\s?\d{1,5}\s?\]\s?\(\s?\2\s?\[\s?\d{1,5}\s?\]\s?(?:,\s?array\s?\(\s?\)\s?,\s?array\s?\(\s?[\'"]([^\']{1,10})[\'"]\s?\.(\s?\$\w{1,50}\s?\[\s?\d+\s?\]\s?\(\s?\$\w{1,50}\s?\[\s?\d\s?\]\s?\(\s?\$\w{1,50}\s?\[\s?\d{1,2}\s?\]\s?\(\s?)|\(\s?\2\s?\[\s?\d{1,5}\s?\]\s?\())\s?([\'"][^\']+[\'"]\s?)(\)\s*)?\)\s*\)\s*\.\s?[\'"]([^\'"]{1,10})[\'"]\s?\)\s?\)\s?;~msi',
            'id' => 'parseStrFunc',
        ],
        [
            'full' => '~eval\("\\\\(\$\w+)=(gz[^\)]+\)\);)"\);eval\("\?>"\.\1\);~msi',
            'id' => 'evalGzinflate',
        ],
        [
            'full' => '~function\s?(\w{1,50})\(\$\w{1,50}\)\s?{\s?(\$\w{1,50})\s?=\s?\("([^"]{1,500})"\);\s?(?:\$\w{1,50}\s?=\s?(?:"[^"]+"|\$\w{1,50}|[\'"]{2});\s?)+for\(\$\w{1,50}\s?=\s?0;\s?\$\w{1,50}<strlen\(\$\w{1,50}\);\s?\)\s?{\s?for\(\$\w{1,50}\s?=\s?0;\s?\(\$\w{1,50}<strlen\(\2\)\s?&&\s?\$\w{1,50}<strlen\(\$\w{1,50}\)\);\s?\$\w{1,50}\+\+,\$\w{1,50}\+\+\){\s?(?:\$\w{1,50}\s?=\s?"[^"]+";\s?){1,2}\$\w{1,50}\s?\.=\s?\$\w{1,50}{\$\w{1,50}}\s?\^\s?\$\w{1,50}{\$\w{1,50}};\s?\$\w{1,50}\s?=\s?"[^"]+";\s?}\s?}\s?return\s?\$\w{1,50};\s?}\s?(\$\w{1,50})\s?=\s?preg_replace\("([^"]+)",\s?"",\s?"([^"]+)"\);\s?(?:\s?\$\w{1,50}\s?=\s?(?:"[^"]+"|\w{1,50}\(\$\w{1,50}\("[^"]+"\)\)|\$\w{1,50}\(\)\.\s?\w{1,50}\(\$\w{1,50}\("[^"]+"\)\)|"[^"]+"\s*\.\s*\w+\(\$\w+\("[^"]+"\)\));\s?){1,50}(\$\w{1,50}\(\$\w{1,50},(?:\$\w{1,50}\.?)+\);)\s?(?:\$\w{1,50}\s?=\s?"[^"]+";\s?|include\s?\$\w{1,50};\s){1,50}~msi',
            'id' => 'funcVars',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*"([^"]+)";(?:\$\w+\s*=\s*(?:\1\[\d+\][\.;])+)+@?(?:\$\w+[\(,])+((?:\1\[\d+\][\.;\)])+)\)\),\$\w+\[\d+\],\$\w+\[\d+\]\);~msi',
            'id' => 'dictVars',
        ],
        [
            'full' => '~\$\w{1,50}\s?=\s?(?:\'\'|\.|chr\(\d+\)|\'\w+\')+\s?;\$\w{1,50}\s?=\s?\$\w{1,50}\(\'\',array\(((?:"[^"]+",?)+)\)\);(?:\$\w{1,50}\s?=\s?(?:\'\'|\.|chr\(\d+\)|\'\w+\')+\s?;)+\$\w{1,50}\s?=\s?\$\w{1,50}\(\'\',\$\w{1,50}\(((?:\'[^\']+\'\s?\.?)+)\)\);\$\w{1,50}\(\);\$\w{1,50}\(\$\w{1,50}\(\$\w{1,50}\)\);~msi',
            'id' => 'decodedDoubleStrSet',
        ],
        [
            'full' => '~(\$\w{1,100})=[\'"]([^"\']+)[\'"];(\$\w{1,100}=(?:(?:strrev\("[^"]+"\)|"[^"]+")\.?)+;(\$\w{1,100})\s?=\s?\$\w{1,100}\([\'"]([^"\']+)[\'"]\);\$\w{1,100}=(?:(?:strrev\("[^"]+"\)|"[^"]+")\.?)+;(\$\w{1,100})\s?=\s?\$\w{1,100}\(\'\1\',\$\w{1,100}\);\$\w{1,100}\(\1\);)~msi',
            'fast' => '~(\$\w{1,100})=[\'"]([^"\']+)[\'"];(\$\w{1,100}=(?:(?:strrev\("[^"]+"\)|"[^"]+")\.?)+;(\$\w{1,100})\s?=\s?\$\w{1,100}\([\'"]([^"\']+)[\'"]\);\$\w{1,100}=(?:(?:strrev\("[^"]+"\)|"[^"]+")\.?)+;(\$\w{1,100})\s?=\s?\$\w{1,100}\(\'\$\w{1,100}\',\$\w{1,100}\);\$\w{1,100}\(\$\w{1,100}\);)~msi',
            'id' => 'createFuncStrrev',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*create_function\(\'\$\w+\',strrev\(\'[^\']+\'\)\);\s*\1\(strrev\(\'([^\']+)\'\)\);~msi',
            'id' => 'strrevBase64',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*"([^"]+)";if\(!function_exists\("([^"]+)"\)\){function\s*\3\(\$\w+\)\{\$\w+=(\d+);foreach\(array\(((?:"[0-9a-f]+",?)+)\)as\$\w+=>\$\w+\)[^}]+\}\}\3\(\1\."([^"]+)"\);~msi',
            'id' => 'customDecode',
        ],
        [
            'full' => '~((?:\$\w+\s*=\s*[abcdehnoprstux\._64\'"]+;\s*)+)(\$\w+="?\w+["\(\)]*;\s*)+\$\w+="[^"]+";\s*\$\w+=(\$\w+\("([^"]+)"\);)[^/]+/pre>\';~msi',
            'id' => 'expDoorCode',
        ],
        [
            'full' => '~include\((base64_decode\(\'([^\']+)\'\))\);~msi',
            'id' => 'includeB64',
        ],
        [
            'full' => '~(\$\w+)=strrev\(\'nib2xeh\'\);(\$\w+)=array\(((?:\'[^\']+\',?)+)\);(\$\w+)\s*=\s*\'\';for\s*\(\$\w+\s*=\s*0;\s*\$\w+\s*<\s*\d+;\s*\$\w+\+\+\)\s*\{\4\s*\.=\s*str_replace\(array\(((?:\'([^\']*)\',?)+)\),\s*array\(((?:\'[^\']*\',?)+)\),\s*\2\[\$\w+\]\);\}(?:(?:\$\w+=)+(?:true;|hex2bin))?(?:eval\(\1\(\4\)\);)*~msi',
            'id' => 'nib2xeh',
        ],
        [
            'full' => '~error_reporting\(0\);\s*\$\w+\s*=\s*"[0-9a-f]{32}";\s*((\$\w+)\s*=\s*((?:\w+\()+)\'([^\']+)\'\)+;\$\w+\s*=\s*"";for\s*\(\$\w+\s*=\s*0;\s*\$\w+\s*<\s*120;\s*\$\w+\+\+\)[^}]+}\$\w+\s*=\s*strlen\(\2\);\$\w+\s*=\s*strlen\(sha1\(hash\(str_rot13\("fun256"\),\s*md5\(\$\w+\)+;for[^}]+}[^}]+}eval\(\$\w+\);)~msi',
            'id' => 'fun256',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*((?:\$?\w+\()+)\'([^\']+)\'\)+;\s*if\s*\(\s*\'\w{40,40}\'\s*==\s*sha1\(\s*\1\s*\)\s*\)\s*{\s*\1\s*=\s*gzinflate\s*\(\s*gzinflate\s*\((?:\s*base64_decode|\$\w+)\(\s*\1\s*\)\s*\)\s*\)\s*;\s*\$\w{1,10}\s*=\s*""\s*;for\s*\([^)]+\)\s*{[^}]+}\s*(?:\s*\$[^;]+;\s*)+for\s*\([^)]+\)\s*{\s*\$[^;]+;\s*if\s*\([^)]+\)\s*{[^}]+}(?:\s*\$[^;]+;\s*)+}\s*eval\s*\(\s*\$\w+\s*\)\s*;[^}]*}\s*else\s*{[^}]+}~msi',
            'id' => 'fun256',
        ],
        [
            'full' => '~(\$\w+)\s?=\s?\'([^\']+)\';\s?(\$\w+\s?=\s?(?:\1\[\d+\]\.?)+;\s?(?:(?:\$\w+\s?=\s?(?:\$\w+\()+(?:(?:\1\[\d+\])\.?|"[^"]+"\.?)+)\)+;\s?)+)(\$\w+\s?=\s?\$\w+\(\'H\*\',\s?\$\w+\(\'/\[([^]]+)\]\+/\w\',\'\',\s?(\$\w+)\(\1\)\)\);\s?eval\(\$\w+\);)~msi',
            'id' => 'evalPackPreg',
        ],
        [
            'full' => '~((?:\$_\w{1,50}\s?=\s?"[^"]{1,100}";)+)@eval\("\?>"\.(\$_\w{1,50}\((/\*.*?\*\/)\$\w{1,50}\("[^"]+"\)\))\);~msi',
            'id' => 'evalVarWithComment',
        ],
        [
            'full' => '~(?(DEFINE)(?\'s\'((?:chr\([0-9a-fx]+([/\-+\*][0-9a-fx]+)?\)|str_rot13\(\'[^\']+\'\)|base64_decode\(\'[^\']+\'\)|\'[^\']*\')[\.]?)+))(\$\w+)=create_function\(((?P>s)),((?P>s))\);\4\(base64_decode\(((?P>s))\)\);~msi',
            'id' => 'createFuncObf',
        ],
        [
            'full' => '~(\$[\w_]{1,50})\s*=\s*\[\s*base64_decode\s*\(\s*[\'"]([\w=]+)[\'"]\s*\)\s*,\s*([^;]{2,200})\]\s*;\s*(if\s*[^}]+}\s*else\s*{[^}]+}\s*function\s\w+[^}]+})~mis',
            'fast' => '~(\$[\w_]{1,50})\s*=\s*\[\s*base64_decode\s*\(\s*[\'"]([\w=]+)[\'"]\s*\)\s*,\s*([^;]{2,200})\]\s*;\s*(if\s*[^}]+}\s*else\s*{[^}]+}\s*function\s\w+[^}]+})~mis',
            'id' => 'base64Array',
        ],
        [
            'full' => '~(\$[\w]{1,34}\s*=\s*[\'"](?:[\\\\\w]{1,32}\\\[\\\\\w]{1,32})[\'"]\s*;\s*(?:\$[\w]{1,34}\s*=\s*[\'"][^\'"]+[\'"];){1,3})\s*@?eval\s*\(\s*([^;]{0,100})\);~mis',
            'id' => 'simpleVarsAndEval',
        ],
        [
            'full' => '~(if\(defined\(\'PHP_MAJOR_VERSION\'\)[^{]{1,30}{\s*if[^}]+}\s*}\s*.*?if\s*\(\s*!\s*function_exists\s*\(\s*\'nel\'\s*\)\s*\)\s*{\s*)(function\s*nel\s*\(\s*\$i\s*\)\s*{\s*\$[\w]+\s*=\s*array\(([^)]+)\);[^}]+})(.*}\s*exit\s*;\s*}\s*})~mis',
            'id' => 'replaceFuncWithBase64DecodeArray',
        ],
        [
            'full' => '~\$\w{1,50}\s?=\s?(?:\'[^\']+\'\.?)+;\$\w{1,50}\s?=\s?create_function\(\'\$\w{1,50}\',\$\w{1,50}\);((?:\$\w{1,50}\s?=\s?(?:\'[^\']+\'\.?)+;)+)\$\w{1,50}\(((?:\$\w{1,50}\()+"[^"]+"\)+;)~msi',
            'id' => 'createFuncVars',
        ],
        [
            'full' => '~\$\w{1,50}\s?=\s?json_decode\((base64_decode\([\'"][^\'"]+[\'"]\))\);~msi',
            'id' => 'jsonDecodedVar',
        ],
        [
            'full' => '~if\s?\(file_put_contents\(\$\w{1,50}\.[\'"][^\'"]+[\'"],(base64_Decode\([\'"][^\'"]+[\'"]\))\)\)echo\s?[\'"][^\'"]+[\'"];~msi',
            'id' => 'filePutPureEncodedContents',
        ],
        [
            'full' => '~function\s?(\w{1,50})\((\$\w{1,50})\){for\s?\((\$\w{1,50})\s?=\s?0;\s?\3\s?<=\s?strlen\(\2\)-1;\s?\3\+\+\s?\){(\$\w{1,50})\s?\.=\s?\2{strlen\(\2\)-\3-1};}return\(\4\);}((?:eval\(\1\(\'[^\']+\'\)\);)+)~msi',
            'id' => 'evalFuncReverse',
        ],
        [
            'full' => '~function\s?(\w{1,50})\(\$\w{1,50}\)\s?{return\s?base64_decode\(\$\w{1,50}\);}(?:.*?\1\("[^"]+"\))+~msi',
            'fast' => '~function\s?\w{1,50}\(\$\w{1,50}\)\s?{return\s?base64_decode\(\$\w{1,50}\);}(?:.*?\w{1,50}\("[^"]+"\))+~msi',
            'id' => 'base64decodeFuncs',
        ],
        [
            'full' => '~error_reporting\(\s?0\s?\);\s?(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];\s?(\$\w{1,50})\s?=\s?(?:\1\[\d+\]\.?)+;\s?(\$\w{1,50})\s?=\s?eval\s?\(\3\s?\("((?:\\\\x\w{1,50})+)"\s?\([\'"]{1,2}([^"\']+)[\'"]{1,2}\)\)\);\s?create_function\(\'\',\s?\'}\'\.\4\.\'//\'\);~msi',
            'fast' => '~error_reporting\(\s?0\s?\);\s?(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];\s?\$\w{1,50}\s?=\s?(?:\$\w{1,50}\[\d+\]\.?)+;\s?(\$\w{1,50})\s?=\s?eval\s?\(\$\w{1,50}\s?\("((?:\\\\x\w{1,5})+)"\s?\([\'"]{1,2}([^"\']+)[\'"]{1,2}\)\)\);\s?create_function\(\'\',\s?\'}\'\.\$\w{1,50}\.\'//\'\);~msi',
            'id' => 'evalCreateFuncWithDictionaryVar',
        ],
        [
            'full' => '~error_reporting\(\s?0\s?\);\s?(\$\w+)\s?=\s?"([^"]+)";(?:\$\w+\s?=\s?(?:\$\w+\[\d+\]\.?)+;)+function\s\w+\((?:\$\w+,?){5}\){\s*return\s?(?:\$\w+\.?){5};}(?:\$\w+\s?=\s?(?:[\'"][^\'"]*[\'"]\.?)+;)+\$\w+\s?=\s?\w+\((?:\$\w+,?){5}\);(?:\$\w+\s?=\s?(?:[\'"][^\'"]*[\'"]\.?)+;)+function\s(\w+)\((?:\$\w+,?){3}\){\s*return\s?(?:\$\w+\.?){3};}\$\w+\s?=\s?((?:\3\((?:(?:\$\w+|\.?[\'"][^"\']*[\'"]\.?)+,?){3}\)\.)+["\']{1,2}([^"\']+)[\'"]{1,2}\.\$\w+);\$\w+\(\'\',\s?\'}\'\.\$\w+\.\'//\'\);~msi',
            'id' => 'evalCreateFuncWithVars',
        ],
        [
            'full' => '~(?(DEFINE)(?\'v\'(?:\$(?:_GET|GLOBALS)\{\2\}[\{\[][a-fx\d]+[\}\]])))error_reporting\([^)]+\);define\(\'([^\']+)\',\s*\'[^\']+\'\);\$(?:_GET|GLOBALS)\[\2\]\s*=\s*explode\(\'([^\']+)\',\s*gzinflate\(substr\(\'(.*)\',([0-9a-fx]+),\s*([0-9\-]+)\)\)\);(?:.{1,250}(?:(?&v)|curl|\\\\[0-9a-fx]+))+[^;]+;(?:\s*(\$\w+\((?:\$\w+\.?)+\);|eval\(\$\w+\);\s*\}\s*function\s*\w+[^1]+!1\);\s*return\s*curl_exec\(\$\w+\);)?[^;]+;)~msi',
            'id' => 'explodeSubstrGzinflate',
        ],
        [
            'full' => '~error_reporting\([^)]+\);header\([^)]+\);ini_set\([^)]+\);ini_set\([^)]+\);define\(\'PASSWD\',\'[^)]+\);define\(\'VERSION\',\'Bypass[^)]+\);define\(\'THISFILE\'[^;]+;define\(\'THISDIR\',[^;]+;define\(\'ROOTDIR\',[^;]+;(((?:\$\w+=\'[^\']+\';)+)((?:\$\w+=str_replace\(\'[^\']+\',\'\',\'[^\']+\'\);)+)(\$\w+)=\$\w+\(\$\w+\(\'[^\']+\'\),\$\w+\(\'[^\']+\'\)\);\4\(((?:\$\w+\.?)+)\);)~msi',
            'id' => 'base64Vars',
        ],
        [
            'full' => '~function\s*(\w+)\(\$\w+,\$\w+\)\s*\{\$\w+=array\(\);for\(\$\w+=0;\$\w+<256;\$\w+\+\+\)(?:[^}]+}){2}return\s*\$res;\s*}\s*function\s*(\w+)\(\)\s*{(?:[^}]+}){12}(?:\$\w+=(?:chr\([0-9b]+\)\.?)+;)+\2\(\);@?eval\(\$\w+\(\1\(\$\{\'[^\']+\'\.(?:\(\'.\'\^\'.\'\)\.?)+}\[\(\'.\'\^\'.\'\)\.\(\'.\'\^\'.\'\)\],\$\w+\("([^"]+)"\)\)\)\);exit;~msi',
            'id' => 'chr0b',
        ],
        [
            'full' => '~@?error_reporting\(0\);\s*@?ini_set\(\'error_log\',NULL\);\s*@?ini_set\(\'log_errors\',0\);\s*(\$\w+)=strrev\([base64_decode\'\.]+\);(\$\w+)=gzinflate\(\1\(\'([^\']+)\'\)\);\s*create_function\("","}\2//"\);~msi',
            'id' => 'createFuncPlugin',
        ],
        [
            'full' => '~((?:\$\w+\s*=\s*str_replace\("[^"]+",\s*"",\s*"[^"]+"\);\s*)+)\s*(eval\((?:\$\w+\()+\'([^\']+)\'\)+;)~msi',
            'id' => 'strreplaceEval',
        ],
        [
            'full' => '~(\$\w+)\s*\s*=\s*"[a-f0-9]{32,40}";\s*(\$\w+)\s*=\s*"[create_fution".]+;\s*(\$\w+)=@?\2\(\'(\$\w+),(\$\w+)\',\'[eval\'\.]+\("\\\\\1=\\\\"\5\\\\";\?>"[gzinflate\.\']+\(\s*[base64_decode\'\.]+\(\4\)+;\'\);\s*@?\$\w+\("([^"]+)",\1\);~msi',
            'id' => 'hackM19',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*strrev\("[create_funtio"\.\s]+\);\s*(\$\w+)\s*=\s*\1\(\'(\$\w+)\',\s*strrev\(\';\)+\w+\$\([bas64_dcode\'\.\s]+\([bzdecompres\'\.\s]+">\?"\([eval\.\'\s]+\)\);\s*\2\("([^"]+)"\);~msi',
            'id' => 'ev404',
        ],
        [
            'full' => '~class\s+(_\w+)\s*{\s*private\s+static\s*\$\w{1,5}\s*;\s*public\s*static\s*function\s*(\w+)[^}]{1,1000}\s*}\s*private\s*static\s*function\s*\w{1,10}\s*\(\s*\)\s*{self::\$\w{1,5}\s*=\s*array\s*\(\s*([^)]+)\s*\);\s*}\s*}\s*class\s+(_\w+)\s*{\s*private\s+static\s*\$\w{1,5}\s*;\s*public\s*static\s*function\s*(\w+)[^}]{1,1000}\s*}\s*private\s*static\s*function\s*\w{1,10}\s*\(\s*\)\s*{self::\$\w{1,5}\s*=\s*array\s*\(\s*([^)]+)\s*\);\s*}\s*}\s*(.{1,5000}exit\s*;\s*})~mis',
            'id' => 'twoHashFunc',
        ],
        [
            'full' => '~(\s*function\s*(\w+)\((\$\w+)\)\s*\{\s*(?:\$\w+\s*=\s*[gzinflatebs64_dco\'\.]+;\s*)+\3\s*=\s*(?:\$\w+\()+\3\)+;\s*return\s*\3;}(\$\w+)\s*=\s*\'([^\']+)\';\s*(\$\w+)\s*=\s*\'\2\';\s*\3\s*=\s*\6\(\'[^)]+\);\s*(\$\w+)\s*=\s*\3\(\'\',\6\(\4\)+;\7\(\);)\s*\w+\(\d+(,\'[^\']+\',\'[^\']+\')?\);~msi',
            'id' => 'setVars',
        ],
        [
            'full' => '~(?:\$\w+=\'[gzuncompresbae64_dtfi\.\']+;\s*)+\$\w+=\$\w+\(\'(\$\w+)\',\'[eval\'\.]+\(\1\);\'\);\s*(\$\w+)=\'([^\']+)\';\s*\$\w+\("\?>"\.(\$\w+\()+\2\)+;~msi',
            'id' => 'createFuncGzB64',
        ],
        [
            'full' => '~(\$\w{1,50})=(?:[\'"][create_funcion]+[\'"]\.?)+;\$\w{1,50}=\1\([\'"](\$\w{1,50})[\'"],(?:[\'"][eval(gzuncomprsb64_d]+[\'"]\.?)+[\'"][decode(]+\2\)+;[\'"]\);\$\w{1,50}\([\'"]([^\'"]+)[\'"]\);~msi',
            'id' => 'createFuncGzB64',
        ],
        [
            'full' => '~(\$\w+)=strrev\(\'[base64_dco]+\'\);\s?(\$\w+)=gzinflate\(\1\(\'([^\']+)\'\)\);\s?create_function\("","}\2//"\);~msi',
            'id' => 'createFuncGzInflateB64',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*(\(?\s*gzinflate\s*\(\s*base64_decode\s*)\(\s*\'([^\']+)\'\s*\)\s*\)\s*\)?\s*;\s*\$\w+\s*=\s*@?create_function\(\'([^\']*)\',\s*(?:\1|\'@?eval\(\4\)[^\']+\')\)\s*;\s*@?\$\w+(?:\(\)|\(\1\));~msi',
            'id' => 'createFuncGzInflateB64',
        ],
        [
            'full' => '~(\$\w+)="((?:\\\\\w+)+)";((\$\w+)=\1\("[^"]+"\);)@(eval\(\1\("[^"]+"\)\);)(\$\w+=(?:\$\w+\[\d+\]\.?)+;)((\$\w+)=(\$\w+)\(\1\("([^"]+)"\),-1\);)((?:\$\w+=(?:\$\w+\[\d+\]\.?)+;)+)@(eval\(\$\w+\(\1\("[^"]+"\)\)\));~msi',
            'id' => 'wsoShellDictVars',
        ],
        [
            'full' => '~error_reporting\(\d+\);(\$\w+)="([^"]+)";(\$\w+)=explode\("([^"]+)","([^"]+)"\);foreach\(\3\sas\s\$\w+=>\$\w+\){\$\w+=preg_split\("//",\$\w+,-1,[^)]+\);\3\[\$\w+\]=implode\("",array_reverse\(\$\w+\)\);}(\$\w+)=explode\("([^"]+)","([^"]+)"\);foreach\(\6\sas\s\$\w+=>\$\w+\){\${\$\w+}=\3\[\$\w+\];}function\s(\w+)\(\$\w+,\$\w+\){\$\w+=\${"[^"]+"}\["([^"]+)"\]\("//",\$\w+,-1,[^)]+\);foreach\(\$\w+\sas\s\$\w+=>\$\w+\){\$\w+\[\$\w+\]=\${"[^"]+"}\["([^"]+)"\]\(\${"[^"]+"}\["([^"]+)"\]\(\$\w+\)\+\$\w+\);}\$\w=\${"[^"]+"}\["([^"]+)"\]\("",\$\w+\);return\s\$\w+;}(\$\w+)=\9\(\14,-2\);@ini_set\(\'[^\']+\',\'[^\']+\'\);((?:\$\w+=(?:\$\w+\[\d+\]\.?)+;)(\$\w+)=(?:\$\w+\[\d+\]\.?)+;)function\s(\w+)\(\$\w+\){\$\w+=\9\(\$\w+,1\);\$\w+=strtr\(\$\w+,"([^"]+)","([^"]+)"\);return\s\$\w+;}((?:\$\w+\.?=(?:\$\w+\[\d+\]\.?)+;)+)(\$\w+)=\${"[^"]+"}\["[^"]+"\]\(\'(?:\$\w+,?)+\',(\$\w+)\(\17\("([^"]+)"\)\)\);@\${"[^"]+"}\["[^"]+"\]\((?:@\$\w+,?)+\);~msi',
            'id' => 'funcDictVars',
        ],
        [
            'full' => '~((\$\w{1,10})\s*=\s*\(\s*[\'"]([^\'"]{40,50000})[\'"]\s*\)\s*;\s*(\$\w{1,10})\s*=\s*base64_decode\s*\(\s*\2\s*\)\s*;)\s*(\$\w{1,10}\s*=\s*fopen\s*[^;]+;\s*echo\s*fwrite[^;]+;\s*fclose[^;]+;)~msi',
            'id' => 'funcFile2',
        ],
        [
            'full' => '~function\s*(\w+)\((\$\w+)\)\s*\{\s*\2=((?:\w+\()+)\2(\)+);\s*for\(\$\w=0;\$\w+<strlen\(\2\);\$\w+\+\+\)\s*\{\s*\2\[\$\w+\]\s*=\s*chr\(ord\(\2\[\$\w+\]\)-(\d+)\);\s*\}\s*return\s*\2;\s*\}eval\(\1\(("[^"]+")\)\);~msi',
            'id' => 'sec7or',
        ],
        [
            'full' => '~error_reporting\(0\);\s*class\s*(\w+)\{\s*private\s*\$\w+=\s*array\(\s*((?:"[^"]+"=>"[^"]+",?\s*)+)\)\s*;\s*public\s*function\s*(\w+)\s*\(\s*\$\w+,\s*\$\w+\s*\)\s*{[^}]+}\s*public\s*function\s*(\w+)\s*\(\$\w+,\$\w+\)\s*{[^}]+}\s*private\s*function\s*\w+\((?:\$\w+,?){7}\)\s*{[^}]+}return\s*array\((?:\$\w+,?){3}\);}}\s*(\$\w+)=new\s*\1;\s*(\$\w+)=\5->\3\(\'tmhapbzcerff\',array\(\'onfr\',\'_qrpbqr\',\'fgeeri\'\)\);\5->\4\(\6,\'\'\);\s*die\(\);~msi',
            'id' => 'classWithArrays',
        ],
        [
            'full' => '~error_reporting\(0\);(\s*(\$\w+)="[asert\."]+;\s*\$(\w+)=\2\(strrev\("([^"]+)"\)\);\s*\$\{\'\3\'\};)~msi',
            'id' => 'assertStrrev',
        ],
        [
            'full' => '~error_reporting\(0\);\$\w+\="[^"]+";\$\w+\=explode\("[^"]+","[^"]+"\);foreach\(\$\w+ as \$\w+\=\>\$\w+\)\{\$\w+\=preg_split\("//",\$\w+,\-1,PREG_SPLIT_NO_EMPTY\);\$\w+\[\$\w+\]\=implode\("",array_reverse\(\$\w+\)\);\}\$\w+\=explode\("[^"]+","[^"]+"\);foreach\(\$\w+ as \$\w+\=\>\$\w+\)\{\$\{\$\w+\}\=\$\w+\[\$\w+\];\}function \w+\(\$\w+,\$\w+\)\{\$\w+\=\$\{"[^"]+"\}\["\w+"\]\("//",\$\w+,\-1,PREG_SPLIT_NO_EMPTY\);foreach\(\$\w+ as \$\w+\=\>\$\w+\)\{\$\w+\[\$\w+\]\=\$\{"[^"]+"\}\["[^"]+"\]\(\$\{"[^"]+"\}\["\w+"\]\(\$\w+\)\+\$\w+\);\}\$\w+\=\$\{"[^"]+"\}\["\w+"\]\("",\$\w+\);return \$\w+;\}\$\w+\=\w+\(\$\w+,\-2\);@ini_set\(\'memory_limit\',\'1024M\'\);(?:\$\w+\=(?:\$\w+\{\d+\}\.?)+;)+function \w+\(\$\w+\)\{\$\w+\=\w+\(\$\w+,(\d+)\);\$\w+\=strtr\(\$\w+,"([^"]+)","([^"]+)"\);return \$\w+;\}(?:\$\w+\.?=(?:\$\w+\{\d+\}\.?)+;)+\$\w+\=\$\{"[^"]+"\}\["\w+"\]\(\'\$\w+,\$\w+,\$\w+,\$\w+\',\$\w+\(\w+\("([^"]+)"\)\)\);@\$\{"[^"]+"\}\["\w+"\]\(@\$\w+,@\$\w+,@\$\w+,@\$\w+,@\$\w+,@\$\w+\);~msi',
            'id' => 'b64strtr',
        ],
        [
            'full' => '~error_reporting\(\d\);function\s(\w{1,50})\(\$\w{1,50},\$\w{1,50}\){if\(file_exists\("[^"]+"\)\){touch\(__FILE__,filemtime\("[^"]+"\)\);}\$\w{1,50}=str_replace\(array\(\'([^\']+)\',\'([^\']+)\'\),array\(\'([^\']+)\',\'([^\']+)\'\),\$\w{1,50}\);\$\w{1,50}=strrev\(\'[base64]+\'\)\."_"\.strrev\(\'[decode]+\'\);\$\w{1,50}=\$\w{1,50}\(\$\w{1,50}\);\$\w{1,50}=strrev\(\'[gzinflate]+\'\);return@\$\w{1,50}\(\$\w{1,50}\);}\s?\$\w{1,50}=\'([^;]+;)([^\']+)">\';preg_match\(\'#\6\(\.\*\)">#\',\$\w{1,50},\$\w{1,50}\);\$\w{1,50}=\$\w{1,50}\[1\];\$\w{1,50}=\1\(\$\w{1,50},\$\w{1,50}\);if\(isset\(\$\w{1,50}\)\){eval\(\$\w{1,50}\);}~msi',
            'id' => 'gzB64strReplaceDataImage',
        ],
        [
            'full' => '~(\$\w{1,50})=array\((?:base64_decode\([\'"][^\'"]+[\'"]\),?){2}base64_Decode\(strrev\(str_rot13\(explode\(base64_decode\([\'"][^\'"]+[\'"]\),file_get_contents\(__FILE__\)\)\[1\]\){4};preg_replace\(\1\[0\],serialize\(eval\(\1\[2\]\)\),\1\[1\]\);exit\(\);\s?\?>\s*([^\s]{1,})~msi',
            'id' => 'serializeFileContent',
        ],
        [
            'full' => '~(function\s\w{1,50}\(\$\w{1,50}\)\s?{\s?global\s(?:\$\w{1,50},?\s*)+;\s*\$\w{1,50}\(\$\w{1,50},\s?\$\w{1,50},\s?\$\w{1,50}\(\)\s?\+\s?\w{1,50}\(\$\w{1,50}\),\s?(?:\$\w{1,50}\s?,?\.?\s*)+\);\s*}\s*global\s?(?:\$\w{1,50},?\s*)+;\s*(?:\$\w{1,50}\s?=\s?\'[^\']+\';\s*)+function\s?\w{1,50}\(\$\w{1,50}\)\s{\s*global\s?(?:\$\w{1,50},?\s*)+;.*?return\s\$\w{1,50}\(\$\w{1,50}\);\s}\s*(?:\$\w{1,50}\s?=\s?\'[^\']*\';\s*)+(?:function\s\w{1,50}\(.*?(?:\$\w{1,50}\s?=\s?\'[^\']*\';\s*)+)+(?:\$\w{1,50}\s\.?=\s\$\w{1,50};\s*)+.*?extract\(\w{1,50}\(get_defined_vars\(\)\)\);)\s*(\$\w{1,50}\(\d\);\s*\$\w{1,50}\(\$\w{1,50},\s?0\);\s*\$\w{1,50}\s=\s\$\w{1,50}\(\$_REQUEST,\s?\$_COOKIE,\s?\$_SERVER\);.*?\$\w{1,50}\(\$\w{1,50}\);\s*echo\s?\$\w{1,50};)~msi',
            'id' => 'globalVarsManyReplace',
        ],
        [
            'full' => '~\$\w{1,50}\s{0,100}=\s{0,100}"([^"]{1,50000})";\s?(\$\w{1,50}\s?=\s?(?:["][^"]{1,5}["]\.?)+;\s?\s?(?:\s?\$\w{1,50}\s?\.?=(?:\s?(?:\s?"[^"]+"|\$\w{1,50})\s?\.?)+;\s?)+)\$\w{1,50}\s?\(\s?\$\w{1,50},((?:\$\w{1,50}\()+\$\w{1,50}\)+),"[^"]{1,100}"\);~msi',
            'id' => 'concatVarsPregReplace',
        ],
        [
            'full' => '~(?:\$\w{1,50}\s?=\s?(?:"[^"]+"\.?)+;)+\s?echo\sjson_encode\(array\([\'"][^"\']+[\'"]=>@\$\w{1,50}\(__FILE__,(\$\w{1,50}\([\'"][^"\']+[\'"]\)\))>0,[\'"][^"\']+[\'"]=>__FILE__\)\);exit;~msi',
            'id' => 'filePutContentsB64Decoded',
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?base64_decode\([\'"][^\'"]+[\'"]\);\s?\$\w{1,50}\s?=\s?\$_POST\[[\'"][^\'"]+[\'"]\]\.[\'"][^\'"]+[\'"];\s?\$\w{1,50}\s?=\s?fopen\([\'"][^\'"]+[\'"]\.\$\w{1,50},\s?[\'"]w[\'"]\);\s?fwrite\(\$\w{1,50},\1\);~msi',
            'id' => 'fwriteB64DecodedStr',
        ],
        [
            'full' => '~file_put_contents\(\$_SERVER\[\'[^\']+\'\]\.\'[^\']+\',base64_decode\(\'[^\']+\'\)\);~msi',
            'id' => 'filePutContentsB64Content',
        ],
        [
            'full' => '~((\$\w{1,50})\s?=\s?((?:chr\(\d{1,5}\)\.?)+);)(\$\w{1,50})\s?=\s?(?:\2\[\d{1,5}\]\.?)+;(\$\w{1,50})\s?=\s?(?:\2\[\d{1,5}\]\.?)+;\4\(\5\(null,\s?((?:\2\[\d{1,5}\]\.?)+)\)\);~msi',
            'id' => 'chrDictCreateFunc',
        ],
        [
            'full' => '~(?:function\s\w{1,50}\((?:\$\w{1,50}\,?)+\){return\sstr_replace\((?:\$\w{1,50}\,?)+\);}\s?){3}(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];\s?\$\w{1,50}\s?=\s?\w{1,50}\([\'"]([^\'"]+)[\'"],\'\',\1\);\s?(?:\$\w{1,50}\s?=\s?[\'"][^\'"]+[\'"];\s?\$\w{1,50}\s?=\s?\w{1,50}\([\'"][^\'"]+[\'"],\'\',\$\w{1,50}\);\s?){2}\$\w{1,50}\s?=\s?[\'"][^\'"]+[\'"];\s?\$\w{1,50}\s?=\s?\$\w{1,50}\(\$\w{1,50},\$\w{1,50}\.\'\(\'\.\1\.\'\(\'\.\$\w{1,50}\.\'\)\);\'\);\s?\$\w{1,50}\([\'"]([^\'"]+)[\'"]\);~msi',
            'id' => 'strReplaceFuncsEvalVar',
        ],
        [
            'full' => '~\$\w{1,50}\s?=\s?"\\\\x[^"]+";\${\$\w{1,50}}\s?=\s?base64_decode\("(.*?\\\\x[^"]+")\);\s?eval\(".*?\\\\x[^\$]+\$\w{1,50}\\\\"\);"\);~msi',
            'id' => 'B64SlashedStr',
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?array\((?:[\'"][base64_dco]+[\'"],?\s?)+\);\s?array_splice\(\1,\s?4,\s?0,\s?8\*8\);\s?(\$\w{1,50})\s?=\s?implode\(\'\',\s?array_reverse\(\1\)\);\s?(\$\w{1,50})\s?=\s?\2\([\'"]([^\'"]+)[\'"]\);\s?eval\(\3\);~msi',
            'id' => 'B64ArrayStrEval',
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];\s?\$\w{1,50}\s?=\s?(?:\1\[\d+\]\.?)+;\s?@\$\w{1,50}\((?:\1\[\d+\]\.?)+,(?:\1\[\d+\]\.?)+"\("\.(?:\1\[\d+\]\.?)+\'\([\'"]([^\'"]+)[\'"]\)\);\',"\."\);~msi',
            'id' => 'DictVarsPregReplaceB64',
        ],
        [
            'full' => '~(\$\w+\s*=\s*\'[bs64_dcogzinflate\.\'\s]+;\s*)+(\$\w+)\s*=\s*\'([^\']+)\';\s*eval\((?:\$\w+\()+\2\)+;~msi',
            'id' => 'evalVarB64',
        ],
        [
            'full' => '~(if\s*\(\!function_exists\s*\("([^"]+)"\)\)\s*\{\s*function\s*\2\s*\((\$\w+)\)\s*\{\s*(\$\w+)\s*=\s*"";\s*(\$\w+)\s*=\s*0;\s*\$\w+\s*=\s*strlen\s*\(\3\);\s*while\s*\(\$\w+\s*<\s*\$\w+\)\s*\{\s*if\s*\(\3\[\5\]\s*==\s*\'\s\'\)\s*\{\s*\4\s*\.=\s*"\s";\s*\}\s*else\sif\s*\(\3\[\5\]\s*==\s*\'!\'\)\s*\{\s*\4\s*\.=\s*chr\s*\(\s*\(ord\s*\(\3\[\5\+\d\]\)-ord\s*\(\'A\'\)\)\*16\+\s*\(ord\s*\(\3\[\5\+\d\]\)-ord\s*\(\'a\'\)\)\);\s*\5\s*\+=\s*2;\s*\}\s*else\s*\{\s*\4\s*\.=\s*chr\s*\(ord\s*\(\3\[\5\]\)\+1\);\s*\}\s*\5\+\+;\s*\}\s*return\s*\4;\s*\}\s*\}\s*)eval\s*\(\2\s*\(\'([^\']+)\'\)\);~msi',
            'id' => 'decodeAChar',
        ],
        [
            'full' => '~(\$\w+)="([^"]+)";(\$\w+)="[str_eplac"\.]+";((?:\$\w+\s*=\s*\3\("([^"]+)","","[^"]+"\);)+)(\$\w+)\s*=\s*\$\w+\(\'\',\s*((?:\$\w+\()+\1\)\))\);\6\(\);~msi',
            'id' => 'strReplaceCreateFunc',
        ],
        [
            'full' => '~function\s*(\w+)\((\$\w+)\)\s*\{\s*\$\w+\s*=\s*strlen\(trim\(\2\)+;\s*\$\w+\s*=\s*\'\';(?:\s*for\s*\()?\s*(\$\w+)\s*=\s*0;\s*(?:while\s*\(\(\()?(?:if\s*\()?\$\w+\s*<\s*\$\w+(?:\)+)?(?:;\s*\3\s*\+=\s*[0x]*2\))?\s*\{\s*(\$\w+)\s*\.=\s*pack\([\'"]C[\'"],\s*hexdec\(substr\(\2,\s*\3,\s*[0x]*2\)\)\);(?:\s*\3\s*\+=\s*2;)?\s*\}\s*(?:else\s*\{\s*\}\s*)?return\s*\4;\s*\}\s*eval\(\1\([\'"]([0-9a-f]+)[\'"]\)\s*\.\s*(?|\'([^\']+\'\)+;)|\"([^\"]+\"\)+;))(?:\s*\'\);)?~msi',
            'id' => 'evalbin2hex',
        ],
        [
            'full' => '~function\s\w{1,50}\(\$\w{1,50},\s?\$\w{1,50}\)\s?{\s?return;\s?}\s?function\s\w{1,50}\((?:\$\w{1,50}\s?=\s?"",?\s?){2}\)\s?{.*?(?:function\s\w{1,50}\((?:\$\w{1,50},?\s?)+\)\s?{\s?return\s\$\w{1,50};\s?}\s?)+function\s\w{1,50}\(\).*?(?:function\s\w{1,50}\((?:\$\w{1,50},?\s?)+\)\s?{\s?return\s\$\w{1,50};\s?}\s?)+function\s\w{1,50}\(\).*?(?:function\s\w{1,50}\((?:\$\w{1,50},?\s?)+\)\s?{\s?return\s\$\w{1,50};\s?}\s?)+(?:header\(\w{1,50}\([\'"][^\'"]+[\'"]\)\);\s?)+define.*?PDO\(.*?\$\w{1,50}\s?=\s?0;\s?function\s?\w{1,50}\(\$\w{1,50}\)\s?{\s?global.*?function\s(\w{1,50})\(\$\w{1,50}\)\s?{\s?\$\w{1,50}\s?=\s?"";\s?for\s?\(\$\w{1,50}\s?=\s?0;\s?\$\w{1,50}\s?<\s?strlen\(\$\w{1,50}\)\s?-\s?1;\s?\$\w{1,50}\s?\+=2\)\s?{\s?\$\w{1,50}\s?\.=\s?chr\(hexdec\(\$\w{1,50}\[\$\w{1,50}\]\s?\.\s?\$\w{1,50}\[\$\w{1,50}\s?\+\s?1\]\)\s?\^0x66\);\s?}\s?return\s\$\w{1,50};\}(?:.*?(?:function\s\w{1,50}\((?:\$\w{1,50},?\s?)+\)\s?{\s?return\s\$\w{1,50};\s?}\s?)+)+~msi',
            'id' => 'manyFuncsWithCode',
        ],
        [
            'full' => '~(\$[0o]+)="([\\\\x0-9a-f]+)";(\$[0o]+)=@?\1\(\'([^\']+)\',"([\\\\x0-9a-f]+)"\);@?\3\("([^"]+)"\);~msi',
            'id' => 'gzB64Func',
        ],
        [
            'full' => '~(?:(?:session_start|error_reporting|set_time_limit)\(\d*\);\s?)+(?:@?ini_set\([\'"][^\'"]+[\'"],[\'"][^\'"]+[\'"]\);\s?)+((\$\w{1,50})\s?=\s?(?:[\'"][base64_dco]+[\'"]\.?)+;\s(\$\w{1,50})\s?=\s?\2\(((?:[\'"][^\'"]+[\'"]\.?)+)\);)\s?(\$\w{1,50})\s?=\s?array\(((?:(?:\s?\3\((?:[\'"][^\'"]+[\'"]\.?)+\)(?:\.?)?|\3|\2|(?:chr\(\d+\)\.?))+,\s?)+\${(?:chr\(\d+\)\.?)+}\[(?:chr\(\d+\)\.?)+\])\);\s?(?:.*?\5\[\d+\])+~msi',
            'id' => 'dictArrayFuncVars',
        ],
        [
            'full' => '~function\s(\w{1,50})\(\){\$\w{1,50}\s?=\s?[\'"]([^\'"]+)[\'"];\$\w{1,50}\s?=\s?str_rot13\(\$\w{1,50}\);\$\w{1,50}\s?=\s?base64_decode\([\'"]([^\'"]+)[\'"]\);(\$\w{1,50})\s?=\s?@\$\w{1,50}\(\'\',\s?pack\(\'H\*\',\s?\$\w{1,50}\)\);\s?\4\(\);\s?}\1\(\);~msi',
            'id' => 'createFuncPackStrRot13',
        ],
        [
            'full' => '~error_reporting\(0\);\s?(?:\s?function\s(\w{1,50})\((?:\$\w{1,50}\,?\s?){3}\)\s?{\s?return\s?[\'"]{2}\s?\.\s?(?:\$\w{1,50}\s?\.\s?[\'"]{2}\s?\.?\s?)+;\s*}|\s?(?:\w{1,50}:)?(\$\w{1,50})\s?=\s?"([^"]+)";){2}\s?(?:\s?(?:\w{1,50}:)?\$\w{1,50}\s?=\s?\1\((?:\2\[0\d{1,5}\][,.\s\'"]*)+\);\s?)+\s?print_r\(\2\[0\d{1,5}\]\);\s?echo\s?"[^"]+";\s*(\$\w{1,50})=\1\((?:\1\((?:(?:\$\w{1,50}|""),?)+\),?\.?)+\)\."\'([^\'"]+)\'"\.\1\((?:\2\[0\d{1,5}\],?)+\."",\2\[0\d{1,5}\]\);\s?print_r\(\$\w{1,50}\);\s?(?:\$\w{1,50}=\1\((?:\2\[0\d{1,5}\][.,]?)+\);\s?)+\$\w{1,50}=\1\(\1\((?:\$\w{1,50},?)+\),\$\w{1,50},\1\((?:\$\w{1,50},?)+\)\);\s?\$\w{1,50}\(create_function,array\("","}"\.\4\."//"\)\);~msi',
            'id' => 'dictVarsCreateFunc',
        ],
        [
            'full' => '~(?:function\s(\w{1,50})\((?:\$\w{1,50}\,?\s?){3}\)\s?{\s?return\s?[\'"]{2}\s?\.\s?(?:\$\w{1,50}\s?\.\s?[\'"]{2}\s?\.?\s?)+;\s*}\s?|(?:\w{1,50}:)?(\$\w{1,50})\s?=\s?"([^"]+)";\s?){2}(?:\s?\$\w{1,50}\s?=\s?\1\((?:(?:(?:\2\[\d+\])?[,.\s\'"]*)+|(?:\s?\1\((?:\$\w{1,50}[,.\s\'"]*)+\),?)+)\);)+\s?(\$\w{1,50})\s?=\s?\1\((?:\s?\1\((?:\$\w{1,50}[,.\s\'"]*)+\),?)+\)\s?\.\s?"\'([^"]+)\'"\s?\.\s?\1\((?:(?:\2\[\d+\])?[,.\s\'"]*)+\);\s?\$\w{1,50}\(\$\w{1,50},\s?array\(\'\',\s?"}"\s?\.\s?\4\s?\.\s?"//"\)\);~msi',
            'id' => 'dictVarsCreateFunc',
        ],
        [
            'full' => '~function\s(\w{1,50})\((\$\w{1,50})\)\s?{.*?\$\w+\s?=\s?"[^"]+";\$\w{1,50}\s?=\s?str_split\(\$\w{1,50}\);\$\w{1,50}\s?=\s?array_flip\(\$\w{1,50}\);\$\w{1,50}\s?=\s?0;\$\w{1,50}\s?=\s?"";\$\w{1,50}\s?=\s?preg_replace\("[^"]+",\s?"",\s?\$\w{1,50}\);do\s?{(?:\$\w{1,50}\s?=\s?\$\w{1,50}\[\$\w{1,50}\[\$\w{1,50}\+\+\]\];){4}\$\w{1,50}\s?=\s?\(\$\w{1,50}\s?<<\s?2\)\s?\|\s?\(\$\w{1,50}\s?>>\s?4\);\$\w{1,50}\s?=\s?\(\(\$\w{1,50}\s?&\s?15\)\s?<<\s?4\)\s?\|\s?\(\$\w{1,50}\s?>>\s?2\);\$\w{1,50}\s?=\s?\(\(\$\w{1,50}\s?&\s?3\)\s?<<\s?6\)\s?\|\s?\$\w{1,50};\$\w{1,50}\s?=\s?\$\w{1,50}\s?\.\s?chr\(\$\w{1,50}\);if\s?\(\$\w{1,50}\s?!=\s?64\)\s?{\$\w{1,50}\s?=\s?\$\w{1,50}\s?\.\s?chr\(\$\w{1,50}\);}if\s?\(\$\w{1,50}\s?!=\s?64\)\s?{\$\w{1,50}\s?=\s?\$\w{1,50}\s?\.\s?chr\(\$\w{1,50}\);}}\s?while\s?\(\$\w{1,50}\s?<\s?strlen\(\$\w{1,50}\)\);return\s?\$\w{1,50};}\s?.*?function\s(\w{1,50})\(\){\$\w{1,50}\s?=\s?@file_get_contents\(\w{1,50}\(\)\);.*?(\$\w{1,50})\s?=\s?"([^"]{1,20000})";.*?\4\s?=\s?@unserialize\(\1\(\4\)\);.*?(function\s(\w{1,50})\(\$\w{1,50}=NULL\){foreach\s?\(\3\(\)\s?as.*?eval\(\$\w{1,50}\);}}}).*?(\7\(\);)~msi',
            'id' => 'decodedFileGetContentsWithFunc',
        ],
        [
            'full' => '~((?:\$\w{1,50}\s?\.?=\s?"\\\\[^"]+";)+)((?:\$\w{1,50}=\$\w{1,50}\(\$\w{1,50}\);){3})(\$\w{1,50})=[\'"]([^\'"]+)[\'"];(\$\w{1,50})=[\'"]([^\'"]+)[\'"];if\(function_exists\(\$\w{1,50}\)\){\$\w{1,50}=@\$\w{1,50}\(\'\3,\$\w{1,50}\',(\$\w{1,50}\(\$\w{1,50}\()\5\)\)\);if\(\$\w{1,50}\)\3=@\$\w{1,50}\(\3,\$\w{1,50}\);\s?}else{.*?};if\(function_exists\(\$\w{1,50}\)\)\s?{\$\w{1,50}=@\$\w{1,50}\("",\7\3\)\)\);if\(\$\w{1,50}\)@\$\w{1,50}\(\);}else{.*?};~msi',
            'id' => 'createFuncVarsCode',
        ],
        [
            'full' => '~(\$\w+)=\'[preg_lac.\']+\';\1\(\'[#\~\\\\1\'.e]+\',\'([^,]+)\',\'1\'\);~msi',
            'id' => 'pregConcat',
        ],
        [
            'full' => '~(?(DEFINE)(?\'c\'\s*/\*[^\*]+\*/\s*))(?:\$\{"[^"]+"(?&c)?\^(?&c)?"[^"]+"\}\s*=\s*"[^"]+"\s*(?&c)?\^(?&c)?\s*"[^"]+";\s*)+\$\{"[^"]+"(?&c)?\^(?&c)?"[^"]+"\}\s*=\s*\(\s*\$\{"[^"]+"(?&c)?\^(?&c)?"[^"]+"\}\(\s*\$\{"[^"]+"(?&c)?\^(?&c)?"[^"]+"\}\s*\(\s*\'([^\']+)\'\)\s*\)\s*\)\s*;\s*\$\{"[^"]+"(?&c)?\^(?&c)?"[^"]+"\}="[^"]+"\s*(?&c)?\^(?&c)?\s*"[^"]+";\s*\$\{"[^"]+"(?&c)?\^(?&c)?"[^"]+"\}\s*=\s*@?\$\{"[^"]+"(?&c)?\^(?&c)?"[^"]+"\}\(\'[^\']+\',\s*"[^"]+"\s*(?&c)?\^(?&c)?\s*"[^"]+"\)\s*;@?\${"[^"]+"(?&c)?\^(?&c)?"[^"]+"\}\(\$\{"[^"]+"(?&c)?\^(?&c)?"[^"]+"\}\);~msi',
            'id' => 'xoredStrings',
        ],
        [
            'full' => '~\$\w+\s*=\s*\'([^\']+)\';\s*//base64 - gzinflate - str_rot13 - convert_uu - gzinflate - base64~msi',
            'id' => 'commentWithAlgo',
        ],
        [
            'full' => '~error_reporting\(0\);\s*set_time_limit\(0\);\s*ini_set\(\'memory_limit\',\s*\'-1\'\);\s*if\(isset\(\$_POST\[\'pass\']\)\)\s*{\s*function\s*[^}]+}\s*file_put_contents\((\$\w+)\."[^"]+",\s*gzdeflate\(file_get_contents\(\1\),\s*\d\)\);\s*unlink\(\1\);\s*copy\(\'\.htaccess\',\'[^\']+\'\);\s*(\$\w+)\s*=\s*base64_decode\("[^"]+"\);\s*(?:\$\w+\s*=\s*str_replace\(\'[^\']+\',\s*[^;]+;\s*)+\$\w+\s*=\s*\$\w+;\s*(\$\w+)\s*=\s*"<\?php[^;]+;\s*\?>";\s*(\$\w+)\s*=\s*fopen\(\'[^\']+\',\'w\'\);\s*fwrite\(\4,\s*\3\);\s*fclose\(\4\);\s*(\$\w+)\s*=\s*base64_decode\("[^"]+"\);\s*(\$\w+)\s*=\s*fopen\(\'[^\']+\',\s*\'w\'\);\s*fwrite\(\6,\s*\5\);\s*fclose\(\6\);\s*echo\s*"[^"]+";\s*}\s*function\s*(\w+)[^}]+}[^}]+[\s}]+[^!]+!+\';[^!]+!+\';\s*}\s*exit\(\);\s*}\s*function\s*\w+\(\){~msi',
            'id' => 'fileEncryptor',
        ],
        [
            'full' => '~function\s?\w{1,50}\(\$\w{1,50}\)\s*{(\$\w{1,50}=true;)?((?:\$\w{1,50}\s?=\s?[\'"](?:base64_(?:de|en)code|[\\\\xa-f0-9]+)[\'"];)+).*?exit;}}\w{1,50}\([\'"][^\'"]+[\'"]\);~msi',
            'id' => 'base64decodedFuncContents',
        ],
        [
            'full' => '~((?:if\(!function_exists\(base64_[end]+code\)\)\{function\s*(\w+)[^{]+({([^{}]*+(?:(?3)[^{}]*)*+)})\}\s*else\s*\{function\s*\2\((\$\w+)\)\s*\{\s*global\s*base64_[end]+code;return\s*base64_[end]+code\(\5\);\}\})+).*?((?:function\s*(\w+)\(\$\w+\)\{return\s*\w+\(\$\w+\);\s*\}\s*)+).*?(eval\(gzinflate\(\7\(\'([^\']+)\'\)\)\);)~msi',
            'id' => 'definedB64',
        ],
        [
            'full' => '~(?(DEFINE)(?\'v\'(?:(?:\$\{)*"GLOBALS"\}\["\w+"\]\}?|\$\w+|"\w+")))(?:(?&v)\s*=\s*"\w+";\s*)+(?:if\s*\(isset\(\$_GET\["[^"]+"\]\)\)\s*\{\s*echo\s*(?:"[^"]+"|\$_GET\["[^"]+"\]);\s*die;\s*\}\s*)*(?:(?&v)\s*=\s*"\w+";\s*)*function\s*(\w+)\(\$\w+,\s*\$\w+\s*=\s*\'\'\)\s*\{\s*(?:(?&v)\s*=\s*(?&v);\s*)+[^\^]+\^\s*(?&v)\[(?&v)\];\s*\}\s*\}\s*return\s*(?&v);\s*\}\s*(?:\$\w+\s*=\s*"[^"]+";)?\s*(?&v)\s*=\s*"[^"]+";\s*(?:(?&v)\s*=\s*"[^"]+";)?\s*(?:\$\w+ = "D";)?\s*((?&v))\s*=\s*"([^"]+)";(?:\s*(?&v)\s*=\s*[\'"][^\'"]*[\'"];\s*)+(?:foreach\s*\(array\(([\d\s,]+)\)\s*as\s*(?&v)\)\s*\{\s*(?:(?&v)\s*=\s*"\w+";\s*)*\s*(?&v)\s*\.=\s*(?&v)\[(?&v)\];\s*\}\s*(?:\s*(?&v)\s*=\s*[\'"][^\'"]*[\'"];\s*)?)+\s*(?&v)\s*=\s*(?&v)\([creat_fuion"\'\s\.]+\);\s*(?&v)\s*=\s*(?&v)\("[^"]*",\s*(?&v)\s*\(\2\((?&v)\((?&v)\),\s*"([^"]+)"\)\)\);\s*(?&v)\(\);~msi',
            'id' => 'B64Xored',
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?<<<FILE\s*([\w\s+/=]+)FILE;\s*(\$\w{1,50}\s?=\s?(base64_decode\(\1\));)~msi',
            'id' => 'B64AssignedVarContent',
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?\'([^\']+)\';((?:\$\w{1,50}\s?=\s?(?:\1\[[()\d/+*-]+\]\.?)+;)+)\$\w{1,50}\s?=\s?"[^"]+";(?:\$\w{1,50}\s?\.?=\s?\$\w{1,50};)+@?\$\w{1,50}\s?=\s?\$\w{1,50}\(\(\'\'\),\s?\((\$\w{1,50})\)\);@?\$\w{1,50}\(\);~msi',
            'id' => 'dictVarsWithMath',
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?"([^"]+)";\s*class\s?(\w+){\s*var\s?\$\w{1,50};\s*function\s__construct\(\)\s?{\s?\$this->\w{1,50}\(\d+\);\s*}\s*function\s?(\w{1,50})\(\$\w{1,50}\)\s?{\s?\$\w{1,50}\s?=\s?\$_SERVER\[\'HTTP_USER_AGENT\'\];\s?if\s?\(\s?preg_match\(\'/\s?Apple\(\.\*\)\s?\\\\\(/is\',.*?str_replace.*?explode.*?\'0+\';(?:.*?function\s\w{1,50}\([^)]+\){.*?(?:unpack|pack|\$this->|fmod|chr))+.*?return\s\$\w{1,50};[\s}]+(\$\w{1,50})\s?=\s?hex2bin\(\1\);\s?\$\w{1,50}\s?=\s?new\s?\3\(\d+\);\s?(\$\w{1,50})\s?=\s?\$\w{1,50}->\4\(\5\);\s?eval\(\6\);~msi',
            'id' => 'classDecryptedWithKey',
        ],
        [
            'full' => '~((\$\w+)\s*=\s*str_rot13\(base64_decode\(\'([^\']+)\'\)\);\s*(\$\w+)\s*=\s*str_rot13\(base64_decode\(\'([^\']+)\'\)\);\s*\$\w+\s*=\s*\'[^\']+\';)\s*preg_match\(\$\w+\(\$\w+\(\'[^\']+\'\)\),\s*file_get_contents\(__FILE__\),\s*\$\w+\);\s*(eval\(\$\w+\(\$\w+\(\'([^\']+)\'\)\)\);)\s*eval\(\$\w+\(\$\w+\(\'[^\']+\'\)\)\);\s*unset\(\$\w+,\s*\$\w+\);\s*__halt_compiler\(\);\s*\?>\s*\[PHPkoru_Info\]\s*[^\]]+\]\s*\[PHPkoru_Code\]\s*([^\[]+)\[/PHPkoru_Code\]~msi',
            'id' => 'PHPkoru',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*"([^"]+)";\s*(\$\w+)\s*=\s*\$this->(\w+)\("([^"]+)"\);\s*(\$\w+)\s*=\s*\3\(\'\',\s*\$this->\4\(\1\)\);\s*\6\(\);~msi',
            'id' => 'JoomlaInject',
        ],
        [
            'full' => '~((\$\w{1,50})\s*=\s*[\'"]([^"\']+)[\'"];\s*)(?:\$\w{1,50}\s*=\s*fopen\([^)]+\);\s*\$\w{1,50}\s*=\s*fwrite\s?\(\$\w{1,50}\s*|fwrite\(fopen\([^)]+\)),\s*(base64_decode\(\2\))\);~msi',
            'id' => 'fwriteB64Content',
        ],
        [
            'full' => '~(\$\w{1,50})\s*=\s*"([^"]+)";\s*(\$\w{1,50})\s*=\s*base64_decode\(\1\);\s*(\$\w{1,50})\s*=\s*base64_decode\("([^"]+)"\);\s*(\$\w{1,50}\s*=(\s*\3\s*\.\s*\4);)~msi',
            'id' => 'B64concatedVars',
        ],
        [
            'full' => '~(\$\w{1,50})\s*=\s*"(\\\\[\w\\\\]+)";\s*(\$\w{1,50})\s*=\s*@\1\([\'"](\$\w{1,50})[\'"]\s*,\s*"(\\\\[\w\\\\]+)"\);\s*@\3\(([\'"][^\'"]+[\'"])\);~msi',
            'id' => 'slashedCreateFunc',
        ],
        [
            'full' => '~(\$\w{1,50})\s*=\s*"([^"]+)";((?:\$\w{1,50}\s*=\s*(?:\$\w{1,50}\[\d+\]\.?)+;)+@?(?:\$\w{1,50}(?:\[\d+\]\.?)?[,()]*)+;)~msi',
            'id' => 'varDictCreateFunc',
        ],
        [
            'full' => '~@call_user_func\(create_function\([\'"]\s*[\'"],gzinflate\(base64_decode\([\'"\\\\]{1,3}([^\'"\\\\]+)[\'"\\\\]{1,3}\)\)\),[^)]+\);~msi',
            'id' => 'callFuncGzB64',
        ],
        [
            'full' => '~@?(\$\w{1,50})\s*=\s*"([^"]+)";@?(\$\w{1,50})\s*=\s*array\((\d+),(\d+),(\d+),(\d+),(\d+),(\d+)\);@?(\$\w{1,50})\s*=\s*"([^"]+)";@?(\$\w{1,50})\s*=\s*[\'"]{2};for\s*\(\$\w{1,50}\s?=\s?0;\s?\$\w{1,50}\s?<\s?6;\s?\$\w{1,50}\+\+\)\s*{@?\$\w{1,50}\s?=\s?@?\3\[@?\$\w{1,50}\]\s*;@?\12\.=\s?@?\1\[@?\$\w{1,50}\]\s?;\s*}@?\12\(((?:"\\\\x[^"]+"\.?)+)\);~msi',
            'id' => 'assertDictVarEval',
        ],
        [
            'full' => '~function\s+(\w{1,50})\((\$\w{1,50})\)\s*{\s*\$\w{1,50}\s?=\s?"[^"]+";\s?(?:(?:\$\w{1,50}\s?=\s?)+"";)+.*?<<\s?2.*?<<\s?6.*?!=\s?64.*return\s?\$\w{1,50};}\s?function\s+(\w{1,50})\(\$\w{1,50}\){\s*return\s\1\(\$\w{1,50}\);}\s*eval\(\3\(gzinflate\(\3\("([^"]+)"\),0\)+~msi',
            'id' => 'B64FuncEvalGz',
        ],
        [
            'full' => '~(\$\w{1,50})\s*=\s*"([^"]+)";\s*(\$\w{1,50})\s?=\s?(?:[\d\-+*])+;\s*\$\w{1,50}\s?=\s?[\'"]base[\'"]\s?\.\s?\3\.\s?[\'"]_decode[\'"];\s*\$\w{1,50}\s?=\s?\$\w{1,50}\(\$\w{1,50}\);(\$\w{1,50})\s?=\s?@?gzinflate\(\$\w{1,50}\);@?eval\(("\?>"\.?)?\4\);~msi',
            'id' => 'B64Gz',
        ],
        [
            'full' => '~function\s*(\w+)\((\$\w+)\)\s*\{\s*(?:\2=gzinflate\(base64_decode\(\2\)\);|\$\w+\s*=\s*base64_decode\(\2\);\s*\2\s*=\s*gzinflate\(\$\w+\);|(\$\w+)\s*=\s*\'\';)\s*for\s*\(\$\w+\s*=\s*0;\$\w+\s*<\s*strlen\s*\(\2\);\$\w+(?:\+\+|\s*\+=\s*1)\)\s*\{?\s*(?:\2|\3)(?:\[\$\w+\]|\s*\.)\s*=\s*chr\(ord\((?:\2|\3)\[\$\w+\]\)\s*(-?\s*\d+)\);\s*\}?\s*return\s*(?:\2|\3);\s*\}\s*(?:define\("[^"]+",\s*"\w{32}"\);)?(?:eval\(|(\$\w+)\s*=\s*)\1\s*((?:\(\w+)*)\((?|"([^"]+)"|\'([^\']+)\')\)+;(?:\s*call_user_func\(create_function\(\'\',\s*\5\)+;)?~msi',
            'id' => 'deltaOrd',
        ],
        [
            'full' => '~(?(DEFINE)(?\'g\'(?:\$\{)?\$\{"(?:G|\\\\x47)(?:L|\\\\x4c)(?:O|\\\\x4f)(?:B|\\\\x42)(?:A|\\\\x41)(?:L|\\\\x4c)(?:S|\\\\x53)"\}\["[^"]+"\](?:\})?))(?:(?&g)="[^"]+";)+function\s*(\w+)\(\$\w+\)\s*\{(?&g)="[^"]+";(?&g)=gzinflate\(base64_decode\((?&g)\)\);\$\w+="[^"]+";for\((?&g)=0;(?&g)<strlen\((?&g)\);(?&g)\+\+\)\s*\{\$\w+="[^"]+";(?&g)="[^"]+";(?&g)\[\$\{\$\w+\}\]=chr()\(ord\((?&g)\[(?&g)\]\)([\-\+]\d+)\);\}return\$\{\$\w+\};\}()()eval\(\2\("([^"]+)"\)\);~msi',
            'id' => 'deltaOrd',
        ],
        [
            'fast' => '~<\?php\s(?:eval\(")?ob_start\(\);(?:"\))?\s\?>(.*?)<\?php\s(eval\(")?if\(!function_exists\("([^"]+)"\)\)\{function\s\3\(\)\{(\$[^=]+)=str_replace\(array\(([^)]+)\),array\(([^)]+)\),ob_get_clean\(\)\);for\((\$[^=]+)=1,(\$[^=]+)=ord\(\4\[0\]\);\7<strlen\(\4\);\7\+\+\)\4\[\7\]=chr\(ord\(\4\[\7\]\)-\8-\7\);\4\[0\]=\'\s\';return\s\4;\}\}(?:"\))?\s\?>(.*?)<\?php\s(\$[^=]+)=\3\(\);\s*eval\(\10\s*\)\s*(\?>\s*)+~msi',
            'full' => '~(?:<\?php\s*\$\w+\s*=\s*"[^"]+";\s*\?>\s*)?<\?php\s(?:eval\(")?ob_start\(\);(?:"\))?\s\?>(.*?)<\?php\s(eval\(")?if\(!function_exists\("([^"]+)"\)\)\{function\s\3\(\)\{(\$[^=]+)=str_replace\(array\(([^)]+)\),array\(([^)]+)\),ob_get_clean\(\)\);for\((\$[^=]+)=1,(\$[^=]+)=ord\(\4\[0\]\);\7<strlen\(\4\);\7\+\+\)\4\[\7\]=chr\(ord\(\4\[\7\]\)-\8-\7\);\4\[0\]=\'\s\';return\s\4;\}\}(?:"\))?\s\?>(.*?)<\?php\s(\$[^=]+)=\3\(\);\s*eval\(\10\s*\)\s*(\?>\s*)+~msi',
            'id' => 'outputBuffer',
        ],
        [
            'fast' => '~\s*(\$\w+)\s*=\s*[base64_decode"\./\-\*]+;.*?\1(?:.{0,300}?\1\((?:\$\w+|"[^"]+")\))+[^\}]+\}~msi',
            'full' => '~(?:\$\w+\s*=\s*\$_SERVER\["DOCUMENT_ROOT"\]\."/";)?\$\w+\s*=\s*"[^"]+";(?:\$\w+\s*=\s*\$_SERVER\["DOCUMENT_ROOT"\]\."/";)?\s*(\$\w+)\s*=\s*[base64_decode"\./\-\*]+;.*?\1(?:.{0,300}?\1\((?:\$\w+|"[^"]+")\))+[^\}]+\}~msi',
            'id' => 'doorwayInstaller',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*"([^"]+)";\s*(\$\w+)\s*=\s*str_replace\((\w),"","[^"]+"\);\s*\3\(\'[eval\'.]+\(\'[base64_dcod\'.]+\(\'[gzinflate.\']+\(\'[base64_dcod\'.]+\(\'[^\)]+\)[^;]+;~msi',
            'id' => 'strReplaceAssert',
        ],
        [
            'full' => '~(?:(\$\{\'GLOBALS\'\}\[\'[^\']+\'\])=\'\w+\';\s*)+.*\1\};\}~msi',
            'id' => 'anaLTEAMShell',
        ],
        [
            'full' => '~(\$\w+)=\'[function_exis\'\.]+;\$\w+=\'[charodet\'\.]+;(\$\w+)=\'[eval\'\.]+;(\$\w+)=\'[gzinflate\'\.]+;(if\(!\1\(\'[base64_dcon\'\.]+\)\)({([^{}]*+(?:(?5)[^{}]*)*+)})else{function\s*[^}]+\}\})+(\$\w+)=\'[create_funion\'\.]+;(\$\w+)\s*=\s*\7\(\'([^\']+)\',\2\.\'\(\'\.\3\.\'\(\'\.\'[^(]+\(\9\)\'\.\'\)\'\.\'\)\'\.\';\'\);\8\("([^"]+)"\);~msi',
            'id' => 'zeuraB64Gzinflate',
        ],
        [
            'full' => '~function\s*(\w+)\((\$\w+)\)\{((?:(\$\w+)\s*=\s*str_replace\(\'[^\']+\',\'[^\']+\',\'[^\']+\'\);\s*)+)return\s*(\$\w+\(\'\',\$\w+\(\2\)\);)\}(\$\w+)\s*=\'([^\']+)\';(\$\w+)=\1\(\6\);\8\(\);~msi',
            'id' => 'strReplaceFunc',
        ],
        [
            'full' => '~(\$\w+)=array\(array\(((?:\'[^\']+\',?)+)\)\);\s*(?:/\*[^\*]+\*/)?(\$\w+)(?:/\*[^\*]+\*/)?[^\?]+\?>\s*\.\s*base64_decode\s*\(\s*str_rot13\s*\(\s*join\s*\(\s*\'\'\s*,\s*\3\s*\)\s*\)\s*\)\s*\.\s*\'[^\']+\'\s*\);(?:/\*[^\*]+\*/)?\s*(\$\w+)=array_walk\s*\(\1,\$\w+\);~msi',
            'id' => 'arrayMapB64',
        ],
        [
            'full' => '~preg_replace\(\'/\.\+\/e\',str_replace\("([^"]+)","([^"])*","([^"]+)"\),\'\.\'\);~msi',
            'id' => 'pregReplaceStrReplace',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*(base64_decode\("([^"]+)"\));\s*(\$\w+)\s*=\s*(base64_decode\("([^"]+)"\));\s*echo\s*"[^"]+";\s*if\s*\(\$\w+\s*==\s*"[^"]+"\)\s*\$\w+\s*=\s*"[^"]+"\.\4\."[^"]+"\.\1;~msi',
            'id' => 'echoB64',
        ],
        [
            'full' => '~(\$\w+\s*=\s*"[^"]+"\^"[^"]+";)+\$\w+\s*=\s*\(?(?:@?\$\w+\()+\'([^\']+)\'\)+;(\$\w+\s*=\s*"[^"]+"\^"[^"]+";)+(\$\w+)\s*=\s*\(?(?:@?\$\w+\()+\'\$\w+\',"[^"]+"\^"[^"]+"\);@?\4\(\$\w+\);~msi',
            'id' => 'createFuncXored',
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?array\(((?:\'[^\']\',?)+)\);\s?(?:\$\w{1,50}\s?=\s?(?:\1\[\d+\]\.?)+;\s?)+(\$\w{1,50})\s?=\s?((?:\$\w{1,50}\.?)+)\'(\$\w{1,50})\'\.(?:\1\[\d+\]\.?)+;\5\s?=\s?"([^"]+)";\s?@?eval\(\3\);~msi',
            'id' => 'evalDictArrayConcat',
        ],
        [
            'full' => '~(?:(?:\$\w+="[^"]+"|\$\w+="[a-f0-9\\\\x]+"\^"[a-f0-9\\\\x]+"|\$\w+=(?:"[^"]+"\.?)+);)+\$\w+=(?:\$\w+\.?)+;\s*(\$\w+)\("/(\w+)/e",(\$\w+),"\2"\);(?:\s*\1\("/(\w+)/e",(\$\w+),"\4"\);)?~msi',
            'id' => 'pregReplaceXored',
        ],
        [
            'full' => '~\$\w{1,5}=\'([a-z0-9+/=]{1,100}\s[a-z0-9+/=\s]+)\';(\$\w)=["\']_COOK[\\\\x0-9]{1,10}";\s*if\(!empty\(\${\2}\[["\']key["\']\]\)\){(?:\$\w=[^;]{1,30};\s*){1,5}for\([^)]{1,40}\)(?:\$\w\[?\]?=[^;]{1,30};\s*){1,5}for\([^)]{1,40}\){[^}]{1,150}}if[^;]{1,50};\s*if\(\(\$\w=@?gzinflate\(\$\w\)\)&&\(md5\(substr\(\$\w,\d,\$\w\)\)===\'([a-f0-9]{32})\'\)\){\$\w{1,5}=[^;]{1,100};if\(PHP_VERSION<\'5\'\){[^}]{1,1000}}@create_function\(\'\',"[^"]{1,100}"\.\$\w{1,5}\.\'{\'\);}}\s*DIE\(.{1,500}>"\);~msi',
            'id' => 'base64EncryptedGz',
        ],
        [
            'full' => '~error_reporting\(0\);function\s*(\w+)\((\$\w+)\)\s*\{\s*return\s*strtr\(\2,\s*\'((?:(?=(?:\\\\)*)\\\\.|.)*?)\',\s*\'((?:(?=(?:\\\\)*)\\\\.|.)*?)\'\s*\);\s*\s*\}eval\(\1\(\'([^\']+)\'\)\);(\$\w+)\s*=\s*((?:\$\w+\[\d+\]\()+\'[^\']+\'\)+;)\$\w+\[\d+\]\(\6\);~msi',
            'id' => 'Bloos3rpent',
        ],
        [
            'full' => '~(@?eval\(@?gzinflate\(base64_decode\(preg_replace\(\'([^\']+)\',\s*\'([^\']*)\',\s*\'([^\']+)\'\)+;)\s*(preg_replace\("/(\w+)/e".\s*\'\')@?eval\(@?gzinflate\(\w+\(base64_decode\((preg_replace\(\'([^\']+)\',\s*\'([^\']*)\',\s*)\'([^\']+)\'\)+;(\'\',"\6"\);)~msi',
            'id' => 'doublePregReplace',
        ],
        [
            'full' => '~(\$\w+)="([^"]+)";(\$\w+)=array\(((?:\d+,?)+)\);(\$\w+)="([^"]+)";(\$\w+)="";for\s*\((\$\w+)=0;\8<\d+;\8\+\+\)\{(\$\w+)=\3\[\8\]\s*;\s*\7\.=\s*\1\[\9\]\s*;\s*\}\7\("eval\(base64_decode\(gzinflate\(base64_decode\(\5\),0\)\)\)"\);~msi',
            'id' => 'zeura2',
        ],
        [
            'full' => '~(\$\w+)="([\\\\a-fx0-9])+";(\$\w+)="([\\\\a-fx0-9])+";(\$\w+)=\1\("",\3\("([^"]+)"\)\);\5\(\);~msi',
            'id' => 'createFuncEscaped',
        ],
        [
            'full' => '~error_reporting\s*\(0\);\s*function\s*([^\(]+)\(\)\s*\{\s*\$[^= ]+\s*=\s*[0-9a-fx]+;\s*\$[^= ]+\s*=\s*func_get_args\s*\(\);\s*if\s*\(+\$[^}]+}\s*if\s*\(+[^{]+\{\s*return\(+parse_str\("[^=]+=([^"]+)",[^}]+\}\s*\}\s*function\s*([^(]+)\(\)\{\s*\$[^=]+=func_get_args\(\);\s*\$[^=]+=[0-9a-fx]+;(\s*if\s*\([^}]+\})+\s*\}\s*function\s*([^(]+)\(\$[^)]+\)\s*{[^}]+\}\s*return\s*\$[^;]+;\s*\}\s*eval\(\5\(\1\([0-9a-fx]+,[0-9a-fx]+\)+;~msi',
            'id' => 'maskedDeltaOrd',
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?(?:chr\(-?\d{1,5}[+\-*^/]-?\d{1,5}\)\s?\.?)+;\s?(\$\w{1,50})\s?=\s?"((?:[^-]-m\s+){10}[^"]+)";\s?\$\w{1,50}\s?=\s?\w{1,50}\(\s?\1\s?\(\s?array\("-m\s",\s?PHP_EOL\),\s?"",\s?\2\)\);\s?function\s?\w{1,50}\s?\((\$\w{1,50})\s?\){\s?.*?\$\w{1,50}\(\4\);}\s?\$\w{1,50}\s?=\s?(?:chr\(-?\d{1,5}[+\-*^/]-?\d{1,5}\)\s?\.?)+;\s?(\$\w{1,50})\s?=\s?"([^"]+)";\s?(\$\w{1,50})\s?=\s?array\(\);\s?for\s?\((\$\w+)\s?=0;\s?\8\s?<\s?256;\s?\+\+\8\)\s?{\s?\7\s?\[\8\]\s?=\s?\8;\s?}\s?\$\w{1,50}\s?=\s?0;\s?for\s?\(\8\s?=0;\s?\8\s?<\s?256;\s?\+\+\8\)\s?{.*?ord\(\$\w{1,50}\s?\[\$\w{1,50}\s?%\s?(\d+)\]\)\)\s?%\s?256;.*?for\s?\(.*?<(\d+);\s?\+\+\$\w{1,50}\).*?}\s?\$\w{1,50}\s?=\s?\4;\s?\$\w{1,50}\s?=\s?(?:chr\(-?\d{1,5}[+\-*^/]-?\d{1,5}\)\s?\.?)+;\s?\$\w{1,50}\("/\w+/e",\s?(?:chr\(-?\d{1,5}[+\-*^/]-?\d{1,5}\)\s?\.?)+,"\w+"\);~msi',
            'id' => 'decodeStrMultiForDict',
        ],
        [
            'full' => '~(?:\$\w{1,50}\s?=\s?\'[^\']+\';\s?)+(?:\$\w{1,50}\s?=\s?str_replace\([\'"][^\'"]+[\'"],\s?["\']{2},\s?[\'"][^\'"]+[\'"]\);\s?){2}(\$\w{1,50})\s?=\s?\$\w{1,50}\(\$\w{1,50}\([\'"][^\'"]+[\'"]\),\s?\$\w{1,50}\([\'"]([^\'"]+)[\'"]\)\);\s?\1\(((?:\$\w{1,50}\s?\.?)+)\);~msi',
            'id' => 'B64ConcatedStrVars',
        ],
        [
            'full' => '~\$\w{1,50}\s?=\s?(\w{1,50})\s?\(array\((?:\d+,?)+\)\);\s?\$\w{1,50}\s?=\s?\1\(array\((?:\d+,?)+\)\);\s?\$\w{1,50}\s?=\s?fopen\(\$\w{1,50},\s?\1\(array\((?:\d+,?)+\)\)\);\s?\$\w{1,50}\s?=\s?fputs\(\$\w{1,50},\s?\$\w{1,50}\);\s?fclose\(\$\w{1,50}\);\s?function\s?\1\(\s?array\s?(\$\w{1,50})\)\s?{\s?if\(\2\)\s?{\s?foreach\s?\(\2\s?as\s?\$\w{1,50}\)\s?{\s?\$\w{1,50}\s?\.=\s?chr\(\$\w{1,50}\);\s?}\s?}\s?return\s?\$\w{1,50};\s?}~msi',
            'id' => 'chrFuncVars',
        ],
        [
            'full' => '~((?:\$\w{1,50}\s?=\s?(?:"[^"]+"\.?)+;)+)\$\w{1,50}\((?:"[^"]+"\.?)+,((?:\$\w{1,50}\()+(?:"[^"]+"\.?)+\)\))\s?,\s?(?:"[^"]+"\.?)+\);~msi',
            'id' => 'concatVarsFuncs',
        ],
        [
            'full' => '~\$GLOBALS\[\'(\w+)\'\];\s*global\s*\$\1;\s*\$\1=\$GLOBALS;(\$\1\[\'(\w+)\']="([^"]+)";)\s*(?:@?\$\1\[(\$\1\[\'\3\'\]\[\d+\]\.?)+\]\s*=(?:\s*(?:\$\1\[\'\3\'\]\[\d+\]\.?)+|\$_POST|\$_COOKIE);\s*)+(?:.{1,120}\$\1\[\'\3\'\])+[^}]+\}exit\(\);\}~msi',
            'id' => 'globalDictVar',
        ],
        [
            'full' => '~\$\w+\s*=\s*\'(\w+)\'\^[^;\']+;\s*(\$\w+)\s*=\s*\w+\&\'[^\';]+\';\s*.*?\2\&\s*[^;]+;\s*\$\w+\s*=\s*\$\w+\&\$\w+;\s*\$\w+\s*=\s*[^;]+;\s*(?:\$\w+\s*=\s*\$\w+\&\$\w+;\s*)+if\s*\(\!(?:\$\w+\s*\()+[^;]+;\s*\'[^\']+\';~msi',
            'id' => 'garbageVars',
        ],
        [
            'full' => '~\$\w+\s*=(?:\s*chr\(-?\d+\^-?\d+\)\s*\.?\s*)+;\s*\$\w+\s*=\s*(?:<<<\'(\w+)\'\s*(.*?)\1|"([^"]+)");\s*\$\w+\s*=\s*(\w+)\((?:\s*\$\w+\s*\(\s*array\("([^"]+)"\),"",\$\w+\)|\s*\$\w+\s*\(\$\w+\))\);\s*function\s*\4\s*\(\$\w+\)\s*\{\s*(?:\$\w+=(?:chr\(-?\d+\^-?\d+\)\s*\.?)+;\s*)+\$\w+=\&\$\w+;\s*\$\w+\.=\$\w+;return\s*\$\w+\(\$\w+\);\}\s*\$\w+\s*=(?:\s*chr\(-?\d+\^-?\d+\)\s*\.?)+;\s*\$\w+\s*=\s*"([^"]+)";\s*(?:\s*\$\w+\s*=\s*array\(\);)?(?:(?:\s*for\s*\(\$\w+=0;\s*\$\w+<\d+;\s*\+\+\$\w+\)\s*\{\s*[^}]+\}(?:\s*\$\w+\s*=\s*(?:0;|\$\w+;))+)+|for\(\$\w+\s*=\s*0;\$\w+<\d+;\+\+\$\w+\)\{\s*\$\w+\{\s*\$\w+\}=\$\w+\{\s*\$\w+\}\^\$\w+\{\s*\$\w+%\d+\};\}\s*\$\w+\s*=\s*\$\w+;)\s*\$\w+\s*=\s*(?:chr\(-?\d+\^-?\d+\)\s*\.?\s*)+;\s*\$\w+\("/(\w+)/e",\s*(?:chr\(-?\d+\^-?\d+\)\s*\.?\s*)+,"\7"\);~msi',
            'id' => 'chrMinXor',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*"([^;]+;)";\s*@assert\(\1\);~msi',
            'id' => 'assertUrlDecode',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*array\(\'([^\)]+)\'\);\$\w+\s*=\s*array\(\'[base64_dco\'\.,]+\)\s*;\s*\$\w+\s*=\s*array\([gzuncompres\'\.,]+\)\s*;\s*(?:\$\w+\s*=\s*\$\w+\[\d\]\.\$\w+\[\d\];\s*)+eval\((?:\$\w+\()+implode\(\'\',\s*\1\)+;~msi',
            'id' => 'implodeB64Gz',
        ],
        [
            'full' => '~((?:\$\w+\s*=\s*"\w";\s*)+)((?:\$\w+\s*=(?:\s*\$\w+\s*\.?)+;\s*)+)(eval\((?:\$\w+\()+"[^"]+"\)+;)~msi',
            'id' => 'X12',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*function\((\$\w+)\)\s*\{\s*return\s*strtr\(\2,\s*"([^"]+)",\s*"([^"]+)"\);\s*\};\$\w\s+=\s*\$\w+\("([^"]+)"\);\$\w+\s*=\s*\$\w+\(\);\$\w+\s*=\s*\$\w+\[\1\("([^"]+)"\)\];foreach\s*\(\$\w+\s*as\s*\$\w+\s*=>\s*\$\w+\)\s*\{[^}]+\}(?:if\s*\([^}]+})+\}(\$\w+)\s*=\s*\$\w+\("",\s*(?:\$\w+\()+"([^"]+)"\)+;\7\(\);~msi',
            'id' => 'WpNightmare',
        ],
        [
            'full' => '~preg_replace\(\'/(\w+)/e\',strrev\(\'\)\)\\\\\'([^\']+)\'\([base64_dco(val]+\'\),\'\1\'\);~msi',
            'id' => 'pregB64Strrev',
        ],
        [
            'full' => '~global\s(\$[^;]+);if\(!defined\([\'"][^\'"]+[\'"]\)\){define\([\'"][^\'"]+[\'"],__FILE__\);function\s?([^(]+)\((\$[^,]+),(\$[^=]+)=[\'"]{2}\){global\s?\1;\3=base64_decode\(\3\);if\(empty\(\3\)\)\s?return\s?[\'"]{2};if\(\4==[\'"]{2}\){return\s?\~\3;}else{(\$[^=]+)=\1\[\'([^\']+)\'\]\(\3\);\4=\1\[\'([^\']+)\'\]\(\4,\5,\4\);return\s?\3\^\4;}}}((?:(?:\1\[\'[^\']+\'\]=\2\(\'[^\']+\',\'[^\']*\')\);)+)(?:\1\[\'[^\']+\'\]=isset[^;]+;)+(eval\(\1\[\'([^\']+)\'\]\(\'([^\']+)\'\)\);)return;\?>~msi',
            'id' => 'utfCharVarsFuncEval',
        ],
        [
            'full' => '~(?:\$\w{1,50}\s?=\s?[\'"][^\'"]+[\'"];\s?)+(\$\w{1,50})\s?=\s?(?:\d+[\+]*)+;.*?\$\w{1,50}\s?=\s?(\w+)\([\'"][^\'"]+[\'"],\s?\1,\s?[\'"][^\'"]+[\'"]\);.*?(\$\w{1,50})\s?=\s?(\$\w{1,50})\(\'\$\w{1,50}\',\s?(\$\w{1,50})\((\$\w{1,50})\((\$\w{1,50}),\s?[\'"](\d+)[\'"]\)\)\);(?:\$\w{1,50}\s?=\s?[\'"][^\'"]+[\'"];\s?)+\$\w{1,50}\(\$\w{1,50},\$\w{1,50}\([\'"]{2},\s?\3\(\$\w{1,50}\(\5\(\6\(\7,\s?[\'"](\d+)[\'"]\)\)\)\)\),\$\w{1,50}\);(?:\$\w{1,50}\s?=\s?[\'"][^\'"]+[\'"];)+\s?function\s\2\(.*return\s\$\w{1,50};}(?:\$\w{1,50}\s?=\s?[\'"][^\'"]+[\'"];\s?)+~msi',
            'id' => 'manyVarFuncCreateFuncWrap',
        ],
        [
            'full' => '~class\s*(_\w{1,20})\s*{\s*private\sstatic\s*\$_\w{1,10};\s*static\s*function\s*(\w{1,3})\s*\(\$_\w{1,20}\)\s*{\s*if\s*\([^)]{1,20}\)\s*:\s*self::\w{1,2}\(\);\s*endif;\s*return\s*self::\$_\w{1,10}\[\$_\w{1,10}\];\s*}\s*private\s*static\s*function\s*\w{1,2}\(\)\s*{\s*self::\$_\w{1,10}=array\(([^\)]{1,500})\);\s*}\s*}\s*\$GLOBALS\[["\']([^\]]{32,120})["\']\]=array\(([^)]{1,500})\);((?:\s*\$GLOBALS\["[_\w\d\\\]{1,120}"\]=base64_decode\([^)]{1,140}\)\s*;\s*)+)\s*class\s*(_\w{1,10})\s*{\s*private\s*static\s*\$_\w{1,10};\s*static\s*function\s*(\w{1,10})\([^)]{1,30}\)\s*{[^}]{1,900}\s*}private\s*static\s*function\s*\w{1,10}\(\)\s*{\s*self::\$_\w{1,10}=array\(([^)]{1,2300})\);\s*}\s*}\s*(.*;\s*;)~msi',
            'id' => 'twoCalcClasses',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*array\(((?:[\'"][\w\$\)\;\(][\'"],?)+)\);\s*(\$\w+)\s*=\s*create_function\(\'([\$\w\'\.]+)\',((?:\1\[\d+\]\.?)+)\);\s*\3\(\'([^\']+)\'\);~msi',
            'id' => 'createFuncArray',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*"([^"]+)";\s*function\s*(\w+)\(\)\s*\{\s*return\s*str_ireplace\("([^"]+)",\s*"([^"]+)",\s*"([^"]+)"\);\s*\}\s*(\$\w+)=strtr\("([^"]+)",\s*"([^"]+)",\s*"([^"]+)"\);\s*(\$\w+)\s*=\s*\3\(\);\s*(\$\w+)\s*=\s*\11\(\'\',\s*\7\(\1\)\);\s*\12\(\);~msi',
            'id' => 'createFuncReplaceB64',
        ],
        [
            'full' => '~((?:\$\w+\s*=\s*([lr]?trim)\(\'[^\']+\',\'[^\']+\'\);\s*)+)(\$\w+)\s*=\s*((?:\$\w+\s*\.?\s*)+);\s*(\$\w+)\s*=\s*\3\(\'([^\']+)\'\);\s*eval\((\$\w+=\&?)?\5\);~msi',
            'id' => 'evalTrim',
        ],
        [
            'full' => '~function\s*(\w+)\(\)\s{\s*(\$\w+\s*=\s*\'[^\']{32}\';\s*)(\$\w+)\s*=\s*\'([^\']+)\';\s*(((\$\w+)\s*=\s*(?:\3\[\d+\]\.?)+;\s*)+)\$\w+\(\7,\3\[\d+\]\."([^,]+)",\'\'\);\}\s*@?\1\(\);~msi',
            'id' => 'funcDictB64',
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?[base64dco_"\'.]+;\s?(\$\w{1,50})\s?=\s?["\'gzinflate.]+;\s?(\$GLOBALS\[\'[^\']+\'\]\s?=\s?\$\w{1,50}\s?=\s?)unserialize\(\2\(\1\(join\(\'(\w+)\',array\(((?:\'[^\']*\',?\s?)+)\)+;~msi',
            'id' => 'unserializeB64GzJoinArr',
        ],
        [
            'full' => '~(\$\w{1,50})=\(?[\'"]([^\'"]+)[\'"]\);\s?((?:\$\w{1,50}=[\'"][^\'"]+[\'"];\s?)*(?:\$\w{1,50}=(?:\1{\d{1,5}}\.?)+;)+)\$\{"[^"]+"}\["[^"]+"\]\(\d\);{1,2}(?:.*?echo\s?.*?unset.*?exit\(\);)+[^;]+;\${"[^"]+"}\["[^"]+"]\(\);~msi',
            'id' => 'dictVarsContent',
        ],
        [
            'full' => '~(\${[\'"]GLOBALS[\'"]}\[[\'"](\w{1,50})[\'"]\])=[\'"](\w{1,50})[\'"];if\(isset\(\$_GET\[[\'"]\w{1,50}[\'"]\]\)&&\$_GET\[[\'"]\w{1,50}[\'"]\]==[\'"]\w{1,50}[\'"]\){((\${[\'"]GLOBALS[\'"]}\[[\'"]\w{1,50}[\'"]\])=[\'"]\w{1,50}[\'"];(\${[\'"]GLOBALS[\'"]}\[[\'"]\w{1,50}[\'"]\])=[\'"]\w{1,50}[\'"];(?:\$\w{1,50}=[\'"]\w{1,50}[\'"];)\${\1}=[\'".creat_funio]+;\${\5}=\$\3\(\'(\$\w{1,50})\',[\'".eval]+\(\\\\?\'\?>\\\\?\'\.[\'".base64_dco]+\(\7\)\);\'\);\${\6}\([\'"]([^\'"]+)[\'"]\);)exit;}~msi',
            'id' => 'globalsCreateFuncEvalB64',
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?["\']([^"\']+)[\'"];\s?\$\w{1,50}\s?=\s?[\'"]{2};\s?foreach\s?\(\[[^]]+\]\s?as\s?\$\w{1,50}\)\s?{\s?\$\w{1,50}\s?\.=\s?\$\w{1,50}\[\$\w{1,50}\];\s?}\s?if\s?\(isset\(\$_REQUEST\["{\$\w{1,50}}"\]\)\)\s?{\s?\$\w{1,50}\s?=\s?\$_REQUEST\["{\$\w{1,50}}"\];\s?(?:\$\w{1,50}\s?=\s?["\']{2};\s?)+(?:foreach\s?\(\[[^]]+\]\s?as\s?\$\w{1,50}\)\s?{\s?\$\w{1,50}\s?\.=\s?\$\w{1,50}\[\$\w{1,50}\];\s?}\s?)+\$\w{1,50}\s?=\s?\$\w{1,50}\((?:[^)]+)\);\s?\$\w{1,50}\s?=\s?\$\w{1,50}\([\'"]{2},\s?\$\w{1,50}\(\$\w{1,50}\)\);\s?\$\w{1,50}\(\);\s?exit;\s?}~msi',
            'id' => 'dictForeachVars',
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?[\'".\sgzinflate\dxa-fhr\(\)\\\\]+;\s?(\$\w{1,50})\s?=[\'".\sbase64_dcod\dxa-fhr\(\)\\\\]+;\s?(\$\w{1,50})\s?=\s?\1\(\2\((?:str_replace\("[^"]+",\s?"",\s?)?[\'"]([^\'"]+)[\'"]\)\)\)?;\s?echo\s?(?:"{\${)?\s?eval\(\3\)\s?(?:}}")?;~msi',
            'id' => 'echoEvalGzB64Var',
        ],
        [
            'full' => '~eval\(((?:str_rot13|strrev))\(\s*\'((?:.*?\\\\\')+[^\']+)\'\s?\)\);~msi',
            'id' => 'evalFuncCode',
        ],
        [
            'full' => '~eval\(openssl_decrypt\(\s?base64_decode\([\'"]([^\'"]+)[\'"]\),\s?[\'"]([^\'"]+)[\'"],\s?base64_decode\([\'"]([^\'"]+)[\'"]\),\s?OPENSSL_RAW_DATA,\s?base64_decode\([\'"]([^\'"]+)[\'"][^;]+;~msi',
            'id' => 'evalOpenSslDecrypt',
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?urldecode\(\'([^\']+)\'\);function\s\w{1,50}(?:.*?(?:\1{\d+}\.?)+)+;~msi',
            'id' => 'urldecodedDictVarReplace',
        ],
        [
            'full' => '~global\s*\$(\w+);((?:\$\1\[\'[^\']+\'\]=base64_decode\(\'[^\']+\'\);)+)[\s\?\>\<ph]{0,10}((?:.+?\$GLOBALS\[\'\1\'\]\[\'[^\']+\'\][^;]+;)+}?(?:(?:if\s*\([^}]+})+return\s*[^}]+\}+|(?:.{1,250}?base64_decode\(\'[^\']+\'\))+[^}]+\}+)?)~msi',
            'id' => 'zymdecrypt',
        ],
        [
            'full' => '~function\s*(\w+)\((\$\w+)\)\s*\{\s*(?:(\$\w+)=strrev\(\2\);\s*\2=base64_decode\(\3\);\s*)+return\s*\((?:"\?\>"\s*\.\s*)?\2\);\s*\}\s*(eval\(\1\("[^"]+"\)\);)~msi',
            'id' => 'funcRevB64',
        ],
        [
            'full' => '~error_reporting\(\d\);\s?(\$\w{1,50})=create_function\(null,gzinflate\(convert_uudecode\("([^"]+)"\)\)\);\1\(\);~msi',
            'id' => 'createFuncGzConvertUudecode',
        ],
        [
            'full' => '~\$GLOBALS\["[^"]+"\]=Array\(\);\s?\?><\?php\sif\s?\(\!function_exists\("(\w{1,50})"\)\)\s?{function\s?\1\(\$\w{1,50}\){\$\w{1,50}=Array\(((?:[\'"][^"\']+[\'"]\s?\.?)+)\);return\sbase64_decode\(\$\w{1,50}\[\$\w{1,50}\]\);}}\s?\?><\?php\s?if\(isset\(\$GLOBALS\[\1\(0\)\]\)\)return;\s?\?><\?php\sfunction\s(\w{1,50})\(\$\w{1,50}\)\s?{\$\w{1,50}=Array\(((?:(?:[\'"][^"\']*[\'"]\s?\.?)+,?)+)\);return\sbase64_decode\(\$\w{1,50}\[\$\w{1,50}\]\);}\s?(?:.*?\3\(\d{1,5}\))+.*?\?>~msi',
            'id' => 'globalsArrayFuncs',
        ],
        [
            'full' => '~ini_set\([\'"][^\'"]+[\'"],\s?[\'"][^\'"]+[\'"]\);(\$\w{1,50})\s?=\s?array\(((?:[\'"][^\'"]+[\'"]\s?=>(?:\s?(\w{1,50})\(\d{1,5}\)\.?|\s?\$\w{1,50})+,?)+)\);.*?function\s\3\(\$\w{1,50}\){return\schr\(\$\w{1,50}\);}(?:.*?\1\[[\'"][^\'"]+[\'"]\])+.*?return\s\$\w{1,50};}\s?\w{1,50}\(\);~msi',
            'id' => 'varArrayChrFunc',
        ],
        [
            'full' => '~error_reporting\(\d{1,5}\);\s?function\s(\w{1,50})\(\$\w{1,50}\)\s?{\s?\$\w{1,50}\s?=\s?base64_decode\(\$\w{1,50}\);\s?\$\w{1,50}\s?=\s?openssl_decrypt\("\$\w{1,50}",\s?[\'"]AES-256-CBC[\'"],\s?[\'"]([^\'"]+)[\'"],\s?0,\s?[\'"]([^\'"]+)[\'"]\);return\s\$\w{1,50};\s?}(\$\w{1,50})\s?=\s?([\'"][^\'"]+[\'"]);.*?(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];\s?eval\(\1\(\6\)\);~msi',
            'id' => 'evalOpensslDecryptStr',
        ],
        [
            'full' => '~error_reporting\(\d{1,5}\);\s?function\s(\w{1,50})\(\)\s?{\s?(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];\s?\$\w{1,50}\s?=\s?((?:(?:\2\[\d{1,5}\]|[\'"][(_\\\\\'"]+[\'"])\s?\.?\s?)+);\sreturn\s\$\w{1,50};\s?}\s?eval\(\1\(\)\s?\.\s?([\'"][^\'"]+[\'"]\)+;)[\'"]\);~msi',
            'id' => 'evalDictionaryFuncVar',
        ],
        [
            'full' => '~(?:\$\w+=base64_decode\((?:(?:chr\(\d+\)|"[\w=]"|\'[\w=]\')\.?)+\);)+(?:(?:update_option\(|\$\w+=)\$\w+\([^;]+;)+~msi',
            'id' => 'manyBase64DecodeChr',
        ],
        [
            'full' => '~define\((?:base64_decode\()+[\'"][^\'"]+[\'"]\)+,\s?__FILE__\);\s?\${(?:base64_decode\()+[\'"][^\'"]+[\'"]\)+}\s?=\s?(?:base64_decode\([\'"][^\'"]+[\'"]\));\s?(?:\${(?:base64_decode\()+[\'"][^\'"]+[\'"]\)+}\s?\.?=\s?(?:\${(?:base64_decode\()+[\'"][^\'"]+[\'"]\)+}\[[\d\-\+\s(\)]+\]\s?\.?\s?)+;\s?)+eval\(\${(?:base64_decode\()+[\'"][^\'"]+[\'"]\)+}\([\'"][^\'"]+[\'"]\)+;~msi',
            'id' => 'manyB64CalcEval',
        ],
        [
            'full' => '~(\$[^ =]+)\s*=\s*\'([^\']+)\';\s*([^(]+)\(\1\);\s*function\s*\3\((\$[^\)]+)\)\{\s*(\$[^= ]+)\s*=\s*\'[base64_dco.\']+;\s*(\$[^= ]+)\s*=\s*array\(((?:(?:\'[\w+@\)#%\(\$\*;]\'|\5\(\'[^\']+\'\)),?)+)\);\s*((?:(\$[^= ]+)\s*=\s*(?:\6\[\d+\]\.?)+;\s*)+)(\$[^= ]+)\s*=\s*([^;]+);return\s*eval\(\10\);\s*\}~msi',
            'id' => 'da7Q9RnPjm',
        ],
        [
            'full' => '~(?:\$\w{1,50}\s?=\s?(?:[\'"][^\'"]+[\'"]|(?:str_replace|\$\w{1,50})\([\'"][^\'"]+[\'"],\s*[\'"][^\'"]*[\'"],\s*[\'"][^\'"]+[\'"]\));\s*)+(\$\w{1,50}\s?=\s?\$\w{1,50}\([\'"]{2},\s*((?:\$\w{1,50}\()+)[\'"]([^\'"]+)[\'"],\s?[\'"]{2},\s?((?:\$\w{1,50}\.?)+)\)+;)~msi',
            'id' => 'strReplaceVarsCreateFunc',
        ],
        [
            'full' => '~(?:\$\w+\s*=\s*\'[^\']+\';\s*)+\$\w+=(?:\$\w+(?:\[\'?\d+\'?\])?\s*\.?\s*)+;\s*(\$\w+)\s*=\s*\$\w+;\s*(\$\w+)\s*=\s*\$\w+\(\1,(?:\$\w+(?:\[\'?\d+\'?\])?\s*\.?\s*)+\);\s*\2\s*\((?:\$\w+(?:\[\'?\d+\'?\])?\s*\.?,?\s*)+\);~msi',
            'id' => 'createFuncDict',
        ],
        [
            'full' => '~(\$\w+)=\'create_function\';(\$\w+)=\'\s*\';(\$\w+)=\1\(\2,\'eval\(array_pop\(func_get_args\(\)+;\'\);\3\((?:(\'[^\']+\',?)+)\);~msi',
            'id' => 'createFuncArrayPop',
        ],
        [
            'full' => '~error_reporting\(\d\);\s*(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];\s*(?:\$\w{1,50}\s?=\s?base64_decode\([\'"][^\'"]+[\'"]\);\s?)+(?:\$\w{1,50}\s?=\s?\$\w{1,50}\(\1\);\s?)+(\$\w{1,50})\s?=\s?[\'"]{2};\s?for\(\$\w{1,50}\s?=\s?0\s?;\s?\$\w{1,50}\s?\<\s?\$\w{1,50}\s?;\s?\$\w{1,50}\+\+\s?\){\3\s?\.=\s?(\$\w{1,50})\({1,5}(\$\w{1,50})\(\$\w{1,50}\[\$\w{1,50}\]\)\s?\^\s?(\d{1,20})\)+\s?;\s?}\s?eval\s?\(\3\);\s?return;~msi',
            'id' => 'chrOrdB64FuncVars',
        ],
        [
            'full' => '~class\s(\w{1,50})\s{0,10}{\s{0,10}private\sstatic\s(\$\w{1,50});\s{0,10}static\sfunction\s(\w{1,50})\((\$\w{1,50}),\s?(\$\w{1,50})\)\s?{\s?if\s?\(!self::(\$\w{1,50})\):\s?self::(\w{1,50})\(\);\s?endif;\s?(\$\w{1,50})\s?=\s?strlen\(\5\);\s?(\$\w{1,50})\s?=\s?base64_decode\(self::\2\[\4\]\);\s?for\s?\((\$\w{1,50})\s?=\s?0\s?,\s?(\$\w{1,50})\s?=\s?strlen\(\9\);\s?\10\s?!==\s?\11;\s?\+\+\10\):\s?\9\[\10\]\s?=\s?chr\(ord\(\9\[\10\]\)\s?\^\s?ord\(\5\[\10\s?%\s?\8\]\)\);\s?endfor;\s?return\s\9;\s?\}\s?private\sstatic\sfunction\s\7\(\)\s?{\s?self::\6\s?=\s?array\(((?:[^=]+=>[^,]+)+)\);\s?}\s?}((?:.*?\1::\3\([^)]+\))+[;}\s]+)~msi',
            'id' => 'classArrayDictFunc',
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?[\'"]{2};\s?(\$\w{1,50})\s?=\s?[\'"]{2};\s?((?:\2\s?\.=\s?"[^"]+";\s?)+)(\$\w{1,50})\s?=\s?"((?:[^";]+;?"?)+)"\s?;\s?(\$\w{1,50})\s?=\s?"((?:[^";]+;?"?)+)"\s?;\s?foreach\(str_split\(\2\)\s?as\s?(\$\w{1,50})\)\s?{\s?\1\s?\.=\s?\(strpos\(\6,\s?\8\)\s?===\s?false\)\s?\?\s?\8\s?:\s?\4\[strpos\(\6,\s?\8\)\];\s?}\s?\1\s?=\s?"\?>\1"\s?;\s?eval\(\s?\1\s?\);~msi',
            'id' => 'concatVarsIterDict',
        ],
        [
            'full' => '~function\s(\w{1,50})\((\$\w{1,50}),\s?(\$\w{1,50})\)\s?{\s?(\$\w{1,50})\s?=\s?[\'"]{2};\s?for\((\$\w{1,50})\s?=\s?0;\s?\5\s?<\s?strlen\(\s?\2\s?\)\s?;\s?\)\s?for\((\$\w{1,50})\s?=\s?0\s?;\s?\6\s?<\s?strlen\(\s?\3\s?\);\s?\6\+\+,\s?\5\+\+\s?\)\s?\4\s?\.=\s?\2{\5}\s?\^\s?\3{\6}\s?;\s?return\s\4;\s?}\s?;\s?(?:\$\w{1,50}\s?=\s?[\'"][^\'"]+[\'"];\s?)*eval\(\1\(base64_decode\([\'"]([^\'"]+)[\'"]\)\s?,\s?[\'"]([^\'"]+)[\'"]\)\);\s?(?:\$\w{1,50}\s?=\s?[\'"][^\'"]+[\'"];\s?)*~msi',
            'id' => 'funcB64TwoArgs',
        ],
        [
            'full' => '~(?:\$\w+=base64_decode\(\'[^\']+\'\);)+(?:(\$\w+)=str_replace\(base64_decode\(\'[^\']+\'\),\'\',(?:base64_decode\(\'[^\']+\'\)|(?:\$\w+\.?)+)\);)+(\$\w+)=\$\w+\(\'\',\1\);\2\(\);~msi',
            'id' => 'strReplaceB64',
        ],
        [
            'full' => '~(\$\w+)=str_replace\(\'([^\']+)\',\'\',\'([^\']+)\'\);(\$\w+)=create_function\(\'\',\1\);\4\(\);~msi',
            'id' => 'createFuncStrReplace',
        ],
        [
            'full' => '~(\$\w+)\s?=\s?base64_decode\(\'([^\']+)\'\);\s?(\$\w+)\s?=\s?\'[\w\.]+\';\s?(\$\w+)\s?=\s?\(file_exists\(\3\)\)\s?\?\s?fopen\(\3,\s?"a\+"\)\s?:\s?fopen\(\3,\s?"w\+"\);\s?fwrite\(\4,\s?\1\);\s?fclose\(\4\);~msi',
            'id' => 'fwriteB64Shell',
        ],
        [
            'full' => '~((\$\w{1,50})\s*=\s*"(\\\\[\w\\\\]+)?";\s*)+(?:error_reporting\(0\);\s*)?(\$\w{1,50})\s*=\s*\$\w+\(([\'"][^\'"]+[\'"])\);\s*\4\s*=\s*\2\(\4\);\s*\$\w+\s*=\s*\$\w+\(\'[^\']+\',\4\);~msi',
            'id' => 'createFuncGzuncompressB64',
        ],
        [
            'full' => '~(?:\$\{"[\\\\x0-9a-fGLOBALS]+"}\["[^"]+"\]="[^"]+";)+echo\s*"[^"]+";if\(isset\(\$_POST\["[^"]+"\]\)\)\{date_default_timezone_set\("[^"]+"\);(?:(?:(?:\$\{)+"[\\\\x0-9a-fGLOBALS]+"}\["[^"]+"\]\}?|\$\w+|\$\{\$\w+\})=[^;]+;)+move_uploaded_file\([^\)]+\);}if\(isset\(\$_GET\["[^"]+"\]\)\)\{echo\s*"[^;]+";exit\(0\);\}~msi',
            'id' => 'globalsSlashed',
        ],
        [
            'full' => '~(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];\s{0,10}((?:\$\w{1,50}\s?=\s?base64_decode\([\'"][^\'"]+[\'"]\);\s?)+)\s?\1\s?=\s?(\$\w{1,50})\((\$\w{1,50})\(\1\)\);\s?(\$\w{1,50})\s?=\s?(\$\w{1,50})\(\1\);\s?(\$\w{1,50})\s?=\s?[\'"]{2};\s?for\((\$\w{1,50})\s?=\s?0;\s?\9\s?<\s?\6;\s?\9\+\+\s?\)\s?{\8\s?\.=\s?(\$\w{1,50})\(\((\$\w{1,50})\(\1\[\9\]\)\s?\^\s?(\d{1,10})\)\);}\s?eval\(\8\);\s?return;~msi',
            'id' => 'b64VarsFuncEval',
        ],
        [
            'full' => '~(?:\@null;\s*echo\@null;\s*)?((?:\$\w+=\'\w+\';\s*)+)((?:\$\w+=(?:\$\w+\.?)+;\s*)+)(eval\((?:\$\w+\()+(?:\'[^\']+\'|"[^"]+")\)+;)(?:\s*\@null;)?(exit;)?~msi',
            'id' => 'nullEcho',
        ],
        [
            'full' => '~(\$\w{1,40})\s?=\s?\(\"(.+)\"\);.*\@header\(\$\w{1,40}\);.*exit\(\);~msi',
            'id' => 'arrayReplacing',
        ],
        [
            'full' => '~((?:(?:\$\w{1,50}\s?=\s?[\'"]\w+[\'"];)+\s*\$\w{1,50}\s?=\s?(?:\$\w{1,50}\.?)+;\s*)+)eval\((?:\$\w{1,50}\(?)+[\'"][^\'"]+[\'"]\)+;~msi',
            'id' => 'varConcatedReplaceEval',
        ],
        [
            'full' => '~(\$\w{1,50}+)\s?=\s?[\'"]{2};(?:(?:\$\w{1,50}\s?=\s?[\'"][^\'"]+[\'"];)+\$\w{1,50}\s?\.=\s?\$\w{1,50};\s?)+((?:(?:\$\w{1,50}\s?=\s?[\'"]\w+[\'"];\s?)+\s*\$\w{1,50}\s?=\s?(?:\$\w{1,50}\.?)+;\s*)+)\s?function\s(\w{1,50})\((\$\w{1,50}+),\s?(\$\w{1,50}+)\)\s?{\s?return\sstr_replace\(\5,\s?[\'"]([^\'"]+)[\'"],\s?\4\);\s?}\s*eval\(((?:\$\w{1,50}\()+)\3\(\1,\s?[\'"]([^\'"]+)[\'"]\)+;~msi',
            'id' => 'varsConcatedFuncStrReplaceEval',
        ],
        [
            'full' => '~error_reporting\(E_ALL\)\;\s?\$\w{1,50}\s?=\s?[\'"](.*)[\'"]\;\s?file_put_contents\(\$_SERVER\[[\'"]DOCUMENT_ROOT[\'"]\].+base64_decode.+~msi',
            'id' => 'b64putContents',
        ],
        [
            'full' => '~(?:\$\w+=base64_decode\(\'[^\']+\'\);)+\s*(?:\$\w+=\$_SERVER\[base64_decode\(\'[^\']+\'\)\];)+\$\w+="[^"]+";(?:\$\w+\.?=(?:base64_decode\(\'[^\']+\'\)\.?)+;)+mail\(base64_decode\(\'[^\']+\'\),\$\w+,\$\w+,\$\w+\);\s*eval(?:\(\$\w+)+\(+\$\w+\)+;~msi',
            'id' => 'b64WSO',
        ],
        [
            'full' => '~function\s*(\w+)\(\)\s*\{\s*(\$\w+)\s*=\s*\'([^\')]+)\';\s*(\$\w+)\s*=((?:\s*(?:\2\[\d+\]|\'[^\';]+\'+)\s*\.?)+);\s*return\s*\4;\s*\}\s*eval\(\1\(\)\s*\.\s*\'([^\']+)\'\)+;\s*\'\);~msi',
            'id' => 'evalFuncDict',
        ],
        [
            'full' => '~((\$\w+)=(?|urldecode\(\'([^\']+)\'\);|"([^"]+)";))((?:\$\w+\.?=(?:\$\w+[\[\{][0-9a-fx]+[\]\}]\.?)+;)+)(?|eval\(\$\w+\(\'([^\']+)\'\)\);|\$\w+=\$\w+\("",\$\w+\("([^"]+)")(?:\)\);\$\w+\(\);)?~msi',
            'id' => 'urldecodeEval',
        ],
        [
            'full' => '~((?:\$\w+=\'[^\']+\';)+)(\$\w+)="([^"]+)";\s*(eval\(\'\?>\'\.(?:\$\w+\()+\$\w+,\$\w+\*\d+\),\$\w+\(\$\w+,\$\w+,\$\w+\),\s*\$\w+\(\$\w+,\d+,\$\w+\)+);~msi',
            'id' => 'strtrEval',
        ],
        [
            'full' => '~(\$\w+)\s*=\s*"[^"]+";(?:\s*\$\w+\s*=\s*base64_decode\("[^"]+\s*"\);\s*)+\$\w+\s*=\s*fopen\([^\)]+\)\s*or\s*die\([^\)]+\);\s*\$\w+\s*=\s*\$\w+;\s*fwrite\(\$\w+,\s*\$\w+\);\s*fclose\(\$\w+\);\s*\$\w+\s*=\s*[^;]+;\s*\$\w+\s*=\s*fopen\(\$\w+,\s*"w"\)\s*or\s*die\([^\)]+\);\s*\$\w+\s*=\s*base64_decode\("[^"]+\s*"\);\s*fwrite\(\$\w+,\s*\$\w+\);\s*fclose\(\$\w+\);\s*\$\w+\s*=\s*"[^"]+";\s*.*?\1;\s*(\$\w+)\s*=\s*"[^"]+";\s*[^\)]+\);\s*\$\w+\s*=\s*"https://api\.telegram\.org/bot\2/sendmessage";\s*.*?curl_close\(\$\w+\);~msi',
            'id' => 'autoExploit',
        ],
        [
            'full' => '~(?:\$\w+=\'[^\']+\';)*(\$\w+)=create_function\("",base64_decode\("([^\']+)"\)\);\1\(\);~msi',
            'id' => 'createFuncB64',
        ],
        [
            'full' => '~(\$\w+)=(\d+);(\$\w+)=explode\("([^"]+)","([^"]+)"\);(\$\w+)="";foreach\(\3\s*as\s*(\$\w+)\)\s*if\s*\(\7!=""\)\s*\6\.=chr\(\7\^\1\);\s*eval\(\6\);~msi',
            'id' => 'chrXor',
        ],
        /*[
            'full' => '~class\s*(\w+)\s*{\s*function\s*__construct\(\)\s*\{\s*(\$\w+)\s*=\s*\$this->(\w+)\(\$this->\w+\);\s*\2\s*=\s*\$this->(\w+)\(\$this->(\w+)\(\2\)\);\s*\2\s*=\s*\$this->(\w+)\(\2\);\s*if\(\2\)\s*\{\s*\$this->(\w+)\s*=\s*\2\[\d\];\s*\$this->(\w+)\s*=\s*\2\[\d\];\s*\$this->\w+\s*=\s*\2\[\d\];\s*\$this->(\w+)\(\2\[\d\],\s*\2\[\d\]\);\s*\}\s*\}\s(?:function\s*\w+\((?:(?:\$\w+),?\s?){0,3}\)\s*\{\s*(?:\$this->\w+\s*=\s*\$\w+;\s*\$this->\w+\s*=\s*\$\w+;\s*\$this->\w+\s*=\s*\$this->\3\(\$this->\w+\);\s*\$this->\w+\s*=\s*\$this->\5\(\$this->\w+\);\s*\$this->\w+\s*=\s*\$this->\w+\(\);\s*if\(strpos[^{]+{[^}]+}\s*\}\s*|\$\w+\s*=\s*(?:\$this->\w+\[\d\]\.?)+;\s*(?:\$\w+\s*=\s*@?\$\w+\((?:\'\',\s*)?(?:(?:\$\w+),?\s?){0,3}\);)?\s*(?:return\s*\$\w+(?:\((?:"[^"]+",\s*"",\s*\$\w+)?\))?;)?\s*\}\s*|\$\w+\s*=\s*strlen\(\$\w+\)\s*\+\s*strlen\(\$\w+\);\s*while\(strlen\(\$\w+\)\s*<\s*\$\w+\)\s*\{\s*\$\w+\s*=\s*ord\(\$\w+\[\$this->\w+\]\)\s*-\s*ord\(\$\w+\[\$this->\w+\]\);\s*\$\w+\[\$this->\w+\]\s*=\s*chr\(\$\w+\s*%\s*\(2048/8\)\);\s*\$\w+\s*\.=\s*\$\w+\[\$this->\w+\];\s*\$this->\w+\+\+;\s*\}\s*return\s*\$\w+;\s*\}\s*|\$this->\w+\s*=\s*\$this->\w+\(\$this->\w+,\s*\$this->\w+,\s*\$this->\w+\);\s*\$this->\w+\s*=\s*\$this->\w+\(\$this->\w+\);\s*return\s*\$this->\w+;\s*\}\s*))+var\s*\$\w+;\s*var\s*\$\w+\s*=\s*0;\s*(?:var\s*\$\w+\s*=\s*array\([\'gzinflatecr_utobs64dtkp, ]+\);\s*)+var\s*\$\w+\s*=\s*\'([^\']+)\';\s*var\s*\$\w+\s*=\s*\'([^\']+)\';\s*\}\s*new\s*\1\(\);~msi',
            'id' => 'classDecoder',
        ],
        [
            'full' => '~if\(isset\(\$_POST\[\'\w+\'\]\)\){echo[\s\'\w]+;\s*exit\(\);}\s*if\(isset\(\$_COOKIE\)\){(\$\w+)=\$_COOKIE;\(count\(\1\)==\d+&&in_array\(gettype\(\1\)\.count\(\1\),\1\)\)\?\(\(\1\[\d+\]=\1\[\d+\]\.\1\[\d+\]\)&&\(\1\[\d+\]=\1\[\d+\]\(\1\[\d+\]\)\)&&\(\1=\1\[\d+\]\(\1\[\d+\],\1\[\d+\]\(\1\[\d+\]\)\)\)&&\1\(\)\):\1;}\s*if\(!isset\(\$_POST\[\'\w+\'\]\)&&!isset\(\$_GET\[\'\w+\'\]\)\){exit\(\);}\s*(?:(\$\w+)\[\d+\]=\'\w+\';)+\s*if\(isset\(\$_POST\[\'\w+\'\]\)\){\$\w+=\$_POST\[\'\w+\'\];}else{\$\w+=\$_GET\[\'\w+\'\];}\s*\$\w+\s*=\s*array_flip\(str_split\(\'(\w+)\'\)\);\$\w+\s*=\s*str_split\(md5\(\$\w+\)\.md5\(\$\w+\)\);\$\w+\s*=\s*array\(\);\$\w+\s*=\s*\'\';\s*foreach\s*\(\$\w+\s*as\s*\$\w+\s*=>\s*\$\w+\)\s*{while\s*\(1\)\s*{if\(isset\(\$\w+\[\$\w+\[\$\w+\]\]\)\){\$\w+\[\$\w+\]\+\+;}else\{\$\w+\[\$\w+\[\$\w+\]\]=\'\';break;}}}\s*foreach\s*\(\$\w+\s*as\s*\$\w+\s*=>\s*\$\w+\)\s*{\$\w+\s*\.=\s*\$\w+\[\$\w+\];}\s*eval\(trim\(base64_decode\(base64_decode\(\$\w+\)\)\)\);~mis',
            'fast' => '~if\(isset\(\$_POST\[\'\w+\'\]\)\){echo[\s\'\w]+;\s*exit\(\);}\s*if\(isset\(\$_COOKIE\)\){(\$\w+)=\$_COOKIE;\(count\(\1\)==\d+&&in_array\(gettype\(\1\)\.count\(\1\),\1\)\)\?\(\(\1\[\d+\]=\1\[\d+\]\.\1\[\d+\]\)&&\(\1\[\d+\]=\1\[\d+\]\(\1\[\d+\]\)\)&&\(\1=\1\[\d+\]\(\1\[\d+\],\1\[\d+\]\(\1\[\d+\]\)\)\)&&\1\(\)\):\1;}\s*if\(!isset\(\$_POST\[\'\w+\'\]\)&&!isset\(\$_GET\[\'\w+\'\]\)\){exit\(\);}\s*(?:(\$\w+)\[\d+\]=\'\w+\';)+\s*if\(isset\(\$_POST\[\'\w+\'\]\)\){\$\w+=\$_POST\[\'\w+\'\];}else{\$\w+=\$_GET\[\'\w+\'\];}\s*\$\w+\s*=\s*array_flip\(str_split\(\'(\w+)\'\)\);\$\w+\s*=\s*str_split\(md5\(\$\w+\)\.md5\(\$\w+\)\);\$\w+\s*=\s*array\(\);\$\w+\s*=\s*\'\';\s*foreach\s*\(\$\w+\s*as\s*\$\w+\s*=>\s*\$\w+\)\s*{while\s*\(1\)\s*{if\(isset\(\$\w+\[\$\w+\[\$\w+\]\]\)\){\$\w+\[\$\w+\]\+\+;}else\{\$\w+\[\$\w+\[\$\w+\]\]=\'\';break;}}}\s*foreach\s*\(\$\w+\s*as\s*\$\w+\s*=>\s*\$\w+\)\s*{\$\w+\s*\.=\s*\$\w+\[\$\w+\];}\s*eval\(trim\(base64_decode\(base64_decode\(\$\w+\)\)\)\);~mis',
            'id' => 'scriptWithPass',
        ],*/

        /*************************************************************************************************************/
        /*                                          JS patterns                                                      */
        /*************************************************************************************************************/

        [
            'full' => '~((<script[^>]*>)\s*.{0,400}?)?(eval\()?String\.fromCharCode\(([\d,\s]+)\)(?(3)\);+|)((?(2)\s*.{0,400}?</script>|))~msi',
            'fast' => '~String\.fromCharCode\([\d,\s]+\)~msi',
            'id'   => 'JS_fromCharCode',
        ],
        [
            'full' => '~(?:eval\()?unescape\(\'([^\']+)\'\)\);\s{0,50}eval\(unescape\(\'([^\']+)\'\)\s{0,50}\+\s{0,50}\'([^\']+)\'\s{0,50}\+\s{0,50}unescape\(\'[^\']+\'\)\);~msi',
            'fast' => '~unescape\(\'([^\']+)\'\)\);\s{0,50}eval\(unescape\(\'([^\']+)\'\)\s{0,50}\+\s{0,50}\'([^\']+)\'\s{0,50}\+\s{0,50}unescape\(\'[^\']+\'\)\);~msi',
            'id'   => 'JS_unescapeContentFuncWrapped',
        ],
        [
            'full' => '~var\s*(\w+)=\s*\[((?:\'[^\']+\',?)+)\];\(function\(\w+,\w+\)\{var\s*\w+=function\(\w+\)\{while\(--\w+\)\{\w+\[\'push\'\]\(\w+\[\'shift\'\]\(\)\);\}\};.*?\(\1,(0x\w+)\)\);var\s*(\w+)=function\s*\((\w+),(\w+)\)\s*\{\5=\5-0x\d+;var\s*\w+=\w+\[\5\];if\(\4\[\'\w+\']===undefined\)\{\(function\(\)\{var\s*(\w+);try\{var\s*(\w+)=Function\(\'[^;]++;\'\);\7=\8\(\);\}catch\(\w+\)\{\7=window;\}var\s*\w+=\'[^\']+\';\7\[\'atob\'\]\|\|\(\7\[\'atob\'\]=function\(\w+\)\{[^}]+\}return\s*\w+;\}\);\}\(\)\);var\s*\w+=function\(\w+,\w+\)\{var\s*\w+=.+?String\[\'fromCharCode\'\].+?return\s*\w+;\};\4\[\'\w+\'\]=\w+;\4\[\'\w+\'\]=\{\};\4\[\'\w+\'\]=!!\[\];\}var\s*\w+=\4\[\'\w+\'\]\[\w+\];.+?((.+?\4\(\'0x\d+\',\'[^\']+\'\)).+?)+[^\s]+~msi',
            'fast' => '~var\s*(\w+)=\s*\[((?:\'[^\']+\',?)+)\];\(function\(\w+,\w+\)\{var\s*\w+=function\(\w+\)\{while\(--\w+\)\{\w+\[\'push\'\]\(\w+\[\'shift\'\]\(\)\);\}\};.*?var\s*(\w+)=function\s*\((\w+),(\w+)\)\s*\{\4=\4-0x\d+;var\s*\w+=\w+\[\4\];if\(\3\[\'\w+\']===undefined\)\{\(function\(\)\{var\s*(\w+);try\{var\s*(\w+)=Function\(\'[^;]++;\'\);\6=\7\(\);\}catch\(\w+\)\{\6=window;\}var\s*\w+=\'[^\']+\';\6\[\'atob\'\]\|\|\(\6\[\'atob\'\]=function\(\w+\)\{[^}]+\}return\s*\w+;\}\);\}\(\)\);var\s*\w+=function\(\w+,\w+\)\{var\s*\w+=.+?String\[\'fromCharCode\'\].+?return\s*\w+;\};\3\[\'\w+\'\]=\w+;\3\[\'\w+\'\]=\{\};\3\[\'\w+\'\]=!!\[\];\}var\s*\w+=\3\[\'\w+\'\]\[\w+\];.+?((.+?\3\(\'0x\d+\',\'[^\']+\'\)).+?)+[^\s]+~msi',
            'id'   => 'JS_ObfuscatorIO',
        ],
        [
            'full' => '~<script\s(?:language|type)=[\'"]?(?:text/)?javascript[\'"]?>\s*(?:(?:<!--.*?-->)?\s?<!--\s*)?document\.write\((?:unescape\()?[\'"]([^\'"]+)[\'"]\)\)?;?(?:\s?//-->)?(?:(\w+)\(\'([^\']+)\'\))?\s*</script>~msi',
            'id'   => 'JS_documentWriteUnescapedStr',
        ],
        [
            'full' => '~eval\(function\(p,a,c,k,e,(?:d|r)\)\{.*?}\(\'(.*)\', *(\d+), *(\d+), *\'(.*?)\'\.split\(\'\|\'\),\d,\{\}\)\);~msi',
            'id'   => 'JS_deanPacker',
        ],
        [
            'full' => '~\(function\s*\(\$,\s*document\)\s*({([^{}]*+(?:(?1)[^{}]*)*+)})\)\(\(function\s*\((\w),\s*(\w)\)\s*\{\s*function\s*(\w)\((\w+)\)\s*\{\s*return\s*Number\(\6\)\.toString\(36\)\.replace\(/\[0\-9\]/g,\s*function\s*\((\w)\)\s*\{\s*return\s*String\.fromCharCode\(parseInt\(\7,\s*10\)\s*\+\s*65\);\s*\}\s*\);\s*\}\s*var\s*\w+\s*=\s*\{\s*\$:\s*function\s*\(\)\s*\{\s*var\s*\w+\s*=\s*\{\};\s*[^}]+\}\s*return\s*\w;\s*\}\s*\};\s*\3\s*=\s*\3\.split\(\'\+\'\);\s*for\s*\(var\s*\w\s*=\s*0;\s*\w\s*<\s*(\d+);\s*\w\+\+\)\s*\{\s*\(function\s*\(\w\)\s*\{\s*Object\.defineProperty\(\w,\s*\5\(\w\),\s*\{\s*get:\s*function\s*\(\)\s*\{\s*return\s*\w\[\w\]\[0\]\s*\!==\s*\';\'\s*\?\s*\4\(\w\[\w\]\)\s*:\s*parseFloat\(\w\[\w\]\.slice\(1\),\s*10\);\s*\}\s*\}\);\s*\}\(\w\)\);\s*\}\s*return\s*\w;\s*\}\(\'([^\']+)\',\s*function\s*\(\w\)\s*\{\s*for\s*\(var\s*(\w)\s*=\s*\'([^\']+)\',\s*(\w)\s*=\s*\[([^\]]+)\],\s*\w\s*=\s*\'\'[^{]+\{\s*var\s*(\w)\s*=\s*\10\.indexOf\(\w\[\w\]\);\s*\12\.indexOf\(\w\[\w\]\)\s*>\s*\-1\s*&&\s*0\s*===\s*\12\.indexOf\(\w\[\w\]\)\s*&&\s*\(\w\s*=\s*0\),\s*\14\s*>\s*-1\s*&&\s*\(\w\s*\+=\s*String\.fromCharCode\(\w\s*\*\s*\10\.length\s*\+\s*\14\),\s*\w\s*=\s*1\);\s*\}\s*return\s*\w;\s*\}\)\),\s*\(function\s*\(\w\)\s*\{\s*var\s*_\s*=\s*{};\s*for\s*\(\w\s*in\s*\w\)\s*\{\s*try\s*\{\s*_\[\w\]\s*=\s*\w\[\w\]\.bind\(\w\);\s*\}\s*catch\s*\(\w\)\s*\{\s*_\[\w\]\s*=\s*\w\[\w\];\s*\}\s*\}\s*return\s*_;\s*\}\)\(document\)\)~msi',
            'id'   => 'JS_objectDecode',
        ],
        [
            'full' => '~<script\s*src="data:text/javascript;base64,([^"]+)"></script>~msi',
            'id'   => 'JS_B64Embedded',
        ],
        [
            'full' => '~function\s?(_0x\w+)\(_0x\w+,\s?_0x\w+\)\{var\s?_0x\w+=(_0x\w+)\(\);return\s?\1=function\(_0x\w+,\s?_0x\w+\)\{_0x\w+=_0x\w+-(0x\w+);var\s?_0x\w+=_0x\w+\[_0x\w+\];return\s?_0x\w+;},\1\(_0x\w+,\s?_0x\w+\);\}\s*\(function\((_0x\w+),\s?_0x\w+\)\{var\s?(_0x\w+)=\1,_0x\w+=\4\(\);while\(!!\[\]\)\{try\{var\s?_0x\w+=((?:parseInt\(\5\(0x\w+\)\)/0x\w+\)?[\+\*]?\(?-?)+);if\(_0x\w+===_0x\w+\)break;else\s?_0x\w+\[\'push\'\]\(_0x\w+\[\'shift\'\]\(\)\);\}catch\(_0x\w+\)\{_0x\w+\[\'push\'\]\(_0x\w+\[\'shift\'\]\(\)\);\}+\s*\(\2,(0x\w+)\),\(function\(\)\{var\s?(_0x\w+)=\1,(.*?)\}\(\)\)\);function\s?\2\(\)\{var\s?_0x\w+=\[([^\]]+)\];\2=function\(\)\{return\s?_0x\w+;\};return\s?\2\(\);\}~msi',
            'id'   => 'JS_parseIntArray',
        ],
        /*************************************************************************************************************/
        /*                                          PYTHON patterns                                                 */
        /*************************************************************************************************************/

        [
            'full' => '~eval\(compile\(zlib\.decompress\(base64\.b64decode\([\'"]([^\'"]+)[\'"]\)\),[\'"]<string>[\'"],[\'"]exec[\'"]\)\)~msi',
            'id'   => 'PY_evalCompileStr',
        ],
    ];

    private $full_source;
    private $prev_step;
    private $cur;
    private $obfuscated;
    private $max_level;
    private $max_time;
    private $run_time;
    private $fragments;
    private $grabed_signature_ids;
    private $active_fragment;
    private $excludes;
    private $debugger;
    private $isDebugMode = false;

    /**
     * @param string $text
     * @param string $origin_text
     * @param DebugMode|null $debugger
     * @param int $max_level
     * @param int $max_time
     */
    public function __construct($text, $origin_text = '', $debugger = null, $max_level = 30, $max_time = 5)
    {
        $this->text         = $text;
        $this->full_source  = $text;

        if ($origin_text != '' && $this->defineSpecificObfuscator($text, $origin_text)) {
            $this->text         = $origin_text;
            $this->full_source  = $origin_text;
        }

        $this->max_level            = $max_level;
        $this->max_time             = $max_time;
        $this->fragments            = [];
        $this->grabed_signature_ids = [];
        $this->excludes             = [];
        $this->debugger             = !is_object($debugger) ? new Debugger() : $debugger;
        $this->isDebugMode          = defined('DEBUG_PERFORMANCE') && DEBUG_PERFORMANCE ? true : false;
    }

    public function setIsDebugMode(bool $isEnable)
    {
        $this->isDebugMode = $isEnable;
    }

    private function getPreviouslyDeclaredVars($string, $level = 0)
    {
        $foundVar = false;
        foreach ($this->fragments as $frag => $fragment) {
            if ($foundVar || strpos($frag, '$codelock_lock') !== false) {
                break;
            }

            $subject = '';
            $pos     = strpos($fragment, $string . '=') ?: strpos($fragment, $string . ' ');
            if ($pos !== false && strpos(substr($fragment, $pos + strlen($string)), '$') !== 1) {
                $subject = substr($fragment, $pos);
            } else {
                $pos = strpos($frag, $string . '=') ?: strpos($frag, $string . ' ');
                if ($pos !== false) {
                    $subject = substr($frag, $pos);
                } else {
                    $pos = strpos($this->full_source, $string . '=') ?: strpos($this->full_source, $string . ' ');
                    if ($pos !== false) {
                        $subject = substr($this->full_source, $pos);
                    } else {
                        continue;
                    }
                }
            }

            if (@preg_match_all('~(\$\w{1,40})\s*=\s*((\(*(base64_decode\s*\(|pack\s*\(\'H\*\',|convert_uudecode\s*\(|htmlspecialchars_decode\s*\(|stripslashes\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|eval\s*\()+((?:(["\'])((.*?[^\\\\])??((\\\\\\\\)+)?+)\6[^;]+)|(?:\$\w+)\)*;*))|((["\'])((.*?[^\\\\])??((\\\\\\\\)+)?+)\12));~msi', $subject, $matches, PREG_SET_ORDER) > 0) {
                foreach ($matches as $m) {
                    if ($m[1] !== $string) {
                        continue;
                    }
                    if (isset($m[12]) && $m[12] !== '') {
                        $str = substr(@$m[2], 1, -1);
                        $foundVar = true;
                    }
                    if (isset($m[5]) && $m[5] !== '') {
                        $str = $this->unwrapFuncs($m[2], $level + 1);
                        $foundVar = true;
                    }

                    $this->fragments[$this->active_fragment] = str_replace($m[0], '', $this->fragments[$this->active_fragment]);
                    break;
                }
            }
        }
        return $str;
    }

    private function defineSpecificObfuscator($text, $origin_text)
    {
        if (strpos($origin_text, '#!/') === 0                                                                                                       //not a php file
            || strpos($origin_text, '0=__FILE__;')                                             &&
                (strpos($origin_text, ';return;?>') || strpos($origin_text, 'This file is protected by copyright law and provided under'))  //lockit1 || evalFileContentBySize
            || strpos($origin_text, 'The latest version of Encipher can be obtained from')  && strpos($origin_text, '\'@ev\'));')           //EvalFileContent
            || strpos($origin_text, 'substr(file_get_contents(__FILE__),')                  && strpos($origin_text, '__halt_compiler();')   //EvalFileContentOffset
            || strpos($origin_text, 'gzuncompress(strrev($')                  && strpos($origin_text, '__halt_compiler();')                 //GzuncompressStrrev
            || strpos($text, 'base64_decode(@stream_get_contents(')   && strpos($text, '@fopen(__FILE__,')            //wpKey (eval)
            || strpos($origin_text, '//base64 - gzinflate - str_rot13 - convert_uu - gzinflate - base64')                                   //
            || strpos($origin_text, '/* Do not change this code') && strpos($origin_text, '));__halt_compiler();')                          //B64Chunks
        ) {
            return true;
        }

        $text_wo_ws = str_replace(' ', '', $text);
        if (strpos($text_wo_ws, '=file(__FILE__);eval(base64_decode(')      && strpos($text_wo_ws, '));__halt_compiler();') //zeura hack
            || strpos($text_wo_ws, 'define(\'__LOCALFILE__\',__FILE__);')   && strpos($text_wo_ws, '__halt_compiler();')    //obf_20200527_1
            || strpos($text_wo_ws, '");$cvsu=$gg') || strpos($text_wo_ws, '$cyk=$cyd[')                                     //TinkleShell
        ) {
            return true;
        }

        return false;
    }

    private function checkObfuscatorExcludes($str, $type = false, $matches = [])
    {
        switch ($type) {
            case '':
                if(strpos($str, '# Malware list detected by AI-Bolit (http') !== false) {
                    return '';
                }
                if(strpos($str, '#Malware list detected by AI-Bolit(http') !== false) {
                    return '';
                }
                if(strpos($str, '<div class="header">Отчет сканера ') !== false) {
                    return '';
                }
                if (strpos($str, '$default_action="FilesMan"') !== false) {
                    return '';
                }
                break;
            case 'echo':
                if (preg_match('~\$_[GPRC](?:OST|ET|EQUEST|OOKIE)~ms', $matches[0])) {
                    return '';
                }
                if (!isset($matches[5]) || $matches[5] === '') {
                    return '';
                }
                if (preg_match('~attachment;\s*filename=\\\\"\w+\.vbs~', $str)) {
                    return '';
                }
                break;
            case 'eval':
                if (strpos($matches[0], 'file_get_contents') !== false) {
                    return '';
                }
                if (preg_match('~\$_[GPRC](?:OST|ET|EQUEST|OOKIE)~ms', $matches[0])) {
                    return '';
                }
                if (strpos($matches[0], '=> array(\'eval(base64_decode(\')') !== false) {
                    return '';
                }
                if (@$matches[6] === '\'";') {
                    return '';
                }
                break;
            case 'goto':
                if (!preg_match('~\$[^\[\(\)\]=\+\-\"\']{1,20}~msi', $matches[0])) {
                    return '';
                }

                $offset = 0;
                $count = 0;
                while (preg_match('~goto\s*[^;]+;\s*[^:{}]+:\s*[^;]+;~msi', $matches[0], $m, PREG_OFFSET_CAPTURE, $offset)) {
                    $count++;
                    break;
                }
                if ($count === 0) {
                    return '';
                }
                break;
        }
        return $type;
    }

    public function getObfuscateType($str)
    {
        $btlimit = ini_get('pcre.backtrack_limit');
        $reclimit = ini_get('pcre.recursion_limit');
        $str = preg_replace('~\s+~', ' ', $str);
        $l_UnicodeContent = Helpers::detect_utf_encoding($str);
        $ret = '';
        if ($l_UnicodeContent !== false) {
            if (function_exists('iconv')) {
                $str = iconv($l_UnicodeContent, "CP1251//IGNORE", $str);
            }
        }
        if ($this->checkObfuscatorExcludes($str) === '') {
            return '';
        }
        ini_set('pcre.backtrack_limit', self::PCRE_BACKTRACKLIMIT);
        ini_set('pcre.recursion_limit', self::PCRE_RECURSIONLIMIT);
        foreach (self::$signatures as $signature) {
            $fast_regexp = isset($signature['fast']) ? $signature['fast'] : $signature['full'];
            if (isset($this->excludes[$str]) && in_array($signature['id'], $this->excludes[$str])) {
                continue;
            }

            $sig_type = isset($signature['fast']) ? self::TYPE_PREG_FAST : self::TYPE_PREG_FULL;
            $matches = $this->handlePregMatch($sig_type, $signature['id'], $fast_regexp, $str);
            if ($matches) {
                $ret = $this->checkObfuscatorExcludes($str, $signature['id'], $matches);
                break;
            }
        }
        ini_set('pcre.backtrack_limit', $btlimit);
        ini_set('pcre.recursion_limit', $reclimit);
        return $ret;
    }

    private function getObfuscateFragment($str, $type)
    {
        foreach (self::$signatures as $signature) {
            $matches = $this->handlePregMatch(self::TYPE_PREG_FULL, $signature['id'], $signature['full'], $str);
            if ($signature['id'] == $type && $matches) {
                return $matches;
            }
        }
        return '';
    }

    public function getFragments()
    {
        if (count($this->fragments) > 0) {
            return $this->fragments;
        }
        return false;
    }

    public function getGrabedSignatureIDs()
    {
        return array_keys($this->grabed_signature_ids);
    }

    private function grabFragments()
    {
        if ($this->cur === null) {
            $this->cur = $this->text;
        }
        $str = $this->cur;
        reset(self::$signatures);
        while ($sign = current(self::$signatures)) {
            $regex = $sign['full'];
            $matches = $this->handlePregMatch(self::TYPE_PREG_FULL, $sign['id'], $regex, $str);
            if ($matches) {
                $this->grabed_signature_ids[$sign['id']] = 1;
                $this->fragments[$matches[0]] = $matches[0];
                $str = str_replace($matches[0], '', $str);
            } else {
                next(self::$signatures);
            }
        }
    }

    private function deobfuscateFragments()
    {
        $prev_step = '';
        if (!count($this->fragments)) {
            return;
        }
        $i = 0;
        foreach ($this->fragments as $frag => $value) {
            if ($frag !== $value) {
                continue;
            }
            $this->active_fragment = $frag;
            $type = $this->getObfuscateType($value);

            while ($type !== '' && $i < 50) {
                $match  = $this->getObfuscateFragment($value, $type);
                if (!is_array($match)) {
                    break;
                }
                $find   = $match[0] ?? '';
                $func   = 'deobfuscate' . ucfirst($type);
                $temp = $this->handleFunc(self::TYPE_FUNC, ucfirst($type), $func, $find, $match);

                if ($temp !== '' && $temp !== $find) {
                    $value = str_replace($find, $temp, $value);
                } else {
                    $this->excludes[preg_replace('~\s+~', ' ', $value)][] = $type;
                    $this->fragments[$frag] = $value;
                    $type = $this->getObfuscateType($value);
                    continue;
                }

                $this->fragments[$frag] = $value;
                $type = $this->getObfuscateType($value);
                $value_hash = hash('sha256', $value);
                if ($prev_step === $value_hash) {
                    break;
                }
                $prev_step = $value_hash;
                $i++;
            }
            $this->fragments[$frag] = Helpers::postProcess($this->fragments[$frag]);
        }
    }

    public function deobfuscate($hangs = 0, $prev_step = '')
    {
        $btlimit = ini_get('pcre.backtrack_limit');
        $reclimit = ini_get('pcre.recursion_limit');
        ini_set('pcre.backtrack_limit', self::PCRE_BACKTRACKLIMIT);
        ini_set('pcre.recursion_limit', self::PCRE_RECURSIONLIMIT);
        $deobfuscated   = '';
        $this->run_time = Helpers::currentTime();
        $this->cur      = $this->text;

        $this->grabFragments();
        $this->deobfuscateFragments();

        $deobfuscated = $this->cur;

        if (count($this->fragments) > 0 ) {
            foreach ($this->fragments as $fragment => $text) {
                $deobfuscated = str_replace($fragment, $text, $deobfuscated);
            }
        }

        $deobfuscated = Helpers::postProcess($deobfuscated);

        if (substr_count(substr($deobfuscated, 0, 400), 'base64_decode(\'') > 3) {
            $deobfuscated = preg_replace_callback('~base64_decode\(\'([^\']+)\'\)~msi', static function ($matches) {
                return "'" . base64_decode($matches[1]) . "'";
            }, $deobfuscated);
        }

        if ($this->getObfuscateType($deobfuscated) !== '' && $hangs < 6) {
            $this->text = $deobfuscated;
            if ($prev_step === hash('sha256', $deobfuscated)) {
                return $deobfuscated;
            }
            $deobfuscated = $this->deobfuscate(++$hangs, hash('sha256', $deobfuscated));
        }
        ini_set('pcre.backtrack_limit', $btlimit);
        ini_set('pcre.recursion_limit', $reclimit);
        return $deobfuscated;
    }

    public static function getSignatures()
    {
        return self::$signatures;
    }

    public function getDebugger() {
        return $this->debugger;
    }

    /**
     * @param string $sigType
     * @param $sigId
     * @param string $regex
     * @param string $content
     * @return false|array
     */
    private function handlePregMatch(string $sigType, $sigId, string $regex, string $content)
    {
        $start_time = Helpers::currentTime();
        $isMatch = preg_match($regex, $content, $match);

        if ($this->isDebugMode) {
            $time_elapsed = Helpers::currentTime() - $start_time;
            $this->debugger->addDeobfuscatorData($sigType, $sigId, $time_elapsed);
        }

        return $isMatch ? $match : false;
    }

    /**
     * @param string $type
     * @param string $funcId
     * @param string $func
     * @param string $find
     * @param array $match
     * @return string
     */
    private function handleFunc(string $type, string $funcId, string $func, string $find, array $match)
    {
        try {
            $start_time = Helpers::currentTime();
            $result = @$this->$func($find, $match);

            if ($this->isDebugMode) {
                $time_elapsed = Helpers::currentTime() - $start_time;
                $this->debugger->addDeobfuscatorData($type, $funcId, $time_elapsed);
            }
        } catch (Exception $e) {
            $result = '';
        }

        return $result;
    }

    public function unwrapFuncs($string, $level = 0)
    {
        $res = '';
        $close_tag = false;

        if (trim($string) == '') {
            return '';
        }
        if ($level > 100) {
            return '';
        }
        if ((($string[0] === '\'') || ($string[0] === '"')) && (substr($string, 1, 2) !== '?>')) {
            if($string[0] === '"' && preg_match('~\\\\x\d+~', $string)) {
                return stripcslashes($string);
            }
            $end = -2;
            if ($string[-3] === '\'') {
                $end = -3;
            }
            return substr($string, 1, $end);
        }

        if ($string[0] === '$') {
            preg_match('~\$\w{1,40}~', $string, $string);
            $string  = $string[0];
            return $this->getPreviouslyDeclaredVars($string, $level);
        }

        $pos      = strpos($string, '(');
        $function = substr($string, 0, $pos);
        $arg      = $this->unwrapFuncs(substr($string, $pos + 1), $level + 1);

        if (strpos($function, '?>') !== false || strpos($function, "'.") !== false) {
            $function = str_replace(["'?>'.", '"?>".', "'?>' .", '"?>" .', "'."], '', $function);
            $close_tag = true;
        }
        $function = str_replace(['@', ' '], '', $function);
        $safe = Helpers::convertToSafeFunc($function);

        if ($safe) {
            if ($function === 'pack') {
                $args = explode(',', $arg);
                $args[0] = substr(trim($args[0]), 0, -1);
                $args[1] = substr(trim($args[1]), 1);
                $res = @Helpers::executeWrapper($function, [$args[0], $args[1]]);
            } elseif ($function === 'unserialize') {
                $res = @Helpers::unserialize($arg);
            } elseif ($function === 'str_replace') {
                $args = explode(',', $arg);
                $args[0] = substr(trim($args[0]), 0, -1 );
                $args[1] = substr(trim($args[1]), 0);
                if (trim($args[1]) === 'null') {
                    $args[1] = null;
                }
                $args[2] = $this->unwrapFuncs(trim($args[2]), $level + 1) ?? $args[2];
                $res = @Helpers::executeWrapper($function, [$args[0], $args[1], $args[2]]);
            } else if ($function === 'chr') {
                $res = @Helpers::executeWrapper($function, [(int)$arg]);
            } else {
                $res = @Helpers::executeWrapper($function, [$arg]);
            }
        } else {
            $res = $arg;
        }
        if ($close_tag) {
            $res = '?> ' . $res;
            $close_tag = false;
        }
        return $res;
    }

    /*************************************************************************************************************/
    /*                                          PHP deobfuscators                                                */
    /*************************************************************************************************************/

    private function deobfuscateStrrotPregReplaceEval($str, $matches)
    {
        $find = $matches[0];
        $res = str_rot13($matches[2]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200618_1($str, $matches)
    {
        return stripcslashes($str);
    }

    private function deobfuscateBypass($str, $matches)
    {
        $find = $matches[0];
        $bypass = stripcslashes($matches[2]);
        $eval = $matches[3] . $bypass . $matches[4];
        $res = str_replace($find, $eval, $str);
        return $res;
    }

    private function deobfuscateObf_20200720_1($str, $matches)
    {
        $find = $matches[0];
        $res = base64_decode($matches[2]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateGoto($str)
    {
        return Helpers::unwrapGoto($str);
    }

    private function deobfuscateObf_20200527_1($str)
    {
        preg_match('~error_reporting\(0\);define\(\'\w+\',\s*__FILE__\);define\(\'\w+\',\s*fopen\(__FILE__,\s*\'r\'\)\);fseek\(\w+,\s*__COMPILER_HALT_OFFSET__\);((\$\w+="\\\\x[0-9a-f]+";)+(\$\w+="[^"]+";)+eval\("\?>"\.(\$\w+\()+"([^"]+)"\)+;)+(?:/\*\w+\*/)?__halt_compiler\(\);([\w#|>^%\[\.\]\\\\/=]+)~msi', $str, $matches);
        $find = $matches[0];
        $res = $str;
        $encoded = $matches[6];
        $res = preg_replace_callback('~(\$\w+="\\\\x[0-9a-f]+";)+(\$\w+="[^"]+";)+eval\("\?>"\.(\$\w+\()+"([^"]+)"\)+;~msi', static function ($m) use ($str) {
            $layer1 = hex2bin(str_rot13(gzinflate(str_rot13(base64_decode($m[4])))));
            if (preg_match('~(\$\w+="[^"]+";)+eval\(\$\w\.(\$\w+\()+"([^"]+)"\)+;~msi', $layer1, $matches)) {
                $temp = "?>" . hex2bin(str_rot13(gzinflate(str_rot13(base64_decode($matches[3])))));
                while (preg_match('~(\$\w+)=strrev\(\1\);(\1=\s*str_replace\([\'"]([^"\']+)[\'"],"[^"]+",\1\);)+@?eval\("\?\>"\.\$\w+\(\1\)+;~msi', $temp, $matches)) {
                    if (preg_match_all('~(\$\w+)="([^"]+)";~msi', $layer1, $matches1)) {
                        foreach($matches1[1] as $k => $v) {
                            if ($v !== $matches[1]) {
                                continue;
                            }
                            $code = $matches1[2][$k];
                            $code = strrev($code);
                            if (preg_match_all('~str_replace\([\'"]([^"\']+)[\'"],"([^"]+)"~msi', $temp, $m, PREG_SET_ORDER)) {
                                foreach($m as $item) {
                                    $code = str_replace($item[1], $item[2], $code);
                                }
                                $temp = base64_decode($code);
                            }
                            break;
                        }
                    }
                }
                return $temp;
            }
        }, $res);
        if (preg_match_all('~str_replace\([\'"]([^"\']+)[\'"],[\'"]([^"\']+)[\'"]~msi', $res, $m, PREG_SET_ORDER)) {
            foreach($m as $item) {
                $encoded = str_replace($item[1], $item[2], $encoded);
            }
            $res = base64_decode($encoded);
        }

        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200602_1($str)
    {
        preg_match('~(\$\w+)=strrev\("[base64_decode]+"\)\.str_replace\(\'(\w+)\',\'\',\'\w+\'\);\s*eval\(\1\((\$\w+)\)\);~msi', $str, $matches);
        $find = $matches[0];
        $res = 'eval(base64_decode(' . $matches[3] . '));';
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200526_1($str, $matches)
    {
        $find = $matches[0];
        $res = base64_decode($matches[2]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200522_1($str, $matches)
    {
        $res = strrev(gzinflate(base64_decode(substr($matches[14], (int)hex2bin($matches[4]) + (int)hex2bin($matches[6]), (int)hex2bin($matches[8])))));
        if (preg_match('~define\(\'([^\']+)\', \'[^\']+\'\);\$GLOBALS\[\1\]\s*=\s*explode\(\'([^\']+)\',\s*gzinflate\(substr\(\'((?:[^\']*\\\\\')+[^\']+)\',([0-9a-fx]+),\s*([\-0-9a-f]+)\)~msi', $res, $m)) {
            $m[3] = stripcslashes($m[3]);
            $strings = explode($m[2], gzinflate(substr($m[3], hexdec($m[4]), (int)$m[5])));
            $res = str_replace($m[0], '', $res);
            $res = preg_replace_callback('~\$GLOBALS[\{\[].{1,3}[\}\]][\[\{]([0-9a-fx]+)[\]\}]~msi', function($m) use ($strings) {
                return '\'' . $strings[hexdec($m[1])] . '\'';
            }, $res);
        }
        return $res;
    }

    private function deobfuscateObf_20200507_5($str, $matches)
    {
        $find = $matches[0];
        $res = base64_decode($matches[1]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200507_4($str, $matches)
    {
        $find = $matches[0];
        $ar = $matches[2];
        $ar = explode(",\n", $ar);
        $array = [];
        foreach ($ar as $v) {
            $array[substr(trim($v),1,1)] = substr(trim($v), -2, 1);
        }
        unset($ar);
        $res = '';
        $split = str_split($matches[5]);
        foreach ($split as $x) {
            foreach ($array as $main => $val) {
                if ($x == (string)$val) {
                    $res .= $main;
                    break;
                }
            }
        }
        $res = gzinflate(base64_decode($res));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200513_1($str, $matches)
    {
        $find = $matches[0];
        $res = gzuncompress(base64_decode(strrev($matches[5])));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200507_2($str, $matches)
    {
        $find = $matches[0];
        $res = base64_decode($matches[4]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200507_1($str)
    {
        preg_match('~(\$\w+)=base64_decode\(\'([^\']+)\'\);\s*eval\(\1\);~mis', $str, $matches);
        $find = $matches[0];
        $res = base64_decode($matches[2]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200504_1($str)
    {
        preg_match('~(\$\w+)\s*=\s*\("\?>"\.gzuncompress\(base64_decode\("([^"]+)"\)\)\);\s*@?eval\(\1\);~msi', $str, $matches);
        $find = $matches[0];
        $res = ' ?>' . gzuncompress(base64_decode($matches[2]));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateSmartToolsShop($str, $matches)
    {
        $find = $matches[0];
        $res = str_rot13(gzinflate(str_rot13(base64_decode($matches[2]))));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200421_1($str)
    {
        preg_match('~(?:\$\w+\s*=\s*\'\w+\';)?\s*(\$\w+)\s*=\s*urldecode\(\'[%0-9a-f]+\'\);(\s*(\$\w+)\s*=(\s*\1\{\d+\}\.?)+;)+\s*(\$\w+)\s*=\s*"[^"]+"\.\3\("([^"]+)"\);\s*eval\(\5\);~msi', $str, $matches);
        $find = $matches[0];
        $res = ' ?>' . base64_decode($matches[6]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateObf_20200414_1($str, $matches)
    {
        $data = $matches[1];
        $key = $matches[2];
        $res = Helpers::obf20200414_1_decrypt($data, $key);
        return $res;
    }

    private function deobfuscateObf_20200402_2($str, $matches)
    {
        $find = $matches[0];
        $code = $matches[17];
        if (isset($matches[1]) && !empty($matches[1])) {
            $vars = Helpers::collectVars($matches[1], '\'');
            $code = Helpers::replaceVarsFromArray($vars, $matches[2], false, true);
            $code = Helpers::collectStr($code, '\'');
            $code = substr($code, strpos($code,'\'') + 1);
        }
        $code = preg_replace_callback('~\s*"\s*\.((?:min|max|round)?\(\s*\d+[\.\,\|\s\|+\|\-\|\*\|\/]([\d\s\.\,\+\-\*\/]+)?\))\s*\.\s*"~msi', static function($m) {
            return substr(Helpers::calc($m[1]), 1, -1);
        }, $code);
        $res = gzinflate(base64_decode($code)) ?:base64_decode($code);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateTwoHashFunc($str, $matches)
    {
        $funcs = [
            $matches[1].'::'.$matches[2] => [
                'data' => Helpers::prepareArray($matches[3]),
                'func' => null,
            ],
            $matches[4].'::'.$matches[5] => [
                'data' => Helpers::prepareArray($matches[6]),
                'func' => null,
            ],
        ];

        $code = Helpers::normalize($matches[7]);

        foreach ($funcs as $name => &$params){
            $data = $params['data'];
            if (isset($data[0]) && intval($data[0])) {
                $params['func'] = function ($n, $k) use ($data) {
                    if (!isset($data[$n])) {
                        return false;
                    }
                    return $data[$n];
                };
            }
            else {
                $params['func'] = function ($n, $k) use ($data){
                    $l = strlen($k);
                    if (!isset($data[$n])) {
                        return false;
                    }
                    $r = base64_decode($data[$n]);
                    for ($i = 0, $c = strlen($r); $i !== $c;  ++$i) {
                        $r[$i] = chr(ord($r[$i]) ^ ord($k[$i % $l]));
                    }
                    return '\'' . $r . '\'';
                };
            }
        }
        unset($params);

        $new_code = preg_replace_callback('~(_\w{1,5})::(\w{1,5})\s*\(([^)]+)\)~mis', function ($m) use ($funcs) {
            $original       = $m[0];
            $class_name     = $m[1];
            $method_name    = $m[2];
            $vars           = str_replace(['"', "'"], '', $m[3]);

            list($var1, $var2) = explode(',', $vars);
            $func_name = $class_name . '::' . $method_name;
            if (!isset($funcs[$func_name]['func'])) {
                return $original;
            }
            return $funcs[$func_name]['func']($var1, $var2);
        }, $code);
        return MathCalc::calcRawString($new_code);
    }

    private function deobfuscateObf_20200402_1($str, $matches)
    {
        $find = $matches[0];
        $res = gzinflate(hex2bin(pack('H*',$matches[6])));
        $res = preg_replace('~//.+$~m', '', $res);
        preg_match('~\$\w+\(\$\w+,\$\w+\("",\s*\$\w+\(\$\w+\(\$\w+\(\$\w+\(\$\w+,\s*"(\d+)"\)+,\$\w+\);.+function \w+\((\$\w+),\s*\$\w+,\s(\$\w+)\)\s{\3\s=\s\3\s\.\s\3;.+return \2;}~msi', $res, $matches);
        $res = gzinflate(hex2bin(pack('H*',$matches[1])));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateOELove($str)
    {
        preg_match('~<\?php\s*defined\(\'[^\']+\'\)\s*\|\|\s*define\(\'[^\']+\',__FILE__\);(global\s*\$[^;]+;)+\s*(if\(!function_exists\(\'([^\']+)\'\)\){\s*function\s*[^\)]+\(\$[^,]+,\$[^=]+=\'\'\){\s*if\(empty\(\$[^\)]+\)\)\s*return\s*\'\';\s*\$[^=]+=base64_decode\(\$[^\)]+\);\s*if\(\$[^=]+==\'\'\)\s*return\s*\~\$[^;]+;\s*if\(\$[^=]+==\'-1\'\)\s*@[^\(]+\(\);\s*\$[^=]+=\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\(\$[^\)]+\);\s*\$[^=]+=\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\(\$[^,]+,\$[^,]+,\$[^\)]+\);\s*return\s*\$[^^]+\^\$[^;]+;\s*}}\s*)+(\$[^\[]+\["[^"]+"]=[^\(]+\(\'[^\']+\',\'[^\']*\'\);\s*)+(\$[^\[]+\[\'[^\']+\'\]=\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\([^\)]*\)+;\s*)+return\(eval\(\$[^\[]+\[\'[^\']+\'\]\)+;\s*\?>\s*#!/usr/bin/php\s*-q\s*((\s*[^\s]+)+)~msi', $str, $matches);
        $find = $matches[0];
        $res = $str;
        $code = $matches[6];
        $res = iconv('UTF-8', 'ASCII//IGNORE', $res);

        preg_match('~\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\(\'([\da-f]{32})\'\);~msi', $res, $hash);
        $hash = strrev($hash[1]);
        preg_match_all('~\$GLOBALS\[\'[^\']+\'\]\[\'[^\']+\'\]\(\'([\d]{10})\'\)~msi', $res, $substr_offsets);
        $substr_offsets = $substr_offsets[1];
        $substr_offsets = array_map('strrev', $substr_offsets);
        $substr_offsets = array_map('intval', $substr_offsets);

        preg_match_all('~if\s*\(\!function_exists\(\'([^\']+)\'\)~msi', $res, $decoders);
        $decoders = $decoders[1];
        $var_array = [];
        preg_match_all('~\$([^\[]{3,20})\["([^"]+)"\]=(\w+)\(\'([^\']*)\',\'([^\']*)\'\);~msi', $res, $vars, PREG_SET_ORDER);
        $var_name = $vars[0][1];
        foreach ($vars as $var) {
            if ($var[3] === $decoders[0] || $var[3] === $decoders[1]) {
                $var_array[$var[2]] = Helpers::OELoveDecoder($var[4], $var[5]);
                $res = str_replace($var[0], '', $res);
            }
        }
        $layer1 = substr($code, 0, $substr_offsets[3] + 96);
        $layer1_dec = iconv('UTF-8', 'ASCII//IGNORE', gzuncompress(base64_decode($layer1)));
        $code = str_replace($layer1, $layer1_dec, $code);
        preg_match_all('~\$([^\[]{3,20})\["([^"]+)"\]=(\w+)\(\'([^\']*)\',\'([^\']*)\'\);~msi', $code, $vars, PREG_SET_ORDER);
        foreach ($vars as $var) {
            if ($var[3] === $decoders[0] || $var[3] === $decoders[1]) {
                $var_array[$var[2]] = Helpers::OELoveDecoder($var[4], $var[5]);
                $code = str_replace($var[0], '', $code);
            }
        }
        $layer2_start = strpos($code, '?>') + 2;
        $layer2 = substr($code, $layer2_start + $substr_offsets[2]);
        $layer2_dec = iconv('UTF-8', 'ASCII//IGNORE', gzuncompress(base64_decode(str_rot13($layer2))));
        $res = $layer2_dec;
        foreach($var_array as $k => $v) {
            $res = str_replace('$GLOBALS[\'' . $var_name . '\'][\'' . $k . '\'](', $v . '(', $res);
            $res = str_replace('$GLOBALS[\'' . $var_name . '\'][\'' . $k . '\']', '\'' . $v . '\'', $res);
        }

        $res = preg_replace_callback('~(\w+)\(\'([^\']*)\',\'([^\']*)\'\)~msi', static function ($m) use ($decoders) {
            if ($m[1] !== $decoders[0] && $m[1] !== $decoders[1]) {
                return $m[0];
            }
            return '\'' . Helpers::OELoveDecoder($m[2], $m[3]) . '\'';
        }, $res);

        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalConcatVars($str)
    {
        preg_match('~((\$\w+="";\$\w+\s*\.=\s*"[^;]+;\s*)+)(?:(?:\$\w+)="";)?(eval\((\s*(\$\w+)\s*\.)+\s*"([^"]+)(?:"\);)+)~msi', $str, $matches);
        $find = $matches[0];
        $res = $str;
        $parts = [];
        preg_match_all('~(\$\w+)="";\1\s*\.=\s*"([^"]+)"~msi', $matches[1], $matches1, PREG_SET_ORDER);
        foreach($matches1 as $match) {
            $parts[$match[1]] = stripcslashes(stripcslashes($match[2]));
        }
        $res = stripcslashes(stripcslashes($matches[3]));
        foreach($parts as $k => $v) {
            $res = str_replace($k, "'" . $v . "'", $res);
        }
        $res = preg_replace_callback('/[\'"]\s*?\.+\s*?[\'"]/smi', static function($m) {
            return '';
        }, $res);

        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalAssignedVars($str, $matches)
    {
        $res = $str;

        $vars = [$matches[1] => $matches[2]];

        $res = preg_replace_callback('~(\$\w{1,3000})=(base64_decode|gzinflate|convert_uudecode|str_rot13)\((\$\w{1,3000})\);~msi',
            function ($match) use (&$vars) {
                $func = $match[2];
                if (Helpers::convertToSafeFunc($func) && isset($vars[$match[3]])) {
                    $vars[$match[1]] = @Helpers::executeWrapper($func, [$vars[$match[3]]]);
                    return '';
                }
                return $match[1] . '=' . $match[2] . '(\'' . $match[3] . '\';';
            }, $res);

        $res = $vars[$matches[4]] ?? Helpers::replaceVarsFromArray($vars, $res);

        return $res;
    }

    private function deobfuscateVarFuncsEval($str)
    {
        preg_match('~((\$\w+)\s*=\s*)(base64_decode\s*\(+|gzinflate\s*\(+|strrev\s*\(+|str_rot13\s*\(+|gzuncompress\s*\(+|convert_uudecode\s*\(+|urldecode\s*\(+|rawurldecode\s*\(+|htmlspecialchars_decode\s*\(+)+"([^"]+)"\)+(;\s*@?eval\(([\'"?>.\s]+)?\2\);)~', $str, $matches);
        $find = $matches[0];
        $res = $str;
        $res = str_replace([$matches[5], $matches[1]], [');', 'eval('], $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateComments($str, $matches)
    {
        $find = $matches[0];
        $res = preg_replace('~/\*\w+\*/~msi', '', $str);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateStrrevVarEval($str)
    {
        preg_match('~(\$\w+=strrev\("[^"]+"\);)+eval\((\$\w+\()+"([^"]+)"\)+;~mis', $str, $matches);
        $find = $matches[0];
        $res = gzinflate(base64_decode($matches[3]));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateAanKFM($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        $key = Helpers::aanKFMDigitsDecode($matches[3]);
        $res = Helpers::Xtea_decrypt($matches[4], $key);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalChars($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        while(preg_match_all('~(?:@eval((?:\(\$[0O]+\[[\'"]\w+[\'"]\])+)\("([^"]+)"\)+;)|("\)\?\$[O0]+)~msi', $res, $matches, PREG_SET_ORDER)) {
            $match = $matches[0];
            if (isset($matches[1])) $match = $matches[1];
            $count = ($match[1] !== '') ? substr_count($match[1], '(') : 0;
            if ($count == 2) {
                $res = gzinflate(base64_decode($match[2]));
            } else if ($count == 3) {
                $res = gzinflate(base64_decode(str_rot13($match[2])));
            }
            if (isset($match[3]) && ($match[3] !== '')) {
                $res = preg_replace_callback('~(\$[0O]+\["\w+"\]\()+"([^"]+)"\)+;?~msi', static function($m) {
                    return gzinflate(base64_decode(str_rot13($m[2])));
                }, $res);
            }
        }
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateGlobalsBase64($str)
    {
        preg_match('~<\?php\s+((\$GLOBALS\[\s*[\'"]\w+[\'"]\s*\])\s*=\s*base64_decode\("([^"]*)"\);)+\s*\?>(<\?php\s.+\2.+exit;\s}\sfunction\s\w+\(\)\s{\sreturn\sarray\(\s\'favicon\'\s=>\s\'[^\']+\',\s+\'sprites\'\s=>\s\'[^\']+\',\s\);\s})~msi', $str, $matches);
        $find = $matches[0];
        $vars = [];
        preg_match_all('~(\$GLOBALS\[\s*[\'"]\w+[\'"]\s*\])\s*=\s*base64_decode\("([^"]*)"\);~msi', $matches[0], $matches1, PREG_SET_ORDER);
        foreach($matches1 as $match) {
            $vars[$match[1]] = base64_decode($match[2]);
        }
        $code = $matches[4];
        foreach ($vars as $var => $value) {
            $code = str_replace($var . '(', $value . '(', $code);
            $code = str_replace($var, "'" . $value . "'", $code);
        }
        $res = $code;
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalReturn($str, $matches)
    {
        $find = $matches[0];
        $res = stripcslashes(base64_decode($matches[2]));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateQibosoft($str)
    {
        preg_match('~\$\w+=__FILE__;\$\w+=fopen\(\$\w+,\'rb\'\);fread\(\$\w+,(\d+)\);\$\w+=explode\("\\\\t",base64_decode\(fread\(\$\w+,(\d+)\)+;\$\w+=\$\w+\[[\d+]\];[\$l1=\d{}\.;\(\)\[\]]+eval\(\$\w+\(\'([^\']+)\'\)+;\s*return\s*;\?>[\w=\+]+~msi', $str, $matches);
        $find = $matches[0];
        $res = $str;
        $hangs = 15;
        $obfPHP = explode('?>', $str);
        $obfPHP = $obfPHP[1];
        preg_match('~eval\(\$\w+\(\'([^\']+)\'\)+;~msi', $res, $temp);
        $res = str_replace($temp[0], base64_decode($temp[1]), $res);
        $offset = $matches[2];
        while (preg_match('~\$\w+\(\$\w+,(\d+)\);\s*eval\(\$\w+\(\$\w+\(\$\w+,(\d+)\)+;~msi', $res, $temp2) && $hangs--) {
            $offset += $temp2[1];
            $decode_loop = base64_decode(substr($obfPHP, $offset, $temp2[2]));
            $offset += $temp2[2];
            if (preg_match('~eval\(\$\w+\(\'([^\']+)\'\)+;~msi', $decode_loop, $temp)) {
                $res = str_replace($temp2[0], base64_decode($temp[1]), $res);
            } else {
                $res = $decode_loop;
            }

        }
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateUd64($str)
    {
        preg_match('~(\$ud64_c[o0]m="[\\\\0-9a-z\."]+;)+\$\w+=(\$ud64_c[o0]m\()+"([^"]+)"\)+;@eval\(\$ud64_c[o0]m\(\'[^\']+\'\)+;~msi', $str, $matches);
        $find = $matches[0];
        $res = gzinflate(convert_uudecode(base64_decode(gzinflate(base64_decode(str_rot13($matches[3]))))));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateCustom1($str, $matches)
    {
        return Helpers::someDecoder3($matches[1]);
    }

    private function deobfuscateCustom2($str, $matches)
    {
        $find = $matches[0];
        $key = $matches[2];
        $var = $matches[3];
        preg_match_all('~(\$\w+)\[\d+\]\s*=\s*"([^"]+)";~msi', $str, $matches);
        foreach ($matches[1] as $k => &$m) {
            if ($m !== $var) {
                unset($matches[2][$k]);
            }
        }
        $res = base64_decode(Helpers::someDecoder4($matches[2], $key));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateLockIt2($str, $matches)
    {
        $find = $matches[0];
        $res = $matches[1];

        if(strpos($str, '$_X="') !== false && strpos($res, '\\x') !== false) {
            $res = stripcslashes($res);
        }
        if (preg_match_all('~\$[_\w]+\.=[\'"]([\w\+\/=]+)[\'"];~', $matches[0], $concatVars)) {
            foreach ($concatVars[1] as $concatVar) {
                $res .= $concatVar;
            }
        }
        $res = base64_decode($res);
        $res = strtr($res, $matches[2], $matches[3]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateLockIt3($str, $matches)
    {
        $totalLength = (int)$matches[1];
        $res = $this->unwrapFuncs($matches[2]);
        $encodedStr = $matches[3];

        if (preg_match('~\$\w{1,50}\s?=\s?fopen\(\$\w{1,50}\s?,\s?[\'"]rb[\'"]\);while\(\-\-\$\w{1,50}\)fgets\(\$\w{1,50},\d+\);fgets\(\$\w{1,50},\d+\);\$\w{1,50}\s?=\s?\(?((?:gzuncompress\(|base64_decode\()+)strtr\(fread\(\$\w{1,50},(\d+)\)+,[\'"]([^\'"]+)[\'"],[\'"]([^\'"]+)[\'"](\)+);eval\(\$\w{1,50}\);~msi', $res, $m)) {
            $length = (int)$m[2];
            $res = substr($encodedStr, 0, $length);
            $res = $this->unwrapFuncs($m[1] . "'" . strtr($res, $m[3], $m[4]) . $m[5]);

            if (preg_match('~((?:gzuncompress\(|base64_decode\()+)strtr\(fread\(\$\w{1,50},\$\w{1,50}\),[\'"]([^\'"]+)[\'"],[\'"]([^\'"]+)[\'"](\)+);~msi',
                $res, $m)) {
                $res = substr($encodedStr, $length, $totalLength);
                $res = $this->unwrapFuncs($m[1] . "'" . strtr($res, $m[2], $m[3]) . $m[4]);
                return $res;
            }
        }

        if (preg_match('~\$\w{1,50}\s?=\s?fopen\(\$\w{1,50}\s?,\s?[\'"]rb[\'"]\);\$\w{1,50}=(?:intval\([\'"])?(\d+)\)?(?:[\'"]\))?;fseek\(\$\w{1,50},(?:intval\([\'"])?(\d+)(?:[\'"]\))?\);eval\(base64_decode\(strtr\(fread\(\$\w{1,50},(\d+)\),[\'"]([^\'"]+)[\'"],[\'"]([^\'"]+)[\'"]\)+;return;~msi', $res, $m)) {
            $lengthSeek = (int)$m[1] - (int)$m[2];
            $length = (int)$m[3];
            $res = substr($encodedStr, 0, $length);
            $res = base64_decode(strtr($res, $m[4], $m[5]));

            if (preg_match('~\(base64_decode\(strtr\(gzuncompress\(base64_decode\(fread\(\$\w{1,50},\$\w{1,50}\)+,[\'"]([^\'"]+)[\'"],[\'"]([^\'"]+)[\'"]\)+;~msi', $res, $m)) {
                $res = substr($encodedStr, $lengthSeek, $totalLength);
                $res = base64_decode(
                    strtr(
                        gzuncompress(base64_decode($res)),
                        $m[1],
                        $m[2]
                    )
                );
                return $res;
            }
        }

        return $str;
    }

    private function deobfuscateAnaski($str, $matches)
    {
        $find = $matches[0];

        $res = gzinflate(str_rot13(base64_decode($matches[2])));
        $res = strtr($res, $matches[5], $matches[6]);

        return $res;
    }

    private function deobfuscateFuncs($str, $matches)
    {
        $find = $matches[0];
        $funcs = [];
        $payload = $matches[7];
        $var = $matches[6];
        $res = str_replace($matches[8], stripcslashes($matches[9]), $str);
        $res = preg_replace_callback('~function\s*(\w+)\((\$\w+)\){\s*return\s*(\w+)\(\2(,\d+)?\);}\s*~msi', static function($matches2) use (&$funcs){
            $funcs[$matches2[1]] = $matches2[3];
            return '';
        }, $res);
        foreach ($funcs as $k => $v) {
            $res = str_replace($k . '(', $v . '(', $res);
        }
        $res = str_replace([$var . '="' . $payload . '";', $var], ['', '"' . $payload . '"'], $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateSubstr($str)
    {
        preg_match('~\$\w+=0;(\$GLOBALS\[\'\w+\'\])\s*=\s*\'([^\']+)\';\s*(\$\w+)=pack\(\'H\*\',substr\(\1,\s*([-\d]+)\)\);if\s*\(!function_exists\(\'(\w+)\'\)\){function\s*\5\(\$\w+,\s*\$\w+\){\$\w+=\1;\s*\$d=pack\(\'H\*\',substr\(\1,\s*\4\)\);\s*return\s*\$\w+\(substr\(\$\w+,\s*\$\w+,\s*\$\w+\)\);}};eval\(\3\(\'([^\']+)\'\)\);~msi', $str, $matches);
        $find = $matches[0];
        $substr_array = $matches[2];
        $offset = intval($matches[4]);
        $func = $matches[5];
        $eval = pack('H*',substr($substr_array, $offset));
        $res = Helpers::convertToSafeFunc($eval) ? @Helpers::executeWrapper($eval, [$matches[6]]) : $matches[6];
        $res = preg_replace_callback('~(\w+)\(([-\d]+),\s*([-\d]+)\)~mis', static function ($matches) use ($eval, $substr_array, $func) {
            if ($matches[1] !== $func) {
                return $matches[0];
            }
            $res = Helpers::convertToSafeFunc($eval) ? @Helpers::executeWrapper($eval, [substr($substr_array, $matches[2], $matches[3])]) : $matches[0];
            return '\'' . $res . '\'';
        }, $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscatePHPJiaMi($str, $matches)
    {
        $find = $matches[0];
        $bin = bin2hex($str);
        preg_match('~6257513127293b24[a-z0-9]{2,30}3d24[a-z0-9]{2,30}2827([a-z0-9]{2,30})27293b~', $bin, $hash);
        preg_match('~2827([a-z0-9]{2})27293a24~', $bin, $rand);
        $hash = hex2bin($hash[1]);
        $rand = hex2bin($rand[1]);
        $res = Helpers::PHPJiaMi_decoder(substr($matches[3], 0, -45), $hash, $rand);
        $res = str_rot13(@gzuncompress($res) ?: $res);

        if (preg_match('~global\s*(\$[^,;]+);((?:\1\[\'[^\']+\'\]=[^(]+\(\'[^\']+\'\);)+)~msi', $str, $tmp))
        {
            $tmp = explode(';', $tmp[2]);
            foreach ($tmp as $entry) {
                if ($entry === '') {
                    continue;
                }
                preg_match('~\$([^\[]+)(\[\'[^\']+\'\])=([^\(]+)\(\'([^\']+)\'\)~', $entry, $parts);
                $res = str_replace('$GLOBALS[\'' . $parts[1] . '\']' . $parts[2], Helpers::PHPJiaMi_decoder($parts[4], $hash, $rand), $res);
            }
            $func_decrypt = $parts[3];
            $hangs = 20;
            while (($start = strpos($res, $func_decrypt . '(\'')) && $start !== false && $hangs--) {
                $end = strpos($res,'\'', $start + strlen($func_decrypt) + 2) + 1;
                $data = substr($res, $start + strlen($func_decrypt) + 2, $end - ($start + strlen($func_decrypt) + 2 + 1));
                $res = substr_replace($res, '\'' . Helpers::PHPJiaMi_decoder($data, $hash, $rand) . '\'', $start, ($end - $start) + 1);
            }
        }
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalIReplace($str, $matches)
    {
        $find = $matches[0];
        $res = base64_decode($matches[3]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateErrorHandler($str)
    {
        preg_match('~(\$\w+)="[^"]+";\s*(\$\w+)=str_ireplace\("[^"]+","",\1\);(\$\w+)\s*=\s*"([^"]+)";\s*function\s*(\w+)\((\$\w+,?)+\){\s*(\$\w+)=\s*create_function\(\'\',\$\w+\);\s*array_map\(\7,array\(\'\'\)+;\s*}\s*set_error_handler\(\'\5\'\);(\$\w+)=\2\(\3\);user_error\(\8,E_USER_ERROR\);\s*if\s*.+?}~msi', $str, $matches);
        $find = $matches[0];
        $res = base64_decode($matches[4]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateStrtoupper($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        $alph = $matches[2];
        $var = $matches[1];
        $res = str_replace("{$var}=\"{$alph}\";", '', $res);
        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace($var . '[' . $i . '].', "'" . $alph[$i] . "'", $res);
            $res = str_replace($var . '[' . $i . ']', "'" . $alph[$i] . "'", $res);
        }
        $res = str_replace("''", '', $res);
        $res = str_replace("' . '", '', $res);
        $res = str_replace("' '", '', $res);
        preg_match('~(\$\w+)\s*=\s*strtoupper\s*\(\s*\'(\w+)\'\s*\)\s*;~msi', $res, $matches);
        $matches[2] = strtoupper($matches[2]);
        $res = str_replace($matches[0], '', $res);
        $res = preg_replace_callback('~\${\s*(\$\w+)\s*}~msi', static function ($m) use ($matches) {
            if ($m[1] !== $matches[1]) {
                return $m[0];
            }
            return '$' . $matches[2];
        }, $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEval2($str)
    {
        preg_match('~(\$\w+)\s*=\s*"((?:[^"]|(?<=\\\\)")*)";(\$\w+)\s*=\s*(\1\[\d+\]\.?)+;(\$\w+)\s*=\s*[^;]+;(\$\w+)\s*=\s*"[^"]+";\$\w+\s*=\s*\5\."([^"]+)"\.\6;\3\((\1\[\d+\]\.?)+,\s*\$\w+\s*,"\d+"\);~smi', $str, $matches);
        $res = $str;
        list($find, $var, $alph) = $matches;
        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace($var . '[' . $i . '].', "'" . $alph[$i] . "'", $res);
            $res = str_replace($var . '[' . $i . ']', "'" . $alph[$i] . "'", $res);
        }
        $res = gzinflate(base64_decode(substr($matches[7], 1, -1)));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalEregReplace($str, $matches)
    {
        $find = $matches[0];
        $res = base64_decode($matches[2]);
        preg_match_all('~(\$\w+)\s*=\s*ereg_replace\("([^"]+)","([^"]+)",\1\);~smi', $str, $matches);
        foreach ($matches[2] as &$pat) {
            if ($pat[0] === '[') {
                $pat = substr($pat, 1, -1);
            }
        }
        unset($pat);
        $res = str_replace($matches[2], $matches[3], $res);
        $res = base64_decode($res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateStrreplace($str, $matches)
    {
        $find = $matches[0];
        $res = $str;

        $str_replace = '';
        $base64_decode = '';
        $layer = '';

        if (!preg_match_all('~(?:(\$\w{1,50})\s?=\s?((?:\'[^\']{1,500}\'|"[^\n]{1,500}?"));[\n\s])~msi', $str, $matches, PREG_SET_ORDER)) {
            preg_match_all('~(\$\w+)\s*=\s*([\'"](?|[^\']+\'|[^"]+"));~msi', $str, $matches, PREG_SET_ORDER);
        }
        foreach ($matches as $i => $match) {
            $vars[$match[1]] = substr($match[2], 1, -1);
        }

        $res = preg_replace_callback('~(\$\w+)\s*=\s*str_replace\([\'"](\w+)[\'"],\s*[\'"]{2},\s*[\'"](\w+)[\'"]\)~msi',
            static function ($matches) use (&$vars, &$str_replace) {
                $vars[$matches[1]] = str_replace($matches[2], "", $matches[3]);
                if ($vars[$matches[1]] === 'str_replace') {
                    $str_replace = $matches[1];
                }
                return $matches[1] . ' = "' . $vars[$matches[1]] . '"';
            }, $res);

        if ($str_replace !== '') {
            $res = preg_replace_callback('~(\$\w+)\s*=\s*(\$\w+)\("(\w+)",\s*"",\s*"(\w+)"\)~msi',
                static function ($matches) use (&$vars, &$base64_decode, $str_replace) {
                    if ($matches[2] !== $str_replace) {
                        return $matches[0];
                    }
                    $vars[$matches[1]] = str_replace($matches[3], "", $matches[4]);
                    if ($vars[$matches[1]] === 'base64_decode') {
                        $base64_decode = $matches[1];
                    }
                    return $matches[1] . ' = "' . $vars[$matches[1]] . '"';
                }, $res);

            $res = preg_replace_callback('~(\$\w+)\((\$\w+)\("(\w+)",\s*"",\s*([\$\w\.]+)\)~msi',
                static function ($matches) use (&$vars, &$layer, $base64_decode, $str_replace) {
                    if ($matches[1] !== $base64_decode && $matches[2] !== $str_replace) {
                        return $matches[0];
                    }
                    $tmp = explode('.', $matches[4]);
                    foreach ($tmp as &$item) {
                        $item = $vars[$item];
                    }
                    unset($item);
                    $tmp = implode('', $tmp);
                    $layer = base64_decode(str_replace($matches[1], "", $tmp));

                    return $matches[0];
                }, $res);
        }

        if ($base64_decode !== '') {
            $regex = '~(\$\w+)\((\$\w+)\("(\w+)",\s*"",\s*([\$\w\.]+)\)~msi';
        } else {
            $regex = '~(str_replace)\(([\'"])([^\'"]+)[\'"],\s*[\'"]{2},\s*([\$\w\. ]+)\);\s?(\$\w+)\s*=\s*\$\w+\([\'"]{2},\s*\$\w+\);\s*\5\(\);~msi';
        }
        preg_replace_callback($regex,
            static function ($matches) use (&$vars, &$layer, $base64_decode, $str_replace) {
                if ($base64_decode !== '' && $matches[1] !== $base64_decode && $matches[2] !== $str_replace) {
                    return $matches[0];
                }
                $tmp = preg_split('~\s*\.\s*~msi', $matches[4]);

                foreach ($tmp as &$item) {
                    $item = $vars[$item];
                }
                unset($item);
                $tmp = implode('', $tmp);
                $layer = str_replace($matches[3], "", $tmp);
                if ($base64_decode !== '') {
                    $layer = base64_decode($layer);
                }
                return $matches[0];
            }, $res);
        $res = str_replace($find, $layer, $str);
        return $res;
    }

    private function deobfuscateSeolyzer($str, $matches)
    {
        $find           = $matches[0];
        $res            = $str;
        $vars           = [];
        $base64_decode  = '';
        $layer          = '';
        $gzuncompress   = '';

        preg_match_all('~(\$\w+)\s*=\s*([^$][^;]+)\s*;~msi', $str, $matches, PREG_SET_ORDER);
        foreach ($matches as $i => $match) {
            $var_name   = $match[1];
            $var_val    = trim($match[2]);
            if (preg_match('~"[^"]{0,20}"\s*\.chr\s*\(~i', $var_val)) {
                $var_val = Helpers::normalize($var_val);
            }
            $var_val = preg_replace('~^["\'](.*)["\']$~i', '\1', $var_val);
            $vars[$var_name] = trim($var_val);
            if ($var_val === 'base64_decode') {
                $base64_decode = $var_name;
            }
        }

        $res = preg_replace_callback('~\s*=\s*(\$\w+)\((\$\w+)\)~msi', static function ($matches) use (&$vars, &$gzuncompress, &$layer, $base64_decode) {
            if ($matches[1] !== $base64_decode) {
                return $matches[0];
            }
            if (!isset($vars[$matches[2]])) {
                return $matches[2];
            }
            $tmp = base64_decode($vars[$matches[2]]);
            if ($tmp === 'gzuncompress') {
                $gzuncompress = $matches[2];
            }
            $vars[$matches[2]] = $tmp;
            return " = '{$tmp}'";
        }, $res);

        if ($gzuncompress !== '') {
            $res = preg_replace_callback('~(\$\w+)\(\s*(\$\w+)\((\$\w+)\)~msi',
                function ($matches) use (&$vars, $gzuncompress, &$layer, $base64_decode) {
                    if ($matches[1] !== $gzuncompress && $matches[2] !== $base64_decode) {
                        return $matches[0];
                    }
                    if (!isset($vars[$matches[3]])) {
                        return $matches[3];
                    }
                    $tmp = gzuncompress(base64_decode($vars[$matches[3]]));
                    $layer = $matches[3];
                    $vars[$matches[3]] = $tmp;
                    return "'{$tmp}'";
                }, $res);
            $res = $vars[$layer];
        } else if (preg_match('~\$\w+\(\s*(\$\w+)\((\$\w+)\)~msi', $res)) {
            $res = preg_replace_callback('~\$\w+\(\s*(\$\w+)\((\$\w+)\)~msi',
                function ($matches) use (&$vars, &$layer, $base64_decode) {
                    if ($matches[1] !== $base64_decode) {
                        return $matches[0];
                    }
                    if (!isset($vars[$matches[2]])) {
                        return $matches[2];
                    }
                    $tmp = base64_decode($vars[$matches[2]]);
                    $layer = $matches[2];
                    $vars[$matches[2]] = $tmp;
                    return "'{$tmp}'";
                }, $res);
            $res = $vars[$layer];
        }
        return str_replace($find, $res, $str);
    }

    private function deobfuscateCreateFunc($str, $matches)
    {
        $result = $str;
        $funcs = str_replace($matches[4], '', $matches[3]);

        if (Helpers::concatStr($matches[1]) === 'create_function'
            && Helpers::concatStr($matches[2]) === 'eval') {
            $funcs = explode('(', $funcs);
            $iMax = count($funcs) - 2;
            $final_code = $matches[5];

            for ($i = $iMax; $i >= 0; $i--) {
                if ($funcs[$i][0] !== '\'' && $funcs[$i][0] !== '"') {
                    $funcs[$i] = '\'' . $funcs[$i];
                }
                $func = Helpers::concatStr($funcs[$i] . '"');
                if (Helpers::convertToSafeFunc($func)) {
                    $final_code = @Helpers::executeWrapper($func, [$final_code]);
                }
            }
            $result = $final_code;
        }
        $result = ' ?>' . $result;

        return $result;
    }

    private function deobfuscateGotoShell($str, $matches)
    {
        $str = Helpers::normalize($str);

        $str = preg_replace('~\${\'GLOBALS\'}\[\'(\w+)\'\]~msi', '$\1', $str);

        $vars = Helpers::collectVars($str, '\'');
        $need_remove_vars = [];
        foreach ($vars as $name => $value) {
            $last_str = $str;
            $str = str_replace('${' . $name . '}', '$' . $value, $str);
            if ($last_str != $str) {
                $need_remove_vars[$name] = $value;
            }
        }

        foreach ($need_remove_vars as $name => $value) {
            if (substr_count($str, $name) != 1) {
                continue;
            }
            $str = str_replace($name.'=\'' . $value . '\';', '', $str);
        }
        return $str;
    }

    private function deobfuscateCreateFuncConcat($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        $vars = [];
        $res = preg_replace_callback('~(?|(\$\w+)\s*=\s*(([base64_decode\'\.\s]+)|([eval\'\.\s]+)|([create_function\'\.\s]+)|([stripslashes\'\.\s]+)|([gzinflate\'\.\s]+)|([strrev\'\.\s]+)|([str_rot13\'\.\s]+)|([gzuncompress\'\.\s]+)|([urldecode\'\.\s]+)([rawurldecode\'\.\s]+));)~', static function($matches) use (&$vars) {
            $tmp = str_replace('\' . \'', '', $matches[0]);
            $tmp = str_replace('\'.\'', '', $tmp);
            $value = str_replace('\' . \'', '', $matches[2]);
            $value = str_replace('\'.\'', '', $value);
            $vars[$matches[1]] = substr($value, 1, -1);
            return $tmp;
        }, $res);
        foreach($vars as $key => $var) {
            $res = str_replace($key, $var, $res);
            $res = str_replace($var . ' = \'' . $var . '\';', '', $res);
            $res = str_replace($var . ' = "";', '', $res);
        }
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalWrapVar($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        $vars = [];
        $res = preg_replace_callback('~(?|(\$\w+)\s*=\s*(([base64_decode"\'\.\s]+)|([eval"\'\.\s]+)|([create_function"\'\.\s]+)|([stripslashes"\'\.\s]+)|([gzinflate"\'\.\s]+)|([strrev"\'\.\s]+)|([str_rot13"\'\.\s]+)|([gzuncompress"\'\.\s]+)|([urldecode"\'\.\s]+)([rawurldecode"\'\.\s]+));)~msi', static function($matches) use (&$vars) {
            $tmp = preg_replace('~[\'"]\s*?[\+\.]+\s*?[\'"]~msi', '', $matches[0]);
            $value = preg_replace('~[\'"]\s*?[\+\.]+\s*?[\'"]~msi', '', $matches[2]);
            $vars[$matches[1]] = substr($value, 1, -1);
            return $tmp;
        }, $res);
        $res = preg_replace_callback('~\("([^\)]+)\'\)~msi',  function ($m) {
            return '(\'' . preg_replace('~[\'"]\s*?[\+\.]+\s*?[\'"]~msi', '', $m[1]) . '\'\)';
        }, $res);
        $temp = substr($res, strpos($res, '@eval'));
        $before = substr($res, 0, strpos($res, '@eval'));
        $temp1 = $temp;
        foreach($vars as $key => $var) {
            $temp = str_replace($key, $var, $temp);
        }
        $res = str_replace($temp1, $temp, $res);
        $res = str_replace($find, $res, $str);
        $res = $this->deobfuscateEval($res, []);
        $res = preg_replace('~/\*[^\*]+\*/~msi', '', $res);
        return $before . $res;
    }

    private function deobfuscateForEach($str, $matches)
    {
        $find = $matches[0];
        $alph = $matches[3];
        $vars = [];
        $res = $str;

        preg_replace('~\s*/\*\w+\*/\s*~msi', '', $res);

        $res = preg_replace_callback('~foreach\(\[([\d,]+)\]\s*as\s*\$\w+\)\s*\{\s*(\$\w+)\s*\.=\s*\$\w+\[\$\w+\];\s*\}~mis', static function($matches) use ($alph, &$vars) {
            $chars = explode(',', $matches[1]);
            $value = '';
            foreach ($chars as $char) {
                $value .= $alph[$char];
            }
            $vars[$matches[2]] = $value;
            return "{$matches[2]} = '{$value}';";
        }, $res);

        foreach($vars as $key => $var) {
            $res = str_replace($key, $var, $res);
            $res = str_replace($var . " = '" . $var . "';", '', $res);
            $res = str_replace($var . ' = "";', '', $res);
        }

        preg_match('~(\$\w+)\s*=\s*strrev\([create_function\.\']+\);~ms', $res, $matches);
        $res = str_replace($matches[0], '', $res);
        $res = str_replace($matches[1], 'create_function', $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateSubst2($str)
    {
        preg_match('~(\$\w+)="([^"])+(.{0,70}\1.{0,400})+;\s*}~msi', $str, $matches);
        $find = $matches[0];
        $res = $str;
        preg_match('~(\$\w+)="(.+?)";~msi', $str, $matches);
        $alph = stripcslashes($matches[2]);
        $var = $matches[1];
        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace($var . '[' . $i . '].', "'" . $alph[$i] . "'", $res);
            $res = str_replace($var . '[' . $i . ']', "'" . $alph[$i] . "'", $res);
        }
        $res = str_replace("''", '', $res);
        preg_match_all('~(\$GLOBALS\[\'\w{1,40}\'\])\s*=\s*\'(([^\'\\\\]++|\\\\.)*)\';~msi', $res, $matches, PREG_SET_ORDER);

        foreach ($matches as $index => $var) {
            $res = str_replace($var[1], $var[2], $res);
            $res = str_replace($var[2] . " = '" . $var[2] . "';", '', $res);
        }

        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateAssert($str, $matches)
    {
        $find = $matches[0];
        $res = base64_decode($matches[3]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateUrlDecode2($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        if (isset($matches[10])) {
            $res = base64_decode($matches[10]);
        }
        if (preg_match('~\$\w+=["\']([^\'"]+)[\'"];\s*eval\(\'\?>\'\.[\$\w\(\)\*,\s]+;~msi', $res, $match)) {
            $res = base64_decode(strtr(substr($match[1], 52*2), substr($match[1], 52, 52), substr($match[1], 0, 52)));
        }

        if (preg_match('~function\s*(\w+)\(\$\w+\)[\w{\$=\s*();<+\[\]\-]+\}\s+return[\$\s\w;]+}eval\(\1\("([\w\/+=]+)?"\)\);~', $res, $matchEval)) {
            $res = gzinflate(base64_decode($matchEval[2]));
            for ($i=0, $iMax = strlen($res); $i < $iMax; $i++) {
                $res[$i] = chr(ord($res[$i])-1);
            }
            $res = str_replace($find, $res, $str);
            return $res;
        }

        if (preg_match('~header\(\'[^\']+\'\);(?:\$\w+=\${[^}]+}\[[^\]]+\]\(\'.*?\'?;}?\'\);)+\${[^}]+}\[[^\]]+\]\(\);~msi',
            $matches[6], $match)) {
            $res = stripcslashes($match[0]);
            $dictionaryValue = urldecode($matches[3]);
            $vars = Helpers::getVarsFromDictionary($dictionaryValue, $str);
            $res = Helpers::replaceVarsFromArray($vars, $res);
            $res = Helpers::replaceCreateFunction($res);

            preg_match('~\$([0_O]+)\s*=\s*function\s*\((\$\w+)\)\s*\{\s*\$[O_0]+\s*=\s*substr\s*\(\2,(\d+),(\d+)\);\s*\$[O_0]+\s*=\s*substr\s*\(\2,([\d-]+)\);\s*\$[O_0]+\s*=\s*substr\s*\(\2,(\d+),strlen\s*\(\2\)-(\d+)\);\s*return\s*gzinflate\s*\(base64_decode\s*\(\$[O_0]+\s*\.\s*\$[O_0]+\s*\.\s*\$[O_0]+\)+;~msi', $res, $m);
            $res = preg_replace_callback('~\$\{"GLOBALS"}\["([0_O]+)"\]\s*\(\'([^\']+)\'\)~msi', static function ($calls) use ($m) {
                if ($calls[1] !== $m[1]) {
                    return $calls[0];
                }
                $temp1 = substr($calls[2], $m[3], $m[4]);
                $temp2 = substr($calls[2], $m[5]);
                $temp3 = substr($calls[2], $m[6],strlen($calls[2]) - $m[7]);
                return "'" . gzinflate(base64_decode($temp1 . $temp3 . $temp2)) . "'";
            }, $res);
            return $res;
        }

        if (preg_match('~((?:\$\w{1,50}\s*=\s*[\'"][^\'"]+[\'"];\s*)+)error_reporting\(\d\);\s*(\$\w{1,50})\s*=\s*(\$\w{1,50})\([\'"]([^\'"]+)[\'"]\);\s*\2\s*=\s(\$\w{1,50})\(\2\);\s*\$\w{1,50}\s*=\s*\$\w{1,50}\([\'"]\$\w{1,50}[\'"]\s*,\2\);~msi', $res, $match)) {
            $vars = Helpers::collectVars($match[0]);

            $func1 = $vars[$match[3]] ?? null;
            $func2 = $vars[$match[5]] ?? null;
            if (Helpers::convertToSafeFunc($func1) && Helpers::convertToSafeFunc($func2)) {
                $res = Helpers::executeWrapper($func2, [
                    Helpers::executeWrapper($func1, [$match[4]])
                ]);
            }

            if (substr_count($res, 'goto ') > 100) {
                $res = Helpers::unwrapGoto($res);
            }

            return $res;
        }

        $res = str_replace($find, ' ?>' . $res, $str);

        return $res;
    }

    private function deobfuscatePHPMyLicense($str)
    {
        preg_match('~\$\w+\s*=\s*base64_decode\s*\([\'"][^\'"]+[\'"]\);\s*if\s*\(!function_exists\s*\("rotencode"\)\).{0,1000}eval\s*\(\$\w+\s*\(base64_decode\s*\([\'"]([^"\']+)[\'"]\)+;~msi', $str, $matches);
        $find = $matches[0];
        $res = $str;
        $hang = 10;
        while(preg_match('~eval\s*\(\$\w+\s*\(base64_decode\s*\([\'"]([^"\']+)[\'"]\)+;~msi', $res, $matches) && $hang--) {
            $res = gzinflate(base64_decode($matches[1]));
        }
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEdoced_46esab($str)
    {
        preg_match('~(\$\w+)=[\'"]([^"\']+)[\'"];(\$\w+)=strrev\(\'edoced_46esab\'\);eval\(\3\([\'"]([^\'"]+)[\'"]\)+;~msi', $str, $matches);
        $find = $matches[0];
        $res = '';
        $decoder = base64_decode($matches[4]);
        preg_match('~(\$\w+)=base64_decode\(\$\w+\);\1=strtr\(\1,[\'"]([^\'"]+)[\'"],[\'"]([^\'"]+)[\'"]\);~msi', $decoder, $matches2);
        $res = base64_decode($matches[2]);
        $res = strtr($res, $matches2[2], $matches2[3]);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEdoced_46esab_etalfnizg($str, $matches)
    {
        return gzinflate(base64_decode($matches[3]));
    }

    private function deobfuscateEvalVarVar($str)
    {
        preg_match('~\$\{"GLOBALS"\}\[[\'"](\w+)[\'"]\]=["\'](\w+)[\'"];\$\{"GLOBALS"\}\[[\'"](\w+)[\'"]\]=["\']\2[\'"];(\${\$\{"GLOBALS"\}\[[\'"]\3[\'"]\]})=[\'"]([^\'"]+)[\'"];eval.{10,50}?(\$\{\$\{"GLOBALS"\}\[[\'"]\1[\'"]\]\})\)+;~msi', $str, $matches);
        $find = $matches[0];
        $res = str_replace($matches[4], '$' . $matches[2], $str);
        $res = str_replace($matches[6], '$' . $matches[2], $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEscapes($str, $matches)
    {
        $find = $matches[0];
        $res = stripcslashes($str);
        $res = str_replace($find, $res, $str);
        preg_match_all('~(\$\{"GLOBALS"\}\[[\'"](\w+)[\'"]\])=["\'](\w+)[\'"];~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $res = str_replace([$match[0], '${' . $match[1] . '}'], ['', '$' . $match[3]], $res);
        }

        return $res;
    }

    private function deobfuscateparenthesesString($str)
    {
        $hangs = 5;
        $res = $str;
        $find = '';
        while (preg_match('~for\((\$\w+)=\d+,(\$\w+)=\'([^\$]+)\',(\$\w+)=\'\';@?ord\(\2\[\1\]\);\1\+\+\)\{if\(\1<\d+\)\{(\$\w+)\[\2\[\1\]\]=\1;\}else\{\$\w+\.\=@?chr\(\(\5\[\2\[\1\]\]<<\d+\)\+\(\5\[\2\[\+\+\1\]\]\)\);\}\}\s*.{0,500}eval\(\4\);(if\(isset\(\$_(GET|REQUEST|POST|COOKIE)\[[\'"][^\'"]+[\'"]\]\)\)\{[^}]+;\})?~msi', $res, $matches) && $hangs--) {
            if($hangs == 4) {
                $find = $matches[0];
            }
            $res = '';
            $temp = [];
            $matches[3] = stripcslashes($matches[3]);
            for($i=0, $iMax = strlen($matches[3]); $i < $iMax; $i++)
            {
                if($i < 16) $temp[$matches[3][$i]] = $i;
                else $res .= @chr(($temp[$matches[3][$i]]<<4) + ($temp[$matches[3][++$i]]));
            }
        }
        if(!isset($matches[6])) {
            //$xor_key = 'SjJVkE6rkRYj';
            $xor_key = $res^"\n//adjust sy"; //\n//adjust system variables";
            $res = $res ^ substr(str_repeat($xor_key, (strlen($res) / strlen($xor_key)) + 1), 0, strlen($res));
        }
        if(substr($res,0,12)=="\n//adjust sy") {
            $res = str_replace($find, $res, $str);
            return $res;
        } else return $str;
    }

    private function deobfuscateEvalInject($str, $matches)
    {
        $res = $str;
        $find = $matches[0];
        $alph = $matches[2];

        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace($matches[1] . '[' . $i . '].', "'" . $alph[$i] . "'", $res);
            $res = str_replace($matches[1] . '[' . $i . ']', "'" . $alph[$i] . "'", $res);
        }

        $res = str_replace("''", '', $res);
        $res = str_replace("' '", '', $res);

        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateWebshellObf($str)
    {
        $res = $str;
        preg_match('~function\s*(\w{1,40})\s*\(\s*(\$\w{1,40})\s*,\s*(\$\w{1,40})\s*\)\s*\{\s*(\$\w{1,40})\s*=\s*str_rot13\s*\(\s*gzinflate\s*\(\s*str_rot13\s*\(\s*base64_decode\s*\(\s*[\'"]([^\'"]*)[\'"]\s*\)\s*\)\s*\)\s*\)\s*;\s*(if\s*\(\s*\$\w+\s*==[\'"][^\'"]*[\'"]\s*\)\s*\{\s*(\$\w{1,40})\s*=(\$\w+[\{\[]\d+[\}\]]\.?)+;return\s*(\$\w+)\(\3\);\s*\}\s*else\s*)+\s*if\s*\(\s*\$\w+\s*==[\'"][^\'"]*[\'"]\s*\)\s*\{\s*return\s*eval\(\3\);\s*\}\s*\};\s*(\$\w{1,40})\s*=\s*[\'"][^\'"]*[\'"];(\s*\10\([\'"][^\'"]*[\'"],)+\s*[\'"]([^\'"]*)[\'"]\s*\)+;~msi',$str, $matches);
        $find = $matches[0];

        $alph = str_rot13(gzinflate(str_rot13(base64_decode($matches[5]))));

        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace($matches[4] . '{' . $i . '}.', "'" . $alph[$i] . "'", $res);
            $res = str_replace($matches[4] . '{' . $i . '}', "'" . $alph[$i] . "'", $res);
        }
        $res = base64_decode(gzinflate(str_rot13(convert_uudecode(gzinflate(base64_decode(strrev($matches[12])))))));
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateXorFName($str, $matches, $xor_key = null)
    {
        if (!isset($matches)) {
            preg_match('~(?(DEFINE)(?\'c\'(?:/\*\w+\*/)*))(\$\w+)\s*=\s*basename(?&c)\((?&c)trim(?&c)\((?&c)preg_replace(?&c)\((?&c)rawurldecode(?&c)\((?&c)"[%0-9A-F\.]+"(?&c)\)(?&c),\s*\'\',\s*__FILE__(?&c)\)(?&c)\)(?&c)\)(?&c);(\$\w+)\s*=\s*"([%\w\.\-\~]+)";(?:(\$\w+)=[^;]+;\5(?&c)\((?&c)\'\',\s*\'};\'\s*\.\s*(?&c)\()?(?:eval(?&c)\()?(?&c)rawurldecode(?&c)\((?&c)\3(?&c)\)(?&c)\s*\^\s*substr(?&c)\((?&c)str_repeat(?&c)\((?&c)\2,\s*(?&c)\((?&c)strlen(?&c)\((?&c)\3(?&c)\)(?&c)/strlen(?&c)\((?&c)\2(?&c)\)(?&c)\)(?&c)\s*\+\s*1(?&c)\)(?&c),\s*0,(?&c)\s*strlen(?&c)\((?&c)\3(?&c)\)(?&c)\)(?&c)\)(?:(?&c)\s*\.\s*\'{\'(?&c)\))?(?&c);~msi', $str, $matches);
        }
        $encrypted = rawurldecode($matches[4]);
        if (!isset($xor_key)) {
            $plain_text = '@ini_set(\'error_log\', NULL);';
            $plain_text2 = 'if (!defined(';
            $xor_key = substr($encrypted, 0, strlen($plain_text)) ^ $plain_text;
            if (preg_match('~\.?[a-z0-9-_]{8,}\.\w{3}~', $xor_key, $m)) {
                $xor_key = $m[0];
            } else {
                $xor_key = substr($encrypted, 0, strlen($plain_text2)) ^ $plain_text2;
                if (preg_match('~\.?[a-z0-9-_]{8,}\.\w{3}~', $xor_key, $m)) {
                    $xor_key = $m[0];
                }
            }
        }
        $result = $encrypted ^ substr(str_repeat($xor_key, (strlen($encrypted) / strlen($xor_key)) + 1), 0, strlen($encrypted));
        return $result;
    }

    private function deobfuscateSubstCreateFunc($str)
    {
        preg_match('~(\$\w{1,40})=\'(([^\'\\\\]|\\\\.)*)\';\s*((\$\w{1,40})=(\1\[\d+].?)+;\s*)+(\$\w{1,40})=\'\';\s*(\$\w{1,40})\(\7,\$\w{1,40}\.\"([^\"]+)\"\.\$\w{1,40}\.\5\);~msi', $str, $matches);
        $find = $matches[0];
        $php = base64_decode($matches[9]);
        preg_match('~(\$\w{1,40})=(\$\w{1,40})\("([^\']+)"\)~msi', $php, $matches);
        $matches[3] = base64_decode($matches[3]);
        $php = '';
        for ($i = 1, $iMax = strlen($matches[3]); $i < $iMax; $i++) {
            if ($i % 2) {
                $php .= substr($matches[3], $i, 1);
            }
        }
        $php = str_replace($find, $php, $str);
        return $php;
    }

    private function deobfuscateZeura($str, $matches)
    {
        $offset = (int)$matches[8] + (int)$matches[9];
        $obfPHP = explode('__halt_compiler();', $str);
        $obfPHP = end($obfPHP);
        $php = gzinflate(base64_decode(substr(trim($obfPHP), $offset)));
        $php = stripcslashes($php);
        $php = str_replace($matches[0], $php, $str);
        return $php;
    }

    private function deobfuscateZeuraFourArgs($str, $matches)
    {
        $offset = $matches[6] * -1;
        $res    = gzinflate(base64_decode(substr(trim($str), $offset)));

        return $res;
    }

    private function deobfuscateSourceCop($str, $matches)
    {
        $key = $matches[2];
        $obfPHP = $matches[1];
        $res = '';
        $index = 0;
        $len = strlen($key);
        $temp = hexdec('&H' . substr($obfPHP, 0, 2));
        for ($i = 2, $iMax = strlen($obfPHP); $i < $iMax; $i += 2) {
            $bytes = hexdec(trim(substr($obfPHP, $i, 2)));
            $index = (($index < $len) ? $index + 1 : 1);
            $decoded = $bytes ^ ord(substr($key, $index - 1, 1));
            if ($decoded <= $temp) {
                $decoded = 255 + $decoded - $temp;
            } else {
                $decoded -= $temp;
            }
            $res .= chr($decoded);
            $temp = $bytes;
        }
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscateGlobalsArray($str, $matches)
    {
        $res = $str;
        $alph = stripcslashes($matches[3]);
        $res = preg_replace('~\${"[\\\\x0-9a-f]+"}\[\'\w+\'\]\s*=\s*"[\\\\x0-9a-f]+";~msi', '', $res);

        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace([
                $matches[1] . '[' . $matches[2] . ']' . '[' . $i . '].',
                $matches[1] . '[' . $matches[2] . ']' . '[' . $i . ']'
            ], array("'" . $alph[$i] . "'", "'" . $alph[$i] . "'"), $res);
        }
        $res = str_replace("''", '', $res);

        preg_match_all('~(\$\w+)\[(\'\w+\')]\s*=\s*\'(\w+)\';~msi', $res, $funcs);
        foreach ($funcs[1] as $k => $var) {
            if ($var !== $matches[1]) {
                continue;
            }
            $vars[] = $funcs[2][$k];
            $func[] = $funcs[3][$k];
        }

        foreach ($vars as $index => $var) {
            $res = str_replace($matches[1] . '[' . $var . ']', $func[$index], $res);
        }

        foreach ($func as $remove) {
            $res = str_replace($remove . " = '" . $remove . "';", '', $res);
            $res = str_replace($remove . "='" . $remove . "';", '', $res);
        }
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscateXbrangwolf($str, $match)
    {
        return $match[0];
    }

    private function deobfuscateObfB64($str, $matches)
    {
        $res = base64_decode($matches[3]);
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscateArrayOffsets($str)
    {
        $vars = [];
        preg_match('~(\$\w{1,40})\s*=\s*\'([^\']*)\';\s*(\$\w{1,40})\s*=\s*explode\s*\((chr\s*\(\s*\(\d+\-\d+\)\)),substr\s*\(\1,\s*\((\d+\-\d+)\),\s*\(\s*(\d+\-\d+)\)\)\);.+\1\s*=\s*\$\w+[+\-\*]\d+;~msi', $str, $matches);

        $find = $matches[0];
        $obfPHP = $matches[2];
        $matches[4] = Helpers::calc($matches[4]);
        $matches[5] = (int)Helpers::calc($matches[5]);
        $matches[6] = (int)Helpers::calc($matches[6]);

        $func = explode($matches[4], strtolower(substr($obfPHP, $matches[5], $matches[6])));
        $func[1] = strrev($func[1]);
        $func[2] = strrev($func[2]);

        preg_match('~\$\w{1,40}\s=\sexplode\((chr\(\(\d+\-\d+\)\)),\'([^\']+)\'\);~msi', $str, $matches);
        $matches[1] = Helpers::calc($matches[1]);
        $offsets = explode($matches[1], $matches[2]);

        $res = '';
        for ($i = 0; $i < (sizeof($offsets) / 2); $i++) {
            $res .= substr($obfPHP, $offsets[$i * 2], $offsets[($i * 2) + 1]);
        }

        preg_match('~return\s*\$\w{1,40}\((chr\(\(\d+\-\d+\)\)),(chr\(\(\d+\-\d+\)\)),\$\w{1,40}\);~msi', $str, $matches);
        $matches[1] = Helpers::calc($matches[1]);
        $matches[2] = Helpers::calc($matches[2]);

        $res = Helpers::stripsquoteslashes(str_replace($matches[1], $matches[2], $res));
        $res = "<?php\n" . $res . "?>";

        preg_match('~(\$\w{1,40})\s=\simplode\(array_map\(\"[^\"]+\",str_split\(\"(([^\"\\\\]++|\\\\.)*)\"\)\)\);(\$\w{1,40})\s=\s\$\w{1,40}\(\"\",\s\1\);\s\4\(\);~msi', $res, $matches);

        $matches[2] = stripcslashes($matches[2]);
        for ($i=0, $iMax = strlen($matches[2]); $i < $iMax; $i++) {
            $matches[2][$i] = chr(ord($matches[2][$i])-1);
        }

        $res = str_replace($matches[0], $matches[2], $res);

        preg_match_all('~(\$\w{1,40})\s*=\s*\"(([^\"\\\\]++|\\\\.)*)\";~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $vars[$match[1]] = stripcslashes($match[2]);
        }

        preg_match_all('~(\$\w{1,40})\s*=\s*\'(([^\'\\\\]++|\\\\.)*)\';~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $vars[$match[1]] = Helpers::stripsquoteslashes($match[2]);
        }

        preg_match('~(\$\w{1,40})\s*=\s*\"\\\\x73\\\\164\\\\x72\\\\137\\\\x72\\\\145\\\\x70\\\\154\\\\x61\\\\143\\\\x65";\s(\$\w{1,40})\s=\s\'(([^\'\\\\]++|\\\\.)*)\';\seval\(\1\(\"(([^\"\\\\]++|\\\\.)*)\",\s\"(([^\"\\\\]++|\\\\.)*)\",\s\2\)\);~msi', $res, $matches);

        $matches[7] = stripcslashes($matches[7]);
        $matches[3] = Helpers::stripsquoteslashes(str_replace($matches[5], $matches[7], $matches[3]));


        $res = str_replace($matches[0], $matches[3], $res);

        preg_match_all('~(\$\w{1,40})\s*=\s*\"(([^\"\\\\]++|\\\\.)*)\";~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $vars[$match[1]] = stripcslashes($match[2]);
        }

        preg_match_all('~(\$\w{1,40})\s*=\s*\'(([^\'\\\\]++|\\\\.)*)\';~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $vars[$match[1]] = Helpers::stripsquoteslashes($match[2]);
        }

        preg_match('~\$\w{1,40}\s=\sarray\(((\'(([^\'\\\\]++|\\\\.)*)\',?(\.(\$\w{1,40})\.)?)+)\);~msi', $res, $matches);

        foreach ($vars as $var => $value) {
            $matches[1] = str_replace("'." . $var . ".'", $value, $matches[1]);
        }

        $array2 = explode("','", substr($matches[1], 1, -1));
        preg_match('~eval\(\$\w{1,40}\(array\((((\"[^\"]\"+),?+)+)\),\s(\$\w{1,40}),\s(\$\w{1,40})\)\);~msi', $res, $matches);

        $array1 = explode('","', substr($matches[1], 1, -1));

        $temp = array_keys($vars);
        $temp = $temp[9];

        $arr = explode('|', $vars[$temp]);
        $off=0;
        $funcs=[];

        for ($i = 0, $iMax = count($arr); $i < $iMax; $i++) {
            if ($i === 0) {
                $off = 0;
            } else {
                $off = $arr[$i - 1] + $off;
            }
            $len = $arr[$i];
            $temp = array_keys($vars);
            $temp = $temp[7];

            $funcs[] = substr($vars[$temp], $off, $len);
        }

        for ($i = 0; $i < 5; $i++) {
            if ($i % 2 === 0) {
                $funcs[$i] = strrev($funcs[$i]);
                $g = substr($funcs[$i], strpos($funcs[$i], "9") + 1);
                $g = stripcslashes($g);
                $v = explode(":", substr($funcs[$i], 0, strpos($funcs[$i], "9")));
                for ($j = 0, $jMax = count($v); $j < $jMax; $j++) {
                    $q = explode("|", $v[$j]);
                    $g = str_replace($q[0], $q[1], $g);
                }
                $funcs[$i] = $g;
            } else {
                $h = explode("|", strrev($funcs[$i]));
                $d = explode("*", $h[0]);
                $b = $h[1];
                for ($j = 0, $jMax = count($d); $j < $jMax; $j++) {
                    $b = str_replace($j, $d[$j], $b);
                }
                $funcs[$i] = $b;
            }
        }
        $temp = array_keys($vars);
        $temp = $temp[8];
        $funcs[] = str_replace('9', ' ', strrev($vars[$temp]));
        $funcs = implode("\n", $funcs);
        preg_match('~\$\w{1,40}\s=\s\'.+?eval\([^;]+;~msi', $res, $matches);
        $res = str_replace($matches[0], $funcs, $res);
        $res = stripcslashes($res);
        $res = str_replace('}//}}', '}}', $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateArrayOffsetsEval($str, $matches)
    {
        $arg1 = explode(chr(Helpers::calculateMathStr($matches[4])), $matches[5]);
        $arg2 = $matches[2];
        $code = null;

        for ($enqvlelpmr = 0; $enqvlelpmr < (sizeof($arg1) / 2); $enqvlelpmr++) {
            $code .= substr($arg2, $arg1[($enqvlelpmr * 2)], $arg1[($enqvlelpmr * 2) + 1]);
        }

        $res = str_replace(
            chr(Helpers::calculateMathStr($matches[20])),
            chr(Helpers::calculateMathStr($matches[21])),
            $code
        );

        $arg1 = substr(
            $matches[2],
            Helpers::calculateMathStr($matches[7]),
            Helpers::calculateMathStr($matches[8])
        );

        $func = substr(
            $matches[2],
            Helpers::calculateMathStr($matches[23]),
            Helpers::calculateMathStr($matches[24])
        );

        return $res;
    }

    private function deobfuscateXoredVar($str, $matches)
    {
        $res = $str;
        $find = $matches[0];
        $str = str_replace('\\\'', '@@quote@@', $str);
        preg_match_all('~(\$\w{1,40})\s*=\s*\'([^\']*)\'\s*(?:\^\s*\'([^\']*)\')?;~msi', $str, $matches, PREG_SET_ORDER);
        $vars = [];
        foreach ($matches as $match) {
            $vars[$match[1]] = str_replace('@@quote@@', '\\\'', $match[2]);
            if (isset($match[3])) {
                $vars[$match[1]] ^= str_replace('@@quote@@', '\\\'', $match[3]);
            }
            $res = str_replace($match[0], $match[1] . "='" . $vars[$match[1]] . "';", $res);
        }

        preg_match_all('~(\$\w{1,40})\s*=\s*(\w+);~msi', $str, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $vars[$match[1]] = $match[2];
        }

        preg_match_all('~(\$\w{1,40})\s*=\s*\'([^\']*)\'\^(\$\w+);~msi', $str, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            if (isset($vars[$match[3]])) {
                $vars[$match[1]] = str_replace('@@quote@@', '\\\'', $match[2]) ^ $vars[$match[3]];
                $res = str_replace($match[0], $match[1] . "='" . $vars[$match[1]] . "';", $res);
            }
        }

        preg_match_all('~(\$\w{1,40})\s*=\s*(\$\w+)\^\'([^\']*)\';~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            if (isset($vars[$match[2]])) {
                $vars[$match[1]] = str_replace('@@quote@@', '\\\'', $match[3]) ^ $vars[$match[2]];
                $res = str_replace($match[0], $match[1] . "='" . $vars[$match[1]] . "';", $res);
            }
        }
        preg_match_all('~(?<!\.)\'([^\']*)\'\^(\$\w+)~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            if (isset($vars[$match[2]])) {
                $res = str_replace($match[0], "'" . addcslashes(str_replace('@@quote@@', '\\\'', $match[1]) ^ $vars[$match[2]], '\\\'') . "'", $res);
            }
        }
        preg_match_all('~(\$\w+)\^\'([^\']*)\'~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            if (isset($vars[$match[1]])) {
                $res = str_replace($match[0], "'" . addcslashes($vars[$match[1]] ^ str_replace('@@quote@@', '\\\'', $match[2]), '\\\'') . "'", $res);
            }
        }

        preg_match_all('~(\$\w+)(\.)?=(\$\w+)?(?:\'([^\']*)\')?\.?(\$\w+)?(?:\'([^\']*)\')?(?:\^(\$\w+))?(?:\.\'([^\']*)\')?;~msi', $res, $matches, PREG_SET_ORDER);
        foreach ($matches as $match) {
            $val = '';

            //var
            if (isset($match[2]) && $match[2] !== '') {
                if (isset($vars[$match[1]])) {
                    $val .= $vars[$match[1]];
                } else {
                    continue;
                }
            }

            //var
            if (isset($match[3]) && $match[3] !== '') {
                if (isset($vars[$match[3]])) {
                    $val .= $vars[$match[3]];
                } else {
                    continue;
                }
            }

            //str
            if (isset($match[4]) && $match[4] !== '') {
                $val .= $match[4];
            }

            //var
            if (isset($match[5]) && $match[5] !== '') {
                if (isset($vars[$match[5]])) {
                    $val .= $vars[$match[5]];
                } else {
                    continue;
                }
            }

            //str
            if (isset($match[6]) && $match[6] !== '') {
                $val .= $match[6];
            }

            //var and str
            if (isset($match[7]) && $match[7] !== '') {
                if (isset($vars[$match[7]])) {
                    $additionalStr = '';
                    if (isset($match[8]) && $match[8] !== '') {
                        $additionalStr = $match[8];
                    }
                    $val ^= $vars[$match[7]] . $additionalStr;
                } else {
                    continue;
                }
            } else {
                if (isset($match[8]) && $match[8] !== '') {
                    $val .= $match[8];
                }
            }

            $vars[$match[1]] = $val;
            $res = str_replace($match[0], '', $res);
        }

        $res = preg_replace_callback('~(\$\w+)([()]|==)~msi', static function ($match) use ($vars) {
            $res = $vars[$match[1]] ?? $match[1];
            if (isset($vars[$match[1]]) && ($match[2] === ')' || $match[2] === '==')) {
                $res = "'$res'";
            }

            return $res . $match[2];
        }, $res);

        foreach ($vars as $var => $value) {
            $res = str_replace($var, $value, $res);
            $res = str_replace($value . "='" . $value . "';", '', $res);
        }
        $res = str_replace($find, $res, $str);

        if (preg_match('~((\$\w+)=\${\'(\w+)\'};)(?:.*?)((\$\w+)=\2(\[\'[^\']+\'\]);)~msi', $res, $matches)) {
            $res = str_replace($matches[1], '', $res);
            $res = str_replace($matches[4], '', $res);
            $cookieVar = sprintf('$%s%s', $matches[3], $matches[6]);
            $res = str_replace($matches[5], $cookieVar, $res);
        }

        return $res;
    }

    private function deobfuscatePhpMess($str, $matches)
    {
        $res = base64_decode(gzuncompress(base64_decode(base64_decode($matches[4]))));
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscatePregReplaceSample05($str)
    {
        $res = '';
        preg_match('~(\$\w{1,40})\s*=\s*\"([^\"]+)\";\s*\$\w+\s*=\s*\$\w+\(\1,\"([^\"]+)\",\"([^\"]+)\"\);\s*\$\w+\(\"[^\"]+\",\"[^\"]+\",\"\.\"\);~msi', $str, $matches);
        $res = strtr($matches[2], $matches[3], $matches[4]);
        $res = base64_decode($res);
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscatePregReplaceB64($str, $matches)
    {
        $find = $matches[0];
        $res = str_replace($find, base64_decode($matches[4]), $str);
        $res = stripcslashes($res);
        preg_match('~eval\(\${\$\{"GLOBALS"\}\[\"\w+\"\]}\(\${\$\{"GLOBALS"\}\[\"\w+\"]}\(\"([^\"]+)\"\)\)\);~msi', $res, $matches);
        $res = gzuncompress(base64_decode($matches[1]));
        preg_match('~eval\(\$\w+\(\$\w+\("([^"]+)"\)\)\);~msi', $res, $matches);
        $res = gzuncompress(base64_decode($matches[1]));
        preg_match('~eval\(\$\w+\(\$\w+\("([^"]+)"\)\)\);~msi', $res, $matches);
        $res = gzuncompress(base64_decode($matches[1]));
        preg_match_all('~\$(\w+)\s*(\.)?=\s*("[^"]*"|\$\w+);~msi', $res, $matches, PREG_SET_ORDER);
        $var = $matches[0][1];
        $vars = [];
        foreach ($matches as $match) {
            if($match[2]!=='.') {
                $vars[$match[1]] = substr($match[3], 1, -1);
            }
            else {
                $vars[$match[1]] .= $vars[substr($match[3], 1)];
            }
        }
        $res = str_replace("srrKePJUwrMZ", "=", $vars[$var]);
        $res = gzuncompress(base64_decode($res));
        preg_match_all('~function\s*(\w+)\(\$\w+,\$\w+\)\{.+?}\s*};\s*eval\(((\1\(\'(\w+)\',)+)\s*"([\w/\+]+)"\)\)\)\)\)\)\)\);~msi', $res, $matches);
        $decode = array_reverse(explode("',", str_replace($matches[1][0] . "('", '', $matches[2][0])));
        array_shift($decode);
        $arg = $matches[5][0];
        foreach ($decode as $val) {
            $arg = Helpers::someDecoder2($val, $arg);
        }
        $res = $arg;
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateDecoder($str, $matches)
    {
        $res = Helpers::someDecoder($matches[2]);
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscateGBE($str)
    {
        preg_match('~(\$\w{1,40})=\'([^\']+)\';\1=gzinflate\(base64_decode\(\1\)\);\1=str_replace\(\"__FILE__\",\"\'\$\w+\'\",\1\);eval\(\1\);~msi', $str, $matches);
        $res = str_replace($matches[0], gzinflate(base64_decode($matches[2])), $str);
        return $res;
    }

    private function deobfuscateGBZ($str, $matches)
    {
        $res = str_replace($matches[0], base64_decode(str_rot13($matches[4])), $str);
        return $res;
    }

    private function deobfuscateBitrix($str, $matches)
    {
        $find       = $matches[0];
        $res        = $str;
        $funclist   = [];
        $strlist    = [];

        $res = preg_replace("|[\"']\s*\.\s*['\"]|smi", '', $res);
        $res = Helpers::replaceMinMaxRound($res, 111);
        $res = Helpers::replaceBase64Decode($res, '"');
        $replace_from = [];
        $replace_to   = [];
        if (preg_match_all('|\$GLOBALS\[[\'"](.+?)[\'"]\]\s*=\s*Array\((.+?)\);|smi', $res, $founds, PREG_SET_ORDER)) {
            foreach ($founds as $found) {
                $varname = $found[1];
                $funclist[$varname] = explode(',', $found[2]);
                $funclist[$varname] = array_map(function ($value) {
                    return trim($value, "'\"");
                }, $funclist[$varname]);

                foreach ($funclist as $var => $funcs) {
                    foreach($funcs as $k => $func) {
                        $replace_from[] = '$GLOBALS["' . $var . '"][' . $k . ']';
                        $replace_from[] = '$GLOBALS[\'' . $var . '\'][' . $k . ']';
                        $replace_to[] = $func;
                        $replace_to[] = $func;
                    }
                }
                $replace_from[] = $found[0];
                $replace_to[] = '';
                $res = str_replace($replace_from, $replace_to, $res);
            }
        }

        $array_temp = [];
        while (preg_match('~function\s*(\w{1,60})\(\$\w+\)\s*{\s*\$\w{1,60}\s*=\s*Array\((.{1,40000}?)\);\s*return\s*base64_decode[^}]+}~msi', $res, $found)) {
            $strlist = explode(',', $found[2]);
            $array_temp[$found[1]] = array_map('base64_decode', $strlist);
            $replace_from = [];
            $replace_to = [];
            foreach($array_temp[$found[1]] as $k => $v) {
                $replace_from[] = $found[1] . '(' . $k . ')';
                $replace_to[] = '\'' . $v . '\'';
            }
            $replace_from[] = $found[0];
            $replace_to[] = '';
            $res = str_replace($replace_from, $replace_to, $res);
        }

        $res = preg_replace('~\'\s*\.\s*\'~', '', $res);
        if (preg_match_all('~\s*function\s*(_+(.{1,60}?))\(\$[_0-9]+\)\s*\{\s*static\s*\$([_0-9]+)\s*=\s*(true|false);.{1,30000}?\$\3\s*=\s*array\((.*?)\);\s*return\s*base64_decode\(\$\3~smi', $res, $founds, PREG_SET_ORDER)) {
            foreach ($founds as $found) {
                $strlist = explode('",', $found[5]);
                $strlist = implode("',", $strlist);
                $strlist = explode("',", $strlist);
                $array_temp[$found[1]] = array_map('base64_decode', $strlist);
                $replace_from = [];
                $replace_to = [];
                foreach($array_temp[$found[1]] as $k => $v) {
                    $replace_from[] = $found[1] . '(' . $k . ')';
                    $replace_to[] = '\'' . $v . '\'';
                }
                $res = str_replace($replace_from, $replace_to, $res);
            }
        }
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateLockIt($str, $matches)
    {
        $phpcode = base64_decode(Helpers::getTextInsideQuotes(Helpers::getEvalCode($str)));
        $result = $str;
        $offset = 0;
        $dictName = $matches[1];
        $dictVal = urldecode($matches[2]);
        $vars = [$dictName => $dictVal];

        $vars = Helpers::getVarsFromDictionaryDynamically($vars, $str);

        if (preg_match('~eval\(~msi', $matches[15])) {
            $phpcode = base64_decode(Helpers::getTextInsideQuotes(Helpers::getEvalCode($matches[15])));
        }

        if ($matches[7] !== '' && preg_match('~eval\(~msi', $matches[7])) {
            $phpcode2 = base64_decode(Helpers::getTextInsideQuotes(Helpers::getEvalCode($matches[7])));
            $vars = Helpers::collectVars($phpcode2, "'", $vars);
        }

        if (preg_match('~\$_F=__FILE__;\$_X=\'([^\']+)\';\s*eval\s*\(\s*\$?\w{1,60}\s*\(\s*[\'"][^\'"]+[\'"]\s*\)\s*\)\s*;~msi', $str, $matches)) {
            $needles = Helpers::getNeedles($phpcode);
            $needle        = $needles[0];
            $before_needle = $needles[1];
            $strToDecode = base64_decode($matches[1]);
            return '<?php ' . strtr($strToDecode, $needle, $before_needle);
        }

        $count = 0;
        preg_match_all('~,(\d+|0x\w+)\)~msi', $phpcode, $offsetMatches, PREG_SET_ORDER);
        if (count($offsetMatches) === 2) {
            foreach ($offsetMatches as $offsetMatch) {
                if (strpos($offsetMatch[1], '0x') !== false && isset($str[$offset + hexdec($offsetMatch[1])])) {
                    $count++;
                    $offset += hexdec($offsetMatch[1]);
                } else if (isset($str[$offset + (int)$offsetMatch[1]])) {
                    $count++;
                    $offset += (int)$offsetMatch[1];
                }
            }
        }

        $finalOffset = 0;
        if (preg_match('~(\$[O0]*)=(\d+|0x\w+);~msi', $str, $match) && $count === 2) {
            if (strpos($match[2], '0x') !== false) {
                $finalOffset = hexdec($match[2]);
            } else {
                $finalOffset = (int)$match[2];
            }
        }

        $result = substr($str, $offset);
        if ($finalOffset > 0) {
            $result = substr($result, 0, $finalOffset);
        }

        if (preg_match('~[\'"]([^\'"]+)[\'"],[\'"]([^\'"]+)[\'"]~msi', $phpcode, $needleMatches)) {
            $result = strtr($result, $needleMatches[1], $needleMatches[2]);
        }

        $result = base64_decode($result);

        $result = Helpers::replaceVarsFromArray($vars, $result, true);

        $found = true;
        $hop = 50;
        while ($found && $hop > 0) {
            $found = false;

            if (preg_match('~eval\s?\(((?:(?:gzinflate|str_rot13|base64_decode)\()+\'[^\']+\'\)+);~msi', $result, $evalMatch)) {
                $result = str_replace($evalMatch[0], $this->unwrapFuncs($evalMatch[1]), $result);
                $found = true;
            }

            if (preg_match('~eval\s?\((?:str_rot13\()+\'((?|\\\\\'|[^\'])+\')\)\);~msi', $result, $evalMatch)) {
                $result = str_replace($evalMatch[0], $this->unwrapFuncs($evalMatch[1]), $result);
                $found = true;
            }

            $hop--;
        }

        $result = preg_replace_callback(
            '~(echo\s*)?base64_decode\(\'([\w=\+\/]+)\'\)~',
            function ($match) {
                if ($match[1] != "") {
                    return 'echo \'' . base64_decode($match[2]) . '\'';
                }
                return '\'' . str_replace('\'', '\\\'', base64_decode($match[2])) . '\'';
            },
            $result
        );

        $result = Helpers::replaceVarsFromArray($vars, $result, true);

        return '<?php ' . $result;
    }

    private function deobfuscateB64inHTML($str, $matches)
    {
        $obfPHP        = $str;
        $phpcode       = base64_decode(Helpers::getTextInsideQuotes(Helpers::getEvalCode($obfPHP)));
        $needles       = Helpers::getNeedles($phpcode);
        $needle        = $needles[count($needles) - 2];
        $before_needle = end($needles);
        $pointer1 = $matches[2];
        $temp = strtr($obfPHP, $needle, $before_needle);
        $end = 8;
        for ($i = strlen($temp) - 1; $i > strlen($temp) - 15; $i--) {
            if ($temp[$i] === '=') {
                $end = strlen($temp) - 1 - $i;
            }
        }

        $phpcode = base64_decode(substr($temp, strlen($temp) - $pointer1 - ($end-1), $pointer1));
        $phpcode = str_replace($matches[0], $phpcode, $str);
        return $phpcode;
    }

    private function deobfuscateStrtrFread($str, $layer2)
    {
        $str = explode('?>', $str);
        $str = end($str);
        $res = substr($str, $layer2[1], strlen($str));
        $res = base64_decode(strtr($res, $layer2[2], $layer2[3]));
        $res = str_replace($layer2[0], $res, $str);
        return $res;
    }

    private function deobfuscateStrtrBase64($str, $matches)
    {
        $str = strtr($matches[2], $matches[3], $matches[4]);
        $res = base64_decode($str);
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscateByteRun($str)
    {
        preg_match('~\$_F=__FILE__;\$_X=\'([^\']+)\';\s*eval\s*\(\s*\$?\w{1,60}\s*\(\s*[\'"][^\'"]+[\'"]\s*\)\s*\)\s*;~msi', $str, $matches);
        $res = base64_decode($matches[1]);
        $res = strtr($res, '123456aouie', 'aouie123456');
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscateExplodeSubst($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        preg_match('~(\$_\w+\[\w+\])\s*=\s*explode\(\'([^\']+)\',\s*\'([^\']+)\'\);.+?(\1\[[a-fx\d]+\])\(\);~msi', $res, $matches);
        $subst_array = explode($matches[2], $matches[3]);
        $res = preg_replace_callback('~((\$_GET\[[O0]+\])|(\$[O0]+))\[([a-fx\d]+)\](\()?~msi', static function ($matches) use ($subst_array) {
            if (isset($matches[5])) {
                return $subst_array[hexdec($matches[4])] . '(';
            }
            return "'" . $subst_array[hexdec($matches[4])] . "'";
        }, $res);
        $res = str_replace($find, $res, $str);

        return $res;
    }

    private function deobfuscateSubst($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        $alph = stripcslashes($matches[2]);

        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace(
                [$matches[1] . '[' . $i . '].', $matches[1] . '[' . $i . ']'],
                ["'" . $alph[$i] . "'", "'" . $alph[$i] . "'"],
                $res
            );
        }
        $res = str_replace("''", '', $res);
        $var = $matches[3];


        preg_match_all('~(\$\w+)\[\]\s*=\s*\'([\w\*\-\#]+)\'~msi', $res, $matches);

        for ($i = 0, $iMax = count($matches[2]); $i <= $iMax; $i++) {
            if ($matches[1][$i] !== $var) {
                continue;
            }
            if (@function_exists($matches[2][$i])) {
                $res = str_replace($var . '[' . $i . ']', $matches[2][$i], $res);
            } else {
                $res = @str_replace($var . '[' . $i . ']', "'" . $matches[2][$i] . "'", $res);
            }
        }
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateUrldecode($str)
    {
        preg_match('~(\$\w+=\'[^\']+\';\s*)+(\$[\w{1,40}]+)=(urldecode|base64_decode)?\(?[\'"]([\w+%=-]+)[\'"]\)?;(\$[\w+]+=(\$(\w+\[\')?[O_0]*(\'\])?([\{\[]\d+[\}\]])?\.?)+;)+[^\?]+(\?\>[\w\~\=\/\+]+|.+\\\\x[^;]+;)~msi', $str, $matches);
        $find = $matches[0];
        $res = $str;
        $res = stripcslashes($res);
        if ($matches[3] === "urldecode") {
            $alph = urldecode($matches[4]);
            $res = str_replace('urldecode(\'' . $matches[4] . '\')', "'" . $alph . "'", $res);
        } elseif ($matches[3] === 'base64_decode') {
            $alph = base64_decode($matches[4]);
            $res = str_replace('base64_decode(\'' . $matches[4] . '\')', "'" . $alph . "'", $res);
        } else {
            $alph = $matches[4];
        }

        for ($i = 0, $iMax = strlen($alph); $i < $iMax; $i++) {
            $res = str_replace([
                    $matches[2] . '[' . $i . '].',
                    $matches[2] . '[' . $i . ']',
                    $matches[2] . '{' . $i . '}.',
                    $matches[2] . '{' . $i . '}'
                ], [
                    "'" . $alph[$i] . "'",
                    "'" . $alph[$i] . "'",
                    "'" . $alph[$i] . "'",
                    "'" . $alph[$i] . "'"],
                $res
            );
        }
        $res = str_replace("''", '', $res);

        preg_match_all('~\$(\w+)\s*=\s*\'([\w\*\-\#]+)\'~msi', $res, $matches, PREG_SET_ORDER);
        for ($i = 0, $iMax = count($matches); $i < $iMax; $i++) {
            $res = str_replace(['$' . $matches[$i][1] . '(' , '${"GLOBALS"}["' . $matches[$i][1] . '"]' . '('],
                $matches[$i][2] . '(', $res, $c);
            $res = str_replace(['$' . $matches[$i][1], '${"GLOBALS"}["' . $matches[$i][1] . '"]'],
                    "'" . $matches[$i][2] . "'", $res, $cc);

            if ($c > 0 || $cc > 0) {
                $res = str_replace([
                    "'" . $matches[$i][2] . "'='" . $matches[$i][2] . "';",
                    $matches[$i][2] . "='" . $matches[$i][2] . "';",
                    $matches[$i][2] . "=" . $matches[$i][2] . ';',
                    $matches[$i][0] . ';'
                ], '', $res);
            }
        }

        $res = Helpers::replaceCreateFunction($res);

        preg_match('~\$([0_O]+)\s*=\s*function\s*\((\$\w+)\)\s*\{\s*\$[O_0]+\s*=\s*substr\s*\(\2,(\d+),(\d+)\);\s*\$[O_0]+\s*=\s*substr\s*\(\2,([\d-]+)\);\s*\$[O_0]+\s*=\s*substr\s*\(\2,(\d+),strlen\s*\(\2\)-(\d+)\);\s*return\s*gzinflate\s*\(base64_decode\s*\(\$[O_0]+\s*\.\s*\$[O_0]+\s*\.\s*\$[O_0]+\)+;~msi', $res, $matches);
        $res = preg_replace_callback('~\$\{"GLOBALS"}\["([0_O]+)"\]\s*\(\'([^\']+)\'\)~msi', static function ($calls) use ($matches) {
            if ($calls[1] !== $matches[1]) {
                return $calls[0];
            }
            $temp1 = substr($calls[2], $matches[3], $matches[4]);
            $temp2 = substr($calls[2], $matches[5]);
            $temp3 = substr($calls[2], $matches[6],strlen($calls[2]) - $matches[7]);
            return "'" . gzinflate(base64_decode($temp1 . $temp3 . $temp2)) . "'";
        }, $res);

        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateUrlDecode3($str, $matches)
    {
        $dictionaryKey = $matches[4];
        $dictionaryVal = urldecode($matches[3]);

        $result = Helpers::replaceVarsFromDictionary($dictionaryKey, $dictionaryVal, $str);

        return $result;
    }

    private function deobfuscateEvalFunc($str)
    {
        $res = $str;
        $res = stripcslashes($res);
        preg_match('~function\s*(\w{1,40})\((\$\w{1,40})\)\s*\{\s*(\$\w{1,40})\s*=\s*\"base64_decode\";\s*(\$\w{1,40})\s*=\s*\"gzinflate\";\s*return\s*\4\(\3\(\2\)\);\s*\}\s*\$\w{1,40}\s*=\s*\"[^\"]*\";\s*\$\w{1,40}\s*=\s*\"[^\"]*\";\s*eval\(\1\(\"([^\"]*)\"\)\);~msi', $res, $matches);
        $res = gzinflate(base64_decode($matches[5]));
        $res = str_replace($str, $res, $str);
        return $res;
    }

    private function deobfuscateEvalConcatFunc($str, $matches)
    {
        $res = $matches[2];

        if (str_replace('"."', '', $matches[6]) === '"create_function"') {
            $brackets = '';
            $res = preg_replace_callback('~[\w."]+\(~', static function ($match) use (&$brackets) {
                $replace = strtolower(str_replace('"."', '', $match[0]));
                if (strpos($replace, 'eval') === false) {
                    $brackets .= ')';
                    return $replace;
                }
                return "";
            }, $res);

            $res .= "'$matches[4]'" . $brackets . ';';
            $res = $this->unwrapFuncs($res);
        }

        return $res;
    }

    private function deobfuscateEvalHex($str)
    {
        preg_match('~eval\s*\("(\\\\x?\d+[^"]+)"\);~msi', $str, $matches);
        $res = stripcslashes($matches[1]);
        $res = str_replace($matches[1], $res, $res);
        $res = str_replace($matches[0], $res, $str);
        return $res;
    }

    private function deobfuscateEvalVarConcat($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        preg_match_all('~(\$\w+)\s*\.?=\s*"([^"]+)";~msi', $str, $matches, PREG_SET_ORDER);
        $vars = [];
        foreach ($matches as $match) {
            $res = str_replace($match[0], '', $res);
            $res = str_replace($match[1], '"' . $match[2] . '"', $res);
        }
        $res = preg_replace('/[\'"]\s*?\.+\s*?[\'"]/smi', '', $res);
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateEvalVarSpecific($str, $matches)
    {
        $res = $str;

        if (preg_match('~\${"[^"]+"}\["[^"]+"\]|\${\${"[^"]+"}\["[^"]+"\]}~msi', $str)) {
            $res = stripcslashes($res);

            preg_match_all('~(\${"[^"]+"}\["[^"]+"\])="([^"]+)";~msi',$res, $match, PREG_SET_ORDER);
            foreach ($match as $m) {
                $res = str_replace('${' . $m[1] . '}', '$' . $m[2], $res);
            }
        }

        $vars = Helpers::collectVars($res);

        if (preg_match('~eval\(htmlspecialchars_decode\(urldecode\(base64_decode\((\$\w+)\)\)\)\);~msi', $res, $m) && isset($vars[$m[1]])) {
            $res = htmlspecialchars_decode(urldecode(base64_decode($vars[$m[1]])));
        }

        $res = Helpers::replaceVarsFromArray($vars, $res, false, true);

        return $res;
    }

    private function deobfuscateEvalVar($str, $matches)
    {
        $find = $matches[0];
        $evalVar = $matches[7];
        if (strpos($evalVar, '${$') === 0) {
            return Helpers::postProcess($str);
        }
        if (!$evalVar) {
            $evalVar = $matches[6];
            $pregVal = '\$\w+';
            $pregStr = '[\'"]?([\/\w\+=]+)[\'"]?';
            $pregFunc = '(?:base64_decode\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|htmlspecialchars_decode\s*\()+(?:["\']([\/\w\+=]+)["\'])';
            while (preg_match('~str_replace\(["\']([\/\w]+)["\'],\s?["\']([\/\w\+=]+)["\'],\s?(?|(' . $pregVal . ')|(?:' . $pregStr . ')|(' . $pregFunc . '))\)~msi', $evalVar, $match)) {
                $result = $match[0];
                if (preg_match('~' . $pregVal . '~', $match[3], $arg)) {
                    $result = str_replace($match[1], $match[2], $matches[3]);
                } elseif (preg_match('~' . $pregFunc . '~', $match[3], $arg)) {
                    $unwrappedVar = $this->unwrapFuncs($arg[0]);
                    $result = str_replace($match[1], $match[2], $unwrappedVar);
                } elseif (preg_match('~' . $pregStr . '~', $match[3], $arg)) {
                    $result = str_replace($match[1], $match[2], $match[3]);
                }

                $evalVar = str_replace($match[0], "\"$result\"" . ')', $evalVar);
            }
            return $this->unwrapFuncs($matches[5] . $evalVar);
        }

        $str = str_replace(['\\\'', '\\"'], ['@@slaquote@@', '@@sladquote@@'], $str);
        $val = '';
        $index = 0;
        if (@preg_match_all('~(\$[^\s=\'"\)]+)\s*=\s*\(?(?|("[^"]+")|(\'[^\']+\'))\)?\s*;?~msi', $str, $matches)) {
            $matches[1] = array_reverse($matches[1], true);
            $index = array_search($evalVar, $matches[1], true);
            if ($index !== false) {
                $val = @$matches[2][$index];
            }
        }

        $string = $str;
        if ($val !== '') {
            $string = str_replace($matches[0][$index], '', $string);
            $val = substr($val, 1, -1);
            $var_index = substr_count($string, $evalVar . ' = ');
            $text = "'" . addcslashes(stripcslashes($val), "\\'") . "'";
            preg_match_all('~(\$[^\s=\'"\)]+)(?=[^a-zA-Z0-9])~ms', $string, $matches, PREG_OFFSET_CAPTURE);
            $matches = array_reverse($matches[1]);
            foreach($matches as $match) {
                if ($match[0] === $evalVar) {
                    $string = substr_replace($string, $text, $match[1], strlen($match[0]));
                    break;
                }
            }

            $string = preg_replace_callback('~\(\s*(\$[^\s=\'"\)]+)~msi', static function($m) use ($evalVar, $text) {
                if ($m[1] !== $evalVar) {
                    return $m[0];
                }
                return '(' . $text;
            }, $string);
        }

        $string = str_replace('assert(', 'eval(', $string);
        $string = str_replace('@@slaquote@@', '\\\'', $string);
        $string = str_replace('@@sladquote@@', '\\"', $string);
        $string = str_replace("eval(''.", 'eval(', $string);
        $res = str_replace($find, $string, $str);
        if (strpos($string, 'gzinflate(\'') !== false) {
            $res = $this->deobfuscateEval(stripcslashes($res), []);
        }
        return $res;
    }

    private function deobfuscateEval($str, $matches)
    {
        if (preg_match('~\)+\..{0,30}base64_decode~msi', $str)) {
            $res = explode(').', $str);
            $res = implode(')); eval(', $res);
            return $res;
        }

        if (preg_match('~@?stream_get_contents\(\$\w+\),\s*true~msi', $str, $matches)) {
            if (preg_match('~<\?php\s/{2}[\w\s]+\$\w{1,50}\s?=\s?@?\$_SERVER.*?(\$\w+)\s*=\s*@?fopen\(__FILE__,\s*\'\w+\'\);\s*@?fseek\(\1,\s*([0-9a-fx]+)~msi', $this->full_source, $m, PREG_OFFSET_CAPTURE)) {
                $initialOffset = $m[0][1];
                $offset = hexdec($m[2][0]);
                $end = substr($this->full_source, $initialOffset + $offset);
                $res = str_replace($matches[0], '\'' . $end . '\'', $str);
                return $res;
            }
        }

        $res = $str;
        $group = '';
        if (preg_match('~(preg_replace\(["\'](?:/\.\*?/[^"\']+|[\\\\x0-9a-f]+)["\']\s*,\s*)[^\),]+(?:[\)\\\\0-5]+;[\'"])?(,\s*["\'][^"\']*["\'])\)+;~msi', $res, $matches)) {
            if (strpos(stripcslashes($matches[1]), '(.*)') !== false || strpos(stripcslashes($matches[1]), '(.+)') !== false) {
                $group = substr(stripcslashes($matches[2]), 2, -1);
            }
            $res = str_replace([$matches[1], $matches[2]], ['eval(', ''], $res);
            if ($group !== '' && strpos(stripcslashes($res), '\1') !== false) {
                $res = stripcslashes($res);
                $res = str_replace('\1', $group, $res);
            }
            return $res;
        }

        if (strpos($res, 'e\x76al') !== false
            || strpos($res, '\x29') !== false
            || strpos($res, 'base64_decode("\\x') !== false
        ) {
            $res = stripcslashes($res);
        }
        if (strpos($res, '"."') !== false) {
            $res = str_replace('"."', '', $res);
        }

        if (preg_match('~((\$\w+)\s*=\s*create_function\(\'\',\s*)[^\']+\'.*?\'\)+;\s*(\2\(\);)~msi', $res, $matches)) {
            $res = str_replace($matches[1], 'eval(', $res);
            $res = str_replace($matches[3], '', $res);
            return $res;
        }

        if (preg_match('~eval\s*/\*[\w\s\.:,]+\*/\s*\(~msi', $res, $matches)) {
            $res = str_replace($matches[0], 'eval(', $res);
            return $res;
        }
        if (preg_match('~\$_(POST|GET|REQUEST|COOKIE)~ms', $res)) {
            return $res;
        }

        $res = preg_replace('~"\s+\?>\s*"\s*\.~m', '"?>".', $res, 3);

        $string = substr($res, 5, -2);
        $res = $this->unwrapFuncs($string);

        if (preg_match('~\?>\s*([\w/+]+==)~msi', $res, $match)) {
            $code = base64_decode($match[1]);
            if (strpos($code, 'error_reporting(') !== false) {
                $res = '?> ' . $code;
            }
        }

        if (preg_match('~chr\(\d+\^\d+\)~msi', $res)) {
            $res = Helpers::normalize($res);
        }
        $res = str_replace($str, $res, $str);
        return $res;
    }

    private function deobfuscateEvalCodeFunc($str, $matches)
    {
        $res = substr($str, 5, -2);
        $res = $this->unwrapFuncs($res);
        $res = stripcslashes($res);
        $res = str_replace($str, $res, $str);
        return $res;
    }

    private function deobfuscateEcho($str, $matches)
    {
        $res = $str;
        $string = $matches[0];
        if (preg_match('~\$_(POST|GET|REQUEST|COOKIE)~ms', $res)) {
            return $res;
        }
        $string = substr($string, 5);
        $res = $this->unwrapFuncs($string);
        $res = str_replace($string, '\'' . addcslashes($res, '\'') . '\';', $str);
        return $res;
    }

    private function deobfuscateFOPO($str, $matches)
    {
        $phpcode = Helpers::formatPHP($str);
        $eval = Helpers::getEvalCode($phpcode);
        $b64_count = substr_count($eval, $matches[1]);
        $b64 = Helpers::getTextInsideQuotes($eval);
        for ($i = 0; $i < $b64_count; $i++) {
            $b64 = base64_decode($b64);
        }
        $phpcode = $b64;
        if (preg_match('~eval\s*\(\s*\$[\w|]+\s*\(\s*\$[\w|]+\s*\(~msi', $phpcode)) {
            preg_match_all('~\$\w+\(\$\w+\(\$\w+\("[^"]+"\)+~msi', $phpcode, $matches2);
            $array = end($matches2);
            @$phpcode = gzinflate(base64_decode(str_rot13(Helpers::getTextInsideQuotes(end($array)))));
            $old = '';
            $hangs = 0;
            while (($old != $phpcode) && (strpos($phpcode, 'eval($') !== false)
                   && (strpos($phpcode, '__FILE__') === false) && $hangs < 30) {
                $old = $phpcode;
                $funcs = explode(';', $phpcode);
                if (count($funcs) === 5) {
                    $phpcode = gzinflate(base64_decode(str_rot13(Helpers::getTextInsideQuotes(Helpers::getEvalCode($phpcode)))));
                } elseif (count($funcs) === 4) {
                    $phpcode = gzinflate(base64_decode(Helpers::getTextInsideQuotes(Helpers::getEvalCode($phpcode))));
                }
                $hangs++;
            }
            $res = str_replace($matches[0], substr($phpcode, 2), $str);
        } else {
            $res = str_replace($matches[0], $phpcode, $str);
        }

        return $res;
    }

    private function deobfuscateFakeIonCube($str, $matches)
    {
        $subst_value = 0;
        $matches[1] = Helpers::calc($matches[1]);
        $subst_value = (int)$matches[1] - 21;
        $code = @pack("H*", preg_replace("/[A-Z,\r,\n]/", "", substr($str, $subst_value)));
        $res = str_replace($matches[0], $code, $str);
        return $res;
    }

    private function deobfuscateCobra($str, $matches)
    {
        $find = $matches[0];
        $res = $str;
        $res = preg_replace_callback(
            '~eval\(\"return strrev\(base64_decode\(\'([^\']+)\'\)\);\"\)~msi',
            static function ($matches) {
                return strrev(base64_decode($matches[1]));
            },
            $res
        );

        $res = preg_replace_callback(
            '~eval\(gzinflate\(base64_decode\(\.\"\'([^\']+)\'\)\)\)\;~msi',
            static function ($matches) {
                return gzinflate(base64_decode($matches[1]));
            },
            $res
        );

        preg_match('~(\$\w{1,40})\s*=\s*\"([^\"]+)\"\;\s*\1\s*=\s*explode\(\"([^\"]+)\",\s*\s*\1\);~msi', $res, $matches);
        $var = $matches[1];
        $decrypt = base64_decode(current(explode($matches[3], $matches[2])));
        $decrypt = preg_replace_callback(
            '~eval\(\"return strrev\(base64_decode\(\'([^\']+)\'\)\);\"\)~msi',
            static function ($matches) {
                return strrev(base64_decode($matches[1]));
            },
            $decrypt
        );

        $decrypt = preg_replace_callback(
            '~eval\(gzinflate\(base64_decode\(\.\"\'([^\']+)\'\)\)\)\;~msi',
            static function ($matches) {
                return gzinflate(base64_decode($matches[1]));
            },
            $decrypt
        );

        preg_match('~if\(\!function_exists\(\"(\w+)\"\)\)\s*\{\s*function\s*\1\(\$string\)\s*\{\s*\$string\s*=\s*base64_decode\(\$string\)\;\s*\$key\s*=\s*\"(\w+)\"\;~msi', $decrypt, $matches);

        $decrypt_func = $matches[1];
        $xor_key = $matches[2];

        $res = preg_replace_callback(
            '~\\' . $var . '\s*=\s*.*?eval\(' . $decrypt_func . '\(\"([^\"]+)\"\)\)\;\"\)\;~msi',
            static function ($matches) use ($xor_key) {
                $string = base64_decode($matches[1]);
                $key = $xor_key;
                $xor = "";
                for ($i = 0, $iMax = strlen($string); $i < $iMax;) {
                    for ($j = 0, $jMax = strlen($key); $j < $jMax; $j++,$i++) {
                        if (isset($string[$i])) {
                            $xor .= $string[$i] ^ $key[$j];
                        }
                    }
                }
                return $xor;
            },
            $res
        );
        $res = str_replace($find, $res, $str);
        return $res;
    }

    private function deobfuscateFlamux($str, $matches)
    {
        $str = $matches[0];

        $vars = [];
        preg_match_all('~(\$\w+=[\'"]\w+[\'"];)~', $str, $match);
        foreach ($match[0] as $var) {
            $split = explode('=', str_replace(';', '', $var));
            $vars[$split[0]] = $split[1];
        }

        $res = '';
        preg_match_all('~(\$\w+=\$\w+[\'.]+\$\w+;)~', $str, $match);
        for ($i = 0, $iMax = count($match[0]); $i < $iMax; $i++) {

            $split = explode('=', str_replace(';', '', $match[0][$i]));
            $concats = explode('.', $split[1]);
            $str_to_concat = '';
            foreach ($concats as $concat) {
                $str_to_concat .= $vars[$concat] ?? '';
            }

            $vars[$split[0]] = $str_to_concat;

            if ($i === ($iMax - 1)) {
                $res = gzinflate(base64_decode(base64_decode(str_rot13($str_to_concat))));
            }
        }

        return $res;
    }

    private function deobfuscateDarkShell($str, $matches)
    {
        return stripcslashes($matches[0]);
    }

    private function deobfuscateWso($str, $matches)
    {
        $result = $matches[0];
        $contentVar = $matches[11];

        preg_match_all('~(\[([-+\(\d*\/\)]+)\])+~', $result, $mathMatches);
        foreach ($mathMatches[0] as $index => $match) {
            $search = $mathMatches[2][$index];
            $mathResult = Helpers::calculateMathStr($search);

            $result = str_replace("[$search]", "[$mathResult]", $result);
        }

        $dictionary = $matches[5];

        $variables = Helpers::getVarsFromDictionary($dictionary, $result);
        $variables[$matches[9]] = $matches[10];

        preg_match_all('~(\$\w+)\.=(\$\w+)~', $result, $matches);
        foreach ($matches as $index => $match) {
            $var = $matches[1][$index];
            $value = $matches[2][$index];
            if (!isset($variables[$var])) {
                $variables[$var] = (string)$variables[$value] ?? '';
            } else {
                $variables[$var] .= (string)$variables[$value] ?? '';
            }
        }

        if (isset($variables[$contentVar])) {
            $result = $variables[$contentVar];
        }

        if (preg_match('~(\$\w+)\s*=\s*(["\'\w\/+]+);(\$\w+)=base64_decode\(\1\);(\$\w+)=gzinflate\(\3\);eval\(~msi', $result, $match)) {
            $result = gzinflate(base64_decode($match[2]));
        }

        if (preg_match('~function\s*(\w+)\s*\((\$\w+)\)\s*\{\s*return\s*(\w+)\s*\(\2,(\d+)\);\s*\}~msi', $result, $match)) {
            $result = preg_replace_callback('~' . $match[1] . '\s*\(\'([^\']+)\'\)~msi', function ($m) {
                return '\'' . Helpers::decodeUCSDelta($m[1]) . '\'';
            }, $result);
        }

        $result = str_replace('<?php', '', $result);

        return $result;
    }

    private function deobfuscateAnonymousFox($str, $matches)
    {
        $string = $matches[7];
        $array = strlen(trim($string));
        $debuger = '';
        for ($one = 0; $one < $array; $one += 2) {
            $debuger .= pack("C", hexdec(substr($string, $one, 2)));
        }
        $string = $debuger;

        $result = $string . $matches[8];
        return $result;
    }

    private function deobfuscateWsoEval($str, $matches)
    {
        $result = base64_decode($matches[2]);

        preg_match('~data:image/png;(.*)">~im', $result, $match);
        $result = str_replace( array ('%', '#'), array ('/', '+'), $match[1]);
        $result = gzinflate(base64_decode($result));

        return $result;
    }

    private function deobfuscateAssertStr($str, $matches)
    {
        return 'eval' . $matches[3];
    }

    private function deobfuscateEvalFuncFunc($str, $matches)
    {
        return Helpers::decrypt_T_func(base64_decode($matches[15]));
    }

    private function deobfuscateFuncVar($str, $matches)
    {
        $arg1 = str_replace($matches[5], '', $matches[3]);
        $funcName = str_replace($matches[8], '', $matches[7]);
        $insidefuncName = str_replace($matches[11], '', $matches[10]);

        if ($funcName === 'create_function') {
            $result = sprintf('%s(%s(\'%s\');', $insidefuncName, $arg1, $matches[15]);
        } else {
            $result = sprintf(
                '%s = %s(\'%s\',\'%s(%s(%s));\');%s(\'%s\');',
                $matches[14],
                $funcName,
                $matches[13],
                $insidefuncName,
                $arg1,
                $matches[13],
                $matches[14],
                $matches[15]
            );
        }

        return $result;
    }

    private function deobfuscateEchoEval($str, $matches)
    {
        $content = $matches[4];
        $content = str_replace($matches[1], $matches[2], $content);
        $result = str_replace($matches[3], $content, $matches[5]);

        return $result;
    }

    private function deobfuscateDictionaryVars($str, $matches)
    {
        $dictionary = $matches[2];
        $dictionary = str_replace("\'", "'", $dictionary);
        $dictionary = str_replace('\"', '"', $dictionary);
        $content = $matches[4];
        $vars = Helpers::getVarsFromDictionary($dictionary, $matches[0]);

        if (isset($vars[$matches[6]]) && $vars[$matches[6]] === 'create_function') {
            $content = str_replace($matches[5], 'eval(' . $matches[7] . ');', $content);
        }

        $content = Helpers::replaceVarsFromDictionary($matches[1], $dictionary, $content);

        foreach ($vars as $key => $value) {
            $content = str_replace($key, $value, $content);
        }

        $content = preg_replace_callback('~\${[\'"](\w+)[\'"]}~msi', static function ($m) {
            return '$' . $m[1];
        }, $content);

        $content = str_replace("''}", "\''}", $content);

        return $content;
    }

    private function deobfuscateConcatVarFunc($str, $matches)
    {
        $strVar = "";
        if ($matches['concatVar'] !== "") {
            $strVar = Helpers::concatVariableValues($matches[2], false);
        } else {
            if ($matches['strVal'] !== "") {
                $strVar = $matches['strVal'];
            }
        }

        $result = "";
        $iMax = strlen($strVar) / 2;
        for ($i = 0; $i < $iMax; $i++) {
            $result .= chr(base_convert(substr($strVar, $i * 2, 2), 16, 10));
        }
        return $result;
    }

    private function deobfuscateConcatVarFuncFunc($str, $matches)
    {
        $result = $matches[12];

        $func1 = Helpers::concatVariableValues($matches[2]);
        $func2 = Helpers::concatVariableValues($matches[22]);
        $func3 = Helpers::concatVariableValues($matches[19]);
        $func4 = Helpers::concatVariableValues($matches[7]);

        $result = sprintf('eval(%s(%s(%s(%s("%s")))));', $func1, $func2, $func3, $func4, $result);

        return $result;
    }

    private function deobfuscateEvalVarDoubled($str)
    {
        $result = $str;

        preg_match_all('~(\$\w+)\s?=\s?(\w+)\([\'"]([^\'"]+)[\'"]\);~', $str, $varMatches);

        foreach ($varMatches[0] as $index => $varMatch) {
            $var_name = $varMatches[1][$index];
            $func_name = $varMatches[2][$index];
            $str = $varMatches[3][$index];

            if (Helpers::convertToSafeFunc($func_name)) {
                $str = @Helpers::executeWrapper($func_name, [$str]);
            }
            $result = str_replace($varMatch, '', $result);
            $result = str_replace($var_name, $str, $result);
        }

        return $result;
    }

    private function deobfuscateVarFuncsEcho($str, $matches)
    {
        $result = $str;
        $func = $matches[2];

        if (Helpers::convertToSafeFunc($func)) {
            $result = @Helpers::executeWrapper($func, [$matches[3]]);
            $result = str_replace('<?php', '', $result);
        }

        return $result;
    }

    private function deobfuscateVarFuncsMany($str, $matches)
    {
        $result          = $matches[0];
        $strName         = $matches[1];
        $dictionaryName  = $matches[2];
        $dictionaryValue = Helpers::collectStr("$matches[3]", "'");

        $funcs = [];
        $vars  = [];

        $result = preg_replace_callback('~(\$\w+)=((?:(\$\w{1,50})\[?{?\d+\]?}?\.?)+);~msi',
            function ($m) use (&$vars, $dictionaryValue) {
                $vars = array_merge($vars, Helpers::getVarsFromDictionary($dictionaryValue, $m[0]));
                return '';
            }, $result);

        $result = preg_replace_callback(
            '~(\$\w+)\s?=\s?array\([\'"]([\w+\/]+)[\'"]\s?,\s?[\'"]([\w+\/]+)[\'"](?:\s?,[\'"]([\w+\/]+)[\'"]\s?)?\);\s?((?:(?:\$\w+=\s?\w+\(\$\w+,\s?)|(?:return\s?))(join\([\'"]{2},\s?\1\))\s?\)?\s?;)~msi',
            function ($match) {
                $joinedVars = implode("", [$match[2], $match[3], $match[4]]);
                $replace    = str_replace($match[6], "'$joinedVars'", $match[5]);

                return $replace;
            },
            $result
        );

        $result = preg_replace_callback(
            '~global\s(\$\w+);\s?((\$\w+)\s?=\s?[\'"]([\w\/+]+)[\'"];\s?(\$\w+)\s?=\s?[\'"]([\w\/+]+)[\'"];\s?(\$\w+)\s?=\s?[\'"]([\w\/+]+)[\'"];\s?\1\s?\.=\s?"({\3}{\5}{\7})");~',
            function ($match) {
                $concatedVars = $match[4] . $match[6] . $match[8];
                $replace      = str_replace($match[2], sprintf('%s.="%s"', $match[1], $concatedVars), $match[0]);

                return $replace;
            },
            $result
        );

        $result = preg_replace_callback(
            '~((\$\w+)\s?=\s?[\'"]([\w\/+=]+)[\'"];\s?(\$\w+)\s?=\s?[\'"]([\w\/+=]+)[\'"];\s?return\s?"({\2}{\4})");~msi',
            function ($match) {
                $concatedVars = $match[3] . $match[5];
                $replace      = str_replace($match[1], sprintf('return "%s"', $concatedVars), $match[0]);

                return $replace;
            },
            $result
        );

        $result = preg_replace_callback(
            '~(?:class\s(?<className>\w+)\s?{\s?)?(?:public\s)?function\s(?<methodName>\w+\(\)){\s?(?<codeBlock>.*?;)\s}\s?(?:}\s?)?~msi',
            function ($match) use (&$funcs, $strName, $dictionaryName, $dictionaryValue) {
                $str      = "";
                $isConcat = false;

                if (preg_match(
                    '~return\s[\'"]([\w+\/+=]+)[\'"];~msi',
                    $match[0],
                    $returnCode
                )) {
                    $str = $returnCode[1];
                } else {
                    if (preg_match(
                        '~global\s(\$\w+);\s?\1\s?\.=\s?["\']([\w+\/+]+)["\'];?~msi',
                        $match[0],
                        $concatCode
                    )) {
                        $str      = $concatCode[2];
                        $isConcat = true;
                    } else {
                        if (preg_match(
                            '~global\s(\$' . substr(
                                $dictionaryName,
                                1
                            ) . ');\s*return\s*((?:\s?\1\[?{?\d+\]?}?\s?\.?\s?)+);?~msi',
                            $match[0],
                            $returnCode
                        )) {
                            $str      = Helpers::getVarsFromDictionary(
                                $dictionaryValue,
                                sprintf('%s=%s', $dictionaryName, $returnCode[2])
                            );
                            $str      = $str[$dictionaryName];
                            $isConcat = false;
                        }
                    }
                }
                $funcs[$match['methodName']]['str']    = $str;
                $funcs[$match['methodName']]['concat'] = $isConcat;

                return "";
            },
            $result
        );

        $result = preg_replace_callback(
            '~(\$[^' . substr($strName, 1) . ']\w+)\s?=\s?(\w+\(\));~ms',
            function ($match) use ($funcs, &$vars) {
                if (isset($funcs[$match[2]]) && !$funcs[$match[2]]['concat']) {
                    $vars[$match[1]] = $funcs[$match[2]]['str'];
                }
                return "";
            },
            $result
        );

        foreach ($vars as $name => $var) {
            $result = str_replace($name, $var, $result);
        }

        $result = preg_replace_callback(
            '~([\w_]+)\s?\(\s?([\w_]+)\s?\(\s?((?:\$' . substr($dictionaryName,
                1) . '[{\[]\d+[\]}]\s?\.?)+)\s?,\s?(\d+)\s?\),\s?((?:\d+,?)+)\);~msi',
            function ($match) use ($dictionaryValue, $dictionaryName) {
                $str = Helpers::getVarsFromDictionary(
                    $dictionaryValue,
                    sprintf('%s=%s', $dictionaryName, $match[3])
                );
                $res = "";
                if (Helpers::convertToSafeFunc($match[2])) {
                    $res = @Helpers::executeWrapper($match[2], [$str[$dictionaryName], $match[4]]);
                }

                if (Helpers::convertToSafeFunc($match[1]) && function_exists($match[1])) {
                    $args   = [$res];
                    $digits = explode(',', $match[5]);
                    foreach ($digits as $digit) {
                        $args[] = (int)$digit;
                    }
                    $res = @Helpers::executeWrapper($match[1], $args);
                }
                return "\"$res\";";
            },
            $result
        );

        $strToDecode = "";

        $regexFinal = str_replace('mainVar', $strName,
            '~(?:\mainVar\s?=\s?\w+\(\s?\mainVar\s*,\s?["\'](?<concat>[\w+\/]+)[\'"]\s?\)\s?;)|(?:\mainVar\s?=\s?\w+\(\s?\mainVar\s?,\s?(?<concatFunc>\w+\(\))\)\s?;)|(?:\mainVar\s?\.?=\s?(?:\mainVar\.)?\s?["\'](?<concatStr>[\w+\/=]+)[\'"]\s?;)|(?:\mainVar\s?\.?=\s?(?<concatFuncSingle>\w+\(\))\s?;)|(\$\w+\s?=\s?new\s\w+\(\)\s?;\s?\mainVar\s?\.?=\s?\mainVar\s?\.\s?\$\w+->(?<concatFuncClass>\w+\(\)\s?))|(?:(?<func>[^,\s]\w+\(\)))~msi');

        $result = preg_replace_callback(
            $regexFinal,
            function ($match) use (&$strToDecode, $funcs) {
                if (isset($match['concat']) && $match['concat'] !== "") {
                    $strToDecode .= $match['concat'];
                    return;
                }
                if (isset($match['concatStr']) && $match['concatStr'] !== "") {
                    $strToDecode .= $match['concatStr'];
                    return;
                }
                if (isset($match['concatFunc']) && $match['concatFunc'] !== "") {
                    $strToDecode .= $funcs[$match['concatFunc']]['str'];
                    return;
                }
                if (isset($match['concatFuncSingle']) && $match['concatFuncSingle'] !== "") {
                    $strToDecode .= $funcs[$match['concatFuncSingle']]['str'];
                    return;
                }
                if (isset($match['concatFuncClass']) && $match['concatFuncClass'] !== "") {
                    $strToDecode .= $funcs[$match['concatFuncClass']]['str'];
                    return;
                }
                if (isset($match['func']) && $match['func'] !== "") {
                    $strToDecode .= $funcs[$match['func']]['str'];
                    return;
                }
            },
            $result
        );

        $code   = $result;
        $result = base64_decode($strToDecode);

        if (preg_match('~((\$\w+)="";).*?((\$\w+)=create_function\(\'(\$\w+,\$\w+)\',\s?(base64_decode\(((?:"[\w+=]+"\.?)+)\))\);).*?(\$\w+\s?=\s?create_function\("",\s?\4\(base64_decode\(\2\),\s?(\$_COOKIE\[\'\w+\'\])\)\s?\);)~msi',
            $code, $codeMatch)) {
            $initialCode = base64_decode(Helpers::collectStr($codeMatch[7]));

            $result = sprintf("function %s(%s){%s}%s='%s';%s(%s,%s);",
                substr($codeMatch[4], 1), $codeMatch[5], $initialCode, $codeMatch[2], $result,
                substr($codeMatch[4], 1), $codeMatch[2], $codeMatch[9]);
        }

        return $result;
    }

    private function deobfuscateGlobalArrayEval($str, $matches)
    {
        $result = str_replace($matches[1], "", $str);

        $dictionary = stripcslashes($matches[3]);
        $dictionaryVar = stripcslashes($matches[2]);
        $dictionaryVar = str_replace('{"GLOBALS"}', 'GLOBALS', $dictionaryVar);

        $result = Helpers::replaceVarsFromDictionary($dictionaryVar, $dictionary, $result);

        preg_match_all('~(\$GLOBALS\[[\'\w]+\])\s?=\s?[\'"]?([\w\-\_\$]+)["\']?;\s?~msi', $result, $varMatch);

        foreach ($varMatch[1] as $index => $var) {
            $result = str_replace([$varMatch[0][$index], $varMatch[1][$index]], ["", $varMatch[2][$index]],
                $result);
        }

        return $result;
    }

    private function deobfuscateTinkleShell($str, $matches)
    {
        $result = $str;
        $dictionaryStr = $matches[2];
        $decodeKey = Helpers::getDecryptKeyForTinkleShell(strlen($str));
        $vars = [
            $matches[4] => $matches[5],
        ];

        $result = str_replace(' ', '', $result);
        $matches[3] = str_replace(' ', '', $matches[3]);

        preg_match_all('~(\$\w+)=(?:\$\w+\[\'\w\'\+\d+\+\'\w\'\]\.?)+;~msi', $matches[3], $matchVars);
        foreach ($matchVars[0] as $index => $match) {
            preg_match_all('~\$\w+\[\'\w\'\+(\d+)\+\'\w\'\]\.?~msi', $match, $values);
            foreach ($values[1] as $value) {
                if (!isset($vars[$matchVars[1][$index]])) {
                    $vars[$matchVars[1][$index]] = $dictionaryStr[$value] ?? $value;
                } else {
                    $vars[$matchVars[1][$index]] .= $dictionaryStr[$value] ?? $value;
                }
            }
        }

        $result = str_replace($matches[3], "", $result);

        preg_match_all('~(\$\w+)=(\$\w+)\((\$\w+),(\$\w+)\(""\),"([\w\+]+)"\);~msi', $result, $matchVars);
        foreach ($matchVars[1] as $index => $varName) {
            $func = $vars[$matchVars[2][$index]] ?? $matchVars[2][$index];
            $arg1 = $vars[$matchVars[3][$index]] ?? $matchVars[3][$index];
            $arg2 = $vars[$matchVars[4][$index]] ?? $matchVars[4][$index];
            $argStr = $matchVars[5][$index];

            if (Helpers::convertToSafeFunc($func)) {
                $value = @Helpers::executeWrapper($func, [$arg1, $arg2 === 'trim' ? "" : $arg2, $argStr]);

                $vars[$varName] = $value;
            }
            $result = str_replace($matchVars[0][$index], '', $result);
        }

        $func = $vars[$matches[10]] ?? '';
        if (Helpers::convertToSafeFunc($func)) {
            $result = @Helpers::executeWrapper($func, [$matches[11], $vars[$matches[12]] ?? "", $decodeKey]);
        }
        $func = $vars[$matches[7]] ?? '';
        if (Helpers::convertToSafeFunc($func)) {
            $result = @Helpers::executeWrapper($func, [$vars[$matches[8]] ?? '', "", $result]);
        }
        $func = $vars[$matches[6]] ?? '';
        if (Helpers::convertToSafeFunc($func)) {
            $result = @Helpers::executeWrapper($func, [$result]);
        }

        return $result;
    }

    private function deobfuscateWsoFunc($str, $matches)
    {
        if (isset($matches['str'])) {
            return gzinflate(base64_decode($matches['str']));
        }

        return $matches[0];
    }

    private function deobfuscateEvalWanFunc($str, $matches)
    {
        $result = gzinflate(base64_decode($matches[5]));

        for ($i = 0, $iMax = strlen($result); $i < $iMax; $i++) {
            $result[$i] = chr(ord($result[$i]) - (int)$matches[4]);
        }

        return $result;
    }

    private function deobfuscateFuncFile($str, $matches)
    {
        return base64_decode($matches[2]);
    }

    private function deobfuscateFuncFile2($str, $matches)
    {
        $var_fragment   = $matches[1];
        $decoded_code   = base64_decode($matches[3]);
        $var_name       = $matches[4];
        $new_fragment   = "$var_name = '$decoded_code';";
        return str_replace($var_fragment, $new_fragment, $str);
    }

    private function deobfuscateGulf($str, $matches)
    {
        $result = str_replace('\'.\'', '', str_replace($matches[2], '', $matches[1]));

        $vars = Helpers::collectVars($matches[2], "'");
        $result = Helpers::replaceVarsFromArray($vars, $result);

        $tempCode = gzinflate(base64_decode($matches[4]));

        $result .= PHP_EOL . $tempCode;

        return $result;
    }

    private function deobfuscateEvalConcatAsciiChars($str, $matches)
    {
        $result = '';

        $num = (int)$matches[2];
        $str = (string)$matches[3];
        $len = strlen($str);

        for ($i = 0; $i < $len; $i++) {
            $result .= chr(ord($str[$i]) ^ $num);
        }

        $result = str_replace(['<?php', '?>', '', ''], '', $result);

        return $result;
    }

    private function deobfuscateEvalPost($str, $matches)
    {
        $vars = Helpers::collectVars($str);

        $result = str_replace('.', "", $matches[8]);
        $result = str_replace($matches[7], "", Helpers::replaceVarsFromArray($vars, $result));
        $result = base64_decode(base64_decode($result));

        return $result;
    }

    private function deobfuscateEvalPregStr($str, $matches)
    {
        $result = sprintf("%s'%s'%s", stripcslashes($matches[1]), $matches[2], stripcslashes($matches[3]));

        $result = $this->unwrapFuncs($result);

        return $result;
    }

    private function deobfuscateClassDestructFunc($str, $matches)
    {
        $result = $str;

        $arg1 = $matches[1] ^ stripcslashes($matches[2]);
        $arg2 = $matches[3] ^ stripcslashes($matches[4]);

        if ($arg1 === 'assert' && $arg2 === 'eval') {
            $result = base64_decode($matches[5]);
        }

        return $result;
    }

    private function deobfuscateCreateFuncEval($str, $matches)
    {
        $result = $str;

        $func = stripcslashes($matches[1]);

        if (Helpers::convertToSafeFunc($func)) {
            $result = @Helpers::executeWrapper($func, [$matches[2]]);
        }

        return $result;
    }

    private function deobfuscateEvalCreateFunc($str, $matches)
    {
        $result = $str;

        if (!(isset($matches[4]) && $matches[4] !== ''))
        {
            $arr = [
                0 => $matches[5],
                1 => $matches[6],
                2 => $matches[13],
            ];

            $func_1 = Helpers::decodeEvalCreateFunc_2($arr);
            if (strtoupper($func_1) === 'CREATE_FUNCTION') {
                $arr[2] = $matches[10];
                $result = Helpers::decodeEvalCreateFunc_2($arr);
                return $result;
            }
        }

        $arr = [
            0 => $matches[4],
            1 => $matches[5],
            2 => $matches[6],
            3 => $matches[13],
        ];

        $func_1 = Helpers::decodeEvalCreateFunc_1($arr);
        if (strtoupper($func_1) === 'CREATE_FUNCTION') {
            $arr[3] = $matches[10];

            $result = Helpers::decodeEvalCreateFunc_1($arr);

            $result = preg_replace_callback(Helpers::REGEXP_BASE64_DECODE, function ($match) {
                $extraCode = $this->unwrapFuncs($match[0]);

                if (preg_match('~if\(!function_exists\([\'"](\w+)[\'"]\)\){function\s?\1\((\$\w+)\){(\$\w+)=array\(\'([{\w\]]+)\',\'([\w`]+)\',\2\);for\((\$\w+)=0;\6<3;\6\+\+\){for\((\$\w+)=0;\7<strlen\(\3\[\6\]\);\7\+\+\)\s?\3\[\6\]\[\7\]\s?=\s?chr\(ord\(\3\[\6\]\[\7\]\)-1\);if\(\6==1\)\s?\3\[2\]=\3\[0\]\(\3\[1\]\(\3\[2\]\)\);}\s?return\s?\3\[2\];}(\$\w+)=["\']([\w\+\/=]+)["\'];(\$\w+)=[\'"]\1[\'"];(\$\w+)=\10\([\'"]([\w=]+)[\'"]\);\$\w+=\11\(\'\',\10\(\8\)\);\$\w+\(\);}~msi', $extraCode, $matchCode)) {
                    $arr = [
                        0 => $matchCode[4],
                        1 => $matchCode[5],
                        2 => $matchCode[12],
                    ];

                    $func_1 = Helpers::decodeEvalCreateFunc_2($arr);
                    if (strtoupper($func_1) === 'CREATE_FUNCTION') {
                        $arr[2] = $matchCode[9];

                        $extraCode = str_replace($matchCode[0], Helpers::decodeEvalCreateFunc_2($arr), $extraCode);
                    }
                }
                return $extraCode;
            }, $result);
        }

        return $result;
    }

    private function deobfuscateEvalFuncVars($str, $matches)
    {
        $result = $str;
        $matches[1] = MathCalc::calcRawString($matches[1]);
        $matches[1] = str_replace([' ', "'.", '.\'', '".', '."'], '', $matches[1]);
        $vars = Helpers::collectFuncVars($matches[1]);
        Helpers::collectVars($matches[1], '\'', $vars);

        $result = Helpers::replaceVarsFromArray($vars, $matches[2]);

        if (strpos($result, 'eval') !== false) {
            $result = $this->unwrapFuncs($result);
        }
        return $result;
    }

    private function deobfuscateDictionaryCreateFuncs($str, $matches)
    {
        $dict = $matches[3];
        if (stripos($dict, 'base64_decode') !== false) {
            $dict = Helpers::replaceBase64Decode($dict);
        }
        if (stripos($dict, 'urldecode') !== false) {
            $dict = urldecode(substr($dict, 11, -2));
        }
        $dict = trim($dict, '\'"');

        $vars = Helpers::getVarsFromDictionary($dict, $matches[4]);
        $result = str_replace($matches[4], '', $str);

        $result = preg_replace_callback('~\${"[\\\\\w]+"}\["[\\\\\w]+"\]~msi', static function ($match) {
            return stripcslashes($match[0]);
        }, $result);

        $result = preg_replace_callback('~\${"GLOBALS"}\["(\w+)"\]~msi', static function ($match) use ($vars) {
            $varName = '$' . $match[1];

            return $vars[$varName] ?? $varName;
        }, $result);

        preg_match('~(\$\w+)=create_function\(\'(\$\w+)\',\'\$\w+=substr\(\2,0,5\);\$\w+=substr\(\2,-5\);\$\w+=substr\(\2,7,strlen\(\2\)-14\);return\s*gzinflate\(base64_decode\(\$\w+\.\$\w+\.\$\w+\)\);\'\);~msi', $result, $decoderFunc);
        $result = str_replace($decoderFunc[0], '', $result);
        $decoderFunc = $decoderFunc[1];
        $result = Helpers::replaceCreateFunction($result);
        $result = preg_replace_callback('~(\$\w+)\s*\(\'([^\']+)\'\)~msi', function($m) use ($decoderFunc) {
            if ($m[1] !== $decoderFunc) {
                return $m[0];
            }
            return '\'' . Helpers::dictionarySampleDecode($m[2]) .'\'';
        }, $result);

        $result = Helpers::normalize($result);

        return $result;
    }

    private function deobfuscateEvalPostDictionary($str, $matches)
    {
        $finalCode = $matches[19];
        $result = str_replace($finalCode, '', $str);
        $arrayNum = [];
        $arrayStr = [];

        $regex = '~"?([\w\.\/\s]+)"?,?\s?~msi';
        preg_match_all($regex, $matches[6], $arrayStrMatches);
        foreach ($arrayStrMatches[1] as $arrayStrMatch) {
            $arrayStr[] = $arrayStrMatch;
        }

        $result = Helpers::replaceVarsFromDictionary($matches[5], $arrayStr, $result);
        $vars = Helpers::collectVars($result, "'");

        $regexSpecialVars = '~(\$\w+)([()\]])~msi';
        $code1 = preg_replace_callback($regexSpecialVars, static function ($match) use ($vars) {
            $res = $vars[$match[1]] ?? $match[1];
            if ($match[2] === ']' || $match[2] === ')') {
                $res = "'$res'";
            }
            return $res . $match[2];
        }, $matches[20]);

        $code2 = str_replace($matches[18], '$_POST[\'' . ($vars[$matches[18]] ?? $matches[18]) . '\']', $matches[21]);
        $code2 = Helpers::replaceVarsFromArray($vars, $code2);

        $tempStr = Helpers::replaceVarsFromDictionary($matches[5], $arrayStr, $matches[22]);
        $vars = Helpers::collectVars($tempStr, "'");

        $code3 = preg_replace_callback($regexSpecialVars, static function ($match) use ($vars) {
            $res = $vars[$match[1]] ?? $match[1];
            if ($match[2] === ']' || $match[2] === ')') {
                $res = "'$res'";
            }
            return $res . $match[2];
        }, $matches[23]);

        $result = $code1 . $code2 . $code3;

        return $result;
    }

    private function deobfuscateDropInclude($str, $matches)
    {
        if (isset($matches[8]) && $matches[8] !== '') {
            return base64_decode($matches[4]);
        }
        $key = basename($matches[2]);
        $encrypted = base64_decode(base64_decode($matches[4]));
        return $this->deobfuscateXorFName($encrypted, null, $key);
    }

    private function deobfuscateEvalComments($str, $matches)
    {
        return preg_replace('~/\*[^/]*/?\*/~msi', '', $str);
    }

    private function deobfuscateStrrevUrldecodeEval($str, $matches)
    {
        return strrev(urldecode($matches[2]));
    }

    private function deobfuscateEvalPackStrrot($str, $matches)
    {
        return pack("H*", str_rot13($matches[3]));
    }

    private function deobfuscateUrlDecodeTable($str, $matches)
    {
        $matches[3] = str_replace([" ", "\r", "\n", "\t", '\'.\''], '', $matches[3]);
        $matches[5] = str_replace([" ", "'", ">"], '', $matches[5]);
        $temp = explode(',', $matches[5]);
        $array = [];
        foreach ($temp as $value) {
            $temp = explode("=", $value);
            $array[$temp[0]] = $temp[1];
        }
        $res = '';
        for ($i=0, $iMax = strlen($matches[3]); $i < $iMax; $i++) {
            $res .= isset($array[$matches[3][$i]]) ? $array[$matches[3][$i]] : $matches[3][$i];
        }
        $res = substr(rawurldecode($res), 1, -2);
        return $res;
    }

    private function deobfuscateEvalVarChar($str, $matches)
    {
        $vars = Helpers::collectConcatedVars($matches[1]);
        preg_match_all('~(\$\w+)=((?:\$\w+\.?)+);~msi', $matches[2], $varMatches, PREG_SET_ORDER);
        foreach ($varMatches as $varMatch) {
            $finalVars[$varMatch[1]] = Helpers::concatStr(
                Helpers::replaceVarsFromArray($vars, $varMatch[2], false, true)
            );
        }
        $res = Helpers::replaceVarsFromArray($finalVars, $matches[3], true);

        return $res;
    }

    private function deobfuscateEvalVarFunc($str, $matches)
    {
        $var = Helpers::collectFuncVars($matches[1], $var, false, true);
        return $var[$matches[4]];
    }

    private function deobfuscateEvalVarsFuncs($str, $matches)
    {
        $vars = Helpers::collectConcatedVars($matches[1], '"', $vars, true);
        $matches[3] = $matches[3] === '' ? $matches[5] : 'eval(' . $matches[4] . ');';

        $res = Helpers::replaceVarsFromArray($vars, $matches[3], false, true);
        $parts = array_filter(array_map('trim', explode(';', $res)));
        $hangs = 10;
        foreach ($parts as &$part) {
            while (strpos($part, 'eval') === 0 && $hangs--) {
                $part = preg_replace_callback('~\$\w+\b(?!\s*=)~msi',
                    function ($m) use ($vars) {
                        return isset($vars[$m[0]]) ? '\'' . $vars[$m[0]] . '\'' : $m[0];
                    }, $part);
                if (substr_count($part, 'eval(') > 1) {
                    $tmp = array_filter(array_map('trim', explode(';', $part)));
                    foreach ($tmp as &$item) {
                        $item = preg_replace_callback('~\$\w+\b(?!\s*=)~msi',
                            function ($m) use ($vars) {
                                return isset($vars[$m[0]]) ? $vars[$m[0]] : $m[0];
                            }, $item);
                        $item = $this->deobfuscateEval($item, []);
                        Helpers::collectConcatedVars($item, '"', $vars, true);
                    }
                    unset($item);
                    $part = implode($tmp);
                } else {
                    $part = $this->deobfuscateEval($part, []);
                }
            }
        }
        if (count($parts) > 1) {
            $parts[0] = Helpers::replaceVarsFromArray($vars, $parts[0]);
        }
        unset($part);
        $res = implode($parts);
        return $res;
    }

    private function deobfuscateEvalFileContent($str, $matches)
    {
        $res = $matches[4];
        $vars = Helpers::getVarsFromDictionary($matches[2], $matches[3]);
        $vars[$matches[1]] = $matches[2];
        $res = Helpers::replaceVarsFromArray($vars, $res);
        if (preg_match('~\$[^=]{0,50}=file\(str_replace\(\'\\\\{2}\',\'/\',__FILE__\)\);(\$[^=]{0,50})=array_pop\(\$[^)]{0,50}\);(\$[^=]{0,50})=array_pop\(\$[^)]{0,50}\);\$[^=]{0,50}=implode\(\'\',\$[^)]{0,50}\)\.substr\(\$[^,]{0,50},0,strrpos\(\$[^,]{0,50},\'@ev\'\)\);\$[^=]{0,50}=md5\(\$[^)]{0,50}\);(?:\$[^=]{0,50}=){0,3}NULL;@eval\(base64_decode\(str_replace\(\$[^,]{0,50},\'\',strtr\(\'~msi',
            $res, $match)) {
            $arr = explode(PHP_EOL, $str);
            foreach ($arr as $index => $val) {
                if ($index !== count($arr) - 1) {
                    $arr[$index] .= PHP_EOL;
                }
            }

            $arr1 = array_pop($arr);
            $arr2 = array_pop($arr);

            $vars[$match[1]] = $arr1;
            $vars[$match[2]] = $arr2;

            $res = implode('', $arr) . substr($arr2, 0, strrpos($arr2, '@ev'));
            $md5 = md5($res);
            $res = base64_decode(str_replace($md5, '', strtr($matches[5], $matches[6], $matches[7])));


            if (preg_match('~eval\((?:\$[^(]{0,50}\(){2}\$[^,]{0,50},\s{0,10}\'([^\']{1,500})\',\s{0,10}\'([^\']{1,500})\'\){3};~msi',
                $res, $match)) {
                $res = Helpers::replaceVarsFromArray($vars, $res);
                if (preg_match('~eval\(base64_decode\(strtr\(~msi', $res)) {
                    $res = base64_decode(strtr($arr1, $match[1], $match[2]));
                }
            }
        }

        return $res;
    }

    private function deobfuscateEvalArrayVar($str, $matches)
    {
        $result = $str;

        $array1 = str_split($matches[3]);
        $array2 = [];
        $arrayStr = (isset($matches[2]) && $matches[2] !== '') ? base64_decode($matches[2]) : $matches[1];

        if (preg_match('~(\$\w+)=\[(["\'][\w\[\];\'"|,.{}+=/&][\'"]=>["\'][\w\[\];\'"|,.{}+=/&][\'"],?\s{0,50})+\];~msi',
            $arrayStr, $match)) {
            preg_match_all('~["\']([\w\[\];\'"|,.{}+=/&])[\'"]=>["\']([\w\[\];\'"|,.{}+=/&])[\'"]~msi', $match[0],
                $arrayMatches);

            foreach ($arrayMatches[1] as $index => $arrayMatch) {
                $array2[$arrayMatches[1][$index]] = $arrayMatches[2][$index];
            }

            $newStr = "";
            foreach ($array1 as $xx) {
                foreach ($array2 as $main => $val) {
                    if ($xx == (string)$val) {
                        $newStr .= $main;
                        break;
                    }
                }
            }

            $result = gzinflate(base64_decode($newStr));
        }

        return $result;
    }

    private function deobfuscateEvalConcatedVars($str, $matches)
    {
        $iter = [2 => $matches[2], 4 => $matches[4], 6 => $matches[6], 12 => $matches[12]];
        foreach ($iter as $index => $item) {
            $matches[$index] = preg_replace_callback('~chr\((\d+)\)~msi', static function ($match) use (&$matches) {
                return '\'' . chr($match[1]) . '\'';
            }, $matches[$index]);

            $matches[$index] = Helpers::concatStr($matches[$index]);
            $matches[$index] = base64_decode($matches[$index]);
        }

        $result = str_replace([$matches[1], $matches[8], $matches[10]], [$matches[2], 0, 0], $matches[7]);

        if (Helpers::convertToSafeFunc($matches[4])) {
            $code = @Helpers::executeWrapper($matches[4], [$matches[6]]);
            $code = gzinflate(str_rot13($code));
        } else {
            $code = 'gzinflate(str_rot13(\'' . $matches[4] . '\')));';
        }

        $result .= $matches[12] . $code;

        return $result;
    }

    private function deobfuscateEchoEscapedStr($str, $matches)
    {
        $i = 1;
        $result = $matches[1];
        $result = str_replace('\\\\\\', '\\\\', $result);

        while ($i < 3) {
            if (!preg_match('~(\\\\x[0-9a-f]{2,3})~msi', $result)) {
                break;
            }

            $result = preg_replace_callback('~(\\\\x[0-9a-f]{2,3})~msi', static function ($m) {
                return stripcslashes($m[1]);
            }, $result);

            $i++;
        }

        $result = stripslashes($result);
        $vars = Helpers::collectVars($result);

        $result = preg_replace_callback('~(?<!{)\${[\'"]GLOBALS[\'"]}\[[\'"](\w+)[\'"]\]=[\'"](\w+)[\'"];~msi',
            function ($m) use (&$vars) {
                $vars['$' . $m[1]] = $m[2];

                return '';
            }, $result);

        $result = Helpers::replaceVarsFromArray($vars, $result);

        foreach ($vars as $name => $val) {
            $result = str_replace("$val=\"$val\";", '', $result);
        }

        return $result;
    }

    private function deobfuscateFilePutDecodedContents($str, $matches)
    {
        $res = $str;
        $content = base64_decode($matches[2]);
        $res = str_replace($matches[1], $content, $res);

        $res = preg_replace_callback('~chr\((\d+)\)~msi', static function ($match) use (&$matches) {
            return '\'' . chr($match[1]) . '\'';
        }, $res);

        $res    = Helpers::concatStringsInContent($res);
        $res    = Helpers::replaceBase64Decode($res, '\'');
        $vars   = Helpers::collectVars($res);
        $res    = Helpers::replaceVarsFromArray($vars, $res);
        $res    = Helpers::removeDuplicatedStrVars($res);

        return $res;
    }

    private function deobfuscatePregReplaceStr($str, $matches)
    {
        return stripcslashes($matches[1]);
    }

    private function deobfuscateEvalImplodedArrStr($str, $matches)
    {
        $split = str_split(stripcslashes($matches[2]));
        $map = array_map(static function($str) {
            return chr(ord($str) - 1);
        }, $split);
        return implode($map);
    }

    private function deobfuscatePregReplaceCodeContent($str, $matches)
    {
        $func = stripcslashes($matches[5]);

        $res = $matches[2];

        if (preg_match('~eval\(preg_replace\([\'"]/([^/])/[\'"],\s?[\'"](.*?)[\'"],\s?(\$\w+)\)\);~msi', $func,
            $match)) {
            if ($match[3] === $matches[1]) {
                $res = str_replace($match[1], stripcslashes($match[2]), $res);
            }
        }

        $vars = [];

        $res = preg_replace_callback('~(\$\w+)\s?=\s?([\'"])(.*?)\2;~msi', static function ($m) use (&$vars) {
            $value = $m[3];
            if ($m[2] === '"') {
                $value = stripcslashes($value);
            }

            $vars[$m[1]] = $value;

            return sprintf('%s=\'%s\';', $m[1], $value);
        }, $res);

        $arrayVar = [];
        $arrayVarName = '';

        if (preg_match('~(\$\w+)\s?=\s?array\((?:\'[^\']+\',?)+\);~msi', $res, $m)) {
            $arrayVarName = $m[1];

            preg_match_all('~\'([^\']+)\',?~msi', $m[0], $arrMatch, PREG_PATTERN_ORDER);
            if (isset($arrMatch[1])) {
                foreach ($arrMatch[1] as $arr) {
                    $arrayVar[] = $arr;
                }
            }
        }

        if (preg_match('~(\$\w+)\((\$\w+),\s?(\$\w+)\s?\.\s?\'\(((?:["\']\w+[\'"],?)+)\)[\'"]\s?\.\s?(\$\w+),\s?null\);~msi',
            $res, $match)) {
            $arrayVar2 = [];
            preg_match_all('~[\'"](\w+)[\'"],?~msi', $match[4], $arrMatch2, PREG_PATTERN_ORDER);
            if (isset($arrMatch2[1])) {
                foreach ($arrMatch2[1] as $arr) {
                    $arrayVar2[] = $arr;
                }
            }

            if (isset($vars[$match[5]])
                && (preg_match('~,\s?(\$\w+),\s?(\$\w+)\)\);~msi', $vars[$match[5]], $m)
                    && $m[1] === $arrayVarName
                    && isset($vars[$m[2]])
                )) {
                $res = str_replace($arrayVar2, $arrayVar, $vars[$m[2]]);
            }
        }

        return $res;
    }

    private function deobfuscateSistemitComEnc($str, $matches)
    {
        $matches[4] = base64_decode(base64_decode($matches[4]));
        $res = gzinflate(base64_decode($matches[2]));
        preg_match_all('~\$\w+\s*=\s*\[((\'[^\']+\',?)+)~msi', $matches[4], $replace, PREG_SET_ORDER);
        $find = explode("','", substr($replace[0][1], 1, -1));
        $replace = explode("','", substr($replace[1][1], 1, -1));
        $res = str_replace($find, $replace, $res);
        return $res;
    }

    private function deobfuscateConcatVarsReplaceEval($str, $matches)
    {
        $res = Helpers::concatVariableValues($matches[1]);
        $res = str_replace($matches[5], '', $res);
        $res = base64_decode($res);
        return $res;
    }

    private function deobfuscateEvalVarFunc2($str, $matches)
    {
        return $this->unwrapFuncs($matches[6]);
    }

    private function deobfuscateEvalArrays($str, $matches)
    {
        $res = str_replace('\'\'', '@@empty@@', $str);
        $vars = explode('", "', substr($matches[10], 1, -1));

        $res = preg_replace_callback('~(\$\w+)\[(\d+)\]\s*\.?\s*~msi', static function($m) use ($vars, $matches) {
            if ($m[1] !== $matches[9]) {
                return $m[0];
            }
            return "'" . $vars[(int)$m[2]] . "'";
        }, $res);
        $res = str_replace(['\'\'', '@@empty@@', $matches[8]], ['', '\'\'', ''], $res);
        preg_match_all('~(\$\w+)\s*=\s*\'([^\']+)\';~msi', $res, $m, PREG_SET_ORDER);
        $vars = [];
        foreach ($m as $var) {
            $vars[$var[1]] = '\'' . $var[2] . '\'';
            $res = str_replace($var[0], '', $res);
        }
        $res = Helpers::replaceVarsFromArray($vars, $res);
        return $res;
    }

    private function deobfuscatePregReplaceVar($str, $matches)
    {
        $result = stripcslashes($matches[2]);

        $regex = stripcslashes($matches[1]);
        if ($regex === '.*') {
            return $result;
        }

        $result = preg_replace_callback($regex, static function ($m) {
            return '';
        }, $result);

        return $result;
    }

    private function deobfuscateEvalBinHexVar($str, $matches)
    {
        $func1 = stripcslashes($matches[2]);
        $func2 = stripcslashes($matches[4]);
        $result = '';

        if (Helpers::convertToSafeFunc($func2) && Helpers::convertToSafeFunc($func1)) {
            $result = '?>' . @Helpers::executeWrapper($func1, [@Helpers::executeWrapper($func2, [$matches[6]])]);
        } else {
            $result = sprintf("'?>'.%s(%s('%s');", $func1, $func2, $matches[6]);
        }

        return $result;
    }

    private function deobfuscateEvalFuncTwoArgs($str, $matches)
    {
        $arg1 = base64_decode($matches[5]);
        $arg2 = $matches[6];

        $result = "";
        for ($o = 0, $oMax = strlen($arg1); $o < $oMax;) {
            for ($u = 0, $uMax = strlen($arg2); $u < $uMax; $u++, $o++) {
                $result .= $arg1[$o] ^ $arg2[$u];
            }
        }

        return $result;
    }

    private function deobfuscateEvalVarReplace($str, $matches)
    {
        $res = $matches[3];
        $replaces = explode(';', $matches[4]);
        foreach ($replaces as $replace) {
            if (preg_match('~(\$\w+)=str_replace\(\'([^\']+)\',\s*\'(\w)\',\s*\1\);~msi', $replace, $m)) {
                $res = str_replace($m[2], $m[3], $res);
            }
        }
        $res = base64_decode($res);
        return $res;
    }

    private function deobfuscateEvalPregReplaceFuncs($str, $matches)
    {
        $func1Str = preg_replace('/' . $matches[3] . '/', "", $matches[2]);
        $func2Str = preg_replace('/' . $matches[6] . '/', "", $matches[5]);

        $strToDecode = '';
        preg_match_all('~[\'"]([^\'"]+)[\'"],?~msi', $matches[8], $strMatches, PREG_SET_ORDER);
        foreach ($strMatches as $index => $strMatch) {
            if ($index > 0) {
                $strToDecode .= PHP_EOL;
            }
            $strToDecode .= $strMatch[1];
        }

        $result = '';
        if (Helpers::convertToSafeFunc($func2Str)) {
            $result = @Helpers::executeWrapper($func2Str, [$strToDecode]);
        }

        if (preg_match('~eval\(\$\w+\);~msi', $func1Str) && Helpers::convertToSafeFunc($func2Str)) {
            $result = @Helpers::executeWrapper($func2Str, [$strToDecode]);
            $result = stripcslashes($result);
            $vars = Helpers::collectVars($result);
            if (preg_match('~\$\w+=\$\w+\([\'"]\([\'"],__FILE.*?(?:\$\w+\(){3}[\'"][^\'"]+[\'"]\)\)\)\);~msi', $result,
                $m)) {
                $result = $m[0];
            }
            $result = Helpers::replaceVarsFromArray($vars, $result);
            $result = preg_replace_callback('~gzinflate\(base64_decode\(str_rot13\(["\']([^\'"]+)[\'"]\)\)\)~msi',
                function ($m) {
                    return gzinflate(base64_decode(str_rot13($m[1])));
                }, $result);
        }

        return $result;
    }

    private function deobfuscateEvalVarSlashed($str, $matches)
    {
        $vars = Helpers::collectVars($matches[1]);
        $result = Helpers::replaceVarsFromArray($vars, $matches[2]);
        $result = $this->unwrapFuncs($result);

        return $result;
    }

    private function deobfuscateUrlMd5Passwd($str, $matches)
    {
        while(preg_match('~((?:(\$\w+)=\'[^;]+\';)+)~mis', $str, $matches2)) {
            $vars = Helpers::collectVars($matches2[1], "'");
            $str = Helpers::replaceVarsFromArray($vars, $str, true);
            $str = preg_replace_callback('~str_rot13\(urldecode\(\'([%\da-f]+)\'\)\)~mis', static function($m) {
                return "'" . str_rot13(urldecode($m[1])) . "'";
            }, $str);
            $str = str_replace($matches2[0], '', $str);
        }
        return $str;
    }

    private function deobfuscateBlackScorpShell($str, $matches)
    {
        $vars = Helpers::collectVars($matches[2], "'");
        $vars2 = Helpers::collectVars($matches[3], "'");
        array_walk($vars2, static function(&$var) {
            $var = "'$var'";
        });
        $str = gzinflate(base64_decode($vars2[$matches[5]]));
        $str = Helpers::replaceVarsFromArray($vars, $str, true);
        $str = Helpers::replaceVarsFromArray($vars2, $str);
        $str = str_ireplace('assert', 'eval', $str);
        return $str;
    }

    private function deobfuscateManyDictionaryVars($str, $matches)
    {
        $vars = Helpers::collectVars($matches[1], "'");
        $result = $matches[2];

        foreach ($vars as $dictName => $dictVal) {
            $result = preg_replace_callback(
                '~(\$\w+)[\[{][\'"]?(\d+)[\'"]?[\]}]~msi',
                static function ($m) use ($dictVal, $dictName) {
                    if ($m[1] !== $dictName) {
                        return $m[0];
                    }
                    return "'" . $dictVal[(int)$m[2]] . "'";
                },
                $result
            );
        }
        $result = Helpers::replaceVarsFromArray($vars, $result, true, true);
        $result = preg_replace_callback('~(\.?)\s?[\'"]([\w=\+/()\$,;:"\s?\[\]]+)[\'"]\s?~msi', static function ($m) {
            return $m[2];
        }, $result);

        return $result;
    }

    private function deobfuscateEvalBuffer($str, $matches)
    {
        $result = $matches[4];

        preg_match_all('~"([^"]+)"~msi', $matches[2], $arrMatches, PREG_SET_ORDER);

        $array = [];
        foreach ($arrMatches as $arrMatch) {
            $array[] = stripcslashes($arrMatch[1]);
        }

        $result = str_replace($array, '', $result);

        $result = gzinflate(base64_decode($result));

        return $result;
    }

    private function deobfuscateEvalArrayWalkFunc($str, $matches)
    {
        $result = stripcslashes($matches[1]) . '?>' . PHP_EOL;
        $encodedStr = '';

        preg_match_all('~(?:[\'"]([^\'"]{1,500})[\'"])~msi', $matches[2], $arrayMatches, PREG_SET_ORDER);

        foreach ($arrayMatches as $arrayMatch) {
            $encodedStr .= stripcslashes($arrayMatch[1]);
        }

        $result .= base64_decode(str_rot13($encodedStr));

        return $result;
    }

    private function deobfuscateEvalDictionaryVars($str, $matches)
    {
        $result = $str;
        $vars = Helpers::collectVars($matches[1]);
        $vars[$matches[2]] = $matches[3];

        $vars = Helpers::getVarsFromDictionaryDynamically($vars, $matches[1]);

        $func = $vars[$matches[5]] ?? null;
        if ($func && Helpers::convertToSafeFunc($func)) {
            $result = @Helpers::executeWrapper($func, [$matches[6]]);
        }

        $result = Helpers::replaceVarsFromArray($vars, $result);

        return $result;
    }

    private function deobfuscateEvalSubstrVal($str, $matches)
    {
        $result = strtr(
            substr($matches[2], (int)$matches[3] * (int)$matches[4]),
            substr($matches[2], (int)$matches[5], (int)$matches[6]),
            substr($matches[2], (int)$matches[7], (int)$matches[8])
        );

        return '?> ' . base64_decode($result);
    }

    private function deobfuscateEvalFuncXored($str, $matches)
    {
        $vars = Helpers::collectFuncVars($str);
        $result = Helpers::replaceVarsFromArray($vars, $str);

        if (preg_match('~\$\w+\s?=\s?gzinflate\(base64_decode\(.*?strlen.*?chr\(\(ord.*?\^~msi', $result)) {
            $encodedStr = gzinflate(base64_decode($matches[1]));
            $len = strlen($encodedStr);
            $result = '';
            for ($i = 0; $i < $len; $i++) {
                $result .= chr((ord($encodedStr[$i]) ^ (int)$matches[3]));
            }
        }

        return $result;
    }

    private function deobfuscateEvalFileContentOffset($str, $matches)
    {
        $result = $matches[1];

        $encodedStr = substr($str, (int)$matches[3]);
        $result = str_replace($matches[2], "'$encodedStr'", $result);

        return '<?php ' . $this->unwrapFuncs($result);
    }

    private function deobfuscateEvalFuncExplodedContent($str, $matches)
    {
        $decodedStr = trim(trim($matches[7], ";"), '"');
        $strMD5 = md5($matches[1]);

        $result = base64_decode(
            str_replace($strMD5, '', strtr($decodedStr . $matches[4], $matches[5], $matches[6]))
        );

        return $result;
    }

    private function deobfuscateEvalEncryptedVars($str, $matches)
    {

        $vars_str = preg_replace_callback('~(\d{1,10}\.\d{1,10})\s?\*\s?(\d{1,10})~msi', static function ($m) {
            $res = (double)($m[1]) * (int)$m[2];

            return "'$res'";
        }, $matches[1]);

        $vars_str = str_replace('"', "'", Helpers::normalize($vars_str));

        $vars = Helpers::collectVars($vars_str, "'");
        $vars_str = Helpers::replaceVarsFromArray($vars, $vars_str);
        $vars = Helpers::collectFuncVars($vars_str, $vars);
        $vars_str = Helpers::removeDuplicatedStrVars($vars_str);

        if ($a = preg_match('~(\$\w{1,50})=openssl_decrypt\(base64_decode\([\'"]([^\'"]+)[\'"]\),\'AES-256-CBC\',substr\(hash\(\'SHA256\',[\'"]([^\'"]+)[\'"],true\),0,32\),OPENSSL_RAW_DATA,([^\)]{0,50})\);~msi',
            $vars_str, $varMatch)) {
            $vars[$varMatch[1]] = openssl_decrypt(base64_decode($varMatch[2]), 'AES-256-CBC',
                substr(hash('SHA256', $varMatch[3], true), 0, 32), OPENSSL_RAW_DATA, $varMatch[4]);
        }

        $result = Helpers::replaceVarsFromArray($vars, str_replace(' ', '', $matches[7]));
        $result = str_replace($matches[4], str_replace($matches[5], '', "'$matches[6]'"), $result);

        return $this->unwrapFuncs($result);
    }

    private function deobfuscateEvalLoveHateFuncs($str, $matches)
    {
        $result = $matches[7];
        $result .= gzinflate(base64_decode($matches[4]));

        /* hate function */
        $finalPHPCode = null;
        $problems = explode(".", gzinflate(base64_decode($matches[2])));
        for ($mistake = 0, $mistakeMax = count($problems); $mistake < $mistakeMax; $mistake += strlen($matches[6])) {
            for ($hug = 0, $hugMax = strlen($matches[6]); $hug < $hugMax; $hug++) {
                $past = (int)$problems[$mistake + $hug];
                $present = (int)ord(substr($matches[6], $hug, 1));
                $sweet = $past - $present;
                $finalPHPCode .= chr($sweet);
            }
        }

        $finalPHPCode = gzinflate(base64_decode($finalPHPCode));

        $result .= PHP_EOL . $finalPHPCode;

        return $result;
    }

    private function deobfuscateXoredKey($str, $matches)
    {
        $encrypted = base64_decode($matches[4]);
        $key = $matches[7];
        $res = Helpers::xorWithKey($encrypted, $key);
        $res = base64_decode($res);
        return $res;
    }

    private function deobfuscateEvalGzB64($str, $matches)
    {
        $res = '';
        preg_match_all('~eval\(\$\w+\(\$\w+\(\'([^\']+)\'\)+;~msi', $str, $m, PREG_SET_ORDER);
        foreach ($m as $match) {
            $res .= gzuncompress(base64_decode($match[1])) . "\n";
        }
        return $res;
    }

    private function deobfuscateEvalArrayB64($str, $matches)
    {
        if (preg_match('~function\s*(_\d+)\((\$\w+)\)\s*{(\$\w+)=Array\(\'([^)]+)\'\);return\s*base64_decode\(\3\[\2\]\);~msi', $str, $found)) {
            $strlist = explode("','", $found[4]);
            $res = preg_replace_callback(
                '|(\w+)\((\d+)\)|smi',
                function ($m) use ($strlist, $found) {
                    if ($m[1] !== $found[1]) {
                        return $m[0];
                    }
                    return "'" . addcslashes(base64_decode($strlist[$m[2]]), '\\\'') . "'";
                },
                $str
            );
            $res = str_replace($matches[1], '', $res);
            return $res;
        }
    }

    private function deobfuscateManyBase64DecodeContent($str)
    {
        return Helpers::replaceBase64Decode($str);
    }

    private function deobfuscateEvalEscapedCharsContent($str, $matches)
    {
        $res = $matches[2] . "'" . stripcslashes($matches[1]) . "')";

        return $this->unwrapFuncs($res);
    }

    private function deobfuscateEvalFuncBinary($str, $matches)
    {
        $binaryVals = hex2bin($matches[2]);
        $res = Helpers::decodeEvalFuncBinary($binaryVals);

        return $res;
    }

    private function deobfuscateEvalPackFuncs($str, $matches)
    {
        return stripcslashes($matches[3]) . $matches[4];
    }

    private function deobfuscateParseStrFunc($str, $matches)
    {
        parse_str(Helpers::concatStr($matches[1]), $vars);
        $funcs = ($matches[5] && $matches[5] !== '') ? $matches[5] : $matches[3];
        $res = Helpers::replaceVarsByArrayName($matches[2], $vars, $funcs);
        $res = $this->unwrapFuncs($res . $matches[6] . ')');

        return $res;
    }

    private function deobfuscateEvalGzinflate($str, $match)
    {
        $res = stripcslashes($match[2]);
        $res = str_replace('"."', '', $res);
        return 'eval(' . $res . ');';
    }

    private function deobfuscateFuncVars($str, $matches)
    {
        $key = $matches[3];
        $res = $matches[7];
        $vars = [$matches[4] => preg_replace($matches[5], "", $matches[6])];

        preg_match_all('~(\$\w{1,50})\s?=\s?(?:(\$\w{1,50})\(\)\s?\.\s?)?\w{1,50}\(\\' . $matches[4] .'\(("[^"]+")\)\);~msi',
            $str, $match, PREG_SET_ORDER);
        foreach ($match as $matchVar) {
            $value = Helpers::decodeFuncVars($key,$this->unwrapFuncs($vars[$matches[4]] . '(' . $matchVar[3] . ')'));
            if ($matchVar[2] !== '') {
                $func = $vars[$matchVar[2]] ?? $matchVar[2];
                $value = $func . '() . \'' . $value . '\'';
            }
            $vars[$matchVar[1]] = $value;
        }

        foreach ($vars as $name => $val) {
            $res = str_replace($name, $val, $res);
        }
        return $res;
    }

    private function deobfuscateDictVars($str, $match)
    {
        $res = Helpers::replaceVarsFromDictionary($match[1], $match[2], $match[3]);
        $res = gzinflate(base64_decode(substr($res, 2, -3)));
        return $res;
    }

    private function deobfuscateGotoStrRot13Vars($str, $matches)
    {
        if (isset($matches[2])) {
            $vars = Helpers::collectVars($str);

            preg_match_all('~(\$\w{1,50})\s?=\s?str_rot13\(\1\);~msi', $str, $match, PREG_SET_ORDER);
            foreach ($match as $m) {
                if (isset($vars[$m[1]])) {
                    $vars[$m[1]] = str_rot13($vars[$m[1]]);
                }
            }

            preg_match_all('~(\$\w{1,50})~msi', $matches[2], $match, PREG_SET_ORDER);
            $strToDecode = '';
            foreach ($match as $var) {
                if (isset($vars[$var[1]])) {
                    $strToDecode .= $vars[$var[1]];
                }
            }

            return base64_decode($strToDecode);
        }

        return $str;
    }

    private function deobfuscateDecodedDoubleStrSet($str, $matches)
    {
        $strToDecode1 = '';
        $strToDecode2 = '';

        preg_match_all('~"([^"]+)"~msi', $matches[1], $match, PREG_SET_ORDER);
        foreach ($match as $m) {
            $strToDecode2 .= $m[1];
        }
        preg_match_all('~\'([^\']+)\'~msi', $matches[2], $match, PREG_SET_ORDER);
        foreach ($match as $m) {
            $strToDecode1 .= $m[1];
        }

        return base64_decode($strToDecode1) . PHP_EOL . base64_decode($strToDecode2);
    }

    private function deobfuscateCreateFuncStrrev($str, $matches)
    {
        $res = preg_replace_callback('~strrev\("([^"]+)"\)~msi', static function ($m) {
            return '"' . strrev($m[1]) . '"';
        }, $matches[3]);

        $res = Helpers::concatStringsInContent($res);
        $vars = Helpers::collectVars($res);
        $res = Helpers::replaceVarsFromArray($vars, $res);
        $res = Helpers::removeDuplicatedStrVars($res);

        if (preg_match('~\$\w+=base64_decode\([\'"][^\'"]+[\'"]\);\$\w+=create_function\(\'\$\w+\',\$\w+\);\$\w+\(\$\w+\);~msi',
            $res)) {
            $funcs = base64_decode($matches[5]);
            $res = str_replace($matches[1], '\'' . $matches[2] . '\'', $funcs);
        }

        return $res;
    }

    private function deobfuscateStrrevBase64($str, $matches)
    {
        return strrev($matches[2]);
    }

    private function deobfuscateCustomDecode($str, $matches)
    {
        return str_rot13($matches[2] . $matches[6]);
    }

    private function deobfuscateExpDoorCode($str, $matches)
    {
        $str = str_replace(
                [
                    $matches[1],
                    $matches[3]
                ],
                [
                    str_replace(['"."', '\'.\''], '', $matches[1]),
                    "'" . addcslashes(base64_decode($matches[4]), "'") . "'"
                ],
                $str
        );
        return $str;
    }

    private function deobfuscateAgustus1945($str, $matches)
    {
        return str_replace($matches[1], $matches[4] . '"' . $matches[7] . '"' . $matches[5], $str);
    }

    private function deobfuscateIncludeB64($str, $matches)
    {
        return str_replace($matches[1], "'" . base64_decode($matches[2]) . "'", $str);
    }

    private function deobfuscateDecodeFileContent($str, $matches)
    {
        return gzuncompress(base64_decode($matches[3]));
    }

    private function deobfuscateBase64decodedFuncContents($str, $matches)
    {
        $vars   = Helpers::collectVars($matches[2]);
        $res    = str_replace($matches[2], '', $str);
        $res    = Helpers::replaceVarsFromArray($vars, $res);

        return Helpers::replaceBase64Decode($res, '\'');
    }

    private function deobfuscateEvalVarWithComment($str, $matches)
    {
        $res = str_replace($matches[3], '', $matches[2]);
        $vars = Helpers::collectVars($matches[1]);
        $res = Helpers::replaceVarsFromArray($vars, $res);

        return '?> ' . $this->unwrapFuncs($res);
    }

    private function deobfuscateEvalPackPreg($str, $matches)
    {
        $varsStr = Helpers::replaceVarsFromDictionary($matches[1], $matches[2], $matches[3]);
        $vars = Helpers::collectVars($varsStr, "'");
        if (isset($vars[$matches[6]]) && Helpers::convertToSafeFunc($vars[$matches[6]])) {
            $strToDecode = @Helpers::executeWrapper($vars[$matches[6]], [$matches[2]]);
            $strToDecode = preg_replace('~[' . $matches[5] . ']~i', '', $strToDecode);
            $strToDecode = pack('H*', $strToDecode);

            return $strToDecode;
        }

        return $str;
    }

    private function deobfuscateNib2xeh($str, $matches)
    {
        $matches[3] = str_replace("'", '', $matches[3]);
        $matches[5] = str_replace("'", '', $matches[5]);
        $matches[7] = str_replace("'", '', $matches[7]);
        $replace_from = explode(',', $matches[5]);
        $replace_from[] = ',';
        $replace_to = explode(',', $matches[7]);
        $replace_to[] = '';
        $hex = str_replace($replace_from, $replace_to, $matches[3]);
        return hex2bin($hex);
    }

    private function deobfuscateFun256($str, $matches)
    {
        $need_encode_twice  = !isset($matches[4]);
        $replace            = $need_encode_twice ? $str : $matches[1];
        $code               = $need_encode_twice ? $matches[3] : $matches[4];

        $chr = '';
        for ($i = 0; $i < 120; $i++) {
            $chr .= chr($i);
        }
        $encoded = gzinflate(gzinflate(base64_decode($code)));
        if ($need_encode_twice) {
            $encoded = gzinflate(gzinflate(base64_decode($encoded)));
        }
        $encoded_len = strlen ($encoded);
        $hash = sha1(hash('sha256', md5($chr)));
        $hash_len = strlen($hash);
        $result = '';
        for ($i = 0; $i < $encoded_len; $i += 2) {
            $char = hexdec(base_convert(strrev(substr($encoded, $i, 2)), 36, 16));
            if ($j === $hash_len) {
                $j = 0;
            }
            $delta = ord($hash[$j]);
            $j++;
            $result .= chr ($char - $delta);
        }
        $result = str_replace($replace, $result, $str);
        return $result;
    }

    private function deobfuscateCreateFuncObf($str, $matches)
    {
        $str = Helpers::replaceBase64Decode($matches[7], '\'');
        $str = preg_replace_callback('~str_rot13\(\'([^\']+)\'\)~msi', static function($m) {
            return '\'' . str_rot13($m[1]) . '\'';
        }, $str);
        $str = preg_replace_callback('~chr\(([^\)]+)\)~msi', static function($m) {
            return '\'' . Helpers::calc($m[0]) . '\'';
        }, $str);
        $str = str_replace('\'.\'', '', $str);
        return base64_decode(substr($str,1, -1));
    }

    private function deobfuscateEvalFileContentBySize($str, $matches)
    {
        $res = $str;
        $mainContent = str_replace(["\r", "\n"], '', $str);
        $mainContentLen = strlen($mainContent);
        $main_key = $matches[2] . $mainContentLen;

        $str_to_code = base64_decode($matches[3]);
        $code = Helpers::decodeEvalFileContentBySize($str_to_code, $main_key);

        if (preg_match('~\$\w+=strpos\(\$\w+,((?:chr\(\d+\)\.?)+)\);\$\w+=substr\(\$\w+,0,\$\w+\);eval\(\w+\(\w+\("([^"]+)"\),\$\w+\)\);function\s\w+\(\$\w+\){.*?strpos\(\$\w+,\1\);.*?substr\(\$\w+,\$\w+\+(\d)\)\);~msi',
            $code, $match)) {
            preg_match_all('~chr\((\d+\))~msi', $match[1], $chrMatches, PREG_SET_ORDER);

            $find = '';
            foreach ($chrMatches as $chrMatch) {
                $find .= chr((int)$chrMatch[1]);
            }
            $pos = strpos($mainContent, $find);
            $content = substr($mainContent, 0, $pos);

            $code = Helpers::decodeEvalFileContentBySize(base64_decode($match[2]), $main_key);
            if (preg_match('~\$\w+=md5\(\$\w+\)\.\$\w+;~msi', $code)) {
                $key = md5($content) . $mainContentLen;
                $content = base64_decode(substr($mainContent, $pos + (int)$match[3]));
                $res = Helpers::decodeEvalFileContentBySize($content, $key);
            }
        }

        return '<?php ' . $res;
    }

    private function deobfuscateBase64Array($str, $matches)
    {
        $var_name   = $matches[1];
        $el0        = base64_decode($matches[2]);
        $el1        = Helpers::replaceBase64Decode($matches[3], '\'');
        $code       = $matches[4];

        $code = str_replace($var_name . '[0]', '\'' . $el0 . '\'', $code);
        $code = str_replace($var_name . '[1]', $el1, $code);
        $code = Helpers::replaceBase64Decode($code, '\'');

        return $code;
    }

    private function deobfuscateSimpleVarsAndEval($str, $matches)
    {
        $vars_content = $matches[1];
        $eval_content = $matches[2];

        $vars = Helpers::collectVars($vars_content);
        $code = Helpers::replaceVarsFromArray($vars, $eval_content);

        return $this->unwrapFuncs($code);
    }

    private function deobfuscateReplaceFuncWithBase64DecodeArray($str, $matches)
    {
        $nel_function_content   = $matches[3];
        $other_content          = $matches[1] . $matches[4];
        $array_elements         = str_replace('\'.\'', '', $nel_function_content);

        $elements = array_map('base64_decode', explode(',', $array_elements));

        $result = preg_replace_callback('~nel\s*\(\s*(\d+)\s*\)~mis', function($match) use ($elements) {
                $index = $match[1];
                $value = isset($elements[$index]) ? $elements[$index] : null;
                if (!is_null($value)) {
                    if ($value === "\r") {
                        return '"\\r"';
                    }
                    return "'" . addcslashes($value, "'\\") . "'";
                }
                return $match[0];
            }, $other_content
        );

        return Helpers::replaceMinMaxRound($result);
    }

    private function deobfuscateCreateFuncVars($str, $matches)
    {
        $res = Helpers::concatStringsInContent($matches[1]);
        $vars = Helpers::collectVars($res);
        $res = Helpers::replaceVarsFromArray($vars, $matches[2]);

        return $this->unwrapFuncs($res);
    }

    private function deobfuscateJsonDecodedVar($str, $matches)
    {
        $decodedStr = Helpers::replaceBase64Decode($matches[1], 'QUOTE');
        $decodedStr = str_replace("'", "\'", $decodedStr);
        $decodedStr = str_replace("QUOTE", "'", $decodedStr);

        $res = str_replace($matches[1], $decodedStr, $str);

        return $res;
    }

    private function deobfuscateFilePutPureEncodedContents($str, $matches)
    {
        return $this->deobfuscateJsonDecodedVar($str, $matches);
    }

    private function deobfuscateEvalFuncReverse($str, $matches)
    {
        $decodedContent = $matches[5];
        $decodedContent = preg_replace_callback('~eval\((\w+\(\'([^\']+)\'\))\);~msi', function ($m) {
            $strLen = strlen($m[2]);
            $res = '';

            for ($i = 0; $i <= $strLen - 1; $i++) {
                $res .= $m[2][$strLen - $i - 1];
            }

            return str_replace($m[1], $res, $m[0]);
        }, $decodedContent);

        return str_replace($matches[5], $decodedContent, $str);
    }

    private function deobfuscateBase64decodeFuncs($str, $matches)
    {
        $res = $str;
        $res = preg_replace_callback('~\w+\("([^"]+)"\)~msi', function ($m) {
            return "'" . base64_decode($m[1]) . "'";
        }, $res);

        return $res;
    }

    private function deobfuscateEvalCreateFuncWithDictionaryVar($str, $matches)
    {
        $res = Helpers::replaceVarsFromDictionary($matches[1], $matches[2], $str);
        $vars = Helpers::collectVars($res, "'");
        $func = stripcslashes($matches[5]);

        return sprintf('eval(%s(%s(\'%s\'))));', $vars[$matches[3]] ?? $matches[3], $func, $matches[6]);
    }

    private function deobfuscateEvalCreateFuncWithVars($str, $matches)
    {
        $res = Helpers::concatStringsInContent($str);
        $vars = Helpers::collectVars($res, false);
        $res = Helpers::replaceVarsFromArray($vars, $matches[4]);
        $res = Helpers::concatStringsInContent($res);
        $res = preg_replace_callback('~\w+\(((?:[\'"][^\'"]*[\'"],?)+)\)~msi', function ($m) {
            return str_replace(',', '.', $m[1]);
        }, $res);
        $res = Helpers::concatStringsInContent($res);

        return trim($res, "'");
    }

    private function deobfuscateExplodeSubstrGzinflate($str, $matches)
    {
        $obfuscated = explode($matches[3], gzinflate(substr(stripcslashes($matches[4]), hexdec($matches[5]), (int)$matches[6])));
        $str = str_replace($matches[1], '', $str);
        $str = preg_replace_callback('~\$(?:_GET|GLOBALS)[\{\[][^}]+[\}\]][\{\[]([0-9a-fx]+)[\}\]]\]?(\()?~msi', function($m) use ($obfuscated) {
            $index = hexdec($m[1]);
            $func = (isset($m[2]) && $m[2] !== '');
            if ($func) {
                return $obfuscated[$index] . '(';
            } else {
                return '\'' . $obfuscated[$index] . '\'';
            }
        }, $str);
        $str = preg_replace('~define\(\'([^\']+)\',\s*\'[^\']+\'\);\$(?:_GET|GLOBALS)\[\1\]\s*=\s*explode\(\'([^\']+)\',\s*gzinflate\(substr\(\'(.*)\',([0-9a-fx]+),\s*([0-9\-]+)\)\)\);~msi', '', $str);
        $str = Helpers::normalize($str);
        return $str;
    }

    private function deobfuscateBase64Vars($str, $matches)
    {
        $vars = Helpers::collectVars($matches[2], '\'');
        $code = Helpers::replaceVarsFromArray($vars, $matches[5], false, true);
        $code = Helpers::collectStr($code, '\'');
        $code = base64_decode($code);
        $code = str_replace($matches[1], $code, $str);
        return $code;
    }

    private function deobfuscateChr0b($str, $matches)
    {
        $str = preg_replace_callback('~chr\(((0b|0x)?[0-9a-f]+)\)~msi', function($m) {
            if (isset($m[2]) && $m[2] === '0b') {
                return '\'' . chr(bindec($m[1])) . '\'';
            }
            if (isset($m[2]) && $m[2] === '0x') {
                return '\'' . chr(hexdec($m[1])) . '\'';
            }
            return '\'' . chr($m[1]) . '\'';
        }, $str);

        $str = preg_replace_callback('~\(\'(.)\'\^\'(.)\'\)~msi', function($m) {
            return '\'' . ($m[1] ^ $m[2]) . '\'';
        }, $str);

        $str = str_replace('\'.\'', '', $str);
        $str = preg_replace('~\$\{\'([^\']+)\'\}~msi', '\$\1', $str);
        $str = preg_replace_callback('~(\$\w+)\s*=\s*\'str_rot13\';\s*\1\s*=\s*\1\s*\(\'([^\']+)\'\);~msi', function ($m) {
            return $m[1] . ' = ' . '\'' . str_rot13($m[2]) . '\';';
        }, $str);
        return $str;
    }

    private function deobfuscateCreateFuncPlugin($str, $matches)
    {
        return gzinflate(base64_decode($matches[3]));
    }

    private function deobfuscateStrreplaceEval($str, $matches)
    {
        $vars = Helpers::collectFuncVars($matches[1]);
        return Helpers::replaceVarsFromArray($vars, $matches[2]);
    }

    private function deobfuscateHackM19($str, $matches)
    {
        return gzinflate(base64_decode($matches[6]));
    }

    private function deobfuscateEv404($str, $matches)
    {
        return bzdecompress(base64_decode($matches[4]));
    }

    private function deobfuscateSetVars($str, $matches)
    {
        return str_replace($matches[1], gzinflate(base64_decode($matches[5])), $str);
    }

    private function deobfuscateCreateFuncGzB64($str, $matches)
    {
        return gzuncompress(base64_decode($matches[3]));
    }

    private function deobfuscateCreateFuncGzInflateB64($str, $matches)
    {
        return gzinflate(base64_decode($matches[3]));
    }

    private function deobfuscateWsoShellDictVars($str, $matches)
    {
        $vars[$matches[1]] = stripcslashes($matches[2]);
        $res               = Helpers::replaceVarsFromArray($vars, $matches[3]);
        $vars              = Helpers::collectFuncVars($res, $vars, false);
        $res               = Helpers::replaceVarsFromArray($vars, $matches[5]);
        $finalCode         = $this->unwrapFuncs($res);

        $dictVar = Helpers::replaceVarsFromDictionary($matches[4], $vars[$matches[4]] ?? '', $matches[6]);
        $vars    = Helpers::collectVars($dictVar, "'", $vars);
        if (isset($vars[$matches[9]]) && $vars[$matches[9]] === 'rotencode') {
            $vars[$matches[8]] = Helpers::rotencode(base64_decode($matches[10]), -1);
            $dictVar = Helpers::replaceVarsFromDictionary($matches[8], $vars[$matches[8]] ?? '', $matches[11]);
            $dictVar = Helpers::replaceVarsFromDictionary($matches[4], $vars[$matches[4]] ?? '', $dictVar);
            $vars    = Helpers::collectVars($dictVar, "'", $vars);

            $res = $this->unwrapFuncs(Helpers::replaceVarsFromArray($vars, $matches[12]));

            $count = 10;
            while ($count > 0 && preg_match('~@?eval\(\$\w+\(\$\w+\(["\'][^\'"]+[\'"]\)\)\);~msi', $res, $match)) {
                $res = $this->unwrapFuncs(Helpers::replaceVarsFromArray($vars, $res));
                $count--;
            }

            return $res;
        }

        return $str;
    }

    private function deobfuscateFuncDictVars($str, $matches)
    {
        $vars[$matches[1]] = stripcslashes($matches[2]);

        $vars[$matches[3]] = explode($matches[4], $matches[5]);
        foreach ($vars[$matches[3]] as $i => $k) {
            $temp          = preg_split("//", $k, -1, PREG_SPLIT_NO_EMPTY);
            $vars[$matches[3]][$i] = implode("", array_reverse($temp));
        }

        $iterVar = explode($matches[7], $matches[8]);
        foreach ($iterVar as $i => $k) {
            $vars[$k] = $vars[$matches[3]][$i];
        }

        $vars[$matches[1]] = Helpers::decodefuncDictVars($vars[$matches[1]], -2);
        $dictVar = Helpers::replaceVarsFromDictionary($matches[1], $vars[$matches[1]] ?? '', $matches[15]);
        $vars    = Helpers::collectVars($dictVar, "'", $vars);

        $dictVar = Helpers::getVarsFromDictionaryDynamically($vars, $matches[20]);
        $vars    = Helpers::collectVars($dictVar, "'", $vars);

        $res = Helpers::decodefuncDictVars($matches[23], 1);
        if (isset($vars[$matches[22]]) && Helpers::convertToSafeFunc($vars[$matches[22]])) {
            $res = @Helpers::executeWrapper($vars[$matches[22]], [$res]);
            $res = Helpers::replaceVarsFromArray($vars, $res);
        }

        if (preg_match('~\$\w+="([^"]+)";@eval\(\'\?>\'\.gzuncompress\(base64_decode\(strtr\(substr\(\$\w+,(\d+[+\-*/]\d+)\),substr\(\$\w+,(\d+),(\d+)\),\s?substr\(\$\w+,(\d+),(\d+)\)\)\)\)\);~msi',
                       $res, $match)) {
            $res = '?> ' . gzuncompress(base64_decode(
                strtr(
                    substr($match[1], (int)Helpers::calculateMathStr($match[2])),
                    substr($match[1], (int)$match[3], (int)$match[4]),
                    substr($match[1], (int)$match[5], (int)$match[6])))
                );
        }

        return $res;
    }

    private function deobfuscateSec7or($str, $matches)
    {
        $res = $this->unwrapFuncs($matches[3] . $matches[6] . $matches[4] . ';');
        for($i=0, $iMax = strlen($res); $i < $iMax; $i++) {
            $res[$i] = chr(ord($res[$i]) - (int)$matches[5]);
        }
        return $res;
    }

    private function deobfuscateLinesCond($str, $matches)
    {
        $vars_str = $this->unwrapFuncs($matches[1]);
        preg_match_all('~((?:\$\w+=)+)__LINE__==\s*(?:\d+[-+]?)+\s*\?\s*base64_decode\("([^"]+)"\)~msi', $vars_str, $m, PREG_SET_ORDER);
        $vars = [];
        foreach ($m as $var) {
            $func = base64_decode($var[2]);
            $tmp = explode('=', $var[1]);
            array_pop($tmp);
            $vars[] = array_combine(array_values($tmp), array_fill(0, count($tmp), $func));
        }
        $vars = array_merge(...$vars);
        $res = preg_replace_callback('~eval\(\$\w+\(\$\w+\("[^"]+"\)\)\);~msi', function ($m) use ($vars) {
            while (preg_match('~eval\(\$\w+\(\$\w+\("[^"]+"\)\)\);~msi', $m[0])) {
                $m[0] = $this->unwrapFuncs(Helpers::replaceVarsFromArray($vars, $m[0]));
            }
            return $m[0];
        }, $matches[3]);
        $tmp = [];
        $vars = Helpers::collectVars($res, '"', $tmp, true);
        $res = Helpers::replaceVarsFromArray($vars, $res, false, true);
        $vars = Helpers::collectVars($res, '\'', $tmp, true);
        $res = Helpers::replaceVarsFromArray($vars, $res, false, true);
        return $res;
    }

    private function deobfuscateClassWithArrays($str, $matches)
    {
        preg_match_all('~"[^"]+"=>"([^"]+)"~msi', $matches[2], $m);
        $data = implode('', array_reverse($m[1]));
        $data = gzuncompress(base64_decode($data));

        $numberSubstr = 14;
        if (preg_match('~,\((\d+/\d+)\)\);return~msi', $str, $calcMatch)) {
            $numberSubstr = (int)Helpers::calculateMathStr($calcMatch[1]);

        }
        for ($i = 0, $iMax = strlen($data); $i < $iMax; $i++) {
            if(isset($data[$i])) {
                $param3 = ord($data[$i]);
                $data[$i] = chr($param3 - $numberSubstr);
            }
        }
        $res = gzuncompress(base64_decode(strrev(gzinflate($data))));
        return $res;
    }

    private function deobfuscateGotoBase64Decode($str)
    {
        $res = $str;
        $hop = 5;

        while ($hop > 0 && preg_match(Helpers::REGEXP_BASE64_DECODE, $res)) {
            $res = preg_replace_callback(Helpers::REGEXP_BASE64_DECODE, function ($match) {
                $code = base64_decode(stripcslashes($match[1]));
                return '"' . Helpers::unwrapGoto($code) . '"';
            }, $res);

            $hop--;
        }

        return $res;
    }

    private function deobfuscateGotoB64Xor($str, $matches)
    {
        return Helpers::unwrapGoto($str);
    }

    private function deobfuscateAssertStrrev($str, $matches)
    {
        return str_replace($matches[1], strrev($matches[4]), $str);
    }

    private function deobfuscateB64strtr($str, $matches)
    {
        $code = $matches[4];
        $delta = (int)$matches[1];
        $code = str_split($code);
        foreach ($code as &$c) {
            $c = chr(ord($c) + $delta);
        }
        $code = implode('', $code);
        $code = strtr($code, $matches[2], $matches[3]);
        $code = base64_decode($code);
        preg_match('~(\$\w+)="([^"]+)";@eval\(\'\?>\'\.gzuncompress\((?:\$\w+\()+\$\w+,(\$\w+)\*2\),(\$\w+)\(\1,\3,\3\),\s*\4\(\1,0,\3\)+;~mis', $code, $m);
        $code = gzuncompress(base64_decode(strtr(substr($m[2],52*2),substr($m[2],52,52), substr($m[2],0,52))));
        $res = Helpers::unwrapGoto($code);
        return $res;
    }

    private function deobfuscateGzB64strReplaceDataImage($str, $matches)
    {
        $strToDecode = str_replace([$matches[2], $matches[3]], [$matches[4], $matches[5]], $matches[7]);

        $res = gzinflate(base64_decode($strToDecode));

        return $res;
    }

    private function deobfuscateSerializeFileContent($str, $matches)
    {
        return base64_decode(strrev(str_rot13($matches[2])));
    }

    private function deobfuscateGlobalVarsManyReplace($str, $matches)
    {
        $vars = Helpers::collectVars($matches[1]);

        foreach ($vars as &$var) {
            $var = base64_decode(strrev(str_rot13($var)));
        }

        $res = Helpers::replaceVarsFromArray($vars, $matches[2], true, true);

        return $res;
    }

    private function deobfuscateConcatVarsPregReplace($str, $matches)
    {
        $vars = [];

        $vars = Helpers::collectConcatedVars($str, '"', $vars);
        $res = Helpers::replaceVarsFromArray($vars, $matches[3], true, true);
        $res = $this->unwrapFuncs($res);

        return $res;
    }

    private function deobfuscateFilePutContentsB64Decoded($str, $matches)
    {
        $res = $str;
        $vars = [];

        $vars = Helpers::collectConcatedVars($res, '"', $vars, true);

        $res = Helpers::replaceVarsFromArray($vars, $res, true, true);
        $res = Helpers::replaceBase64Decode($res, '"');

        return $res;
    }

    private function deobfuscateFwriteB64DecodedStr($str, $matches)
    {
        $res = $str;
        $vars = [];

        $vars = Helpers::collectFuncVars($res, $vars, false, true);
        $res = Helpers::replaceVarsFromArray($vars, $res, true, true);

        return $res;
    }

    private function deobfuscateFilePutContentsB64Content($str, $matches)
    {
        $res = Helpers::replaceBase64Decode($str, "'");

        return $res;
    }

    private function deobfuscateChrDictCreateFunc($str, $matches)
    {
        $vars = [];

        preg_match_all('~chr\((\d+)\)~msi', $matches[3], $chrs, PREG_SET_ORDER);

        $dictVar = '';
        foreach ($chrs as $chr) {
            $dictVar .= chr((int)$chr[1]);
        }

        $res = Helpers::replaceVarsFromDictionary($matches[2], $dictVar, $matches[6]);
        $res = str_replace('\\\'', "'", $res);
        $res = Helpers::replaceBase64Decode($res, "'");
        $res = substr($res, 1);
        $res = substr($res, 0, -1);

        return $res;
    }

    private function deobfuscateStrReplaceFuncsEvalVar($str, $matches)
    {
        $func = str_replace($matches[3], '', $matches[2]);

        if ($func === 'base64_decode') {
            return base64_decode($matches[4]);
        }

        return $str;
    }

    private function deobfuscateB64SlashedStr($str, $matches)
    {
        return stripcslashes(base64_decode(stripcslashes($matches[1])));
    }

    private function deobfuscateB64ArrayStrEval($str, $matches)
    {
        return base64_decode($matches[4]);
    }

    private function deobfuscateDictVarsPregReplaceB64($str, $matches)
    {
        $res = Helpers::replaceVarsFromDictionary($matches[1], $matches[2], $str);

        if (strpos($res, 'preg_replace') &&
            strpos($res, 'eval') &&
            strpos($res, 'base64_decode')) {
            return base64_decode($matches[3]);
        }

        return $res;
    }

    private function deobfuscateEvalVarB64($str, $matches)
    {
        return gzinflate(base64_decode($matches[3]));
    }

    private function deobfuscateDecodeAChar($str, $matches)
    {
        $res = str_replace($matches[1], '', $str);
        while (strpos($res, 'eval(' . $matches[2] . '(\'') !== false) {
            $res = preg_replace_callback('~eval\(\w+\(\'([^\']+)\'\)\);~msi', function ($m) {
                return Helpers::decodeACharCustom($m[1]);
            }, $res);
        }
        $vars = Helpers::collectVars($res, '\'');
        foreach ($vars as $var => $value) {
            if (strpos($res, $matches[2] . '(' . $var . ')') !== false) {
                $res = str_replace($var . '=\'' . $value . '\';', '', $res);
                $res = str_replace($matches[2] . '(' . $var . ')', '\'' . addcslashes(Helpers::decodeACharCustom($value), '\'') . '\'', $res);
            }
        }
        return $res;
    }

    private function deobfuscateStrReplaceCreateFunc($str, $matches)
    {
        $res = $matches[7];
        $funcs = str_replace($matches[3], 'str_replace', $matches[4]);
        $vars = Helpers::collectFuncVars($funcs, $vars, false);
        $vars[$matches[1]] = '\'' . $matches[2] . '\'';
        foreach ($vars as $var => $value) {
            $res = str_replace($var, $value, $res);
        }
        return 'eval(' . $res . ');';
    }

    private function deobfuscateEvalbin2hex($str, $matches)
    {
        $res = hex2bin($matches[5]) . $matches[6];
        $res = $this->unwrapFuncs($res);
        if (preg_match('~define\(\'([^\']+)\', \'[^\']+\'\);\$GLOBALS\[\1\]\s*=\s*explode\(\'([^\']+)\',\s*gzinflate\(substr\(\'((?:[^\']*\\\\\')+[^\']+)\',([0-9a-fx]+),\s*([\-0-9a-f]+)\)~msi', $res, $m)) {
            $m[3] = stripcslashes($m[3]);
            $strings = explode($m[2], gzinflate(substr($m[3], hexdec($m[4]), (int)$m[5])));
            $res = str_replace($m[0], '', $res);
            $res = preg_replace_callback('~\$GLOBALS[\{\[].{1,3}[\}\]][\[\{]([0-9a-fx]+)[\]\}]~msi', function($m) use ($strings) {
                return '\'' . $strings[hexdec($m[1])] . '\'';
            }, $res);
        }

        if (substr_count($res, 'goto ') > 50) {
            $res = Helpers::unwrapGoto($res);
        }
        return $res;
    }

    private function deobfuscateManyFuncsWithCode($str, $matches)
    {
        $funcs = [$matches[1] => 'decode'];

        preg_match_all('~function\s(\w{1,50})\((?:\$\w{1,50},?\s?)+\)\s?{\s?return\s\$\w{1,50};\s?}~msi', $res,
                       $funcMatches, PREG_SET_ORDER);

        foreach ($funcMatches as $funcMatch) {
            $funcs[$funcMatch[1]] = 'single_var';
        }

        $res = preg_replace_callback('~(\w{1,50})\s?\(\s?[\'"]([^\'"]+)[\'"]\s?\)~msi', function ($m) use ($funcs) {
            $func = $funcs[$m[1]] ?? false;
            if (!$func) {
                return $m[0];
            }
            if ($func === 'decode') {
                $decoded = "";
                for ($i = 0; $i < strlen($m[2]) - 1; $i += 2) {
                    $decoded .= chr(hexdec($m[2][$i] . $m[2][$i + 1]) ^ 0x66);
                }

                return '"' . $decoded . '"';
            } elseif ($func === 'single_var') {
                return '"' . $m[2] . '"';
            }
        }, $str);

        return $res;
    }

    private function deobfuscateManyGlobals($str, $matches)
    {
        $vars = [];
        foreach ([$matches[1], $matches[2], $matches[3]] as $m) {
            $hangs = 50;
            $part = $m;
            while (strpos($part, 'base64_decode') !== false && $hangs--) {
                $part = Helpers::replaceVarsFromArray($vars, $part);
                $part = Helpers::replaceBase64Decode($part);
            }
            $ops = explode(';', $part);
            foreach ($ops as $v) {
                if ($v === '') {
                    continue;
                }
                $tmp = explode('=', $v, 2);
                $vars[$tmp[0]] = $tmp[1];
            }
        }
        $res = str_replace([$matches[1], $matches[2], $matches[3]], '', $str);
        $hangs = 50;
        while (strpos($res, '$GLOBALS') !== false && $hangs--) {
            $res = str_replace(array_keys($vars), array_values($vars), $res);
        }
        $res = str_replace('base64_decode(\'\')', '\'\'', $res);
        return $res;
    }

    private function deobfuscateB64xoredkey($str, $matches)
    {
        $b64 = Helpers::collectConcatedVars($matches[2]);
        $b64 = $b64[key($b64)];
        $res = Helpers::xorWithKey(base64_decode($b64), $matches[10]);
        return $matches[1] . $res;
    }

    private function deobfuscateGzB64Func($str, $matches)
    {
        $res = Helpers::normalize($matches[5]);
        $res = str_replace($matches[4], '"' . $matches[6] . '"', $res);
        return $res;
    }

    private function deobfuscateDictArrayFuncVars($str, $matches)
    {
        $dictName = $matches[5];

        $res = preg_replace_callback('~chr\((\d+)\)~msi', static function ($match) {
            return '\'' . chr($match[1]) . '\'';
        }, $matches[6]);


        $vars[$matches[2]] = 'base64_decode';
        $vars[$matches[3]] = base64_decode(Helpers::concatStr($matches[4]));

        $res = Helpers::replaceVarsFromArray($vars, $res, true);
        $res = Helpers::concatStringsInContent($res);
        $res = Helpers::replaceVarsFromArray($vars, $res, true, true);

        $res = preg_replace_callback('~str_rot13\([\'"]([^\'"]+)[\'"]\)~msi', static function ($match) {
            return '\'' . str_rot13($match[1]) . '\'';
        }, $res);

        $res = preg_replace_callback('~(?:[\'"][\w=();*/]*[\'"]\.?){2,}~msi', static function ($m) {
            preg_match_all('~(\.?)\s?[\'"]([\w=\+/%&();*]+)[\'"]\s?~msi', $m[0], $concatStrings);
            $strVar = "";
            foreach ($concatStrings[2] as $index => $concatString) {
                if ($concatStrings[1][$index] === '.') {
                    $strVar .= $concatString;
                } else {
                    $strVar = $concatString;
                }
            }

            return '\'' . $strVar . '\'';
        }, $res);

        $arrayVarDict = [];

        preg_match_all('~[\s\'"]*(.*?\]?)[\s\'"]*(,|$)~msi', $res, $arrMatches, PREG_SET_ORDER);

        foreach ($arrMatches as $arrMatch) {
            if ($arrMatch[1] === '') {
                continue;
            }
            $arrayVarDict[] = $arrMatch[1];
        }

        $res = str_replace([$matches[1], $matches[6]], '', $str);
        $res = preg_replace_callback('~(\$\w{1,50})\[(\d+)\]~msi', static function ($match) use ($dictName, $arrayVarDict) {
            if ($dictName === $match[1]) {
                $res = $arrayVarDict[$match[2]] ?? $match[0];
                if (!Helpers::convertToSafeFunc($res) && $res !== 'json_decode' && $res !== 'create_function' && strpos($res, '$') === false) {
                    $res = '"' . $res . '"';
                }
                return $res;
            }
            return $match[0];
        }, $res);

        return $res;
    }

    private function deobfuscateCreateFuncPackStrRot13($str, $matches)
    {
        return pack('H*', str_rot13($matches[2]));
    }

    private function deobfuscateDictVarsCreateFunc($str, $matches)
    {
        $res = $str;
        $dictName = $matches[2];
        $dictVal = stripcslashes($matches[3]);
        $vars = [];

        $res = preg_replace_callback('~(\$\w{1,50})\s?=\s?\w{1,50}\((?:(?:\$\w{1,50}\[\d+\]\s?|[\'"]{2}\s?)[.,]?\s?)+\);~msi',
            function($m) use (&$vars, $dictName, $dictVal) {
            $varName = $m[1];
            $dictResultStr = '';

            preg_match_all('~(\$\w{1,50})\[(\d+)\]~msi', $m[0], $dictVars, PREG_SET_ORDER);
            foreach ($dictVars as $dictVar) {
                if ($dictVar[1] !== $dictName) {
                    continue;
                }

                if ((int)$dictVar[2][0] === 0) {
                    $dictResultStr .= $dictVal[octdec($dictVar[2])] ?? '';
                } else {
                    $dictResultStr .= $dictVal[$dictVar[2]] ?? '';
                }
            }

            $vars[$varName] = $dictResultStr;

            return '';
            }, $str);

        $codeStr = '';
        preg_match_all('~(\$\w{1,50})~msi', $res, $varsMatch, PREG_SET_ORDER);
        foreach ($varsMatch as $var) {
            $codeStr .= $vars[$var[1]] ?? '';
        }

        if (strpos($codeStr, 'eval(base64_decode') !== false) {
            return base64_decode($matches[5]);
        }

        if (strpos($codeStr, 'eval(gzinflate(base64_decode') !== false) {
            return gzinflate(base64_decode($matches[5]));
        }

        return $str;
    }

    private function deobfuscateDecodedFileGetContentsWithFunc($str, $matches)
    {
        $res = str_replace($matches[6], '', $str);

        $resCode = implode(' ', @Helpers::unserialize(base64_decode($matches[5])));

        if (preg_match('~\$\w{1,50}\s?=\s?\'([^\']+)\';\s*\$\w{1,50}\s?=\s?\'([^\']+)\';~msi', $resCode, $configs)) {
            $uid = $configs[1];
            $cfg = $configs[2];

            $resCode = preg_replace_callback('~\$this->\w{1,50}\s?=\s?(@unserialize\(\$this->\w{1,50}\(\w{1,50}::\w{1,50}\(\$this->config\),\s?[\'"]([^\'"]+)[\'"]\)\))~msi',
                static function ($m) use ($uid, $cfg) {
                    $configCodeArray = Helpers::decodeFileGetContentsWithFunc(base64_decode($cfg), $m[2]);
                    $configCodeArray = Helpers::decodeFileGetContentsWithFunc($configCodeArray, $uid);
                    $configCodeArray = @Helpers::unserialize($configCodeArray);
                    $configCodeArray = var_export($configCodeArray, true);

                    return str_replace($m[1], $configCodeArray, $m[0]);
                }, $resCode);
        }

        $res = str_replace($matches[8], $resCode, $res);

        return $res;
    }

    private function deobfuscateCreateFuncVarsCode($str, $matches)
    {
        $vars = Helpers::collectConcatedVars(stripcslashes($matches[1]));

        $tempStr = preg_replace_callback('~(\$\w{1,50})=(.*?);~msi', function ($m) use (&$vars) {
            $var = $this->unwrapFuncs(Helpers::replaceVarsFromArray($vars, $m[2], true, true));

            $vars[$m[1]] = $var;
        }, $matches[2]);

        $func = Helpers::replaceVarsFromArray($vars, $matches[7], true);
        $code = $this->unwrapFuncs("$func'$matches[6]))");

        if (preg_match('~(\$\w{1,50})=array\(((?:\d{1,9},?)+)\);\s*(\$\w{1,50})="";for\((\$\w{1,50})=0;\4<sizeof\(\1\);\4\+=2\){if\(\4%4\){\3\.=substr\(\$\w{1,50},\1\[\4\],\1\[\4\+1\]\);}else{\3\.=\$\w{1,50}\(substr\(\$\w{1,50},\1\[\4\].\1\[\4\+1\]\)\);}};.*?return\s\$\w{1,50};~msi',
                       $code, $codeMatches)) {
            $res      = "";
            $arrayNum = [];

            preg_match_all('~(\d{1,9})~msi', $codeMatches[2], $numbers, PREG_SET_ORDER);
            foreach ($numbers as $number) {
                $arrayNum[] = $number[1];
            }

            for ($i = 0; $i < sizeof($arrayNum); $i += 2) {
                if ($i % 4) {
                    $res .= substr($matches[4], $arrayNum[$i], $arrayNum[$i + 1]);
                } else {
                    $res .= strrev(substr($matches[4], $arrayNum[$i], $arrayNum[$i + 1]));
                }
            };

            $res = $this->unwrapFuncs("$func'$res))");
            if ($res) {
                return $res;
            }
        }

        return $str;
    }

    private function deobfuscatePregConcat($str, $matches)
    {
        return Helpers::normalize($matches[2]);
    }

    private function deobfuscateUndefinedDFunc($str, $matches)
    {
        return 'eval(gzinflate(str_rot13(base64_decode(' . $matches[2] . '))));';
    }

    private function deobfuscateXoredStrings($str, $matches)
    {
        $res = preg_replace_callback('~"([^"]+)"\s*(?:\s*/\*[^\*]+\*/\s*)?\^(?:\s*/\*[^\*]+\*/\s*)?\s*"([^"]+)"~msi', function($m) {
            return '\'' . (stripcslashes($m[1]) ^ stripcslashes($m[2])) . '\'';
        }, $str);

        $res = preg_replace_callback('~\$\{\'(\w+)\'\}~msi', function($m) {
            return '$' . $m[1];
        }, $res);
        Helpers::collectVars($res, '\'', $vars, true);
        $res = Helpers::replaceVarsFromArray($vars, $res, false, false);

        if (preg_match('~(\$\w+)\s*=\s*(\(?\s*gzinflate\s*\(\s*base64_decode\s*)\(\s*\'([^\']+)\'\s*\)\s*\)\s*\)?\s*;\s*\$\w+\s*=\s*@?create_function\(\'([^\']*)\',\s*(?:\1|\'@?eval\(\4\)[^\']+\')\)\s*;\s*@?\$\w+(?:\(\)|\(\1\));~msi', $res, $m)) {
            $res = $this->deobfuscateCreateFuncGzInflateB64($res, $m);
        }
        $res = preg_replace_callback('~/\*[^\*]+\*/~msi', function($m) {
            return '';
        }, $res);
        $res = str_replace('\\\'', '@@slaapos@@', $res);
        preg_match('~\$\{"[^"]+"\^"[^"]+"\}\s*=\s*\'([^\']+)\'\s*;~msi', $res, $m);
        $res = str_replace('@@slaapos@@', '\\\'', $m[1]);
        $res = stripcslashes($res);

        $res = preg_replace_callback('~\(?"([^"]+)"\)?\s*\^\s*\(?"([^"]+)"\)?~msi', function($m) {
            return '\'' . (stripcslashes($m[1]) ^ stripcslashes($m[2])) . '\'';
        }, $res);

        $res = preg_replace_callback('~\$\{\'(\w+)\'\}~msi', function($m) {
            return '$' . $m[1];
        }, $res);

        $replace = function($m) use (&$vars) {
            if (!isset($vars[$m[1]])) {
                return $m[0];
            }
            if (isset($m[2]) && $m[2] !== '') {
                return $vars[$m[1]] . '(';
            }
            return @($vars[$m[1]][0] !== '\'') ? '\'' . $vars[$m[1]] . '\'' : $vars[$m[1]];
        };

        Helpers::collectVars($res, '\'', $vars, true);
        $res = preg_replace_callback('~(\$\w+)\s*(\()?~msi', $replace, $res);
        Helpers::collectFuncVars($res, $vars, true, true);
        $res = preg_replace_callback('~(\$\w+)\s*(\()?~msi', $replace, $res);

        $res = preg_replace('~;+~msi', ';', $res);
        return $res;
    }

    private function deobfuscateCommentWithAlgo($str, $matches)
    {
        return str_replace($matches[1], addcslashes(base64_decode(gzinflate(str_rot13(convert_uudecode(gzinflate(base64_decode($matches[1])))))), '\''), $str);
    }

    private function deobfuscateFileEncryptor($str, $matches)
    {
        return Helpers::replaceBase64Decode($str);
    }

    private function deobfuscateDefinedB64($str, $matches)
    {
        return str_replace([$matches[1], $matches[6], $matches[8]], ['', '', gzinflate(base64_decode($matches[9]))], $str);
    }

    private function deobfuscateB64Xored($str, $matches)
    {
        return base64_decode(Helpers::xorWithKey(base64_decode($matches[4]), $matches[6]));
    }

    private function deobfuscateB64AssignedVarContent($str, $matches)
    {
        return str_replace($matches[4], "'" . (base64_decode($matches[2])) . "'", $matches[3]);
    }

    private function deobfuscateDictVarsWithMath($str, $matches)
    {
        $dictVal = $matches[2];

        $dictStrs = Helpers::calculateMathStr($matches[3]);
        $vars = Helpers::getVarsFromDictionary($dictVal, $dictStrs);
        $vars = Helpers::collectVars($str, '"', $vars);
        $vars = Helpers::collectConcatedVars($str, '"', $vars);

        return $vars[$matches[4]] ?? $str;
    }

    private function deobfuscateClassDecryptedWithKey($str, $matches)
    {
        $key = 'WebKit#58738Educ';

        $data = hex2bin($matches[2]);
        $res = Helpers::decodeClassDecryptedWithKey($data, 32, $key);

        if (strpos($res, 'error_reporting(') !== false) {
            return $res;
        }

        return $str;
    }

    private function deobfuscatePHPkoru($str, $matches)
    {
        $vars[$matches[2]] = str_rot13(base64_decode($matches[3]));
        $vars[$matches[4]] = str_rot13(base64_decode($matches[5]));
        $code = $matches[6];
        while (strpos($code, 'eval') === 0) {
            $code = str_replace(array_keys($vars), array_values($vars), $code);
            $code = $this->unwrapFuncs($code);
        }
        $decoded = '';
        if (preg_match('~openssl_decrypt\(base64_decode\(trim\(\$\w+\[1\]\)\),\s*"([^"]+)",\s*base64_decode\(str_rot13\("([^"]+)"\)\),\s*(\d+),\s*base64_decode\(str_rot13\("([^"]+)"\)\)\)\);~msi', $code, $openssl_data)) {
            $data = base64_decode(trim($matches[8]));
            $algo = $openssl_data[1];
            $passphrase = base64_decode(str_rot13($openssl_data[2]));
            $iv = base64_decode(str_rot13($openssl_data[4]));
            $flags = $openssl_data[3];
            $decoded = openssl_decrypt($data, $algo, $passphrase, $flags, $iv);
            $decoded = str_rot13(base64_decode(str_rot13($decoded)));
        }
        return ' ?> ' .PHP_EOL . $decoded;
    }

    private function deobfuscateJoomlaInject($str, $matches)
    {
        $vars = Helpers::collectVars($matches[0]);
        preg_match('~function\s*\w+\((\$\w+)\)\s*\{\s*(\$\w+)\s*=\s*array\(((?:\'[^\']+\',?)+)\1\);\s*for\((\$\w+)=0;\s*\4<\d+;\s*\4\+\+\)\s*\{\s*for\((\$\w+)=0;\s*\5<strlen\(\2\[\4\]\);\s*\5\+\+\)\s*\2\[\4\]\[\5\]\s*=\s*chr\(ord\(\2\[\4\]\[\5\]\)\s*([\-\+])\s*(\d+)~msi', $this->full_source, $decode_data);
        preg_match_all('~\$this->\w+\(((?|"[^"]+"|\$\w+))\)~msi', $matches[0], $to_decode);
        foreach ($to_decode[1] as &$item) {
            if ($item[0] === '"' && $item[-1] === '"') {
                $item = substr($item, 1, -1);
            }
            $item = str_replace(array_keys($vars), array_values($vars), $item);
            $item = "'" . Helpers::joomlaInjectDecoder($decode_data[3] . $item, $decode_data[6], $decode_data[7]) . "'";
        }
        $res = str_replace($to_decode[0], $to_decode[1], $str);
        return $res;
    }

    private function deobfuscateFwriteB64Content($str, $matches)
    {
        $res = $str;

        $res = str_replace($matches[1], '', $res);
        $replace = base64_decode($matches[3]);

        $res = str_replace($matches[4], "'" . $replace . "'", $res);

        return $res;
    }

    private function deobfuscateB64concatedVars($str, $matches)
    {
        $res = $matches[6];

        $code = "'" . base64_decode($matches[2]) . base64_decode($matches[5]) . "'";

        $res = str_replace($matches[7], $code, $res);

        return $res;
    }

    private function deobfuscateSlashedCreateFunc($str, $matches)
    {
        $func = stripcslashes($matches[2]);

        if (strpos($func, 'create_function') !== false) {
            $code = stripcslashes($matches[5]);
            $code = str_replace($matches[4], $matches[6], $code);

            return $code;
        }

        return $str;
    }

    private function deobfuscateVarDictCreateFunc($str, $matches)
    {
        $res = Helpers::replaceVarsFromDictionary($matches[1], $matches[2], $matches[3]);

        $vars = [];
        $vars = Helpers::collectVars($res, '"', $vars, true);

        $res = Helpers::replaceVarsFromArray($vars, $res);

        return $res;
    }

    private function deobfuscatecallFuncGzB64($str, $matches)
    {
        return gzinflate(base64_decode($matches[1]));
    }

    private function deobfuscateAssertDictVarEval($str, $matches)
    {
        $dict = $matches[2];
        $arr  = [];
        for ($i = 0; $i < 6; $i++) {
            $arr[] = (int)$matches[4 + $i];
        }

        $assertStr = "";
        for ($i = 0; $i < 6; $i++) {
            $temp      = $arr[$i];
            $assertStr .= $dict[$temp];
        }

        $funcs = Helpers::concatStringsInContent(stripcslashes($matches[13]));
        if ($assertStr === 'assert' && strpos($funcs, 'eval(base64_decode(gzinflate(base64_decode(') !== false) {
            return base64_decode(gzinflate(base64_decode($matches[11])));
        }

        $vars               = [];
        $vars[$matches[10]] = $matches[11];
        $vars[$matches[12]] = $assertStr;

        return Helpers::replaceVarsFromArray($vars, $funcs);
    }

    private function deobfuscateB64FuncEvalGz($str, $matches)
    {
        return base64_decode(gzinflate(base64_decode($matches[4])));
    }

    private function deobfuscateB64Gz($str, $matches)
    {
        $result = gzinflate(base64_decode($matches[2]));
        $break = isset($matches[5]) ? '?>' : '';

        return $break . $result;
    }

    private function deobfuscateSubstrEmpty($str, $matches)
    {
        $str = preg_replace_callback('~substr\("([^"]++)",(\d++),(-?\d++)\)~msi', function ($m) {
            return '"' . substr(stripcslashes($m[1]), (int) $m[2], (int) $m[3]) . '"';
        }, $str);
        $str = str_replace(['"."', '"".'], '', $str);
        return $str;
    }

    private function deobfuscateDeltaOrd($str, $matches)
    {
        $matches[4] = str_replace(' ', '', $matches[4]);
        if (isset($matches[3]) && $matches[3] !== '') {
            $funcs = array_reverse(array_filter(explode('(', $matches[6])));
            $str = $matches[7];
            foreach ($funcs as $func) {
                $str = Helpers::executeWrapper($func, [$str]);
            }
        } else {
            $str = gzinflate(base64_decode(stripcslashes($matches[7])));
        }

        for($i = 0, $iMax = strlen($str); $i < $iMax; $i++) {
            $str[$i] = chr(ord($str[$i]) + (int) $matches[4]);
        }
        return $str;
    }

    private function deobfuscateOutputBuffer($str, $matches)
    {
        $search = explode(',', str_replace(['\',\'', '\',"', '",\'', '","'], ',', substr($matches[5], 1, -1)));
        $replace = explode(',', str_replace(['\',\'', '\',"', '",\'', '","'], ',', substr($matches[6], 1, -1)));
        $replace = array_map('stripcslashes', $replace);
        $buffer = str_replace($search, $replace, $matches[1] . $matches[9]);
        for ($i = 1, $j = ord($buffer[0]), $iMax = strlen($buffer); $i < $iMax; $i++) {
            $buffer[$i] = chr(ord($buffer[$i]) - $j - $i);
        }
        $buffer[0] = ' ';
        return $buffer;
    }

    private function deobfuscateDoorwayInstaller($str, $matches)
    {
        $vars = [];
        Helpers::collectVars($str, '"', $vars, true);
        $str = preg_replace_callback('~(\$\w+)\((?:"([^"]+)"|(\$\w+))\)~msi', function($m) use ($matches, $vars) {
            if ($m[1] !== $matches[1]) {
                return $m[0];
            }
            if (isset($m[2]) && $m[2] !== '') {
                return '\'' . base64_decode($m[2]) . '\'';
            }
            if (isset($m[3]) && isset($vars[$m[3]])) {
                return '\'' . base64_decode($vars[$m[3]]) . '\'';
            }
        }, $str);
        return $str;
    }

    private function deobfuscateStrReplaceAssert($str, $matches)
    {
        return base64_decode(gzinflate(base64_decode($matches[2])));
    }

    private function deobfuscateAnaLTEAMShell($str, $matches)
    {
        preg_match_all('~\$\{\'GLOBALS\'\}\[\'([^\']+)\'\]=[\'"]([^\'"]+)[\'"];~msi', $str, $m);
        $vars = array_combine($m[1], $m[2]);
        $str = str_replace($m[0], '', $str);
        $str = preg_replace_callback('~\$\{\$\{\'GLOBALS\'\}\[\'([^\']+)\'\]\}~msi', function($m) use ($vars) {
            if (!isset($vars[$m[1]])) {
                return $m[0];
            }
            return '$' . $vars[$m[1]];
        }, $str);
        $str = Helpers::replaceBase64Decode($str);
        $str = preg_replace_callback('~((\$\w+)=\'([^\']+)\';)\$\w+=\$_SERVER\[\'DOCUMENT_ROOT\'\]\.\'/\'\.\'[^\']+\';if\(file_exists\(\$\w+\)\)@?unlink\(\$\w+\);(\$\w+)=(base64_decode\(\2\));~msi', function ($m) {
            $res = str_replace($m[1], '', $m[0]);
            $res = str_replace($m[5], '\'' . base64_decode($m[3]) . '\'', $res);
            return $res;
        }, $str);
        $str = stripcslashes(stripcslashes($str));
        return $str;
    }

    private function deobfuscateZeuraB64Gzinflate($str, $matches)
    {
        return gzinflate(base64_decode($matches[10]));
    }

    private function deobfuscateD5($str, $matches)
    {
        $content = explode(hex2bin($matches[4]), $str)[1];
        $tmp = [];
        for ($i = 0; $i < strlen($content); $i++) {
            $tmp[]=ord($content[$i]) xor $i;
        }
        $content = hex2bin(base64_decode(implode(array_map(hex2bin($matches[8]), $tmp))));
        return $content;
    }

    private function deobfuscateStrReplaceFunc($str, $matches)
    {
        $vars = Helpers::collectFuncVars($matches[3], $vars, false, true);
        $cmd = Helpers::replaceVarsFromArray($vars, $matches[5]);
        if (strpos($cmd, 'create_function') === 0) {
            $cmd = 'eval(' . str_replace('create_function(\'\',', '', $cmd);
        }
        $res = str_replace($matches[6], '\'' . $matches[7] . '\'', $cmd);
        return $res;
    }

    private function deobfuscateArrayMapB64($str, $matches)
    {
        $array = explode('\',\'', substr($matches[2], 1, -1));
        return ' ?>' . base64_decode(str_rot13(implode('', $array))) . '<?php ';
    }

    private function deobfuscatePregReplaceStrReplace($str, $matches)
    {
        return str_replace($matches[1], $matches[2], stripcslashes($matches[3]));
    }

    private function deobfuscateEchoB64($str, $matches)
    {
        return str_replace([$matches[2], $matches[5]], ['\'' . base64_decode($matches[3]) . '\'', '\'' . base64_decode($matches[6]) . '\''], $str);
    }

    private function deobfuscateCreateFuncXored($str, $matches)
    {
        $res = preg_replace_callback('~"([^"]+)"\^"([^"]+)"~msi', function($m) {
            return '\'' . (stripcslashes($m[1]) ^ stripcslashes($m[2])) . '\'';
        }, $str);
        $vars = Helpers::collectVars($res, '\'', $vars, true);
        $res = gzinflate(base64_decode($matches[2]));
        $res = preg_replace('~/\*[^\*]+\*/~msi', '', $res);
        $code = $res;
        if (preg_match('~\$\{"[^"]+"\^"[^"]+"\}\s*=\s*\'((?:\\\\.|[^\'])*+)\';~msi', $code, $matches)) {
            $code = stripcslashes($matches[1]);
            $code = preg_replace_callback('~\(?"([^"]+)"\)?\^\(?"([^"]+)"\)?~msi', function($m) {
                return '\'' . (stripcslashes($m[1]) ^ stripcslashes($m[2])) . '\'';
            }, $code);
            $code = MathCalc::calcRawString($code);
            $vars = [];
            $code = preg_replace_callback('~\$(?:\{\')?(\w+)(?:\'\})?\s*=\s*\'([^\']*)\';+~msi', function($m) use (&$vars) {
                $vars['$' . $m[1] . '('] = $m[2] . '(';
                $vars['$' . $m[1]] = '\'' . $m[2] . '\'';
                return '';
            }, $code);
            $vars['&& !$_0 '] = '&&';
            $vars['if($_0 '] = 'if(';
            krsort($vars);
            $code = str_replace(array_keys($vars), array_values($vars), $code);
        }

        if (preg_match('~(\$\w+)=base64_decode\(\'([^\']+)\'\);;~msi', $code, $m)) {
            $code = str_replace($m[0], '', $code);
            $code = str_replace('eval(' . $m[1] . ');', base64_decode($m[2]), $code);
        }
        $code = preg_replace_callback('~\(?"([^"]+)"\)?\^\(?"([^"]+)"\)?~msi', function($m) {
            return '\'' . (stripcslashes($m[1]) ^ stripcslashes($m[2])) . '\'';
        }, $code);
        $vars = [];
        $code = preg_replace_callback('~(?|\$\{\'(\w+)\'\}\s*=\s*\'(\w+)\'|\$(\w+)\s*=\s*\'(\w+)\');+\s*~msi', function($m) use (&$vars) {
            $vars['$' . $m[1] . '('] = $m[2] . '(';
            $vars['${\'' . $m[1] . '\'}' . '('] = $m[2] . '(';
            $vars['$' . $m[1]] = '\'' . $m[2] . '\'';
            $vars['${\'' . $m[1] . '\'}'] = '\'' . $m[2] . '\'';
            return '';
        }, $code);
        $code = Helpers::replaceVarsFromArray($vars, $code);
        return $code;
    }

    private function deobfuscateCodeLockDecoder($str, $matches)
    {
        $codelock_stub = base64_decode($matches[1]);
        if (isset($matches[2]) && $matches[2] !== '') {
            $codelock_stub = gzinflate($codelock_stub);
            $hangs = 20;
            while (strpos($codelock_stub, 'eval') === 0 && $hangs--) {
                $codelock_stub = $this->UnwrapFuncs($codelock_stub);
            }
        }

        preg_match('~\$codelock_active_key="([^"]*)";~msi', $codelock_stub, $m);
        $codelock_active_key = $m[1];
        preg_match('~\$codelock_usezlib="([^"]*)";~msi', $codelock_stub, $m);
        $codelock_usezlib = $m[1];
        $codelock_key_data = $matches[3];
        if ($codelock_usezlib === "^") {
            $codelock_key_data = base64_decode($codelock_key_data);
            $codelock_key_data = gzinflate($codelock_key_data);
        }
        if (substr($codelock_active_key, 0, 15) !== "codelock_active") {
            $codelock_key_data = Helpers::codelock_dec_int($codelock_key_data, $codelock_active_key);
        } else {
            preg_match('~\$codelock_unlock="([^"]*)";~msi', $codelock_stub, $m);
            $codelock_active_key = $m[1];
            $codelock_key_data = Helpers::codelock_run($codelock_key_data, $codelock_active_key);
        }

        return $codelock_key_data;
    }

    private function deobfuscateEvalGzStrRotB64($str, $matches)
    {
        return gzinflate(str_rot13(base64_decode($matches[2])));
    }

    private function deobfuscateEvalDictArrayConcat($str, $matches)
    {
        $dictVal = '';
        preg_match_all('~[\'"]([^\'"])[\'"]~msi', $matches[2], $m, PREG_SET_ORDER);
        foreach ($m as $char) {
            $dictVal .= $char[1];
        }

        $replacedStr = Helpers::replaceVarsFromDictionary($matches[1], $dictVal, $str);
        $vars = Helpers::collectVars($replacedStr);

        $funcs = Helpers::replaceVarsFromArray($vars, $matches[4]);
        $funcs = Helpers::concatStringsInContent($funcs);
        $funcs = strtolower($funcs);

        if (strpos($funcs, 'eval(str_rot13(gzinflate(str_rot13(gzinflate(base64_decode(') !== false) {
            return str_rot13(gzinflate(str_rot13(gzinflate(base64_decode($matches[6])))));
        }

        return $str;
    }

    private function deobfuscatePregReplaceXored($str, $matches)
    {
        $res = preg_replace_callback('~"([^"]+)"\^"([^"]+)"~msi', function($m) {
            return '\'' . (stripcslashes($m[1]) ^ stripcslashes($m[2])) . '\'';
        }, $str);
        $vars = [];
        $vars = Helpers::collectVars($res, '\"', $vars, true);
        $res = Helpers::replaceVarsFromArray($vars, $res, false, true);
        $res = str_replace('\'.\'', '', $res);
        Helpers::collectVars($res, '\'', $vars, true);
        $res = str_replace(['preg_replace("/' . $matches[2] . '/e",\'\'', '\'\',"' . $matches[2] . '");'], '', $res);
        $res = Helpers::replaceVarsFromArray($vars, $res, false, true);
        return $res;
    }

    private function deobfuscateR4C($str, $matches)
    {
        $vars = [];
        $res = $str;
        $hangs = 20;
        do {
            Helpers::collectConcatedVars($res, '"', $vars, true);
            $res = str_replace('"".$', '$', $res);
            Helpers::collectConcatedVars($res, '\'', $vars, true);
            $res = trim($res);
            $res = Helpers::replaceVarsFromArray($vars, $res, false, true);
            $res = $this->unwrapFuncs($res);
        } while (preg_match('~eval\((?:\w+\()*(?:\$\w+\.?)+\)~', $res) && $hangs--);
        return $res;
    }

    private function deobfuscateBase64EncryptedGz($str, $matches)
    {
        $text       = $matches[1];
        $hash       = $matches[3];
        $key        = 'asdf';
        $key_len    = strlen($key);

        $text       = base64_decode(str_replace("\n", '', $text));
        $text_len   = strlen($text);

        $w = [];
        for ($i = 0; $i < $key_len; ++$i)
        {
            $w[] = $text_len - $key_len - ord($key[$i]);
        }

        for ($i = 0; $i < $text_len; ++$i) {
            $j          = abs($w[$i % $key_len] - $i);
            $x          = $text[$j];
            $text[$j]   = $text[$i];
            $text[$i]   = $x;
        }

        if ($key_len < 10) {
            $key_len *= $key_len & 1 ? 3 : 2;
        }

        if (($text = @gzinflate($text)) && (md5(substr($text, 0, $key_len)) === $hash)) {
            return substr($text, $key_len);
        }

        return '';
    }

    private function deobfuscateBloos3rpent($str, $matches)
    {
        $matches[3] = str_replace('\\\'', '\'', $matches[3]);
        $matches[4] = str_replace('\\\'', '\'', $matches[4]);
        $decoder = strtr($matches[5], $matches[3], $matches[4]);
        preg_match('~\$\w+\s*=\s*\[((?:\'[\da-fx]+\',?)+)\];~msi', $decoder, $funcs);
        $funcs = explode('\',\'', substr($funcs[1], 1, -1));
        $funcs = array_map('hex2bin', $funcs);
        preg_match('~function\s*(\w+)\((\$\w+)\)\s*\{\s*global\s*(\$\w+);\s*return\s*\3\[\d+\]\(\'([^\']+)\',function\(\$\w+\)\s*\{\s*if[^}]+\}return\s*\$\w+;\s*\}\s*else\{\s*return\s*chr[^}]+\}\},\$\w+\);\s*\}\s*function\s*(\w+)\(\$\w+\)\s*\{\s*global\s*\3;\s*eval\(\3\[\d+\]\(\$\w+\)\);\s*\}~msi', $decoder, $tmp);
        $strtr_func = $matches[1];
        $decode_code_func = $tmp[1];
        $eval_func = $tmp[5];
        $arr_funcs = $tmp[3];
        $code = Helpers::replaceVarsFromDictionary($arr_funcs, $funcs, $matches[7], false);
        $hangs = 20;
        while (preg_match('~(\w+)\(\'([^\']+)\'\)~msi', $code) && $hangs--) {
            $code = preg_replace_callback('~(\w+)\(\'([^\']+)\'\)~msi', function ($m) use ($strtr_func, $decode_code_func, $eval_func, $matches) {
                if ($m[1] === $strtr_func) {
                    return '\'' . strtr($m[2], $matches[3], $matches[4]) . '\'';
                }
                if ($m[1] === $decode_code_func) {
                    return '\'' . stripcslashes($m[2]) . '\'';
                }
                if (Helpers::convertToSafeFunc($m[1])) {
                    return '\'' . @Helpers::executeWrapper($m[1], [$m[2]]) . '\'';
                }
                return $m[0];
            }, $code);
        }
        $code = stripcslashes(substr($code, 1, -2));
        return $code;
    }

    private function deobfuscateDoublePregReplace($str, $matches)
    {
        $matches[2] = substr($matches[2], 1, -1);
        $decoder = @gzinflate(base64_decode(preg_replace('~' . $matches[2] . '~', $matches[3], $matches[4])));
        $res = str_replace($matches[1], $decoder, $str);
        $res = str_replace([$matches[11], $matches[5], $matches[7]], '', $res);
        $res = str_replace('\')))));', '\'))));', $res);
        return $res;
    }

    private function deobfuscateZeura2($str, $matches)
    {
        return 'eval(base64_decode(gzinflate(base64_decode(\'' . $matches[6] . '\'))));';
    }

    private function deobfuscateCreateFuncEscaped($str, $matches)
    {
        return base64_decode($matches[6]);
    }

    private function deobfuscateMaskedDeltaOrd($str, $matches)
    {
        $matches[3] = '';
        $matches[7] = base64_decode($matches[2]);
        $matches[4] = '-1';
        return $this->deobfuscateDeltaOrd($str, $matches);
    }

    private function deobfuscatedecodeStrMultiForDict($str, $matches)
    {
        $strToDecode = str_replace(['-m ', ' ', PHP_EOL], '', $matches[3]);
        $strToDecode = base64_decode($strToDecode);

        $decodeArray = [];
        for ($i = 0; $i < 256; ++$i) {
            $decodeArray [$i] = $i;
        }

        $index = 0;
        for ($i = 0; $i < 256; ++$i) {
            $index                = ($index + $decodeArray [$i] + ord($matches[6] [$i % 63])) % 256;
            $tempVar              = $decodeArray [$i];
            $decodeArray [$i]     = $decodeArray [$index];
            $decodeArray [$index] = $tempVar;
        }

        $i     = 0;
        $index = 0;
        for ($j = 0; $j < (int)$matches[10]; ++$j) {
            $i                    = ($i + 1) % 256;
            $index                = ($index + $decodeArray [$i]) % 256;
            $tempVar              = $decodeArray [$i];
            $decodeArray [$i]     = $decodeArray [$index];
            $decodeArray [$index] = $tempVar;
            $strToDecode [$j]     = $strToDecode [$j] ^ chr($decodeArray [($decodeArray [$i] + $decodeArray [$index]) % 256]);
        }

        return $strToDecode;
    }

    private function deobfuscateB64ConcatedStrVars($str, $matches)
    {
        $vars        = Helpers::collectVars($str, "'");
        $code        = base64_decode($matches[2]);
        $strToDecode = Helpers::replaceVarsFromArray($vars, $matches[3]);
        $strToDecode = Helpers::concatStringsInContent($strToDecode);
        if (preg_match('~(\$\w{1,50})\s?=\s?base64_decode\(\1\);\s?return\s?@?eval\(\1\);~msi', $code)) {
            return base64_decode($strToDecode);
        }

        return $str;
    }

    private function deobfuscateChrFuncVars($str, $matches)
    {
        $result = preg_replace_callback('~' . $matches[1] . '\(array\(((?:\d+,?)+)\)\)~msi', function ($m) {
            $data = '';
            preg_match_all('~\d+~msi', $m[0], $nums, PREG_SET_ORDER);
            foreach ($nums as $num) {
                $data .= chr($num[0]);
            }
            return "'" . $data . "'";
        }, $str);

        return $result;
    }

    private function deobfuscateConcatVarsFuncs($str, $matches)
    {
        $concatedStr = Helpers::concatStringsInContent($matches[1]);
        $vars = Helpers::collectVars($concatedStr);
        $data = Helpers::concatStringsInContent($matches[2]);
        $data = Helpers::replaceVarsFromArray($vars, $data);

        $code = $this->unwrapFuncs($data);

        if (preg_match('~eval\(rawurldecode\("([^"]+)"~msi', $code, $m)) {
            return rawurldecode($m[1]);
        }

        return $code;
    }

    private function deobfuscateBlackshadow($str, $matches)
    {
        return ($matches[5] . '\'' . $matches[4] . $matches[2] . '\'' . $matches[7]);
    }

    private function deobfuscateGlobalDictVar($str, $matches)
    {
        $str = str_replace($matches[2], '', $str);
        $dict = stripcslashes($matches[4]);
        $str = preg_replace_callback('~\$\w+\[\'\w+\'\]\[(\d+)\]~msi', function ($m) use ($dict) {
            return '\'' . $dict[(int)$m[1]] . '\'';
        }, $str);
        $str = str_replace('\'.\'', '', $str);
        $vars = [];
        $str = preg_replace_callback('~(\$\w+\[\'(\w+)\'\])=(\'[^\']+\'|\$_POST|\$_GET|\$_COOKIE);(?!global)~msi', function($m) use (&$vars) {
            if ($m[3][0] === '\'') {
                $m[3] = substr($m[3], 1, -1);
            }
            $vars[$m[1]] = $m[3];
            $vars['$' . $m[2]] = $m[3];
            return '';
        }, $str);
        $str = Helpers::replaceVarsFromArray($vars, $str);
        return $str;
    }

    private function deobfuscateGarbageVars($str, $matches)
    {
        $str = preg_replace('~"([\w@/:\?>,=\}\.]*)"~msi', '\'\1\'', $str);
        $str = preg_replace_callback('~(?:\'\s*\.\s*(\w+)|(\w+)\s*\.\s*\')~msi', function ($m) {
            if (isset($m[1]) && $m[1] !== '') {
                return '\' . \'' . $m[1] . '\'';
            }
            if (isset($m[2]) && $m[2] !== '') {
                return '\'' . $m[2] . '\' . \'';
            }
        }, $str);

        $str = preg_replace('~\'\s*\.\s*\'~msi', '', $str);
        $str = preg_replace_callback('~(?|\'([^\']+)\'|(\w+))\s*([\^\|\&])\s*(\~)?(?|\'([^\']+)\'|(\w+))~msi', function ($m) {
            if (isset($m[3]) && $m[3] !== '') {
                $m[4] = ~$m[4];
            }
            switch ($m[2]) {
                case '^':
                    return '\'' . ($m[1] ^ $m[4]) . '\'';
                case '|':
                    return '\'' . ($m[1] | $m[4]) . '\'';
                case '&':
                    return '\'' . ($m[1] & $m[4]) . '\'';
            }
        }, $str);

        $vars = Helpers::collectVars($str, '\'', $vars, true);

        $str = preg_replace_callback('~(?|\(\'([^\']+)\'\)|(\$\w+))([\^\&\|])(?|\(\'([^\']+)\'\)|(\$\w+))~msi', function ($m) use ($vars) {
            if ($m[1][0] === '$' && isset($vars[$m[1]])) {
                $m[1] = $vars[$m[1]];
            }
            if ($m[3][0] === '$' && isset($vars[$m[3]])) {
                $m[3] = $vars[$m[3]];
            }
            switch ($m[2]) {
                case '^':
                    return '\'' . ($m[1] ^ $m[3]) . '\'';
                case '|':
                    return '\'' . ($m[1] | $m[3]) . '\'';
                case '&':
                    return '\'' . ($m[1] & $m[3]) . '\'';
            }
        }, $str);

        Helpers::collectVars($str, '\'', $vars, true);
        foreach ($vars as $var => $val) {
            $str = str_replace($var . '(', $val . '(', $str);
            $str = str_replace($var, '\'' . $val . '\'', $str);
        }
        $str = preg_replace('~\'\s*\.\s*\'~msi', '', $str);
        return $str;
    }

    private function deobfuscateChrMinXor($str, $matches)
    {
        $code = (isset($matches[2]) && $matches[2] !== '') ? convert_uudecode(str_replace($matches[5],'', $matches[2])) : base64_decode(strrev($matches[3]));
        $table = [];
        if (isset($matches[5]) && $matches[5] !== '') {
            for($i = 0; $i < 256; ++$i) {
                $table[$i] = $i;
            }
            $j=0;
            for($i = 0; $i < 256; ++$i) {
                $j = ($j + $table[$i] + ord($matches[6][$i % (strlen($matches[6]) - 1)])) % 256;
                $tmp = $table[$i];
                $table[$i] = $table[$j];
                $table[$j] = $tmp;
            }
            $j=0;
            $k=0;
            for($i = 0, $iMax = strlen($code) - 1; $i < $iMax; ++$i) {
                $j = ($j + 1) % 256;
                $k = ($k + $table[$j]) % 256;
                $tmp = $table[$j];
                $table[$j] = $table[$k];
                $table[$k] = $tmp;
                $code[$i] = $code[$i] ^ chr($table[($table[$j] + $table[$k]) % 256]);
            }
        } else {
            for($i = 0, $iMax = strlen($code) - 1; $i < $iMax; ++$i) {
                $code[$i] = $code[$i] ^ $matches[6][$i % (strlen($matches[6]) - 1)];
            }
        }

        return $code;
    }

    private function deobfuscateFakeChop($str, $matches)
    {
        $offset = 2;
        $tmp = base64_decode($matches[2]);
        preg_match('~if\(\$\w+\)(\$\w+)=\$\w+\(\'([^\']+)\',\s*\(\(\$\w+\!=\d+\)\?\'[^\']+\':\'([^\']+)\'\),\1\);\$\w+\+=__LINE__\*1;~msi', $tmp, $m);
        $matches[3] = str_replace($m[2], $m[3], $matches[3]);
        $tmp = base64_decode(substr($matches[3], $offset));
        preg_match('~\w+=\'([^\']+)\';~msi', $tmp, $m);
        $code = base64_decode(substr($m[1], $offset));
        $dicts = [];
        $code = preg_replace_callback('~\$GLOBALS\[([^\]]+)\]=explode\("([^"]+)",\s*"([^"]+)"\);~msi', function ($m) use (&$dicts) {
           $dicts[$m[1]] = explode($m[2], $m[3]);
           return '';
        }, $code);
        $code = preg_replace_callback('~\$GLOBALS\[([^\]]+)\]=explode\(pack\(\$GLOBALS\[([^\]]+)\]\[(\d+)\],\$GLOBALS\[([^\]]+)\]\[(\d+)\]\),pack\(\$GLOBALS\[([^\]]+)\]\[(\d+)\],\$GLOBALS\[([^\]]+)\]\[(\d+)\]\)\);~msi', function ($m) use (&$dicts) {
            $dicts[$m[1]] = explode(pack($dicts[$m[2]][$m[3]], $dicts[$m[4]][$m[5]]), pack($dicts[$m[6]][$m[7]], $dicts[$m[8]][$m[9]]));
            return '';
        }, $code);
        $code = preg_replace_callback('~\$GLOBALS\[([^\]]+)\]\[([xa-f\d]+)\](\()?~msi', function ($m) use ($dicts) {
            $offset = $m[2][1] === 'x' ? hexdec($m[2]) : ($m[2][0] === '0' ? octdec($m[2]) : $m[2]);
            return (isset($m[3]) && $m[3] !== '') ? $dicts[$m[1]][$offset] . '(' : '\'' . $dicts[$m[1]][$offset] . '\'';
        }, $code);
        $code = preg_replace_callback('~pack\(\'H\*\',\'([\da-f]+)\'\)~msi', function ($m) {
            return '\'' . pack('H*', $m[1]) . '\'';
        }, $code);
        preg_match('~\$[^=]+=array\(array\((\'[^\)]+)\)\);~msi', $code, $m);
        $m[1] = substr($m[1], 1, -1);
        $m[1] = str_replace('\',\'', '', $m[1]);
        $code = base64_decode(str_rot13($m[1]));
        return $code;
    }

    private function deobfuscateAssertUrldecode($str, $matches)
    {
        return $this->deobfuscateEval(stripcslashes($matches[2]), []);
    }

    private function deobfuscateImplodeB64Gz($str, $matches)
    {
        $b64str = str_replace('\',\'', '', $matches[2]);
        $code = gzuncompress(base64_decode($b64str));
        $code = MathCalc::calcRawString($code);
        $code = Helpers::normalize($code);
        $arr = [];
        $func = '';
        $code = preg_replace_callback('~if\(!function_exists\(\'(\w+)\'\)\)\{function\s*\1\((\$\w+)\)\s*\{(\$\w+)=array\(([^)]+)\);return\s*base64_decode\(\3\[\2\]\);\}~msi', function ($m) use (&$arr, &$func) {
            $arr = explode('\',\'', substr($m[4], 1, -1));
            $func = $m[1];
            return '';
        }, $code);
        foreach($arr as $i => $data) {
            $code = str_replace($func . '(' . $i . ')', '\'' . base64_decode($data) . '\'', $code);
        }
        return $code;
    }

    private function deobfuscateEvalStrReplace($str, $matches)
    {
        return base64_decode(str_replace($matches[8], '', $matches[2]));
    }

    private function deobfuscateX12($str, $matches)
    {
        $vars = Helpers::collectVars($matches[1]);
        $matches[2] = Helpers::replaceVarsFromArray($vars, $matches[2], false, true);
        $matches[2] = Helpers::normalize($matches[2]);
        $funcs = Helpers::collectVars($matches[2], '\'');
        $matches[3] = Helpers::replaceVarsFromArray($funcs, $matches[3]);
        return $this->deobfuscateEval($matches[3], []);
    }

    private function deobfuscateWpNightmare($str, $matches)
    {
        return gzinflate(base64_decode($matches[8]));
    }

    private function deobfuscateXorGzUncompress($str, $matches)
    {
        $vars = Helpers::collectVars($matches[1], '\'');
        $code = array_pop($vars);
        $code = base64_decode($code);
        $code = Helpers::xorWithKey($code, $matches[10]);
        return gzuncompress($code);
    }

    private function deobfuscateEvalSubstr($str, $matches)
    {
        return base64_decode(substr(strrev($matches[2]), (int)$matches[3],(int)$matches[4]));
    }

    private function deobfuscateEvalStrrev($str, $matches)
    {
        $code = base64_decode(strrev($matches[2]));
        return $code;
    }

    private function deobfuscateStrRot13ConvertUUDecode($str, $matches)
    {
        $decode = str_rot13($matches[2]);
        $decode = stripcslashes($decode);
        if (preg_match('~eval\(convert_uudecode\(\s*\'~msi', $decode)) {
            $decode = preg_replace(['~eval\(convert_uudecode\(\s*\'~msi', '~\'\)\);~msi'], '', $decode);
            $decode = stripcslashes($decode);
            $decode = convert_uudecode($decode);
        }
        if (preg_match('~eval\(strrev\(\s*\'~msi', $decode)) {
            $decode = preg_replace(['~eval\(strrev\(\s*\'~msi', '~\'\)\);~msi'], '', $decode);
            $decode = stripcslashes($decode);
            $decode = strrev($decode);
        }

        $decode = $this->deobfuscateEval($decode, []);
        if (preg_match('~eval\(strrev\(\s*\';\)\)\s*\\\\\'eval\(convert_uudecode\(\s*\\\\(["\'])((?:[^;]+;)+[^\']+)\\\\\'\\\\\\\\\)\);\\\\\1\s*\(verrts\(lave\'\s*\)\);~msi', $decode, $m)) {
            $decode = preg_replace_callback('~(?:(\\\\\\\\\\\\\\\\\\\\\')|(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\)|(\\\\\\\\))~m', function($g) {
                if (isset($g[1]) && $g[1] !== '') {
                    return '\'';
                }
                if (isset($g[2]) && $g[2] !== '') {
                    return '\\';
                }
                if (isset($g[3]) && $g[3] !== '') {
                    return '';
                }
            }, $m[2]);
            $decode = convert_uudecode($decode);
        }
        if (preg_match('~eval\(str_rot13\(\s*\'riny\(pbaireg_hhqrpbqr\(\s*\\\\(["\'])((?:[^;]+;)+[^\']+)\\\\\'\)\);\1\s*\)\);~msi', $decode, $m)) {
            $decode = preg_replace_callback('~(?:(\\\\\\\\\\\\\')|(\\\\\\\\\\\\\\\\))~msi', function($g) {
                if (isset($g[1]) && $g[1] !== '') {
                    return '\'';
                }
                if (isset($g[2]) && $g[2] !== '') {
                    return '\\';
                }
            }, $m[2]);
            $decode = convert_uudecode(str_rot13($decode));
        }
        if (preg_match('~eval\(strrev\(\s*\';\)\)\s*\\\\\'eval~msi', $decode)) {
            $decode = preg_replace(['~eval\(strrev\(\s*\';\)\)\s*\\\\\'~msi', '~\\\\\'\s*\(verrts\(lave\'\s*\)\);~msi'], '', $decode);
            $decode = preg_replace_callback('~(?:(\\\\\')|(\\\\\\\\))~msi', function($g) {
                if (isset($g[1]) && $g[1] !== '') {
                    return '\'';
                }
                if (isset($g[2]) && $g[2] !== '') {
                    return '';
                }
            }, $decode);
        }
        return $decode;
    }

    private function deobfuscateCreateFuncHex($str, $matches)
    {
        $decode = stripcslashes($matches[5]);
        $decode = str_replace($matches[4], '\'' . $matches[6] . '\'', $decode);
        return $decode;
    }

    private function deobfuscatePregB64Strrev($str, $matches)
    {
        return $this->deobfuscateEvalStrrev($str, $matches);
    }

    private function deobfuscatePregB64FuncImgStr($str, $matches)
    {
        $decodedStr = base64_decode($matches[13]);

        if (preg_match('~<img src="data:image/png;(.*)">~msi', $decodedStr, $foundB64) !== false) {
            $decodedStr = str_replace(
                [base64_decode($matches[4]), base64_decode($matches[5])],
                [base64_decode($matches[6]), base64_decode($matches[7])],
                $foundB64[1]
            );
            $decodedStr = gzinflate(base64_decode($decodedStr));

            return str_replace($matches[11], $decodedStr, $str);
        }

        return $str;
    }

    private function deobfuscateUtfCharVarsFuncEval($str, $matches)
    {
        $vars = [];
        $res = $str;
        $globalVarName = $matches[1];
        $funcName = $matches[2];

        $res = Helpers::utfCharVarsFuncEvalCodeDecoder($res, $vars, $globalVarName, $funcName);

        for ($i = 0; $i < 10; $i++) {
            $found = false;

            if (preg_match('~eval\(?\s*@?\s*(?:base64_decode\s*\(|pack\s*\(\'H\*\',|convert_uudecode\s*\(|htmlspecialchars_decode\s*\(|gzdecode\s*\(|stripslashes\s*\(|gzinflate\s*\(|strrev\s*\(|str_rot13\s*\(|gzuncompress\s*\(|urldecode\s*\(|rawurldecode\s*\(|unserialize\s*\(|eval\s*\(|hex2bin\()+.*?[^\'");]+(\s*[\'"\)]+)+\s*;~msi', $res, $matches)) {
                $unWrapped = $this->unwrapFuncs($matches[0]);
                $res = str_replace($matches[0], $unWrapped, $res);
                $found = true;
            } else if (preg_match('~eval\('. $funcName . '\(base64_decode\(\'([^\']+)\'\)+;~msi', $res, $funcMatch)) {
                $code = base64_decode($funcMatch[1]);
                $code = Helpers::utfCharVarsFuncEvalVarDecoder($code);
                $res = str_replace($funcMatch[0], $code, $res);
                $found = true;
            }
            if ($found) {
                $res = Helpers::utfCharVarsFuncEvalCodeDecoder($res, $vars, $globalVarName, $funcName);
            } else {
                break;
            }
        }
        $res = Helpers::replaceBase64Decode($res);

        return $res;
    }

    private function deobfuscateManyVarFuncCreateFuncWrap($str, $matches)
    {
        $createFuncCode = hex2bin(pack('H*', $matches[8]));
        if (strpos($createFuncCode, 'eval($') !== false) {
            return gzinflate(hex2bin(pack('H*', $matches[9])));
        }

        return $str;
    }

    private function deobfuscateTwoCalcClasses($str, $matches)
    {
        $func1_name     = $matches[1] . '::' . $matches[2];
        $func1_data     = Helpers::prepareArray($matches[3]);
        $array_name     = Helpers::normalize($matches[4]);
        $array          = Helpers::prepareArray($matches[5]);
        $global_list    = Helpers::replaceBase64Decode(Helpers::normalize($matches[6]));
        $func2_name     = $matches[7] . '::' . $matches[8];
        $func2_data     = Helpers::prepareArray(Helpers::normalize($matches[9]));
        $content        = Helpers::normalize($matches[10]);

        $list_of_globals = [];
        foreach (explode(";", $global_list) as $item) {
            if (empty($item)) {
                continue;
            }
            list($key, $value) = explode('=', $item, 2);
            $list_of_globals[$key] = trim($value, '\'');
        }

        $content = str_replace(array_keys($list_of_globals), array_values($list_of_globals), $content);

        $content = preg_replace_callback('~' . preg_quote($func1_name) . '\(([\d]*)\)~mis', function($m) use ($func1_data) {
            $key = octdec($m[1]);
            $result = '';
            if (array_key_exists($key, $func1_data)) {
                $result = $func1_data[$key];
            }
            return $result;
        }, $content);


        $content = preg_replace_callback('~' . preg_quote($func2_name) . '\(["\']([^\'"]+)["\'],\s*["\']([^\'"]+)["\']\)~mis', function($m) use ($func2_data) {
            $param1 = $m[1];
            $param2 = $m[2];

            $slen = strlen($param2);
            $decoded = base64_decode($func2_data[$param1]);
            for ($i = 0, $cslen = strlen($decoded); $i !== $cslen; ++$i) {
                $decoded[$i] = chr(ord($decoded[$i]) ^ ord($param2[$i % $slen]));
            }
            return "'".$decoded."'";
        }, $content);


        $content = preg_replace_callback('~\$GLOBALS\["' . preg_quote($array_name) . '"\]\[([0-9\-]+)\]~i', function ($m) use ($array) {
            $key = octdec($m[1]);
            return $array[$key];
        }, $content);

        return MathCalc::calcRawString($content);
    }

    private function deobfuscateCreateFuncArray($str, $matches)
    {
        $dict = substr(str_replace(['","', "','", '\',"', '",\''], '', $matches[2]),1, -1);
        $func = substr(Helpers::replaceVarsFromDictionary($matches[1], $dict, $matches[5]), 1, -1);
        $codeVar = str_replace(['"."', '\'.\'', '\'."', '".\''], '', $matches[4]);
        $res = str_replace($codeVar, '\'' . $matches[6] . '\'', $func);
        return $res;
    }

    private function deobfuscateCreateFuncReplaceB64($str, $matches)
    {
        $func1 = str_ireplace($matches[4], $matches[5], $matches[6]);
        $func2 = strtr($matches[8], $matches[9], $matches[10]);
        if ($func1 === 'create_function') {
            $func1 = 'eval';
        }
        $code = $func1 . '(' . $func2 . '(\'' . $matches[2] . '\'' . '));';
        return $code;
    }

    private function deobfuscateEvalTrim($str, $matches)
    {
        $vars = Helpers::collectFuncVars($matches[1], $vars, false);
        $func = strtolower(substr(str_replace('\'.\'', '', Helpers::replaceVarsFromArray($vars, $matches[4], false, true)), 1, -1));
        return 'eval(' . $func . '(\'' . $matches[6] . '\'));';
    }

    private function deobfuscateUnserializeB64GzJoinArr($str, $matches)
    {
        $arr = [];
        preg_match_all('~\'([^\']*)\'~msi', $matches[5], $strMatches, PREG_SET_ORDER);
        foreach ($strMatches as $strMatch) {
            $arr[] = $strMatch[1];
        }
        $string = join($matches[4], $arr);
        $res = gzinflate(base64_decode($string));
        Helpers::unserialize($res);

        return $res;
    }

    private function deobfuscateEvalStrrevCode($str, $matches)
    {
        return strrev($matches[1]);
    }

    private function deobfuscateEvalConvertUudecodeWithSlashedQuote($str, $matches)
    {
        return convert_uudecode(stripcslashes($matches[1]));
    }

    private function deobfuscateDictVarsContent($str, $matches)
    {
        $res = Helpers::replaceVarsFromDictionary($matches[1], $matches[2], $matches[3]);
        $vars = Helpers::collectVars($res, "'", $vars, false);

        $res = str_replace($matches[3], $res, $matches[0]);
        $res = stripcslashes($res);
        $res = Helpers::replaceVarsFromArray($vars, $res, true);

        return $res;
    }

    private function deobfuscateGlobalsCreateFuncEvalB64($str, $matches)
    {
        return str_replace(
            $matches[4],
            '?> '. base64_decode($matches[8]) . '<?php ',
            $str
        );
    }

    private function deobfuscateDictForeachVars($str, $matches)
    {
        $dictStr = $matches[2];
        $vars = [];
        $res = $str;

        preg_match_all('~foreach\s?\(\[([^]]+)\]\s?as\s?\$\w{1,50}\)\s?{\s?(\$\w{1,50})\s?\.=\s?\$\w{1,50}\[\$\w{1,50}\];\s?}~msi', $str, $foreachMatches, PREG_SET_ORDER);

        foreach ($foreachMatches as $foreachMatch) {
            preg_match_all('~\d+~msi', $foreachMatch[1], $numMatches, PREG_SET_ORDER);
            $val = '';
            foreach ($numMatches as $numMatch) {
                $val .= $dictStr[$numMatch[0]] ?? '';
            }
            $vars[$foreachMatch[2]] = $val;
            $res = str_replace($foreachMatch[0], '', $res);
        }

        $res = Helpers::replaceVarsFromArray($vars, $res, true);
        $res = Helpers::concatStringsInContent($res);

        return $res;
    }

    private function deobfuscateEchoEvalGzB64Var($str, $matches)
    {
        return stripcslashes(gzinflate(base64_decode(stripcslashes($matches[4]))));
    }

    private function deobfuscateTwoEvalVarsReplace($str, $matches)
    {
        $vars = [];
        $varsStrCode = urldecode(hex2bin($matches[3]));
        $vars = Helpers::collectFuncVars($varsStrCode, $vars, false);
        $res = hex2bin($matches[4]);

        $unwrappedCode = Helpers::replaceVarsFromArray($vars, $matches[5]);
        $unwrappedCode = str_replace($matches[1], $matches[2], $unwrappedCode);
        $unwrappedCode = $this->unwrapFuncs($unwrappedCode . ')');

        $res .= $unwrappedCode;

        return $res;
    }

    private function deobfuscateEvalFuncCode($str, $matches)
    {
        $function = $matches[1];
        $safe = Helpers::convertToSafeFunc($function);
        if ($safe) {
            return @Helpers::executeWrapper($function, [stripcslashes($matches[2])]);
        }

        return $str;
    }

    private function deobfuscateEvalOpenSslDecrypt($str, $matches)
    {
        return openssl_decrypt(
            base64_decode($matches[1]),
            $matches[2],
            base64_decode($matches[3]),
            OPENSSL_RAW_DATA,
            base64_decode($matches[4])
        );
    }

    private function deobfuscateUrldecodedDictVarReplace($str, $matches)
    {
        $dictVal = urldecode($matches[2]);
        $res = Helpers::replaceVarsFromDictionary($matches[1], $dictVal, $matches[0]);
        $res = Helpers::concatStringsInContent($res);

        return $res;
    }

    private function deobfuscateZymdecrypt($str, $matches)
    {
        $funcs = Helpers::replaceBase64Decode($matches[2]);
        $tmp = explode(';', $funcs);
        $funcs = [];
        foreach ($tmp as $func) {
            if (empty($func)) {
                continue;
            }
            $func = explode('=', $func);
            $funcs[str_replace(['$' . $matches[1] . '[\'', '\']'], '', $func[0])] = substr($func[1], 1, -1);
        }
        foreach($funcs as $var => $func) {
            $matches[3] = str_replace('$GLOBALS[\'' . $matches[1] . '\'][\'' . $var . '\']\(', $func . '(', $matches[3]);
            $matches[3] = str_replace('$GLOBALS[\'' . $matches[1] . '\'][\'' . $var . '\']', $func, $matches[3]);
        }

        if (preg_match('~function\s*(\w+)\((\$\w+)\)\{return\s*base64_decode\(\2\);~msi', $matches[3], $m)) {
            $matches[3] = str_replace($m[1] . '(', 'base64_decode(', $matches[3]);
        }
        $limit = 10;
        while (
            strpos($matches[3], 'base64_decode(\'') !== false
            || strpos($matches[3], 'base64_decode("') !== false
            || $limit--
        ) {
            $matches[3] = Helpers::replaceBase64Decode($matches[3]);
        }
        return $matches[3];
    }

    private function deobfuscateFuncRevB64($str, $matches)
    {
        $code = str_replace(['eval(' . $matches[1] . '(', '));'], ['eval(base64_decode(strrev(base64_decode(strrev(', ')))));'], $matches[4]);
        return $code;
    }

    private function deobfuscateCreateFuncGzConvertUudecode($str, $matches)
    {
        return stripcslashes(gzinflate(convert_uudecode(stripcslashes($matches[2]))));
    }

    private function deobfuscateGlobalsArrayFuncs($str, $matches)
    {
        $globalFuncStr = base64_decode(Helpers::concatStr($matches[2]));
        $res = str_replace($matches[1] . '(0)', '\'' . $globalFuncStr . '\'', $str);
        preg_match_all('~(?:[\'"][^"\']*[\'"]\s?\.?)+~msi', $matches[4], $strings, PREG_SET_ORDER);
        $vars = [];
        foreach ($strings as $string) {
            $vars[] = base64_decode(Helpers::concatStr($string[0]));
        }
        $res = preg_replace_callback(
            '~' . $matches[3] . '\((\d+)\)~msi',
            static function ($m) use ($vars) {
                $str = str_replace('\\', '\\\\', $vars[$m[1]]);
                $str = str_replace('\'', '\\\'', $str);
                return '\'' . $str . '\'';
            },
            $res
        );
        $res = MathCalc::calcRawString($res);

        return $res;
    }

    private function deobfuscateVarArrayChrFunc($str, $matches)
    {
        preg_match_all(
            '~[\'"]([^\'"]+)[\'"]\s?=>(?:((?:\s?\w{1,50}\(\d{1,5}\)\.?)+)|\s?(\$\w{1,50})),~msi',
            $str,
            $arrMatches,
            PREG_SET_ORDER
        );
        $vars = [];
        foreach ($arrMatches as $arrMatch) {
            $value = '';
            if (!empty($arrMatch[2])) {
                preg_match_all('~\d{1,5}~msi', $arrMatch[2], $numbers, PREG_SET_ORDER);
                foreach ($numbers as $number) {
                    $value .= $number[0] < 128 ? chr($number[0]) : '';
                }
            } else {
                $value = $arrMatch[3] ?? '';
            }
            $vars[$arrMatch[1]] = $value;
        }
        $str = preg_replace_callback(
            '~\\' . $matches[1] . '\[[\'"]([^\'"]+)[\'"]]([\[\](])~msi',
            static function ($m) use ($vars) {
                $value = $vars[$m[1]] ?? '';
                if ($m[2] === ']') {
                    $value = '\'' . $value . '\'';
                }
                return $value . $m[2];
            },
            $str
        );

        return $str;
    }

    private function deobfuscateFuncDictB64($str, $matches)
    {
        $matches[5] = Helpers::replaceVarsFromDictionary($matches[3], $matches[4], $matches[5]);
        $vars = Helpers::collectVars($matches[5], '\'');
        $code = stripcslashes($matches[8]) . ';';
        $code = Helpers::replaceVarsFromArray($vars, $code, true, false);
        $code = $this->deobfuscateEval($code, []);
        $code = $matches[2] . $code;
        return $code;
    }

    private function deobfuscateGzuncompressStrrev($str, $matches)
    {
        return gzuncompress(strrev($matches[4]));
    }

    private function deobfuscateEvalB64DoubleVar($str, $matches)
    {
        $func = trim(base64_decode($matches[4]));
        if (!Helpers::convertToSafeFunc($func)) {
            return $str;
        }
        return $func($func($matches[2]));
    }

    private function deobfuscateEvalOpensslDecryptStr($str, $matches)
    {
        $code = openssl_decrypt(
            base64_decode($matches[7]),
            "AES-256-CBC",
            $matches[2],
            0,
            $matches[3]
        );
        $code = str_replace($matches[4], $matches[5], $code);

        return $code;
    }

    private function deobfuscateEvalDictionaryFuncVar($str, $matches)
    {
        $code = Helpers::concatStringsInContent(
            str_replace(
                '\\\'',
                '',
                Helpers::replaceVarsFromDictionary($matches[2], $matches[3], $matches[4])
            )
        );
        return substr($code, 1, -1). stripcslashes($matches[5]);
    }

    private function deobfuscateDictionaryStrReplace($str, $matches)
    {
        $dict = base64_decode(str_replace($matches[4], '', $matches[2]));
        $code = Helpers::replaceVarsFromDictionary($matches[5], $dict, $matches[6]);
        return $code;
    }

    private function deobfuscateManyBase64DecodeChr($str, $matches)
    {
        $code = MathCalc::calcRawString($matches[0]);

        $hangs = 10;
        while (stripos($code, 'base64_decode') !== false && $hangs--) {
            $code = Helpers::normalize($code);
            $code = Helpers::replaceBase64Decode($code);
            $vars = Helpers::collectVars($code, '\'', $vars, true);
            $code = Helpers::replaceVarsFromArray($vars, $code);
        }
        return $code;
    }

    private function deobfuscateManyB64CalcEval($str, $matches)
    {
        $code = MathCalc::calcRawString($str);
        $limit = 50;
        while (
            strpos($code, 'base64_decode(\'') !== false
            || strpos($code, 'base64_decode("') !== false
            || $limit--
        ) {
            $code = Helpers::replaceBase64Decode($code);
        }
        $code = str_replace(['{\'', '\'}'], '', $code);

        if (preg_match(
            '~(\$\w{1,50})\s?=\s?[\'"]([^\'"]+)[\'"];\s?((?:\$\w{1,50}\s?\.?=\s?(?:\$\w{1,50}\[\d{1,5}\]\s?\.?\s?)+;\s?)+)eval\((\$\w{1,50})\s?\([\'"]([^\'"]+)[\'"]\)\);~msi',
            $code,
            $found
        )) {
            $vars[$found[1]] = $found[2];
            $vars = Helpers::getVarsFromDictionaryDynamically($vars, $found[0]);
            $func = $vars[$found[4]];
            if (!Helpers::convertToSafeFunc($func)) {
                return $code;
            }
            $res = $func($found[5]);
            $res = Helpers::replaceVarsFromArray($vars, $res, true);

            if (preg_match(
                '~(\$\w{1,50})=[\'"]([^\'"]+)[\'"];eval\(\'\?>\'\.base64_decode\(strtr\(substr\(\1,(\$\w{1,50})\*2\),substr\(\1,\3,\3\),substr\(\1,0,\3\)\)\)\);~msi',
                $res,
                $m
            )) {
                if (isset($vars[$m[3]])) {
                    $num = (int)$vars[$m[3]];
                    return '?> ' . base64_decode(
                        strtr(
                            substr($m[2], $num * 2),
                            substr($m[2], $num, $num),
                            substr($m[2], 0, $num)
                        )
                    );
                }
            }
        }
        return $code;
    }

    private function deobfuscateDa7Q9RnPjm($str, $matches)
    {
        $dict = str_replace($matches[5], 'base64_decode', $matches[7]);
        $dict = Helpers::replaceBase64Decode($dict);
        $dict = explode('\',\'', substr($dict, 1, -1));
        foreach ($dict as $index => $item) {
            $matches[8] = str_replace($matches[6] . '[' . $index . ']', '\'' . $item . '\'', $matches[8]);
        }
        $matches[8] = Helpers::normalize($matches[8]);
        $tmp = explode(';', $matches[8]);
        $vars = [];
        foreach ($tmp as $var) {
            $parts = explode('=', $var);
            $vars[$parts[0]] = $parts[1];
        }
        $vars = array_filter($vars);
        foreach ($dict as $index => $item) {
            $matches[11] = str_replace($matches[6] . '[' . $index . ']', '\'' . $item . '\'', $matches[11]);
        }
        foreach ($vars as $var => $val) {
            $matches[11] = str_replace($var, $val, $matches[11]);
        }
        $code = substr(Helpers::normalize($matches[11]), 1, -1);
        $code = str_replace($matches[4], '\'' . $matches[2] . '\'', $code);
        return $code;
    }

    private function deobfuscateGarbageComments($str, $matches)
    {
        $res = preg_replace('~/\*[^/]*/?\*/~msi', '', $str);
        $res = str_replace('\'.\'', '', $res);
        return $res;
    }

    private function deobfuscateEvalVarsB64Concated($str, $matches)
    {
        $vars = [];
        $code = Helpers::concatStringsInContent($str);
        $vars = Helpers::collectFuncVars($code, $vars);
        $vars = Helpers::collectVars($code, '"', $vars);

        return Helpers::replaceVarsFromArray($vars, $matches[1]);
    }

    private function deobfuscateStrReplaceVarsCreateFunc($str, $matches)
    {
        $vars = [];
        $vars = Helpers::collectVars($str, '"', $vars);

        preg_match_all(
            '~(\$\w{1,50})\s?=\s?(?:str_replace|\$\w{1,50})\([\'"]([^\'"]+)[\'"],\s*[\'"]{2},\s*[\'"]([^\'"]+)[\'"]\);\s*~msi',
            $str, $replaces, PREG_SET_ORDER
        );

        foreach ($replaces as $replace) {
            $vars[$replace[1]] = str_replace($replace[2], '', $replace[3]);
        }

        $strToDecode = Helpers::concatStringsInContent(
            Helpers::replaceVarsFromArray($vars, $matches[4], false, true)
        );
        $funcs = Helpers::replaceVarsFromArray($vars, $matches[2]);
        if ($funcs === 'base64_decode(str_replace(') {
            return base64_decode(str_replace($matches[3], '', $strToDecode));
        }

        return $str;
    }

    private function deobfuscateLongVarConcatStrRot13B64Gz($str, $matches)
    {
        $vars = [];
        $vars = Helpers::collectVars($str, '"', $vars);

        $strToDecode = '';
        foreach ($vars as $var) {
            $strToDecode .= $var;
        }
        $res = $strToDecode;
        preg_match_all(
            '~str_rot13|base64_decode|gzinflate~msi',
            $str, $funcs, PREG_SET_ORDER
        );
        foreach ($funcs as $func) {
            if (Helpers::convertToSafeFunc($func[0])) {
                $res = @$func[0]($res);
            }
        }

        return $res;
    }

    private function deobfuscatecreateFuncDict($str, $matches)
    {
        $vars = Helpers::collectVars($str, '\'', $vars, true);
        $vars2 = [];
        foreach($vars as $k => $v) {
            if (strlen($v) === 1) {
                $vars2[$k] = $v;
            } else {
                $tmp = str_split($v);
                foreach ($tmp as $i => $char) {
                    $vars2[$k . '[' . $i . ']'] = $char;
                    $vars2[$k . '[\'' . $i . '\']'] = $char;
                }
            }
        }
        $res = Helpers::replaceVarsFromArray($vars2, $str, false, true);
        $res = Helpers::normalize($res);
        return $res;
    }

    private function deobfuscateCreateFuncArrayPop($str, $matches)
    {
        return substr($matches[4], 1, -1);
    }

    private function deobfuscateChrOrdB64FuncVars($str, $matches)
    {
        $vars = Helpers::collectFuncVars($matches[0]);
        $func1 = $vars[$matches[4]] ?? '';
        $func2 = $vars[$matches[5]] ?? '';
        if ($func1 === 'chr' && $func2 === 'ord') {
            $strDecode = base64_decode($matches[2]);
            $res = '';
            $len = strlen($matches[2]);
            for ($i = 0; $i < $len; $i++) {
                $res .= chr(ord($strDecode[$i]) ^ (int)$matches[6]);
            }

            return $res;
        }

        return $str;
    }

    private function deobfuscateSimpleEvalFunctions($str, $matches)
    {
        $func1 = trim(Helpers::normalize($matches[2]), "'\"");
        $func2 = trim(Helpers::normalize($matches[4]), "'\"");
        $data = $matches[6];
        if (Helpers::isSafeFunc($func1) && Helpers::isSafeFunc($func2)) {
            return $func1($func2($data));
        }
        return $str;
    }

    private function deobfuscateClassArrayDictFunc($str, $matches)
    {
        $arrayDict = [];
        preg_match_all(
            '~[\'"]([^\'"]+)[\'"]\s?=>\s?((?:\s?[\'"][^\'"]*[\'"]\s?\.?)+)[,)]~msi',
            $matches[12],
            $dicts,
            PREG_SET_ORDER
        );
        foreach ($dicts as $dict) {
            $arrayDict[$dict[1]] = $dict[2] !== '' ? Helpers::concatStr($dict[2]) : '';
        }

        $res = $matches[13];

        $res = preg_replace_callback(
            '~' . $matches[1] . '::' . $matches[3] . '\(([^,]+),([^)]+)\)~msi',
            static function ($m) use ($arrayDict) {
                $arg1 = Helpers::concatStr($m[1]);
                $arg2 = Helpers::concatStr($m[2]);
                $n = strlen($arg2);

                $decoded  = base64_decode($arrayDict[$arg1]);

                for ($i = 0, $len = strlen($decoded); $i !== $len; ++$i) {
                    $decoded[$i] = chr(ord($decoded[$i]) ^ ord($arg2[$i % $n]));
                }

                return '\'' . $decoded . '\'';
            },
            $res
        );

        return $res;
    }

    private function deobfuscateConcatVarsIterDict($str, $matches)
    {
        $res = '';
        $strEncoded = '';
        $dict1 = stripcslashes($matches[5]);
        $dict2 = stripcslashes($matches[7]);

        preg_match_all('~"([^"]+)"~msi', $matches[3], $strings, PREG_SET_ORDER);
        foreach ($strings as $string) {
            $strEncoded .= stripcslashes($string[1]);
        }
        foreach (str_split($strEncoded) as $c) {
            $res .= (strpos($dict2, $c) === false) ? $c : $dict1[strpos($dict2, $c)];
        }
        $res = "?> $res";

        return $res;
    }

    private function deobfuscateFuncB64TwoArgs($str, $matches)
    {
        $arg1 = base64_decode($matches[7]);
        $arg2 = $matches[8];

        $res = "";
        for ($i = 0; $i < strlen($arg1);) {
            for ($j = 0; $j < strlen($arg2); $j++, $i++) {
                $res .= $arg1[$i] ^ $arg2[$j];
            }
        }

        return $res;
    }

    private function deobfuscateStrReplaceB64($str, $matches)
    {
        $vars = Helpers::collectFuncVars($str, $vars, true, true);
        $code = Helpers::replaceBase64Decode($str);
        Helpers::collectFuncVars($code, $vars, false, true);
        $code = Helpers::replaceVarsFromArray($vars, $code, false, false);
        $code = Helpers::normalize($code);
        return $code;
    }

    private function deobfuscateCreateFuncStrReplace($str, $matches)
    {
       return str_replace($matches[2], '', $matches[3]);
    }

    private function deobfuscateFwriteB64Shell($str, $matches)
    {
        return Helpers::replaceBase64Decode($str);
    }

    private function deobfuscateCreateFuncB64StrRotChr($str, $matches)
    {
        $code = MathCalc::calcRawString($str);
        $code = preg_replace_callback('~str_rot13\(\'([^\']+)\'\)~msi', function ($m) {
            return '\'' . str_rot13($m[1]) . '\'';
        }, $code);
        $code = Helpers::replaceBase64Decode($code);
        $code = Helpers::normalize($code);
        $code = Helpers::replaceBase64Decode($code);
        if (preg_match('~(\$\w+)=create_function\(\'(\$\w+)\',\'eval\(\2\);\'\);\1\(\'([^\']+)\'\);~msi', $code, $m)) {
            $code = $m[3];
        }
        return $code;
    }

    private function deobfuscateCreateFuncGzuncompressB64($str, $matches)
    {
         $code = gzuncompress(base64_decode(substr($matches[5], 1, -1)));
         if (strpos($code, '1;}') === 0) {
             $code = substr($code, 3);
         }
         if (substr_count($code, 'goto ') > 100) {
             $code = Helpers::unwrapGoto($code);
         }
         return $code;
    }

    private function deobfuscateGlobalsSlashed($str, $matches)
    {
        return stripcslashes($str);
    }

    private function deobfuscateB64VarsFuncEval($str, $matches)
    {
        $vars = [];
        $vars = Helpers::collectFuncVars($matches[3]);
        $strToDecode = $matches[2];
        $func1 = $vars[$matches[4]] ?? null;
        $func2 = $vars[$matches[5]] ?? null;
        if ($func1 !== null && $func2 !== null
            && Helpers::convertToSafeFunc($func1) && Helpers::convertToSafeFunc($func2)) {
            $strToDecode = Helpers::executeWrapper($func1, [
                Helpers::executeWrapper($func2, [$strToDecode])
            ]);
        }

        $len = strlen($strToDecode);
        $res = '';
        $func1 = $vars[$matches[10]] ?? null;
        $func2 = $vars[$matches[11]] ?? null;
        if ($func1 === 'chr' && $func2 === 'ord') {
            for ($i = 0; $i < $len; $i++) {
                $res .= $func1($func2($strToDecode[$i]) ^ (int)$matches[12]);
            }
        }

        return $res;
    }

    private function deobfuscateB64FuncEval($str, $matches)
    {
        $key    = (strlen($matches[5]) > strlen($matches[7])) ? $matches[7] : $matches[5];
        $data   = (strlen($matches[5]) > strlen($matches[7])) ? $matches[5] : $matches[7];
        if (isset($matches[2]) && $matches[2] !== '') {
            $key = base64_encode($key);
        }
        $res = Helpers::xorWithKey(base64_decode($data), $key);
        if (isset($matches[3]) && $matches[3] !== '') {
            $res = base64_decode($res);
        }
        return $res;
    }

    private function deobfuscateNullEcho($str, $matches)
    {
        $vars = [];
        Helpers::collectConcatedVars($str, '\'', $vars, true);
        $str = Helpers::replaceVarsFromArray($vars, $str, true);
        return $str;
    }

    private function deobfuscateEvalB64Chunks($str, $matches)
    {
        $str = Helpers::replaceBase64Decode($str);
        if (preg_match('~eval\(\'function\s*(\w+)\((\$\w+),(\$\w+)\)\{(\$\w+)=array\(((?:\d+\,?)+)\);if\(\3==(\d+)\)\s*\{\$\w+=substr\(\2,\4\[\d+\]\+\4\[\d+\],\4\[\d+\]\);\}elseif\(\3==(\d+)\)\s*\{\$\w+=substr\(\2,\4\[\d+\],\4\[\d+\]\);\}elseif\(\3==(\d+)\)\{\$\w+=trim\(substr\(\2,\4\[\d+\]\+\4\[\d+\]\+\4\[\d+\]\)\);}return\s*\$\w+;\}\'\);~msi', $str, $m)) {
            $offsets = explode(',', $m[5]);
            $offsets[0] = 1;
            $value = '';
            $str = preg_replace_callback('~' . $m[1] . '\(\$\w+\[\d+\],(\d+)\)~msi', function ($m2) use ($m, $matches, $offsets) {
                if ($m2[1] === $m[6]) {
                    $value = substr($matches[4], (int)$offsets[0] + (int)$offsets[1], $offsets[2]);
                } else if ($m2[1] === $m[7]) {
                    $value = substr($matches[4], (int)$offsets[0], (int)$offsets[1]);
                } else if ($m2[1] === $m[8]) {
                    $value = trim(substr($matches[4], (int)$offsets[0] + (int)$offsets[1] + (int)$offsets[2]));
                }
                return '\'' . $value . '\'';
            }, $str);
        }
        $str = Helpers::replaceBase64Decode($str);
        $code = '';
        if (preg_match('~eval\(\'if\(\!function_exists\("([^"]+)"\)\)\{function\s*\1\((\$\w+),(\$\w+),(\$\w+)\)\s*\{(\$\w+)=implode\(\4\);\5=preg_replace\("[^"]+","",\5\);if[^{]+{return\(*((?:\w+\()+)\2\)\)\);}else{die\("[^"]+"\);}}}\'\);~msi', $str, $m)) {
            preg_match('~eval\(' . $m[1] . '\(\'([^\']+)\',\'\w{32}\',\$\w+\)\);~msi', $str, $m2);
            $code = 'eval(' . $m[6] . '\'' . $m2[1] . '\'' . str_repeat(')', substr_count($m[6], '(')) . ');';
        }
        $code = $this->deobfuscateEval($code, []);
        return $code;
    }

    private function deobfuscateObStartFlushVar($str, $matches)
    {
        preg_match_all('~\d{1,5}~msi', $matches[4], $tcNums, PREG_SET_ORDER);
        preg_match_all('~\d{1,5}~msi', $matches[6], $trNums, PREG_SET_ORDER);

        $res = '';
        foreach ($trNums as $tval) {
            $res .= chr((int)$tcNums[(int)$tval[0]][0] + 32);
        }

        return '?> ' . $res;
    }

    private function deobfuscateArrayReplacing($str, $matches)
    {
        $dictionaryKey = $matches[1];
        $dictionaryVal = $matches[2];

        $result = Helpers::replaceVarsFromDictionary($dictionaryKey, $dictionaryVal, $str);
        preg_match_all('~\$(\w{1,40})\s?=\s?\'(\w+)\';~', $result, $array, PREG_SET_ORDER);
        foreach($array as &$value) {
            $re = '~\$\{"GLOBALS"}\["'.$value[1].'"\]~';
            $result = preg_replace($re, $value[2], $result);
        }
        return $result;
    }

    private function deobfuscateVarConcatedReplaceEval($str, $matches)
    {
        $tempStr = $matches[1];
        $vars = [];
        $vars = Helpers::collectVars($tempStr, '"', $vars, true);
        $tempStr = Helpers::replaceVarsFromArray($vars, $tempStr, false, true);
        $tempStr = Helpers::concatStringsInContent($tempStr);
        $vars = Helpers::collectVars($tempStr, "'", $vars);
        $result = str_replace($matches[1],'', $str);
        $result = Helpers::replaceVarsFromArray($vars, $result, false, true);

        return $this->unwrapFuncs($result);
    }

    private function deobfuscateVarsConcatedFuncStrReplaceEval($str, $matches)
    {
        $content = $str;
        $vars = [$matches[1] => ''];
        $vars = Helpers::collectVars($content, '"', $vars, true);
        $vars = Helpers::getVarsFromDictionaryDynamically($vars, $content);
        $result = Helpers::replaceVarsFromArray($vars, $matches[7], true, false) .
            '"' .
            str_replace($matches[8], $matches[6], $vars[$matches[1]]) . '"));';

        return $this->unwrapFuncs($result);
    }

    private function deobfuscateB64GlobalVarsReplace($str, $matches)
    {
        $vars = [];
        $varsStr = Helpers::replaceBase64Decode($matches[1], '"');
        $vars = Helpers::collectVars($varsStr, '"',$vars);
        $res = str_replace($matches[1], '', $str);

        return Helpers::replaceVarsFromArray($vars, $res, false, true);
    }

    private function deobfuscateB64putContents($str, $matches)
    {
        return base64_decode($matches[1]);
    }

    private function deobfuscateB64WSO($str, $matches)
    {
        $code = Helpers::replaceBase64Decode($str);
        $vars = [];
        Helpers::collectConcatedVars($code, '\"', $vars, true);
        $code = Helpers::replaceVarsFromArray($vars, $code, true, true);
        return $code;
    }

    private function deobfuscateEvalFuncDict($str, $matches)
    {
        $res = Helpers::replaceVarsFromDictionary($matches[2], $matches[3], $matches[5]);
        $res = preg_replace('~\'\s*\.\s*\'~', '', substr(trim($res), 1, -1));
        $res .= $matches[6] . '\'' . str_repeat(')', substr_count($res, '(')) . ';';
        return $res;
    }

    private function deobfuscateExplodeGzinflateSubstr($str, $matches)
    {
        $matches[4] = stripcslashes($matches[4]);
        $strings = explode($matches[3], gzinflate(substr($matches[4], hexdec($matches[5]), (int)$matches[6])));
        $res = str_replace($matches[1], '', $matches[0]);
        $res = preg_replace_callback('~\$GLOBALS[\{\[].{1,3}[\}\]][\[\{]([0-9a-fx]+)[\]\}]~msi', function($m) use ($strings) {
            return '\'' . $strings[hexdec($m[1])] . '\'';
        }, $res);
        return $res;
    }

    private function deobfuscateUrldecodeEval($str, $matches)
    {
        $dict = strpos($matches[1], 'urldecode') ? urldecode($matches[3]) : stripcslashes($matches[3]);
        $tmp = Helpers::replaceVarsFromDictionary($matches[2], $dict, $matches[4]);
        $data = [];
        Helpers::collectConcatedVars($tmp, '\'', $data);
        foreach($data as $var => $value) {
            $tmp = Helpers::replaceVarsFromDictionary($var, $value, $tmp);
        }
        Helpers::collectConcatedVars($tmp, '\'', $data);
        $res = '';
        foreach ($data as $var => $value) {
            $res .= $var . '=' . '\'' . $value . '\';';
        }
        $res .= str_replace([$matches[1], $matches[4]], '', $str);
        $res = Helpers::replaceVarsFromArray($data, $res, true, false);
        return $res;
    }

    private function deobfuscateStrtrEval($str, $matches)
    {
        $vars = [];
        Helpers::collectVars($str, '\'', $vars);
        $res = Helpers::replaceVarsFromArray($vars, $matches[4], false, false);
        return $res;
    }

    private function deobfuscateEvalStrtr($str, $matches)
    {
        $res = '?> ';
        $offset = (int) $matches[2];
        $res .= base64_decode(strtr(substr($matches[1], $offset*2), substr($matches[1], $offset, $offset), substr($matches[1], 0, $offset)));
        return $res;
    }

    private function deobfuscateCreateFuncHex2Bin($str, $matches)
    {
        $res = Helpers::replaceHex2Bin($str);
        $vars = [];
        Helpers::collectVars($res, '\'', $vars, true);
        $res = Helpers::replaceVarsFromArray($vars, $res, true);
        return $res;
    }

    private function deobfuscateAutoExploit($str, $matches)
    {
        return Helpers::replaceBase64Decode($str);
    }

    private function deobfuscateCreateFuncB64($str, $matches)
    {
        return base64_decode($matches[2]);
    }

    private function deobfuscateChrXor($str, $matches)
    {
        $data = explode($matches[4], $matches[5]);
        $res = '';
        foreach ($data as $chr) {
            if ($chr === '') {
                continue;
            }
            $res .= chr($chr ^ (int) $matches[2]);
        }
        return $res;
    }
    private function deobfuscateManyB64WithVarNorm($str, $matches)
    {
        $res = Helpers::replaceBase64Decode($str, '"');
        if (strpos($res, '${$') !== false) {
            $res = Helpers::postProcess($res);
        }
        return $res;
    }
    /*************************************************************************************************************/
    /*                                          JS deobfuscators                                                 */
    /*************************************************************************************************************/

    private function deobfuscateJS_fromCharCode($str, $matches)
    {
        $result = '';
        if (isset($matches[3]) && $matches[3] === 'eval(') {
            $chars = explode(',', $matches[4]);
            foreach ($chars as $char) {
                $result .= chr((int)trim($char));
            }
            if (isset($matches[1]) && $matches[1] !== '') {
                $result = $matches[1] . $result;
            }
            if (isset($matches[5]) && $matches[5] !== '') {
                $result = $result . $matches[5];
            }
            return $result;
        }

        $result = preg_replace_callback('~String\.fromCharCode\(([\d,\s]+)\)~msi', function ($m) {
            $chars = explode(',', $m[1]);
            foreach ($chars as $char) {
                $result .= chr((int)trim($char));
            }
            return '\'' . $result . '\'';
        }, $str);

        return $result;
    }

    private function deobfuscateJS_unescapeContentFuncWrapped($str, $matches)
    {
        $result = '';

        $functionCode = urldecode($matches[1]);
        $functionName = urldecode($matches[2]);
        $strDecoded = $matches[3];

        if (preg_match('~function\s?(\w{1,50})\(\w{1,50}\)\s{0,50}{\s{0,50}var\s?\w{1,50}\s?=\s?[\'"]{2};\s{0,50}var\s?\w{1,50}\s?=\s?\w{1,50}\.split\("(\d+)"\);\s{0,50}\w{1,50}\s?=\s?unescape\(\w{1,50}\[0\]\);\s{0,50}\w{1,50}\s?=\s?unescape\(\w{1,50}\[1\]\s?\+\s?"(\d{1,50})"\);\s{0,50}for\(\s?var\s?\w{1,50}\s?=\s?0;\s?\w{1,50}\s?<\s?\w{1,50}\.length;\s?\w{1,50}\+\+\)\s?{\s{0,50}\w{1,50}\s?\+=\s?String\.fromCharCode\(\(parseInt\(\w{1,50}\.charAt\(\w{1,50}%\w{1,50}\.length\)\)\^\w{1,50}\.charCodeAt\(\w{1,50}\)\)\+([-+]?\d{1,5})\);\s{0,50}}\s{0,50}return\s\w{1,50};\s{0,50}}~msi',
                $functionCode, $match) && strpos($functionName, $match[1])) {
            $tmp = explode((string)$match[2], $strDecoded);
            $s = urldecode($tmp[0]);
            $k = urldecode($tmp[1] . (string)$match[3]);
            $kLen = strlen($k);
            $sLen = strlen($s);

            for ($i = 0; $i < $sLen; $i++) {
                $result .= chr(((int)($k[$i % $kLen]) ^ ord($s[$i])) + (int)$match[4]);
            }
        } else {
            $result = $matches[3];
            $result = str_replace([$matches[1], $matches[2]], [$functionCode, $functionCode], $result);
        }

        return $result;
    }

    private function deobfuscateJS_ObfuscatorIO($str, $matches)
    {
        $detectPattern = '~((?![^_a-zA-Z$])[\w$]*)\(-?(\'|")(0x[a-f\d]+|\\x30\\x78[\\xa-f\d]+)\2(\s*,\s*(\'|").+?\5)?\)~msi';
        preg_match_all($detectPattern, $str, $detectMatch);
        $detectMatch = array_unique($detectMatch[1]);
        if (count($detectMatch) !== 1) {
            return $str;
        }

        preg_match('~\b(?:var|const|let)\s+' . $detectMatch[0] . '\s*=\s*function\s*\(.*?\)\s*~msi', $str, $index, PREG_OFFSET_CAPTURE);
        $index = $index[0][1];

        $bo = 0;
        $bc = 0;
        $strSize = strlen($str);
        $mainCode = '';
        while ($index < $strSize) {
            if ($str[$index] === '{') {
                $bo++;
            }
            if ($str[$index] === '}') {
                $bc++;
            }
            if ($bc === $bo && $bo !== 0) {
                $mainCode = substr($str, $index + 2);
                break;
            }
            $index++;
        }
        $array = explode('\',\'', substr($matches[2], 1, -1));

        $shuffle = hexdec($matches[3]);
        while ($shuffle--) {
            $array[] = array_shift($array);
        }
        $mainCode = preg_replace_callback('~((?![^_a-zA-Z$])[\w$]*)\(-?(\'|")(0x[a-f\d]+|\\x30\\x78[\\xa-f\d]+)\2(\s*,\s*(\'|")(.+?)\5)?\)~msi', function ($m) use ($array) {
            return '\'' . Helpers::deobfuscatorIO_string($array[hexdec($m[3])], $m[6]) . '\'';
        }, $mainCode);
        return Helpers::normalize($mainCode);
    }

    private function deobfuscateJS_documentWriteUnescapedStr($str, $matches)
    {
        if (strpos($matches[1], '\u00') !== false) {
            $matches[1] = str_replace('\u00', '%', $matches[1]);
        }
        $res = urldecode($matches[1]);
        if (isset($matches[2]) && isset($matches[3]) && $matches[2] !== ''
            && strpos($res, 'function ' . $matches[2]) !== false && $matches[3] !== ''
            && preg_match('~var\s*(\w+)=unescape\((\w+)\.substr\(0,\2\.length-1\)+;\s*var\s*(\w+)=\'\';for\((\w+)=0;\4<\1\.length;\4\+\+\)\3\+=String\.fromCharCode\(\1\.charCodeAt\(\4\)-s\.substr\(\2\.length-1,1\)+;document\.write\(unescape\(\3\)+;~msi', $res)
        ) {
            $tmp = urldecode($matches[3]);
            $res = '';
            for ($i = 0, $iMax = strlen($tmp); $i < $iMax; $i++) {
                $res .= chr(ord($tmp[$i]) - (int)substr($matches[3], -1, 1));
            }
            $res = urldecode($res);
        }
        return $res;
    }

    private function deobfuscateJS_deanPacker($str, $matches)
    {
        $payload = $matches[1];
        // Words
        $symtab = explode('|', $matches[4]);
        // Radix
        $radix = (int)$matches[2];
        // Words Count
        $count = (int)$matches[3];

        if ($count !== count($symtab)) {
            return $str; // Malformed p.a.c.k.e.r symtab !
        }

        $array = [];

        while ($count--) {
            $tmp = Helpers::jsPackerUnbaser($count, $radix);
            $array[$tmp] = (isset($symtab[$count]) && $symtab[$count] !== '') ? $symtab[$count] : $tmp;
        }

        $result = preg_replace_callback('~\b\w+\b~', function($m) use ($array) {
            return $array[$m[0]];
        }, $payload);
        $result = str_replace('\\', '', $result);
        if (preg_match('~function\(\)\{var\s*(\w+)=\{([\$\w]+):\'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\+/=\',\w+:function\(\w+\){var\s*\w+=\'\',\w,\w,\w,\w,\w,\w,\w,\w=0;\w=\1\.[\w\$]+\(\w\);while\(\w<\w\.length\)\{[^{]+\{\w=\w=64\}else[^{]+\{\w=64\};[^}]+};return\s*\w},(\w+):function\(\w\)\{var\s*\w+=\'\',\w,\w,\w,\w,\w,\w,\w,\w=0;\w=\w\.replace\(/\[\^A\-Za\-z0\-9\+/=\]/g,\'\'\);while\(\w<\w\.length\){\w=this\.\2\.indexOf\(\w\.charAt\(\w\+\+\)\);~msi', $result, $m)) {
            $class = $m[1];
            $b64_func = $m[3];
            $result = preg_replace_callback('~(?:var\s(\w+)=\'([^\']+)\';\1=(\w+\.\w+)\(\1\)|(\w+\.\w+)\(\'([^\']+)\'\))~msi', function($m) use ($class, $b64_func) {
                if ((isset($m[4]) && $m[4] !== '' && $m[4] !== $class . '.' . $b64_func)
                 || (isset($m[3]) && $m[3] !== '' && $m[3] !== $class . '.' . $b64_func)
                ) {
                    return $m[0];
                }
                if (isset($m[4]) && $m[4] !== '') {
                    return '\'' . base64_decode($m[5]) . '\'';
                }
                if (isset($m[3]) && $m[3] !== '') {
                    return 'var ' . $m[1] . '=\'' . base64_decode($m[2]) . '\'';
                }
            }, $result);
            $result = preg_replace_callback('~\w+=\[((?:\'[^\']+\',?)+)\]~msi', function($m) {
                $arr = explode('\',\'', substr($m[1], 1, -1));
                $arr = array_map('base64_decode', $arr);
                return str_replace($m[1], '\'' . implode('\',\'', $arr) . '\'', $m[0]);
            }, $result);

        }
        return $result;
    }

    private function deobfuscateJS_objectDecode($str, $matches)
    {
        $ciphered = explode('+', $matches[9]);
        $chars = explode('\',\'', substr($matches[13], 1, -1));
        $count = (int)$matches[8];
        $arr = [];
        for ($i = 0; $i < $count; $i++) {
            $arr[Helpers::jsObjectDecodeIndexToString($i)] = $ciphered[$i][0] !== ';' ? '\'' . Helpers::jsObjectStringDecoder($matches[11], $chars, $ciphered[$i]) . '\'' : (float)substr($ciphered[$i], 1);
        }
        $ret = preg_replace_callback('~\$\.\b(\w+)\b~', function($m) use ($arr) {
            if (!isset($arr[$m[1]])) {
                return $m[0];
            }
            return $arr[$m[1]];
        }, $matches[2]);

        return $ret;
    }

    private function deobfuscateJS_B64Embedded($str, $matches)
    {
        return '<script type="text/javascript">' . PHP_EOL . base64_decode($matches[1]) . PHP_EOL . '</script>';
    }

    private function deobfuscateJS_ParseIntArray($str, $matches)
    {
        $delta = hexdec($matches[3]);
        $array = explode('\',\'', substr($matches[10], 1, -1));
        $i = 0;
        while (true) {
            $i++;
            try {
                $num = preg_replace_callback('~parseInt\(\_0x\w+\((\w+)\)\)~msi', function ($m) use ($array, $delta) {
                    $index = hexdec($m[1]) - $delta;
                    $item = $array[$index];
                    preg_match('~\d+~', $item, $num);
                    $num = isset($num[0]) ? (int)$num[0] : 0;
                    return $num;
                }, $matches[6]);
                $num = preg_replace_callback('~0x\w+~msi', function ($m) {
                    return hexdec($m[0]);
                }, $num);
                $num = (int)MathCalc::calcRawString($num);
                $expected = hexdec($matches[7]);
                if ($num === $expected) {
                    break;
                } else {
                    $item = array_shift($array);
                    $array[] = $item;
                }
            } catch (Exception $e) {
                $item = array_shift($array);
                $array[] = $item;
            }
        }

        $code = preg_replace_callback('~_0x\w+\((0x\w+)\)~', function($m) use ($array, $delta) {
            $index = hexdec($m[1]) - $delta;
            return '\'' . $array[$index] . '\'';
        }, $matches[9]);

        $code = preg_replace_callback('~atob\(\'([^\']+)\'\)~', function($m) {
            return '\'' . base64_decode($m[1]) . '\'';
        }, $code);

        return $code;
    }

    /*************************************************************************************************************/
    /*                                          PYTHON deobfuscators                                             */
    /*************************************************************************************************************/

    private function deobfuscatePY_evalCompileStr($str, $matches)
    {
        return gzuncompress(base64_decode($matches[1]));
    }
}




class LoadSignaturesForScan
{
    private $sig_db             = [];
    private $sig_db_meta_info   = [];
    private $sig_db_location    = 'internal';

    private $mode;
    private $debug;

    public $_DBShe;
    public $X_DBShe;
    public $_FlexDBShe;
    public $X_FlexDBShe;
    public $XX_FlexDBShe;
    public $_ExceptFlex;
    public $_AdwareSig;
    public $_PhishingSig;
    public $_JSVirSig;
    public $X_JSVirSig;
    public $_SusDB;
    public $_SusDBPrio;
    public $_DeMapper;
    public $_Mnemo;

    public $whiteUrls;
    public $blackUrls;
    public $ownUrl = null;

    private $count;
    private $count_susp;
    private $result = 0;
    private $last_error = '';

    const SIGN_INTERNAL = 1;
    const SIGN_EXTERNAL = 2;
    const SIGN_IMPORT = 3;
    const SIGN_ERROR = 9;

    public function __construct($avdb_file, $mode, $debug)
    {
        $this->mode = $mode;
        $this->debug = $debug;
        $this->sig_db_meta_info = [
            'build-date'    => 'n/a',
            'version'       => 'n/a',
            'release-type'  => 'n/a',
        ];

        if ($avdb_file && file_exists($avdb_file)) {
            $avdb = explode("\n", gzinflate(base64_decode(str_rot13(strrev(trim(file_get_contents($avdb_file)))))));
            $this->sig_db_location  = 'external';

            $this->_DBShe       = explode("\n", base64_decode($avdb[0]));
            $this->X_DBShe      = explode("\n", base64_decode($avdb[1]));
            $this->_FlexDBShe   = explode("\n", base64_decode($avdb[2]));
            $this->X_FlexDBShe  = explode("\n", base64_decode($avdb[3]));
            $this->XX_FlexDBShe = explode("\n", base64_decode($avdb[4]));
            $this->_ExceptFlex  = explode("\n", base64_decode($avdb[5]));
            $this->_AdwareSig   = explode("\n", base64_decode($avdb[6]));
            $this->_PhishingSig = explode("\n", base64_decode($avdb[7]));
            $this->_JSVirSig    = explode("\n", base64_decode($avdb[8]));
            $this->X_JSVirSig   = explode("\n", base64_decode($avdb[9]));
            $this->_SusDB       = explode("\n", base64_decode($avdb[10]));
            $this->_SusDBPrio   = explode("\n", base64_decode($avdb[11]));
            $this->_DeMapper    = array_combine(explode("\n", base64_decode($avdb[12])), explode("\n", base64_decode($avdb[13])));
            $this->_Mnemo       = @array_flip(@array_combine(explode("\n", base64_decode($avdb[14])), explode("\n", base64_decode($avdb[15])))); //TODO: you need to remove array_flip and swap the keys and values in array_combine. Write a test: put the signature base in the tests folder and run a scan with this base on the VIRII folder - the result should not change, since the base is the same

            // get meta information
            $avdb_meta_info = json_decode(base64_decode($avdb[16]), true);

            $this->sig_db_meta_info['build-date'] = $avdb_meta_info ? $avdb_meta_info['build-date'] : 'n/a';
            $this->sig_db_meta_info['version'] = $avdb_meta_info ? $avdb_meta_info['version'] : 'n/a';
            $this->sig_db_meta_info['release-type'] = $avdb_meta_info ? $avdb_meta_info['release-type'] : 'n/a';

            if (count($this->_DBShe) <= 1) {
                $this->_DBShe = [];
            }

            if (count($this->X_DBShe) <= 1) {
                $this->X_DBShe = [];
            }

            if (count($this->_FlexDBShe) <= 1) {
                $this->_FlexDBShe = [];
            }

            if (count($this->X_FlexDBShe) <= 1) {
                $this->X_FlexDBShe = [];
            }

            if (count($this->XX_FlexDBShe) <= 1) {
                $this->XX_FlexDBShe = [];
            }

            if (count($this->_ExceptFlex) <= 1) {
                $this->_ExceptFlex = [];
            }

            if (count($this->_AdwareSig) <= 1) {
                $this->_AdwareSig = [];
            }

            if (count($this->_PhishingSig) <= 1) {
                $this->_PhishingSig = [];
            }

            if (count($this->X_JSVirSig) <= 1) {
                $this->X_JSVirSig = [];
            }

            if (count($this->_JSVirSig) <= 1) {
                $this->_JSVirSig = [];
            }

            if (count($this->_SusDB) <= 1) {
                $this->_SusDB = [];
            }

            if (count($this->_SusDBPrio) <= 1) {
                $this->_SusDBPrio = [];
            }

            $this->result = self::SIGN_EXTERNAL;
        } else {
            InternalSignatures::init();
            $this->_DBShe       = InternalSignatures::$_DBShe;
            $this->X_DBShe      = InternalSignatures::$X_DBShe;
            $this->_FlexDBShe   = InternalSignatures::$_FlexDBShe;
            $this->X_FlexDBShe  = InternalSignatures::$X_FlexDBShe;
            $this->XX_FlexDBShe = InternalSignatures::$XX_FlexDBShe;
            $this->_ExceptFlex  = InternalSignatures::$_ExceptFlex;
            $this->_AdwareSig   = InternalSignatures::$_AdwareSig;
            $this->_PhishingSig = InternalSignatures::$_PhishingSig;
            $this->_JSVirSig    = InternalSignatures::$_JSVirSig;
            $this->X_JSVirSig   = InternalSignatures::$X_JSVirSig;
            $this->_SusDB       = InternalSignatures::$_SusDB;
            $this->_SusDBPrio   = InternalSignatures::$_SusDBPrio;
            $this->_DeMapper    = InternalSignatures::$_DeMapper;
            $this->_Mnemo       = InternalSignatures::$_Mnemo;

            // get meta information
            $avdb_meta_info = InternalSignatures::$db_meta_info;

            $this->sig_db_meta_info['build-date'] = $avdb_meta_info ? $avdb_meta_info['build-date'] : 'n/a';
            $this->sig_db_meta_info['version'] = $avdb_meta_info ? $avdb_meta_info['version'] : 'n/a';
            $this->sig_db_meta_info['release-type'] = $avdb_meta_info ? $avdb_meta_info['release-type'] : 'n/a';

            $this->result = self::SIGN_INTERNAL;
        }

        // use only basic signature subset
        if ($mode < 2) {
            $this->X_FlexDBShe  = [];
            $this->XX_FlexDBShe = [];
            $this->X_JSVirSig   = [];
        }

        // Load custom signatures
        if (file_exists(__DIR__ . '/ai-bolit.sig')) {
            try {
                $s_file = new SplFileObject(__DIR__ . '/ai-bolit.sig');
                $s_file->setFlags(SplFileObject::READ_AHEAD | SplFileObject::SKIP_EMPTY | SplFileObject::DROP_NEW_LINE);
                foreach ($s_file as $line) {
                    $this->_FlexDBShe[] = preg_replace('#\G(?:[^~\\\\]+|\\\\.)*+\K~#', '\\~', $line); // escaping ~
                }

                $this->result = self::SIGN_IMPORT;
                $s_file = null; // file handler is closed
            }
            catch (Exception $e) {
                $this->result = self::SIGN_ERROR;
                $this->last_error = $e->getMessage();
            }
        }

        $this->count = count($this->_JSVirSig) + count($this->X_JSVirSig) + count($this->_DBShe) + count($this->X_DBShe) + count($this->_FlexDBShe) + count($this->X_FlexDBShe) + count($this->XX_FlexDBShe);
        $this->count_susp = $this->count + count($this->_SusDB);

        if (!$debug) {
            $this->OptimizeSignatures($debug);
        }

        $this->_DBShe  = array_map('strtolower', $this->_DBShe);
        $this->X_DBShe = array_map('strtolower', $this->X_DBShe);
    }

    private function OptimizeSignatures($debug)
    {
        ($this->mode == 2) && ($this->_FlexDBShe = array_merge($this->_FlexDBShe, $this->X_FlexDBShe, $this->XX_FlexDBShe));
        ($this->mode == 1) && ($this->_FlexDBShe = array_merge($this->_FlexDBShe, $this->X_FlexDBShe));
        $this->X_FlexDBShe = $this->XX_FlexDBShe = [];

        ($this->mode == 2) && ($this->_JSVirSig = array_merge($this->_JSVirSig, $this->X_JSVirSig));
        $this->X_JSVirSig = [];

        $count = count($this->_FlexDBShe);

        for ($i = 0; $i < $count; $i++) {
            if ($this->_FlexDBShe[$i] == '[a-zA-Z0-9_]+?\(\s*[a-zA-Z0-9_]+?=\s*\)')
                $this->_FlexDBShe[$i] = '\((?<=[a-zA-Z0-9_].)\s*[a-zA-Z0-9_]++=\s*\)';
            if ($this->_FlexDBShe[$i] == '([^\?\s])\({0,1}\.[\+\*]\){0,1}\2[a-z]*e')
                $this->_FlexDBShe[$i] = '(?J)\.[+*](?<=(?<d>[^\?\s])\(..|(?<d>[^\?\s])..)\)?\g{d}[a-z]*e';
            if ($this->_FlexDBShe[$i] == '$[a-zA-Z0-9_]\{\d+\}\s*\.$[a-zA-Z0-9_]\{\d+\}\s*\.$[a-zA-Z0-9_]\{\d+\}\s*\.')
                $this->_FlexDBShe[$i] = '\$[a-zA-Z0-9_]\{\d+\}\s*\.\$[a-zA-Z0-9_]\{\d+\}\s*\.\$[a-zA-Z0-9_]\{\d+\}\s*\.';

            $this->_FlexDBShe[$i] = str_replace('http://.+?/.+?\.php\?a', 'http://[^?\s]++(?<=\.php)\?a', $this->_FlexDBShe[$i]);
            $this->_FlexDBShe[$i] = preg_replace('~\[a-zA-Z0-9_\]\+\K\?~', '+', $this->_FlexDBShe[$i]);
            $this->_FlexDBShe[$i] = preg_replace('~^\\\\[d]\+&@~', '&@(?<=\d..)', $this->_FlexDBShe[$i]);
            $this->_FlexDBShe[$i] = str_replace('\s*[\'"]{0,1}.+?[\'"]{0,1}\s*', '.+?', $this->_FlexDBShe[$i]);
            $this->_FlexDBShe[$i] = str_replace('[\'"]{0,1}.+?[\'"]{0,1}', '.+?', $this->_FlexDBShe[$i]);

            $this->_FlexDBShe[$i] = preg_replace('~^\[\'"\]\{0,1\}\.?|^@\*|^\\\\s\*~', '', $this->_FlexDBShe[$i]);
        }

        self::optSig($this->_FlexDBShe,     $debug, 'AibolitHelpers::myCheckSum');
        self::optSig($this->_JSVirSig,      $debug, 'AibolitHelpers::myCheckSum');
        self::optSig($this->_AdwareSig,     $debug, 'AibolitHelpers::myCheckSum');
        self::optSig($this->_PhishingSig,   $debug, 'AibolitHelpers::myCheckSum');
        self::optSig($this->_SusDB,         $debug, 'AibolitHelpers::myCheckSum');
        //optSig($g_SusDBPrio);
        //optSig($g_ExceptFlex);

        // convert exception rules
        $cnt = count($this->_ExceptFlex);
        for ($i = 0; $i < $cnt; $i++) {
            $this->_ExceptFlex[$i] = trim(Normalization::normalize($this->_ExceptFlex[$i]));
            if ($this->_ExceptFlex[$i] == '')
                unset($this->_ExceptFlex[$i]);
        }

        $this->_ExceptFlex = array_values($this->_ExceptFlex);
    }

    public static function optSig(&$sigs, $debug = false, $func_id = null)
    {
        $sigs = array_unique($sigs);

        // Add SigId
        foreach ($sigs as $k => &$s) {
            if ($func_id && is_callable($func_id)) {
                $id = $func_id($s);
            } else {
                $id = $k;
            }
            $s .= '(?<X' . $id . '>)';
        }
        unset($s);

        $fix = [
            '([^\?\s])\({0,1}\.[\+\*]\){0,1}\2[a-z]*e' => '(?J)\.[+*](?<=(?<d>[^\?\s])\(..|(?<d>[^\?\s])..)\)?\g{d}[a-z]*e',
            'http://.+?/.+?\.php\?a' => 'http://[^?\s]++(?<=\.php)\?a',
            '\s*[\'"]{0,1}.+?[\'"]{0,1}\s*' => '.+?',
            '[\'"]{0,1}.+?[\'"]{0,1}' => '.+?'
        ];

        $sigs = str_replace(array_keys($fix), array_values($fix), $sigs);

        $fix = [
            '~^\\\\[d]\+&@~' => '&@(?<=\d..)',
            '~^((\[\'"\]|\\\\s|@)(\{0,1\}\.?|[?*]))+~' => ''
        ];

        $sigs = preg_replace(array_keys($fix), array_values($fix), $sigs);

        self::optSigCheck($sigs, $debug);

        $tmp = [];
        foreach ($sigs as $i => $s) {
            if (!preg_match('~^(?>(?!\.[*+]|\\\\\d)(?:\\\\.|\[.+?\]|.))+$~', $s)) {
                unset($sigs[$i]);
                $tmp[] = $s;
            }
        }

        usort($sigs, 'strcasecmp');
        $txt = implode("\n", $sigs);

        for ($i = 24; $i >= 1; ($i > 4) ? $i -= 4 : --$i) {
            $txt = preg_replace_callback('#^((?>(?:\\\\.|\\[.+?\\]|[^(\n]|\((?:\\\\.|[^)(\n])++\))(?:[*?+]\+?|\{\d+(?:,\d*)?\}[+?]?|)){' . $i . ',})[^\n]*+(?:\\n\\1(?![{?*+]).+)+#im', 'LoadSignaturesForScan::optMergePrefixes', $txt);
        }

        $sigs = array_merge(explode("\n", $txt), $tmp);

        self::optSigCheck($sigs, $debug);
    }

    private static function optMergePrefixes($m)
    {
        $limit = 8000;

        $prefix     = $m[1];
        $prefix_len = strlen($prefix);

        $len = $prefix_len;
        $r   = [];

        $suffixes = [];
        foreach (explode("\n", $m[0]) as $line) {

            if (strlen($line) > $limit) {
                $r[] = $line;
                continue;
            }

            $s = substr($line, $prefix_len);
            $len += strlen($s);
            if ($len > $limit) {
                if (count($suffixes) == 1) {
                    $r[] = $prefix . $suffixes[0];
                } else {
                    $r[] = $prefix . '(?:' . implode('|', $suffixes) . ')';
                }
                $suffixes = [];
                $len      = $prefix_len + strlen($s);
            }
            $suffixes[] = $s;
        }

        if (!empty($suffixes)) {
            if (count($suffixes) == 1) {
                $r[] = $prefix . $suffixes[0];
            } else {
                $r[] = $prefix . '(?:' . implode('|', $suffixes) . ')';
            }
        }

        return implode("\n", $r);
    }

    private function optMergePrefixes_Old($m)
    {
        $prefix     = $m[1];
        $prefix_len = strlen($prefix);

        $suffixes = [];
        foreach (explode("\n", $m[0]) as $line) {
            $suffixes[] = substr($line, $prefix_len);
        }

        return $prefix . '(?:' . implode('|', $suffixes) . ')';
    }

    /*
     * Checking errors in pattern
     */
    private static function optSigCheck(&$sigs, $debug)
    {
        $result = true;

        foreach ($sigs as $k => $sig) {
            if (trim($sig) == "") {
                if ($debug) {
                    echo ("************>>>>> EMPTY\n     pattern: " . $sig . "\n");
                }
                unset($sigs[$k]);
                $result = false;
            }

            if (@preg_match('~' . $sig . '~smiS', '') === false) {
                $error = error_get_last();
                if ($debug) {
                    echo ("************>>>>> " . $error['message'] . "\n     pattern: " . $sig . "\n");
                }
                unset($sigs[$k]);
                $result = false;
            }
        }

        return $result;
    }

    public static function getSigId($l_Found)
    {
        foreach ($l_Found as $key => &$v) {
            if (is_string($key) && $v[1] != -1 && strlen($key) == 9) {
                return substr($key, 1);
            }
        }

        return null;
    }

    public function setOwnUrl($url)
    {
        if (isset($this->blackUrls)) {
            foreach ($this->blackUrls->getDb() as $black) {
                if (preg_match('~' . $black . '~msi', $url)) {
                    $this->ownUrl = null;
                    return;
                }
            }
        }
        $this->ownUrl = $url;
    }

    public function getOwnUrl()
    {
        return $this->ownUrl;
    }

    public function getDBLocation()
    {
        return $this->sig_db_location;
    }

    public function getDB()
    {
        return $this->sig_db;
    }

    public function getDBMetaInfo()
    {
        return $this->sig_db_meta_info;
    }

    public function getDBMetaInfoVersion()
    {
        return $this->sig_db_meta_info['version'];
    }

    public function getDBCount()
    {
        return $this->count;
    }

    public function getDBCountWithSuspicious()
    {
        return $this->count_susp;
    }

    public function getResult()
    {
        return $this->result;
    }

    public function getLastError()
    {
        return $this->last_error;
    }
}



class ScanUnit
{
    public static function QCR_ScanContent($checkers, $l_Unwrapped, $l_Content, $signs, $debug = null, $precheck = null, $processResult = null, &$return = null)
    {
        $smart_skipped = false;
        $flag = false;
        foreach ($checkers as $checker => $full) {
            $l_pos = 0;
            $l_SignId = '';
            if (isset($precheck) && is_callable($precheck)) {
                if (!$precheck($checker, $l_Unwrapped) && ($full && !$precheck($checker, $l_Content))) {
                    $smart_skipped = true;
                    continue;
                }
            }
            $flag = ScanCheckers::{$checker}($l_Unwrapped, $l_pos, $l_SignId, $signs, $debug);
            if ($flag && isset($processResult) && is_callable($processResult)) {
                $tag = 'match_o:?,u:1_' . $checker;
                $processResult($checker, $l_Unwrapped, $l_pos, $l_SignId, $return, $tag);
            }

            if (!$flag && $full) {
                $flag = ScanCheckers::{$checker}($l_Content, $l_pos, $l_SignId, $signs, $debug);
                if ($flag && isset($processResult) && is_callable($processResult)) {
                    $tag = 'match_o:1,u:0_' . $checker;
                    $processResult($checker, $l_Content, $l_pos, $l_SignId, $return, $tag);
                }
            }
            if ($flag) {
                return true;
            }
        }
        if (!$flag && $smart_skipped) {
            $return = [RapidScanStorageRecord::RX_SKIPPED_SMART, '', ''];
        }
        return false;
    }

    public static function Rescan($content, $signs, $debug = null, $deobfuscate = false, $processResult = null, &$return = null)
    {
        $checkers['CriticalPHP'] = true;
        $l_Unwrapped = Normalization::strip_whitespace($content);
        $l_UnicodeContent = Encoding::detectUTFEncoding($content);
        if ($l_UnicodeContent !== false) {
            if (Encoding::iconvSupported()) {
                $l_Unwrapped = Encoding::convertToCp1251($l_UnicodeContent, $l_Unwrapped);
            }
        }

        if ($deobfuscate) {
            $l_DeobfObj = new Deobfuscator($l_Unwrapped, $content);
            $l_DeobfType = $l_DeobfObj->getObfuscateType($l_Unwrapped);
        }

        if (isset($l_DeobfType) && $l_DeobfType != '') {
            $l_Unwrapped = $l_DeobfObj->deobfuscate();
        }

        $l_Unwrapped = Normalization::normalize($l_Unwrapped);

        $getRescanRes = function ($checker, $content, $l_Pos, $l_SigId, &$return) use ($signs) {
            if ($signs->needSkipId($l_SigId)) {
                $return = 2;
            } else {
                $return = 1;
            }
        };
        $return = 0;
        self::QCR_ScanContent($checkers, $l_Unwrapped, $content, $signs, null, null, $getRescanRes, $return);
        return $return;
    }
}



class ScanCheckers
{
    const URL_GRAB = '~(?:<(script|iframe|object|embed|img|a)\s*[^<]{0,300}?)?((?:https?:)?\\\\?/\\\\?/(?:www\.)?[-a-zA-Z0-9@:%._\+\~#=]{2,256}\.[a-z]{2,10}\b(?:[-a-zA-Z0-9@:%_\+.\~#?&/=\\\\]*))(.{0,300}?</\1>)?~msi';

    public static function WarningPHP($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null)
    {
        foreach ($signs->_SusDB as $l_Item) {
            if (preg_match('~' . $l_Item . '~smiS', $l_Content, $l_Found, PREG_OFFSET_CAPTURE)) {
                if (!self::CheckException($l_Content, $l_Found, $signs)) {
                    $l_Pos   = $l_Found[0][1];
                    $l_SigId = LoadSignaturesForScan::getSigId($l_Found);
                    return true;
                }
            }
        }
        return false;
    }

    ////////////////////////////////////////////////////////////////////////////
    public static function Adware($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null)
    {
        $l_Res = false;

        foreach ($signs->_AdwareSig as $l_Item) {
            $offset = 0;
            while (preg_match('~' . $l_Item . '~smi', $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset)) {
                if (!self::CheckException($l_Content, $l_Found, $signs)) {
                    $l_Pos = $l_Found[0][1];
                    $l_SigId = 'adware';
                    return true;
                }

                $offset = $l_Found[0][1] + 1;
            }
        }

        return $l_Res;
    }

    ////////////////////////////////////////////////////////////////////////////
    public static function CheckException(&$l_Content, &$l_Found, $signs, $debug = null)
    {
        if (!(isset($signs->_ExceptFlex) && is_array($signs->_ExceptFlex))) {
            return false;
        }
        $l_FoundStrPlus = substr($l_Content, max($l_Found[0][1] - 10, 0), 70);

        foreach ($signs->_ExceptFlex as $l_ExceptItem) {
            if (@preg_match('~' . $l_ExceptItem . '~smi', $l_FoundStrPlus, $l_Detected)) {
                return true;
            }
        }

        return false;
    }

    ////////////////////////////////////////////////////////////////////////////
    public static function Phishing($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null)
    {
        $l_Res = false;

        foreach ($signs->_PhishingSig as $l_Item) {
            $offset = 0;
            while (preg_match('~' . $l_Item . '~smi', $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset)) {
                if (!self::CheckException($l_Content, $l_Found, $signs)) {
                    $l_Pos   = $l_Found[0][1];
                    $l_SigId = LoadSignaturesForScan::getSigId($l_Found);

                    if (is_object($debug) && $debug->getDebugMode() == true) {
                        echo "Phis: $l_Content matched [$l_Item] in $l_Pos\n";
                    }

                    return $l_Pos;
                }
                $offset = $l_Found[0][1] + 1;

            }
        }

        return $l_Res;
    }

    ////////////////////////////////////////////////////////////////////////////
    public static function CriticalJS($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null)
    {
        $l_Res = false;

        foreach ($signs->_JSVirSig as $l_Item) {
            $offset = 0;
            if (is_object($debug) && $debug->getDebugPerformance() == true) {
                $stat_start = AibolitHelpers::currentTime();
            }
            $time = AibolitHelpers::currentTime();
            $res = preg_match('~' . $l_Item . '~smi', $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset);
            if (class_exists('PerformanceStats')) {
                PerformanceStats::addPerformanceItem(PerformanceStats::PCRE_SCAN_STAT, AibolitHelpers::currentTime() - $time);
            }
            while ($res) {
                if (!self::CheckException($l_Content, $l_Found, $signs)) {
                    $l_Pos   = $l_Found[0][1];
                    $l_SigId = LoadSignaturesForScan::getSigId($l_Found);

                    if (is_object($debug) && $debug->getDebugMode() == true) {
                        echo "JS: $l_Content matched [$l_Item] in $l_Pos\n";
                    }

                    $l_Res = true;
                    break;
                }

                $offset = $l_Found[0][1] + 1;
                $time = AibolitHelpers::currentTime();
                $res = preg_match('~' . $l_Item . '~smi', $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset);
                if (class_exists('PerformanceStats')) {
                    PerformanceStats::addPerformanceItem(PerformanceStats::PCRE_SCAN_STAT, AibolitHelpers::currentTime() - $time);
                }
            }

            if (is_object($debug) && $debug->getDebugPerformance() == true) {
                $stat_stop = AibolitHelpers::currentTime();
                $debug->addPerformanceItem($l_Item, $stat_stop - $stat_start);
            }

        }

        return $l_Res;
    }

    public static function CriticalJS_PARA($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null)
    {
        foreach ($signs->X_JSVirSig as $l_Item) {
            if (is_object($debug) && $debug->getDebugPerformance() == true) {
                $stat_start = AibolitHelpers::currentTime();
            }

            if (preg_match('~' . $l_Item . '~smi', $l_Content, $l_Found, PREG_OFFSET_CAPTURE)) {
                if (!self::CheckException($l_Content, $l_Found, $signs)) {
                    $l_Pos   = $l_Found[0][1];
                    //$l_SigId = myCheckSum($l_Item);
                    $l_SigId = LoadSignaturesForScan::getSigId($l_Found);

                    if (is_object($debug) && $debug->getDebugMode() == true) {
                        echo "JS PARA: $l_Content matched [$l_Item] in $l_Pos\n";
                    }
                    return true;
                }
            }

            if (is_object($debug) && $debug->getDebugPerformance() == true) {
                $stat_stop = AibolitHelpers::currentTime();
                $debug->addPerformanceItem($l_Item, $stat_stop - $stat_start);
            }
        }
        return false;
    }

    ////////////////////////////////////////////////////////////////////////////
    public static function CriticalPHPGIF($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null)
    {
        if (strpos($l_Content, 'GIF89') === 0) {
            $l_Pos = 0;
            $l_SigId = 'GIF';
            if (is_object($debug) && $debug->getDebugMode() == true) {
                echo "CRIT 6: $l_Content matched [GIF] in $l_Pos\n";
            }

            return true;
        }
        return false;
    }

    public static function CriticalPHPUploader($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null)
    {
        // detect uploaders / droppers
        $l_Found = null;
        if ((strlen($l_Content) < 2048) && ((($l_Pos = strpos($l_Content, 'multipart/form-data')) > 0) || (($l_Pos = strpos($l_Content, '$_FILE[') > 0)) || (($l_Pos = strpos($l_Content, 'move_uploaded_file')) > 0) || (preg_match('|\bcopy\s*\(|smi', $l_Content, $l_Found, PREG_OFFSET_CAPTURE)))) {
            if ($l_Found != null) {
                $l_Pos = $l_Found[0][1];
                $l_SigId = 'uploader';
            }
            if (is_object($debug) && $debug->getDebugMode() == true) {
                echo "CRIT 7: $l_Content matched [uploader] in $l_Pos\n";
            }

            return true;
        }
    }

    public static function CriticalPHP_3($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null)
    {
        foreach ($signs->X_FlexDBShe as $l_Item) {
            if (is_object($debug) && $debug->getDebugPerformance() == true) {
                $stat_start = AibolitHelpers::currentTime();
            }

            if (preg_match('~' . $l_Item . '~smiS', $l_Content, $l_Found, PREG_OFFSET_CAPTURE)) {
                if (!self::CheckException($l_Content, $l_Found, $signs)) {
                    $l_Pos   = $l_Found[0][1];
                    $l_SigId = LoadSignaturesForScan::getSigId($l_Found);

                    if (is_object($debug) && $debug->getDebugMode() == true) {
                        echo "CRIT 3: $l_Content matched [$l_Item] in $l_Pos\n";
                    }

                    return true;
                }
            }

            if (is_object($debug) && $debug->getDebugPerformance() == true) {
                $stat_stop = AibolitHelpers::currentTime();
                $debug->addPerformanceItem($l_Item, $stat_stop - $stat_start);
            }
        }
        return false;
    }

    public static function CriticalPHP_2($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null)
    {
        foreach ($signs->XX_FlexDBShe as $l_Item) {
            if (is_object($debug) && $debug->getDebugPerformance() == true) {
                $stat_start = AibolitHelpers::currentTime();
            }

            if (preg_match('~' . $l_Item . '~smiS', $l_Content, $l_Found, PREG_OFFSET_CAPTURE)) {
                if (!self::CheckException($l_Content, $l_Found, $signs)) {
                    $l_Pos   = $l_Found[0][1];
                    $l_SigId = LoadSignaturesForScan::getSigId($l_Found);

                    if (is_object($debug) && $debug->getDebugMode() == true) {
                        echo "CRIT 2: $l_Content matched [$l_Item] in $l_Pos\n";
                    }

                    return true;
                }
            }

            if (is_object($debug) && $debug->getDebugPerformance() == true) {
                $stat_stop = AibolitHelpers::currentTime();
                $debug->addPerformanceItem($l_Item, $stat_stop - $stat_start);
            }
        }
        return false;
    }

    public static function CriticalPHP_4($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null)
    {
        $l_Content_lo = strtolower($l_Content);

        foreach ($signs->_DBShe as $l_Item) {
            $l_Pos = strpos($l_Content_lo, $l_Item);
            if ($l_Pos !== false) {
                $l_SigId = AibolitHelpers::myCheckSum($l_Item);

                if (is_object($debug) && $debug->getDebugMode() == true) {
                    echo "CRIT 4: $l_Content matched [$l_Item] in $l_Pos\n";
                }

                return true;
            }
        }
        return false;
    }

    public static function CriticalPHP_5($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null)
    {
        $l_Content_lo = strtolower($l_Content);

        foreach ($signs->X_DBShe as $l_Item) {
            $l_Pos = strpos($l_Content_lo, $l_Item);
            if ($l_Pos !== false) {
                $l_SigId = AibolitHelpers::myCheckSum($l_Item);

                if (is_object($debug) && $debug->getDebugMode() == true) {
                    echo "CRIT 5: $l_Content matched [$l_Item] in $l_Pos\n";
                }

                return true;
            }
        }
        return false;
    }

    public static function CriticalPHP($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null)
    {
        foreach ($signs->_FlexDBShe as $l_Item) {
            $offset = 0;

            if (is_object($debug) && $debug->getDebugPerformance() == true) {
                $stat_start = AibolitHelpers::currentTime();
            }
            $time = AibolitHelpers::currentTime();
            $res = preg_match('~' . $l_Item . '~smiS', $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset);
            if (class_exists('PerformanceStats')) {
                PerformanceStats::addPerformanceItem(PerformanceStats::PCRE_SCAN_STAT, AibolitHelpers::currentTime() - $time);
            }
            while ($res) {
                if (!self::CheckException($l_Content, $l_Found, $signs)) {
                    $l_Pos   = $l_Found[0][1];
                    //$l_SigId = myCheckSum($l_Item);
                    $l_SigId = LoadSignaturesForScan::getSigId($l_Found);

                    if (is_object($debug) && $debug->getDebugMode() == true) {
                        echo "CRIT 1: $l_Content matched [$l_Item] in $l_Pos\n";
                    }

                    return true;
                }

                $offset = $l_Found[0][1] + 1;
                $time = AibolitHelpers::currentTime();
                $res = preg_match('~' . $l_Item . '~smiS', $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset);
                if (class_exists('PerformanceStats')) {
                    PerformanceStats::addPerformanceItem(PerformanceStats::PCRE_SCAN_STAT, AibolitHelpers::currentTime() - $time);
                }
            }
            if (is_object($debug) && $debug->getDebugPerformance() == true) {
                $stat_stop = AibolitHelpers::currentTime();
                $debug->addPerformanceItem($l_Item, $stat_stop - $stat_start);
            }

        }

        return false;
    }

    public static function isOwnUrl($url, $own_domain)
    {
        if ($own_domain === null || $own_domain === '') {
            return false;
        }
        return (bool)preg_match('~^(http(s)?:)?//(www\.)?' . preg_quote($own_domain, '~') . '~msi', $url);
    }

    public static function isUrlInList($url, $list)
    {
        if (isset($list)) {
            foreach ($list as $item) {
                if (preg_match('~' . $item . '~msiS', $url, $id, PREG_OFFSET_CAPTURE)) {
                    return $id;
                }
            }
        }

        return false;
    }

    public static function UrlChecker($l_Content, &$l_Pos, &$l_SigId, $signs, $debug = null)
    {
        $l_Pos      = [];
        $l_SigId    = [];
        $offset     = 0;

        while (preg_match(self::URL_GRAB, $l_Content, $l_Found, PREG_OFFSET_CAPTURE, $offset)) {
            $l_Found[2][0] = str_replace('\/', '/', $l_Found[2][0]);
            if (!self::isOwnUrl($l_Found[2][0], $signs->getOwnUrl())
                && (isset($signs->whiteUrls) && !self::isUrlInList($l_Found[2][0], $signs->whiteUrls->getDb()))
            ) {
                if ($id = self::isUrlInList($l_Found[2][0], $signs->blackUrls->getDb())) {
                    if (isset($l_Found[1][0]) && $l_Found[1][0] !== '' && isset($l_Found[3][0]) && $l_Found[3][0] !== '') {
                        $l_Pos['black'][] = $l_Found[2][1];
                        $l_SigId['black'][] = $signs->blackUrls->getSig($id);
                    }
                } else {
                    $l_Pos['unk'][] = $l_Found[2][1];
                    $l_SigId['unk'][] = $l_Found[2][0];
                }
            }
            $offset = $l_Found[2][1] + strlen($l_Found[2][0]);
        }
        return !empty($l_Pos);
    }
}



class AibolitHelpers
{
    /**
     * Format bytes to human readable
     *
     * @param int $bytes
     *
     * @return string
     */
    public static function bytes2Human($bytes)
    {
        if ($bytes < 1024) {
            return $bytes . ' b';
        } elseif (($kb = $bytes / 1024) < 1024) {
            return number_format($kb, 2) . ' Kb';
        } elseif (($mb = $kb / 1024) < 1024) {
            return number_format($mb, 2) . ' Mb';
        } elseif (($gb = $mb / 1024) < 1024) {
            return number_format($gb, 2) . ' Gb';
        } else {
            return number_format($gb / 1024, 2) . 'Tb';
        }
    }

    /**
     * Seconds to human readable
     * @param int $seconds
     * @return string
     */
    public static function seconds2Human($seconds)
    {
        $r        = '';
        $_seconds = floor($seconds);
        $ms       = $seconds - $_seconds;
        $seconds  = $_seconds;
        if ($hours = floor($seconds / 3600)) {
            $r .= $hours . ' h ';
            $seconds %= 3600;
        }

        if ($minutes = floor($seconds / 60)) {
            $r .= $minutes . ' m ';
            $seconds %= 60;
        }

        if ($minutes < 3) {
            $r .= ' ' . (string)($seconds + ($ms > 0 ? round($ms) : 0)) . ' s';
        }

        return $r;
    }

    /**
     * Get bytes from shorthand byte values (1M, 1G...)
     * @param int|string $val
     * @return int
     */
    public static function getBytes($val)
    {
        $val  = trim($val);
        $last = strtolower($val[strlen($val) - 1]);
        $val  = preg_replace('~\D~', '', $val);
        switch ($last) {
            case 't':
                $val *= 1024;
            case 'g':
                $val *= 1024;
            case 'm':
                $val *= 1024;
            case 'k':
                $val *= 1024;
        }
        return (int)$val;
    }

    /**
     * Convert dangerous chars to html entities
     *
     * @param        $par_Str
     * @param string $addPrefix
     * @param string $noPrefix
     * @param bool   $replace_path
     *
     * @return string
     */
    public static function makeSafeFn($par_Str, $addPrefix = '', $noPrefix = '', $replace_path = false)
    {
        if ($replace_path) {
            $lines = explode("\n", $par_Str);
            array_walk($lines, static function(&$n) use ($addPrefix, $noPrefix) {
                $n = $addPrefix . str_replace($noPrefix, '', $n);
            });

            $par_Str = implode("\n", $lines);
        }

        return htmlspecialchars($par_Str, ENT_SUBSTITUTE | ENT_QUOTES);
    }

    public static function myCheckSum($str)
    {
        return hash('crc32b', $str);
    }

    /**
     * Wrapper for the hrtime() or microtime() functions
     * (depending on the PHP version, one of the two is used)
     *
     * @return float|mixed UNIX timestamp
     */
    public static function currentTime()
    {
        return function_exists('hrtime') ? hrtime(true) / 1e9 : microtime(true);
    }

}

